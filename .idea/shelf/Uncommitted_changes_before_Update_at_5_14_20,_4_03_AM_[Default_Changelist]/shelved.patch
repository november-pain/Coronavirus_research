Index: docs/task_1_1
===================================================================
--- docs/task_1_1	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ docs/task_1_1	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
@@ -1,3 +0,0 @@
-Моя робота буде включати набір модулів які будуть збирати дані і аналізувати їх для отримання статистики яку можна буде
-використовувати для боротьби з поширенням вірусної інфекції COVID-19, шляхом створення нових запобіжних заходів.
-Виявлення факторів, які впливають на швидкість поширення вірусу - це одна з основних методик стримування пандемії.
Index: docs/task_1_6
===================================================================
--- docs/task_1_6	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ docs/task_1_6	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
@@ -1,18 +0,0 @@
-Для збору даних з мережі інтернет я буду використовувати Kaggle API (https://github.com/Kaggle/kaggle-api).
-Сайт https://www.kaggle.com це сервіс на якому люди розміщують датасети у вільний доступ, для того щоб програмісти
-по всьому світу могли аналізувати дані і розміщувати свої результати в інтернеті. Зараз проводяться багато різних
-змагань та конкурсів, які спрямовані на заохочення людей брати участь у дослідженні коронавірусу.
-
-Kaggle API дозволяє легко оперувати датасетами. За допомогою команди:
-                    $ kaggle datasets files [-h] [-v] [dataset]
-можна перелічити файли датасету. Самі датасети можна переглядати як за топомогою API, так і за тодомогою сайту. Пошук
-датасетів я здійсюватму на сайті, бо там є можливість одразу глянути на вміст файлів і оцінити якість даних, це важливо,
-особливо зараз, коли даних дуже багато і важко знайти те що потрібно. Завантажити перелічені файли датасету можна за
-допомогою команди:
-            $ kaggle datasets download [-h] [-f FILE_NAME] [-p PATH] [-w] [--unzip] [-o] [-q] [dataset]
-Це лише основні можливості які надає даний API, крім цього є ще багато функцій такі як: створення датасету, виведення
-статусу датасету, створення нової версії датасету і тд.
-
-Нажаль офіційна документація для kaggle API для мови програмування python відсутня. Проте інтернет користувачі зробили
-неофіційну документацію https://technowhisp.com/kaggle-api-python-documentation/ . Функціонал той самий, але є можливість
-написання python модуля з використанням цього АРІ.
Index: docs/task_1_8
===================================================================
--- docs/task_1_8	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ docs/task_1_8	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
@@ -1,11 +0,0 @@
-На даний момент я можу використовувати такі дані для кожної локації і для кожного дня: кількість підтверджених випадків
-зараження, кількість проведених тестів, кількість негативних тестів, кількість смертей та кількість тих хто одужав.
-Також важливими є дані про дату введення карантину в кожній локації.
-За допомогою цих даних вже можна порівнювати як проходить хвороба в різних країнах, і за допомогою порівняння можна
-знайти країни в яких максимально схожі фази хвороби. Таким чином можна прогнозувати стадії епідемії в певних локаціях.
-Наприклад: місто А знаходиться на третьому тижні епідемії, а місто В на - першому тижні, якщо ці міста схожі за багатьма
-чинниками і перший тиждень міста В дуже схожий з першим тижнем міста А, то можна приблизно визначити як буде поводитись
-вірус в місті В наступні 2 тижні.
-Це один з прикладів застосування програми, проте використовуючи й інші дані вдомі про дані локаціїї можна виявляти кореляції
-між ними і проходженням епідемії.
-
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_grid.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_grid.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_grid.py	(date 1589417755515)
@@ -0,0 +1,26 @@
+import mpl_toolkits.axes_grid1.axes_grid as axes_grid_orig
+from .axislines import Axes
+
+
+class CbarAxes(axes_grid_orig.CbarAxesBase, Axes):
+    def __init__(self, *args, orientation, **kwargs):
+        self.orientation = orientation
+        self._default_label_on = False
+        self.locator = None
+        super().__init__(*args, **kwargs)
+
+    def cla(self):
+        super().cla()
+        self._config_axes()
+
+
+class Grid(axes_grid_orig.Grid):
+    _defaultAxesClass = Axes
+
+
+class ImageGrid(axes_grid_orig.ImageGrid):
+    _defaultAxesClass = Axes
+    _defaultCbarAxesClass = CbarAxes
+
+
+AxesGrid = ImageGrid
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/__init__.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/__init__.py	(date 1589417755515)
@@ -0,0 +1,21 @@
+from .axislines import (
+    Axes, AxesZero, AxisArtistHelper, AxisArtistHelperRectlinear,
+    GridHelperBase, GridHelperRectlinear, Subplot, SubplotZero)
+from .axis_artist import AxisArtist, GridlinesCollection
+
+from .grid_helper_curvelinear import GridHelperCurveLinear
+
+from .floating_axes import FloatingAxes, FloatingSubplot
+
+from mpl_toolkits.axes_grid1.parasite_axes import (
+    host_axes_class_factory, parasite_axes_class_factory,
+    parasite_axes_auxtrans_class_factory, subplot_class_factory)
+
+ParasiteAxes = parasite_axes_class_factory(Axes)
+
+ParasiteAxesAuxTrans = \
+    parasite_axes_auxtrans_class_factory(axes_class=ParasiteAxes)
+
+HostAxes = host_axes_class_factory(axes_class=Axes)
+
+SubplotHost = subplot_class_factory(HostAxes)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axis_artist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axis_artist.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axis_artist.py	(date 1589417755515)
@@ -0,0 +1,1277 @@
+"""
+axis_artist.py module provides axis-related artists. They are
+
+* axis line
+* tick lines
+* tick labels
+* axis label
+* grid lines
+
+The main artist classes are `AxisArtist` and `GridlinesCollection`. While
+`GridlinesCollection` is responsible for drawing grid lines, `AxisArtist`
+is responsible for all other artists. `AxisArtist` has attributes that are
+associated with each type of artists:
+
+* line: axis line
+* major_ticks: major tick lines
+* major_ticklabels: major tick labels
+* minor_ticks: minor tick lines
+* minor_ticklabels: minor tick labels
+* label: axis label
+
+Typically, the `AxisArtist` associated with an axes will be accessed with the
+*axis* dictionary of the axes, i.e., the `AxisArtist` for the bottom axis is ::
+
+  ax.axis["bottom"]
+
+where *ax* is an instance of `mpl_toolkits.axislines.Axes`.  Thus,
+``ax.axis["bottom"].line`` is an artist associated with the axis line, and
+``ax.axis["bottom"].major_ticks`` is an artist associated with the major tick
+lines.
+
+You can change the colors, fonts, line widths, etc. of these artists
+by calling suitable set method. For example, to change the color of the major
+ticks of the bottom axis to red, use ::
+
+  ax.axis["bottom"].major_ticks.set_color("r")
+
+However, things like the locations of ticks, and their ticklabels need to be
+changed from the side of the grid_helper.
+
+axis_direction
+--------------
+
+`AxisArtist`, `AxisLabel`, `TickLabels` have an *axis_direction* attribute,
+which adjusts the location, angle, etc.,. The *axis_direction* must be one of
+"left", "right", "bottom", "top", and follows the Matplotlib convention for
+rectangular axis.
+
+For example, for the *bottom* axis (the left and right is relative to the
+direction of the increasing coordinate),
+
+* ticklabels and axislabel are on the right
+* ticklabels and axislabel have text angle of 0
+* ticklabels are baseline, center-aligned
+* axislabel is top, center-aligned
+
+The text angles are actually relative to (90 + angle of the direction to the
+ticklabel), which gives 0 for bottom axis.
+
+=================== ====== ======== ====== ========
+Parameter           left   bottom   right  top
+=================== ====== ======== ====== ========
+ticklabels location left   right    right  left
+axislabel location  left   right    right  left
+ticklabels angle    90     0        -90    180
+axislabel angle     180    0        0      180
+ticklabel va        center baseline center baseline
+axislabel va        center top      center bottom
+ticklabel ha        right  center   right  center
+axislabel ha        right  center   right  center
+=================== ====== ======== ====== ========
+
+Ticks are by default direct opposite side of the ticklabels. To make ticks to
+the same side of the ticklabels, ::
+
+  ax.axis["bottom"].major_ticks.set_ticks_out(True)
+
+The following attributes can be customized (use the ``set_xxx`` methods):
+
+* `Ticks`: ticksize, tick_out
+* `TickLabels`: pad
+* `AxisLabel`: pad
+"""
+
+# FIXME :
+# angles are given in data coordinate - need to convert it to canvas coordinate
+
+
+from operator import methodcaller
+
+import numpy as np
+
+from matplotlib import cbook, rcParams
+import matplotlib.artist as martist
+import matplotlib.text as mtext
+import matplotlib.font_manager as font_manager
+
+from matplotlib.artist import Artist
+from matplotlib.collections import LineCollection
+from matplotlib.lines import Line2D
+from matplotlib.patches import PathPatch
+from matplotlib.path import Path
+from matplotlib.transforms import (
+    Affine2D, Bbox, IdentityTransform, ScaledTranslation, TransformedPath)
+
+from .axisline_style import AxislineStyle
+
+
+@cbook.deprecated("3.2", alternative="matplotlib.patches.PathPatch")
+class BezierPath(Line2D):
+
+    def __init__(self, path, *args, **kwargs):
+        Line2D.__init__(self, [], [], *args, **kwargs)
+        self._path = path
+        self._invalid = False
+
+    def recache(self):
+        self._transformed_path = TransformedPath(
+            self._path, self.get_transform())
+        self._invalid = False
+
+    def set_path(self, path):
+        self._path = path
+        self._invalid = True
+
+    def draw(self, renderer):
+        if self._invalid:
+            self.recache()
+
+        if not self._visible:
+            return
+        renderer.open_group('line2d', gid=self.get_gid())
+
+        gc = renderer.new_gc()
+        self._set_gc_clip(gc)
+
+        gc.set_foreground(self._color)
+        gc.set_antialiased(self._antialiased)
+        gc.set_linewidth(self._linewidth)
+        gc.set_alpha(self._alpha)
+        if self.is_dashed():
+            cap = self._dashcapstyle
+            join = self._dashjoinstyle
+        else:
+            cap = self._solidcapstyle
+            join = self._solidjoinstyle
+        gc.set_joinstyle(join)
+        gc.set_capstyle(cap)
+        gc.set_dashes(self._dashOffset, self._dashSeq)
+
+        if self._lineStyles[self._linestyle] != '_draw_nothing':
+            tpath, affine = (
+                self._transformed_path.get_transformed_path_and_affine())
+            renderer.draw_path(gc, tpath, affine.frozen())
+
+        gc.restore()
+        renderer.close_group('line2d')
+
+
+@cbook.deprecated("3.1")
+class UnimplementedException(Exception):
+    pass
+
+
+class AttributeCopier:
+    @cbook.deprecated("3.2")
+    def __init__(self, ref_artist, klass=Artist):
+        self._klass = klass
+        self._ref_artist = ref_artist
+        super().__init__()
+
+    @cbook.deprecated("3.2")
+    def set_ref_artist(self, artist):
+        self._ref_artist = artist
+
+    def get_ref_artist(self):
+        """
+        Return the underlying artist that actually defines some properties
+        (e.g., color) of this artist.
+        """
+        raise RuntimeError("get_ref_artist must overridden")
+
+    @cbook._delete_parameter("3.2", "default_value")
+    def get_attribute_from_ref_artist(self, attr_name, default_value=None):
+        getter = methodcaller("get_" + attr_name)
+        prop = getter(super())
+        return getter(self.get_ref_artist()) if prop == "auto" else prop
+
+
+class Ticks(AttributeCopier, Line2D):
+    """
+    Ticks are derived from Line2D, and note that ticks themselves
+    are markers. Thus, you should use set_mec, set_mew, etc.
+
+    To change the tick size (length), you need to use
+    set_ticksize. To change the direction of the ticks (ticks are
+    in opposite direction of ticklabels by default), use
+    set_tick_out(False).
+    """
+
+    def __init__(self, ticksize, tick_out=False, *, axis=None, **kwargs):
+        self._ticksize = ticksize
+        self.locs_angles_labels = []
+
+        self.set_tick_out(tick_out)
+
+        self._axis = axis
+        if self._axis is not None:
+            if "color" not in kwargs:
+                kwargs["color"] = "auto"
+            if "mew" not in kwargs and "markeredgewidth" not in kwargs:
+                kwargs["markeredgewidth"] = "auto"
+
+        Line2D.__init__(self, [0.], [0.], **kwargs)
+        self.set_snap(True)
+
+    def get_ref_artist(self):
+        # docstring inherited
+        return self._axis.majorTicks[0].tick1line
+
+    def get_color(self):
+        return self.get_attribute_from_ref_artist("color")
+
+    def get_markeredgecolor(self):
+        return self.get_attribute_from_ref_artist("markeredgecolor")
+
+    def get_markeredgewidth(self):
+        return self.get_attribute_from_ref_artist("markeredgewidth")
+
+    def set_tick_out(self, b):
+        """Set whether ticks are drawn inside or outside the axes."""
+        self._tick_out = b
+
+    def get_tick_out(self):
+        """Return whether ticks are drawn inside or outside the axes."""
+        return self._tick_out
+
+    def set_ticksize(self, ticksize):
+        """Set length of the ticks in points."""
+        self._ticksize = ticksize
+
+    def get_ticksize(self):
+        """Return length of the ticks in points."""
+        return self._ticksize
+
+    def set_locs_angles(self, locs_angles):
+        self.locs_angles = locs_angles
+
+    _tickvert_path = Path([[0., 0.], [1., 0.]])
+
+    def draw(self, renderer):
+        if not self.get_visible():
+            return
+
+        size = self._ticksize
+        path_trans = self.get_transform()
+
+        gc = renderer.new_gc()
+        gc.set_foreground(self.get_markeredgecolor())
+        gc.set_linewidth(self.get_markeredgewidth())
+        gc.set_alpha(self._alpha)
+
+        offset = renderer.points_to_pixels(size)
+        marker_scale = Affine2D().scale(offset)
+
+        if self.get_tick_out():
+            add_angle = 180
+        else:
+            add_angle = 0
+
+        marker_rotation = Affine2D()
+        marker_transform = marker_scale + marker_rotation
+
+        for loc, angle in self.locs_angles:
+            marker_rotation.clear().rotate_deg(angle + add_angle)
+            locs = path_trans.transform_non_affine(np.array([loc]))
+            if self.axes and not self.axes.viewLim.contains(*locs[0]):
+                continue
+            renderer.draw_markers(gc, self._tickvert_path, marker_transform,
+                                  Path(locs), path_trans.get_affine())
+
+        gc.restore()
+
+
+class LabelBase(mtext.Text):
+    """
+    A base class for AxisLabel and TickLabels. The position and angle
+    of the text are calculated by to offset_ref_angle,
+    text_ref_angle, and offset_radius attributes.
+    """
+
+    def __init__(self, *args, **kwargs):
+        self.locs_angles_labels = []
+        self._ref_angle = 0
+        self._offset_radius = 0.
+
+        super().__init__(*args, **kwargs)
+
+        self.set_rotation_mode("anchor")
+        self._text_follow_ref_angle = True
+
+    def _set_ref_angle(self, a):
+        self._ref_angle = a
+
+    def _get_ref_angle(self):
+        return self._ref_angle
+
+    def _get_text_ref_angle(self):
+        if self._text_follow_ref_angle:
+            return self._get_ref_angle()+90
+        else:
+            return 0  # self.get_ref_angle()
+
+    def _get_offset_ref_angle(self):
+        return self._get_ref_angle()
+
+    def _set_offset_radius(self, offset_radius):
+        self._offset_radius = offset_radius
+
+    def _get_offset_radius(self):
+        return self._offset_radius
+
+    _get_opposite_direction = {"left": "right",
+                               "right": "left",
+                               "top": "bottom",
+                               "bottom": "top"}.__getitem__
+
+    def draw(self, renderer):
+        if not self.get_visible():
+            return
+
+        # save original and adjust some properties
+        tr = self.get_transform()
+        angle_orig = self.get_rotation()
+
+        offset_tr = Affine2D()
+        self.set_transform(tr+offset_tr)
+
+        text_ref_angle = self._get_text_ref_angle()
+        offset_ref_angle = self._get_offset_ref_angle()
+
+        theta = (offset_ref_angle)/180.*np.pi
+        dd = self._get_offset_radius()
+        dx, dy = dd * np.cos(theta), dd * np.sin(theta)
+        offset_tr.translate(dx, dy)
+        self.set_rotation(text_ref_angle+angle_orig)
+        super().draw(renderer)
+        offset_tr.clear()
+
+        # restore original properties
+        self.set_transform(tr)
+        self.set_rotation(angle_orig)
+
+    def get_window_extent(self, renderer):
+        # save original and adjust some properties
+        tr = self.get_transform()
+        angle_orig = self.get_rotation()
+
+        offset_tr = Affine2D()
+        self.set_transform(tr+offset_tr)
+
+        text_ref_angle = self._get_text_ref_angle()
+        offset_ref_angle = self._get_offset_ref_angle()
+
+        theta = (offset_ref_angle)/180.*np.pi
+        dd = self._get_offset_radius()
+        dx, dy = dd * np.cos(theta), dd * np.sin(theta)
+        offset_tr.translate(dx, dy)
+        self.set_rotation(text_ref_angle+angle_orig)
+
+        bbox = super().get_window_extent(renderer).frozen()
+
+        offset_tr.clear()
+
+        # restore original properties
+        self.set_transform(tr)
+        self.set_rotation(angle_orig)
+
+        return bbox
+
+
+class AxisLabel(AttributeCopier, LabelBase):
+    """
+    Axis Label. Derived from Text. The position of the text is updated
+    in the fly, so changing text position has no effect. Otherwise, the
+    properties can be changed as a normal Text.
+
+    To change the pad between ticklabels and axis label, use set_pad.
+    """
+
+    def __init__(self, *args, axis_direction="bottom", axis=None, **kwargs):
+        self._axis = axis
+        LabelBase.__init__(self, *args, **kwargs)
+        self.set_axis_direction(axis_direction)
+        self._pad = 5
+        self._extra_pad = 0
+
+    def set_pad(self, pad):
+        """
+        Set the internal pad in points.
+
+        The actual pad will be the sum of the internal pad and the
+        external pad (the latter is set automatically by the AxisArtist).
+        """
+        self._pad = pad
+
+    def get_pad(self):
+        """
+        Return the internal pad in points.
+
+        See `.set_pad` for more details.
+        """
+        return self._pad
+
+    def _set_external_pad(self, p):
+        """Set external pad in pixels."""
+        self._extra_pad = p
+
+    def _get_external_pad(self):
+        """Return external pad in pixels."""
+        return self._extra_pad
+
+    def get_ref_artist(self):
+        # docstring inherited
+        return self._axis.get_label()
+
+    def get_text(self):
+        t = super().get_text()
+        if t == "__from_axes__":
+            return self._axis.get_label().get_text()
+        return self._text
+
+    _default_alignments = dict(left=("bottom", "center"),
+                               right=("top", "center"),
+                               bottom=("top", "center"),
+                               top=("bottom", "center"))
+
+    def set_default_alignment(self, d):
+        va, ha = cbook._check_getitem(self._default_alignments, d=d)
+        self.set_va(va)
+        self.set_ha(ha)
+
+    _default_angles = dict(left=180,
+                           right=0,
+                           bottom=0,
+                           top=180)
+
+    def set_default_angle(self, d):
+        self.set_rotation(cbook._check_getitem(self._default_angles, d=d))
+
+    def set_axis_direction(self, d):
+        """
+        Adjust the text angle and text alignment of axis label
+        according to the matplotlib convention.
+
+        =====================    ========== ========= ========== ==========
+        property                 left       bottom    right      top
+        =====================    ========== ========= ========== ==========
+        axislabel angle          180        0         0          180
+        axislabel va             center     top       center     bottom
+        axislabel ha             right      center    right      center
+        =====================    ========== ========= ========== ==========
+
+        Note that the text angles are actually relative to (90 + angle
+        of the direction to the ticklabel), which gives 0 for bottom
+        axis.
+        """
+        self.set_default_alignment(d)
+        self.set_default_angle(d)
+
+    def get_color(self):
+        return self.get_attribute_from_ref_artist("color")
+
+    def draw(self, renderer):
+        if not self.get_visible():
+            return
+
+        pad = renderer.points_to_pixels(self.get_pad())
+        r = self._get_external_pad() + pad
+        self._set_offset_radius(r)
+
+        super().draw(renderer)
+
+    def get_window_extent(self, renderer):
+        if not self.get_visible():
+            return
+
+        pad = renderer.points_to_pixels(self.get_pad())
+        r = self._get_external_pad() + pad
+        self._set_offset_radius(r)
+
+        bb = super().get_window_extent(renderer)
+
+        return bb
+
+
+class TickLabels(AxisLabel):  # mtext.Text
+    """
+    Tick Labels. While derived from Text, this single artist draws all
+    ticklabels. As in AxisLabel, the position of the text is updated
+    in the fly, so changing text position has no effect. Otherwise,
+    the properties can be changed as a normal Text. Unlike the
+    ticklabels of the mainline matplotlib, properties of single
+    ticklabel alone cannot modified.
+
+    To change the pad between ticks and ticklabels, use set_pad.
+    """
+
+    def __init__(self, *, axis_direction="bottom", **kwargs):
+        AxisLabel.__init__(self, **kwargs)
+        self.set_axis_direction(axis_direction)
+        self._axislabel_pad = 0
+
+    def get_ref_artist(self):
+        # docstring inherited
+        return self._axis.get_ticklabels()[0]
+
+    def set_axis_direction(self, label_direction):
+        """
+        Adjust the text angle and text alignment of ticklabels
+        according to the matplotlib convention.
+
+        The *label_direction* must be one of [left, right, bottom, top].
+
+        =====================    ========== ========= ========== ==========
+        property                 left       bottom    right      top
+        =====================    ========== ========= ========== ==========
+        ticklabels angle         90         0         -90        180
+        ticklabel va             center     baseline  center     baseline
+        ticklabel ha             right      center    right      center
+        =====================    ========== ========= ========== ==========
+
+        Note that the text angles are actually relative to (90 + angle
+        of the direction to the ticklabel), which gives 0 for bottom
+        axis.
+        """
+        self.set_default_alignment(label_direction)
+        self.set_default_angle(label_direction)
+        self._axis_direction = label_direction
+
+    def invert_axis_direction(self):
+        label_direction = self._get_opposite_direction(self._axis_direction)
+        self.set_axis_direction(label_direction)
+
+    def _get_ticklabels_offsets(self, renderer, label_direction):
+        """
+        Calculate the ticklabel offsets from the tick and their total heights.
+
+        The offset only takes account the offset due to the vertical alignment
+        of the ticklabels: if axis direction is bottom and va is 'top', it will
+        return 0; if va is 'baseline', it will return (height-descent).
+        """
+        whd_list = self.get_texts_widths_heights_descents(renderer)
+
+        if not whd_list:
+            return 0, 0
+
+        r = 0
+        va, ha = self.get_va(), self.get_ha()
+
+        if label_direction == "left":
+            pad = max(w for w, h, d in whd_list)
+            if ha == "left":
+                r = pad
+            elif ha == "center":
+                r = .5 * pad
+        elif label_direction == "right":
+            pad = max(w for w, h, d in whd_list)
+            if ha == "right":
+                r = pad
+            elif ha == "center":
+                r = .5 * pad
+        elif label_direction == "bottom":
+            pad = max(h for w, h, d in whd_list)
+            if va == "bottom":
+                r = pad
+            elif va == "center":
+                r = .5 * pad
+            elif va == "baseline":
+                max_ascent = max(h - d for w, h, d in whd_list)
+                max_descent = max(d for w, h, d in whd_list)
+                r = max_ascent
+                pad = max_ascent + max_descent
+        elif label_direction == "top":
+            pad = max(h for w, h, d in whd_list)
+            if va == "top":
+                r = pad
+            elif va == "center":
+                r = .5 * pad
+            elif va == "baseline":
+                max_ascent = max(h - d for w, h, d in whd_list)
+                max_descent = max(d for w, h, d in whd_list)
+                r = max_descent
+                pad = max_ascent + max_descent
+
+        # r : offset
+        # pad : total height of the ticklabels. This will be used to
+        # calculate the pad for the axislabel.
+        return r, pad
+
+    _default_alignments = dict(left=("center", "right"),
+                               right=("center", "left"),
+                               bottom=("baseline", "center"),
+                               top=("baseline", "center"))
+
+    _default_angles = dict(left=90,
+                           right=-90,
+                           bottom=0,
+                           top=180)
+
+    def draw(self, renderer):
+        if not self.get_visible():
+            self._axislabel_pad = self._get_external_pad()
+            return
+
+        r, total_width = self._get_ticklabels_offsets(renderer,
+                                                      self._axis_direction)
+
+        pad = (self._get_external_pad()
+               + renderer.points_to_pixels(self.get_pad()))
+        self._set_offset_radius(r+pad)
+
+        for (x, y), a, l in self._locs_angles_labels:
+            if not l.strip():
+                continue
+            self._set_ref_angle(a)  # + add_angle
+            self.set_x(x)
+            self.set_y(y)
+            self.set_text(l)
+            LabelBase.draw(self, renderer)
+
+        # the value saved will be used to draw axislabel.
+        self._axislabel_pad = total_width + pad
+
+    def set_locs_angles_labels(self, locs_angles_labels):
+        self._locs_angles_labels = locs_angles_labels
+
+    def get_window_extents(self, renderer):
+
+        if not self.get_visible():
+            self._axislabel_pad = self._get_external_pad()
+            return []
+
+        bboxes = []
+
+        r, total_width = self._get_ticklabels_offsets(renderer,
+                                                      self._axis_direction)
+
+        pad = self._get_external_pad() + \
+            renderer.points_to_pixels(self.get_pad())
+        self._set_offset_radius(r+pad)
+
+        for (x, y), a, l in self._locs_angles_labels:
+            self._set_ref_angle(a)  # + add_angle
+            self.set_x(x)
+            self.set_y(y)
+            self.set_text(l)
+            bb = LabelBase.get_window_extent(self, renderer)
+            bboxes.append(bb)
+
+        # the value saved will be used to draw axislabel.
+        self._axislabel_pad = total_width + pad
+
+        return bboxes
+
+    def get_texts_widths_heights_descents(self, renderer):
+        """
+        Return a list of ``(width, height, descent)`` tuples for ticklabels.
+
+        Empty labels are left out.
+        """
+        whd_list = []
+        for _loc, _angle, label in self._locs_angles_labels:
+            if not label.strip():
+                continue
+            clean_line, ismath = self._preprocess_math(label)
+            whd = renderer.get_text_width_height_descent(
+                clean_line, self._fontproperties, ismath=ismath)
+            whd_list.append(whd)
+        return whd_list
+
+
+class GridlinesCollection(LineCollection):
+    def __init__(self, *args, which="major", axis="both", **kwargs):
+        """
+        Parameters
+        ----------
+        which : {"major", "minor"}
+        axis : {"both", "x", "y"}
+        """
+        self._which = which
+        self._axis = axis
+        super().__init__(*args, **kwargs)
+        self.set_grid_helper(None)
+
+    def set_which(self, which):
+        self._which = which
+
+    def set_axis(self, axis):
+        self._axis = axis
+
+    def set_grid_helper(self, grid_helper):
+        self._grid_helper = grid_helper
+
+    def draw(self, renderer):
+        if self._grid_helper is not None:
+            self._grid_helper.update_lim(self.axes)
+            gl = self._grid_helper.get_gridlines(self._which, self._axis)
+            if gl:
+                self.set_segments([np.transpose(l) for l in gl])
+            else:
+                self.set_segments([])
+        super().draw(renderer)
+
+
+class AxisArtist(martist.Artist):
+    """
+    An artist which draws axis (a line along which the n-th axes coord
+    is constant) line, ticks, ticklabels, and axis label.
+    """
+
+    ZORDER = 2.5
+
+    @property
+    def LABELPAD(self):
+        return self.label.get_pad()
+
+    @LABELPAD.setter
+    def LABELPAD(self, v):
+        return self.label.set_pad(v)
+
+    def __init__(self, axes,
+                 helper,
+                 offset=None,
+                 axis_direction="bottom",
+                 **kwargs):
+        """
+        Parameters
+        ----------
+        axes : `mpl_toolkits.axisartist.axislines.Axes`
+        helper : `~mpl_toolkits.axisartist.axislines.AxisArtistHelper`
+        """
+        #axes is also used to follow the axis attribute (tick color, etc).
+
+        super().__init__(**kwargs)
+
+        self.axes = axes
+
+        self._axis_artist_helper = helper
+
+        if offset is None:
+            offset = (0, 0)
+        self.dpi_transform = Affine2D()
+        self.offset_transform = ScaledTranslation(offset[0], offset[1],
+                                                  self.dpi_transform)
+
+        if axis_direction in ["left", "right"]:
+            axis_name = "ytick"
+            self.axis = axes.yaxis
+        else:
+            axis_name = "xtick"
+            self.axis = axes.xaxis
+
+        self._axisline_style = None
+        self._axis_direction = axis_direction
+
+        self._init_line()
+        self._init_ticks(axis_name, **kwargs)
+        self._init_offsetText(axis_direction)
+        self._init_label()
+
+        self.set_zorder(self.ZORDER)
+
+        self._rotate_label_along_line = False
+
+        # axis direction
+        self._tick_add_angle = 180.
+        self._ticklabel_add_angle = 0.
+        self._axislabel_add_angle = 0.
+        self.set_axis_direction(axis_direction)
+
+    # axis direction
+
+    def set_axis_direction(self, axis_direction):
+        """
+        Adjust the direction, text angle, text alignment of
+        ticklabels, labels following the matplotlib convention for
+        the rectangle axes.
+
+        The *axis_direction* must be one of [left, right, bottom, top].
+
+        =====================    ========== ========= ========== ==========
+        property                 left       bottom    right      top
+        =====================    ========== ========= ========== ==========
+        ticklabels location      "-"        "+"       "+"        "-"
+        axislabel location       "-"        "+"       "+"        "-"
+        ticklabels angle         90         0         -90        180
+        ticklabel va             center     baseline  center     baseline
+        ticklabel ha             right      center    right      center
+        axislabel angle          180        0         0          180
+        axislabel va             center     top       center     bottom
+        axislabel ha             right      center    right      center
+        =====================    ========== ========= ========== ==========
+
+        Note that the direction "+" and "-" are relative to the direction of
+        the increasing coordinate. Also, the text angles are actually
+        relative to (90 + angle of the direction to the ticklabel),
+        which gives 0 for bottom axis.
+        """
+        self.major_ticklabels.set_axis_direction(axis_direction)
+        self.label.set_axis_direction(axis_direction)
+        self._axis_direction = axis_direction
+        if axis_direction in ["left", "top"]:
+            self.set_ticklabel_direction("-")
+            self.set_axislabel_direction("-")
+        else:
+            self.set_ticklabel_direction("+")
+            self.set_axislabel_direction("+")
+
+    def set_ticklabel_direction(self, tick_direction):
+        r"""
+        Adjust the direction of the ticklabel.
+
+        Note that the *label_direction*\s '+' and '-' are relative to the
+        direction of the increasing coordinate.
+
+        Parameters
+        ----------
+        tick_direction : {"+", "-"}
+        """
+        self._ticklabel_add_angle = cbook._check_getitem(
+            {"+": 0, "-": 180}, tick_direction=tick_direction)
+
+    def invert_ticklabel_direction(self):
+        self._ticklabel_add_angle = (self._ticklabel_add_angle + 180) % 360
+        self.major_ticklabels.invert_axis_direction()
+        self.minor_ticklabels.invert_axis_direction()
+
+    def set_axislabel_direction(self, label_direction):
+        r"""
+        Adjust the direction of the axislabel.
+
+        Note that the *label_direction*\s '+' and '-' are relative to the
+        direction of the increasing coordinate.
+
+        Parameters
+        ----------
+        tick_direction : {"+", "-"}
+        """
+        self._axislabel_add_angle = cbook._check_getitem(
+            {"+": 0, "-": 180}, label_direction=label_direction)
+
+    def get_transform(self):
+        return self.axes.transAxes + self.offset_transform
+
+    def get_helper(self):
+        """
+        Return axis artist helper instance.
+        """
+        return self._axis_artist_helper
+
+    def set_axisline_style(self, axisline_style=None, **kwargs):
+        """
+        Set the axisline style.
+
+        The new style is completely defined by the passed attributes. Existing
+        style attributes are forgotten.
+
+        Parameters
+        ----------
+        axisline_style : str or None
+            The line style, e.g. '->', optionally followed by a comma-separated
+            list of attributes. Alternatively, the attributes can be provided
+            as keywords.
+
+            If *None* this returns a string containing the available styles.
+
+        Examples
+        --------
+        The following two commands are equal:
+        >>> set_axisline_style("->,size=1.5")
+        >>> set_axisline_style("->", size=1.5)
+        """
+        if axisline_style is None:
+            return AxislineStyle.pprint_styles()
+
+        if isinstance(axisline_style, AxislineStyle._Base):
+            self._axisline_style = axisline_style
+        else:
+            self._axisline_style = AxislineStyle(axisline_style, **kwargs)
+
+        self._init_line()
+
+    def get_axisline_style(self):
+        """Return the current axisline style."""
+        return self._axisline_style
+
+    def _init_line(self):
+        """
+        Initialize the *line* artist that is responsible to draw the axis line.
+        """
+        tran = (self._axis_artist_helper.get_line_transform(self.axes)
+                + self.offset_transform)
+
+        axisline_style = self.get_axisline_style()
+        if axisline_style is None:
+            self.line = PathPatch(
+                self._axis_artist_helper.get_line(self.axes),
+                color=rcParams['axes.edgecolor'],
+                fill=False,
+                linewidth=rcParams['axes.linewidth'],
+                capstyle=rcParams['lines.solid_capstyle'],
+                joinstyle=rcParams['lines.solid_joinstyle'],
+                transform=tran)
+        else:
+            self.line = axisline_style(self, transform=tran)
+
+    def _draw_line(self, renderer):
+        self.line.set_path(self._axis_artist_helper.get_line(self.axes))
+        if self.get_axisline_style() is not None:
+            self.line.set_line_mutation_scale(self.major_ticklabels.get_size())
+        self.line.draw(renderer)
+
+    def _init_ticks(self, axis_name, **kwargs):
+
+        trans = (self._axis_artist_helper.get_tick_transform(self.axes)
+                 + self.offset_transform)
+
+        major_tick_size = kwargs.get("major_tick_size",
+                                     rcParams[f'{axis_name}.major.size'])
+        major_tick_pad = kwargs.get("major_tick_pad",
+                                    rcParams[f'{axis_name}.major.pad'])
+        minor_tick_size = kwargs.get("minor_tick_size",
+                                     rcParams[f'{axis_name}.minor.size'])
+        minor_tick_pad = kwargs.get("minor_tick_pad",
+                                    rcParams[f'{axis_name}.minor.pad'])
+
+        self.major_ticks = Ticks(major_tick_size,
+                                 axis=self.axis,
+                                 transform=trans)
+        self.minor_ticks = Ticks(minor_tick_size,
+                                 axis=self.axis,
+                                 transform=trans)
+
+        if axis_name == "xaxis":
+            size = rcParams['xtick.labelsize']
+        else:
+            size = rcParams['ytick.labelsize']
+
+        fontprops = font_manager.FontProperties(size=size)
+
+        self.major_ticklabels = TickLabels(size=size, axis=self.axis,
+                                           axis_direction=self._axis_direction)
+        self.minor_ticklabels = TickLabels(size=size, axis=self.axis,
+                                           axis_direction=self._axis_direction)
+
+        self.major_ticklabels.set(figure=self.axes.figure,
+                                  transform=trans,
+                                  fontproperties=fontprops)
+        self.major_ticklabels.set_pad(major_tick_pad)
+
+        self.minor_ticklabels.set(figure=self.axes.figure,
+                                  transform=trans,
+                                  fontproperties=fontprops)
+        self.minor_ticklabels.set_pad(minor_tick_pad)
+
+    def _get_tick_info(self, tick_iter):
+        """
+        Returns a pair of:
+
+        - list of locs and angles for ticks
+        - list of locs, angles and labels for ticklabels.
+        """
+        ticks_loc_angle = []
+        ticklabels_loc_angle_label = []
+
+        ticklabel_add_angle = self._ticklabel_add_angle
+
+        for loc, angle_normal, angle_tangent, label in tick_iter:
+            angle_label = angle_tangent - 90 + ticklabel_add_angle
+            angle_tick = (angle_normal
+                          if 90 <= (angle_label - angle_normal) % 360 <= 270
+                          else angle_normal + 180)
+            ticks_loc_angle.append([loc, angle_tick])
+            ticklabels_loc_angle_label.append([loc, angle_label, label])
+
+        return ticks_loc_angle, ticklabels_loc_angle_label
+
+    def _update_ticks(self, renderer):
+        # set extra pad for major and minor ticklabels: use ticksize of
+        # majorticks even for minor ticks. not clear what is best.
+
+        dpi_cor = renderer.points_to_pixels(1.)
+        if self.major_ticks.get_visible() and self.major_ticks.get_tick_out():
+            self.major_ticklabels._set_external_pad(
+                self.major_ticks._ticksize * dpi_cor)
+            self.minor_ticklabels._set_external_pad(
+                self.major_ticks._ticksize * dpi_cor)
+        else:
+            self.major_ticklabels._set_external_pad(0)
+            self.minor_ticklabels._set_external_pad(0)
+
+        majortick_iter, minortick_iter = \
+            self._axis_artist_helper.get_tick_iterators(self.axes)
+
+        tick_loc_angle, ticklabel_loc_angle_label = \
+            self._get_tick_info(majortick_iter)
+
+        self.major_ticks.set_locs_angles(tick_loc_angle)
+        self.major_ticklabels.set_locs_angles_labels(ticklabel_loc_angle_label)
+
+        # minor ticks
+        tick_loc_angle, ticklabel_loc_angle_label = \
+            self._get_tick_info(minortick_iter)
+
+        self.minor_ticks.set_locs_angles(tick_loc_angle)
+        self.minor_ticklabels.set_locs_angles_labels(ticklabel_loc_angle_label)
+
+        return self.major_ticklabels.get_window_extents(renderer)
+
+    def _draw_ticks(self, renderer):
+
+        extents = self._update_ticks(renderer)
+
+        self.major_ticks.draw(renderer)
+        self.major_ticklabels.draw(renderer)
+
+        self.minor_ticks.draw(renderer)
+        self.minor_ticklabels.draw(renderer)
+
+        if (self.major_ticklabels.get_visible()
+                or self.minor_ticklabels.get_visible()):
+            self._draw_offsetText(renderer)
+
+        return extents
+
+    def _draw_ticks2(self, renderer):
+        # set extra pad for major and minor ticklabels: use ticksize of
+        # majorticks even for minor ticks. not clear what is best.
+
+        dpi_cor = renderer.points_to_pixels(1.)
+        if self.major_ticks.get_visible() and self.major_ticks.get_tick_out():
+            self.major_ticklabels._set_external_pad(
+                self.major_ticks._ticksize * dpi_cor)
+            self.minor_ticklabels._set_external_pad(
+                self.major_ticks._ticksize * dpi_cor)
+        else:
+            self.major_ticklabels._set_external_pad(0)
+            self.minor_ticklabels._set_external_pad(0)
+
+        majortick_iter, minortick_iter = \
+            self._axis_artist_helper.get_tick_iterators(self.axes)
+
+        tick_loc_angle, ticklabel_loc_angle_label = \
+            self._get_tick_info(majortick_iter)
+
+        self.major_ticks.set_locs_angles(tick_loc_angle)
+        self.major_ticklabels.set_locs_angles_labels(ticklabel_loc_angle_label)
+
+        self.major_ticks.draw(renderer)
+        self.major_ticklabels.draw(renderer)
+
+        # minor ticks
+        tick_loc_angle, ticklabel_loc_angle_label = \
+            self._get_tick_info(minortick_iter)
+
+        self.minor_ticks.set_locs_angles(tick_loc_angle)
+        self.minor_ticklabels.set_locs_angles_labels(ticklabel_loc_angle_label)
+
+        self.minor_ticks.draw(renderer)
+        self.minor_ticklabels.draw(renderer)
+
+        if (self.major_ticklabels.get_visible()
+                or self.minor_ticklabels.get_visible()):
+            self._draw_offsetText(renderer)
+
+        return self.major_ticklabels.get_window_extents(renderer)
+
+    _offsetText_pos = dict(left=(0, 1, "bottom", "right"),
+                           right=(1, 1, "bottom", "left"),
+                           bottom=(1, 0, "top", "right"),
+                           top=(1, 1, "bottom", "right"))
+
+    def _init_offsetText(self, direction):
+        x, y, va, ha = self._offsetText_pos[direction]
+        self.offsetText = mtext.Annotation(
+            "",
+            xy=(x, y), xycoords="axes fraction",
+            xytext=(0, 0), textcoords="offset points",
+            color=rcParams['xtick.color'],
+            horizontalalignment=ha, verticalalignment=va,
+        )
+        self.offsetText.set_transform(IdentityTransform())
+        self.axes._set_artist_props(self.offsetText)
+
+    def _update_offsetText(self):
+        self.offsetText.set_text(self.axis.major.formatter.get_offset())
+        self.offsetText.set_size(self.major_ticklabels.get_size())
+        offset = (self.major_ticklabels.get_pad()
+                  + self.major_ticklabels.get_size()
+                  + 2)
+        self.offsetText.xyann = (0, offset)
+
+    def _draw_offsetText(self, renderer):
+        self._update_offsetText()
+        self.offsetText.draw(renderer)
+
+    def _init_label(self, **kwargs):
+        labelsize = kwargs.get("labelsize", rcParams['axes.labelsize'])
+        fontprops = font_manager.FontProperties(
+            size=labelsize,
+            weight=rcParams['axes.labelweight'])
+
+        tr = (self._axis_artist_helper.get_axislabel_transform(self.axes)
+              + self.offset_transform)
+
+        self.label = AxisLabel(0, 0, "__from_axes__",
+                               color="auto",
+                               fontproperties=fontprops,
+                               axis=self.axis,
+                               transform=tr,
+                               axis_direction=self._axis_direction,
+                               )
+
+        self.label.set_figure(self.axes.figure)
+
+        labelpad = kwargs.get("labelpad", 5)
+        self.label.set_pad(labelpad)
+
+    def _update_label(self, renderer):
+        if not self.label.get_visible():
+            return
+
+        if self._ticklabel_add_angle != self._axislabel_add_angle:
+            if ((self.major_ticks.get_visible()
+                 and not self.major_ticks.get_tick_out())
+                or (self.minor_ticks.get_visible()
+                    and not self.major_ticks.get_tick_out())):
+                axislabel_pad = self.major_ticks._ticksize
+            else:
+                axislabel_pad = 0
+        else:
+            axislabel_pad = max(self.major_ticklabels._axislabel_pad,
+                                self.minor_ticklabels._axislabel_pad)
+
+        self.label._set_external_pad(axislabel_pad)
+
+        xy, angle_tangent = \
+            self._axis_artist_helper.get_axislabel_pos_angle(self.axes)
+        if xy is None:
+            return
+
+        angle_label = angle_tangent - 90
+
+        x, y = xy
+        self.label._set_ref_angle(angle_label+self._axislabel_add_angle)
+        self.label.set(x=x, y=y)
+
+    def _draw_label(self, renderer):
+        self._update_label(renderer)
+        self.label.draw(renderer)
+
+    def _draw_label2(self, renderer):
+        if not self.label.get_visible():
+            return
+
+        if self._ticklabel_add_angle != self._axislabel_add_angle:
+            if ((self.major_ticks.get_visible()
+                 and not self.major_ticks.get_tick_out())
+                or (self.minor_ticks.get_visible()
+                    and not self.major_ticks.get_tick_out())):
+                axislabel_pad = self.major_ticks._ticksize
+            else:
+                axislabel_pad = 0
+        else:
+            axislabel_pad = max(self.major_ticklabels._axislabel_pad,
+                                self.minor_ticklabels._axislabel_pad)
+
+        self.label._set_external_pad(axislabel_pad)
+
+        xy, angle_tangent = \
+            self._axis_artist_helper.get_axislabel_pos_angle(self.axes)
+        if xy is None:
+            return
+
+        angle_label = angle_tangent - 90
+
+        x, y = xy
+        self.label._set_ref_angle(angle_label+self._axislabel_add_angle)
+        self.label.set(x=x, y=y)
+        self.label.draw(renderer)
+
+    def set_label(self, s):
+        self.label.set_text(s)
+
+    def get_tightbbox(self, renderer):
+        if not self.get_visible():
+            return
+
+        self._axis_artist_helper.update_lim(self.axes)
+
+        dpi_cor = renderer.points_to_pixels(1.)
+        self.dpi_transform.clear().scale(dpi_cor)
+
+        self._update_ticks(renderer)
+        self._update_label(renderer)
+        bb = [
+            *self.major_ticklabels.get_window_extents(renderer),
+            *self.minor_ticklabels.get_window_extents(renderer),
+            self.label.get_window_extent(renderer),
+            self.offsetText.get_window_extent(renderer),
+        ]
+        bb = [b for b in bb if b and (b.width != 0 or b.height != 0)]
+        if bb:
+            _bbox = Bbox.union(bb)
+            return _bbox
+        else:
+            return None
+
+    @martist.allow_rasterization
+    def draw(self, renderer):
+        """Draw the axis lines, tick lines and labels."""
+
+        if not self.get_visible():
+            return
+
+        renderer.open_group(__name__, gid=self.get_gid())
+
+        self._axis_artist_helper.update_lim(self.axes)
+
+        dpi_cor = renderer.points_to_pixels(1.)
+        self.dpi_transform.clear().scale(dpi_cor)
+
+        self._draw_ticks(renderer)
+        self._draw_line(renderer)
+        self._draw_label(renderer)
+
+        renderer.close_group(__name__)
+
+    def toggle(self, all=None, ticks=None, ticklabels=None, label=None):
+        """
+        Toggle visibility of ticks, ticklabels, and (axis) label.
+        To turn all off, ::
+
+          axis.toggle(all=False)
+
+        To turn all off but ticks on ::
+
+          axis.toggle(all=False, ticks=True)
+
+        To turn all on but (axis) label off ::
+
+          axis.toggle(all=True, label=False))
+
+        """
+        if all:
+            _ticks, _ticklabels, _label = True, True, True
+        elif all is not None:
+            _ticks, _ticklabels, _label = False, False, False
+        else:
+            _ticks, _ticklabels, _label = None, None, None
+
+        if ticks is not None:
+            _ticks = ticks
+        if ticklabels is not None:
+            _ticklabels = ticklabels
+        if label is not None:
+            _label = label
+
+        if _ticks is not None:
+            self.major_ticks.set_visible(_ticks)
+            self.minor_ticks.set_visible(_ticks)
+        if _ticklabels is not None:
+            self.major_ticklabels.set_visible(_ticklabels)
+            self.minor_ticklabels.set_visible(_ticklabels)
+        if _label is not None:
+            self.label.set_visible(_label)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_divider.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_divider.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_divider.py	(date 1589417755515)
@@ -0,0 +1,2 @@
+from mpl_toolkits.axes_grid1.axes_divider import (
+    Divider, AxesLocator, SubplotDivider, AxesDivider, make_axes_locatable)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axisline_style.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axisline_style.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axisline_style.py	(date 1589417755515)
@@ -0,0 +1,154 @@
+from matplotlib.patches import _Style, FancyArrowPatch
+from matplotlib.transforms import IdentityTransform
+from matplotlib.path import Path
+import numpy as np
+
+
+class _FancyAxislineStyle:
+    class SimpleArrow(FancyArrowPatch):
+        """
+        The artist class that will be returned for SimpleArrow style.
+        """
+        _ARROW_STYLE = "->"
+
+        def __init__(self, axis_artist, line_path, transform,
+                     line_mutation_scale):
+            self._axis_artist = axis_artist
+            self._line_transform = transform
+            self._line_path = line_path
+            self._line_mutation_scale = line_mutation_scale
+
+            FancyArrowPatch.__init__(self,
+                                     path=self._line_path,
+                                     arrowstyle=self._ARROW_STYLE,
+                                     arrow_transmuter=None,
+                                     patchA=None,
+                                     patchB=None,
+                                     shrinkA=0.,
+                                     shrinkB=0.,
+                                     mutation_scale=line_mutation_scale,
+                                     mutation_aspect=None,
+                                     transform=IdentityTransform(),
+                                     )
+
+        def set_line_mutation_scale(self, scale):
+            self.set_mutation_scale(scale*self._line_mutation_scale)
+
+        def _extend_path(self, path, mutation_size=10):
+            """
+            Extend the path to make a room for drawing arrow.
+            """
+            from matplotlib.bezier import get_cos_sin
+
+            x0, y0 = path.vertices[-2]
+            x1, y1 = path.vertices[-1]
+            cost, sint = get_cos_sin(x0, y0, x1, y1)
+
+            d = mutation_size * 1.
+            x2, y2 = x1 + cost*d, y1+sint*d
+
+            if path.codes is None:
+                _path = Path(np.concatenate([path.vertices, [[x2, y2]]]))
+            else:
+                _path = Path(np.concatenate([path.vertices, [[x2, y2]]]),
+                             np.concatenate([path.codes, [Path.LINETO]]))
+
+            return _path
+
+        def set_path(self, path):
+            self._line_path = path
+
+        def draw(self, renderer):
+            """
+            Draw the axis line.
+             1) transform the path to the display coordinate.
+             2) extend the path to make a room for arrow
+             3) update the path of the FancyArrowPatch.
+             4) draw
+            """
+            path_in_disp = self._line_transform.transform_path(self._line_path)
+            mutation_size = self.get_mutation_scale()  # line_mutation_scale()
+            extended_path = self._extend_path(path_in_disp,
+                                              mutation_size=mutation_size)
+            self._path_original = extended_path
+            FancyArrowPatch.draw(self, renderer)
+
+    class FilledArrow(SimpleArrow):
+        """
+        The artist class that will be returned for SimpleArrow style.
+        """
+        _ARROW_STYLE = "-|>"
+
+
+class AxislineStyle(_Style):
+    """
+    A container class which defines style classes for AxisArtists.
+
+    An instance of any axisline style class is an callable object,
+    whose call signature is ::
+
+       __call__(self, axis_artist, path, transform)
+
+    When called, this should return an `Artist` with the following methods::
+
+      def set_path(self, path):
+          # set the path for axisline.
+
+      def set_line_mutation_scale(self, scale):
+          # set the scale
+
+      def draw(self, renderer):
+          # draw
+    """
+
+    _style_list = {}
+
+    class _Base:
+        # The derived classes are required to be able to be initialized
+        # w/o arguments, i.e., all its argument (except self) must have
+        # the default values.
+
+        def __init__(self):
+            """
+            initialization.
+            """
+            super().__init__()
+
+        def __call__(self, axis_artist, transform):
+            """
+            Given the AxisArtist instance, and transform for the path (set_path
+            method), return the Matplotlib artist for drawing the axis line.
+            """
+            return self.new_line(axis_artist, transform)
+
+    class SimpleArrow(_Base):
+        """
+        A simple arrow.
+        """
+
+        ArrowAxisClass = _FancyAxislineStyle.SimpleArrow
+
+        def __init__(self, size=1):
+            """
+            Parameters
+            ----------
+            size : float
+                Size of the arrow as a fraction of the ticklabel size.
+            """
+
+            self.size = size
+            super().__init__()
+
+        def new_line(self, axis_artist, transform):
+
+            linepath = Path([(0, 0), (0, 1)])
+            axisline = self.ArrowAxisClass(axis_artist, linepath, transform,
+                                           line_mutation_scale=self.size)
+            return axisline
+
+    _style_list["->"] = SimpleArrow
+
+    class FilledArrow(SimpleArrow):
+        ArrowAxisClass = _FancyAxislineStyle.FilledArrow
+
+    _style_list["-|>"] = FilledArrow
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/parasite_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/parasite_axes.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/parasite_axes.py	(date 1589417755515)
@@ -0,0 +1,15 @@
+from mpl_toolkits.axes_grid1.parasite_axes import (
+    host_axes_class_factory, parasite_axes_class_factory,
+    parasite_axes_auxtrans_class_factory, subplot_class_factory)
+
+from .axislines import Axes
+
+
+ParasiteAxes = parasite_axes_class_factory(Axes)
+
+ParasiteAxesAuxTrans = \
+    parasite_axes_auxtrans_class_factory(axes_class=ParasiteAxes)
+
+HostAxes = host_axes_class_factory(axes_class=Axes)
+
+SubplotHost = subplot_class_factory(HostAxes)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_finder.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_finder.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_finder.py	(date 1589417755515)
@@ -0,0 +1,294 @@
+import numpy as np
+
+from matplotlib import cbook, ticker as mticker
+from matplotlib.transforms import Bbox, Transform
+from .clip_path import clip_line_to_rect
+
+
+def _deprecate_factor_none(factor):
+    # After the deprecation period, calls to _deprecate_factor_none can just be
+    # removed.
+    if factor is None:
+        cbook.warn_deprecated(
+            "3.2",
+            message="factor=None is deprecated; use/return factor=1 instead")
+        factor = 1
+    return factor
+
+
+# extremes finder
+class ExtremeFinderSimple:
+    def __init__(self, nx, ny):
+        self.nx, self.ny = nx, ny
+
+    def __call__(self, transform_xy, x1, y1, x2, y2):
+        """
+        get extreme values.
+
+        x1, y1, x2, y2 in image coordinates (0-based)
+        nx, ny : number of division in each axis
+        """
+        x_, y_ = np.linspace(x1, x2, self.nx), np.linspace(y1, y2, self.ny)
+        x, y = np.meshgrid(x_, y_)
+        lon, lat = transform_xy(np.ravel(x), np.ravel(y))
+
+        lon_min, lon_max = lon.min(), lon.max()
+        lat_min, lat_max = lat.min(), lat.max()
+
+        return self._add_pad(lon_min, lon_max, lat_min, lat_max)
+
+    def _add_pad(self, lon_min, lon_max, lat_min, lat_max):
+        """
+        A small amount of padding is added because the current clipping
+        algorithms seems to fail when the gridline ends at the bbox boundary.
+        """
+        dlon = (lon_max - lon_min) / self.nx
+        dlat = (lat_max - lat_min) / self.ny
+
+        lon_min, lon_max = lon_min - dlon, lon_max + dlon
+        lat_min, lat_max = lat_min - dlat, lat_max + dlat
+
+        return lon_min, lon_max, lat_min, lat_max
+
+
+class GridFinder:
+    def __init__(self,
+                 transform,
+                 extreme_finder=None,
+                 grid_locator1=None,
+                 grid_locator2=None,
+                 tick_formatter1=None,
+                 tick_formatter2=None):
+        """
+        transform : transform from the image coordinate (which will be
+        the transData of the axes to the world coordinate.
+
+        or transform = (transform_xy, inv_transform_xy)
+
+        locator1, locator2 : grid locator for 1st and 2nd axis.
+        """
+        if extreme_finder is None:
+            extreme_finder = ExtremeFinderSimple(20, 20)
+        if grid_locator1 is None:
+            grid_locator1 = MaxNLocator()
+        if grid_locator2 is None:
+            grid_locator2 = MaxNLocator()
+        if tick_formatter1 is None:
+            tick_formatter1 = FormatterPrettyPrint()
+        if tick_formatter2 is None:
+            tick_formatter2 = FormatterPrettyPrint()
+        self.extreme_finder = extreme_finder
+        self.grid_locator1 = grid_locator1
+        self.grid_locator2 = grid_locator2
+        self.tick_formatter1 = tick_formatter1
+        self.tick_formatter2 = tick_formatter2
+        self.update_transform(transform)
+
+    def get_grid_info(self, x1, y1, x2, y2):
+        """
+        lon_values, lat_values : list of grid values. if integer is given,
+                           rough number of grids in each direction.
+        """
+
+        extremes = self.extreme_finder(self.inv_transform_xy, x1, y1, x2, y2)
+
+        # min & max rage of lat (or lon) for each grid line will be drawn.
+        # i.e., gridline of lon=0 will be drawn from lat_min to lat_max.
+
+        lon_min, lon_max, lat_min, lat_max = extremes
+        lon_levs, lon_n, lon_factor = self.grid_locator1(lon_min, lon_max)
+        lat_levs, lat_n, lat_factor = self.grid_locator2(lat_min, lat_max)
+
+        lon_values = lon_levs[:lon_n] / _deprecate_factor_none(lon_factor)
+        lat_values = lat_levs[:lat_n] / _deprecate_factor_none(lat_factor)
+
+        lon_lines, lat_lines = self._get_raw_grid_lines(lon_values,
+                                                        lat_values,
+                                                        lon_min, lon_max,
+                                                        lat_min, lat_max)
+
+        ddx = (x2-x1)*1.e-10
+        ddy = (y2-y1)*1.e-10
+        bb = Bbox.from_extents(x1-ddx, y1-ddy, x2+ddx, y2+ddy)
+
+        grid_info = {
+            "extremes": extremes,
+            "lon_lines": lon_lines,
+            "lat_lines": lat_lines,
+            "lon": self._clip_grid_lines_and_find_ticks(
+                lon_lines, lon_values, lon_levs, bb),
+            "lat": self._clip_grid_lines_and_find_ticks(
+                lat_lines, lat_values, lat_levs, bb),
+        }
+
+        tck_labels = grid_info["lon"]["tick_labels"] = {}
+        for direction in ["left", "bottom", "right", "top"]:
+            levs = grid_info["lon"]["tick_levels"][direction]
+            tck_labels[direction] = self.tick_formatter1(
+                direction, lon_factor, levs)
+
+        tck_labels = grid_info["lat"]["tick_labels"] = {}
+        for direction in ["left", "bottom", "right", "top"]:
+            levs = grid_info["lat"]["tick_levels"][direction]
+            tck_labels[direction] = self.tick_formatter2(
+                direction, lat_factor, levs)
+
+        return grid_info
+
+    def _get_raw_grid_lines(self,
+                            lon_values, lat_values,
+                            lon_min, lon_max, lat_min, lat_max):
+
+        lons_i = np.linspace(lon_min, lon_max, 100)  # for interpolation
+        lats_i = np.linspace(lat_min, lat_max, 100)
+
+        lon_lines = [self.transform_xy(np.full_like(lats_i, lon), lats_i)
+                     for lon in lon_values]
+        lat_lines = [self.transform_xy(lons_i, np.full_like(lons_i, lat))
+                     for lat in lat_values]
+
+        return lon_lines, lat_lines
+
+    def _clip_grid_lines_and_find_ticks(self, lines, values, levs, bb):
+        gi = {
+            "values": [],
+            "levels": [],
+            "tick_levels": dict(left=[], bottom=[], right=[], top=[]),
+            "tick_locs": dict(left=[], bottom=[], right=[], top=[]),
+            "lines": [],
+        }
+
+        tck_levels = gi["tick_levels"]
+        tck_locs = gi["tick_locs"]
+        for (lx, ly), v, lev in zip(lines, values, levs):
+            xy, tcks = clip_line_to_rect(lx, ly, bb)
+            if not xy:
+                continue
+            gi["levels"].append(v)
+            gi["lines"].append(xy)
+
+            for tck, direction in zip(tcks,
+                                      ["left", "bottom", "right", "top"]):
+                for t in tck:
+                    tck_levels[direction].append(lev)
+                    tck_locs[direction].append(t)
+
+        return gi
+
+    def update_transform(self, aux_trans):
+        if isinstance(aux_trans, Transform):
+            def transform_xy(x, y):
+                ll1 = np.column_stack([x, y])
+                ll2 = aux_trans.transform(ll1)
+                lon, lat = ll2[:, 0], ll2[:, 1]
+                return lon, lat
+
+            def inv_transform_xy(x, y):
+                ll1 = np.column_stack([x, y])
+                ll2 = aux_trans.inverted().transform(ll1)
+                lon, lat = ll2[:, 0], ll2[:, 1]
+                return lon, lat
+
+        else:
+            transform_xy, inv_transform_xy = aux_trans
+
+        self.transform_xy = transform_xy
+        self.inv_transform_xy = inv_transform_xy
+
+    def update(self, **kw):
+        for k in kw:
+            if k in ["extreme_finder",
+                     "grid_locator1",
+                     "grid_locator2",
+                     "tick_formatter1",
+                     "tick_formatter2"]:
+                setattr(self, k, kw[k])
+            else:
+                raise ValueError("unknown update property '%s'" % k)
+
+
+@cbook.deprecated("3.2")
+class GridFinderBase(GridFinder):
+    def __init__(self,
+                 extreme_finder,
+                 grid_locator1=None,
+                 grid_locator2=None,
+                 tick_formatter1=None,
+                 tick_formatter2=None):
+        super().__init__((None, None), extreme_finder,
+                         grid_locator1, grid_locator2,
+                         tick_formatter1, tick_formatter2)
+
+
+class MaxNLocator(mticker.MaxNLocator):
+    def __init__(self, nbins=10, steps=None,
+                 trim=True,
+                 integer=False,
+                 symmetric=False,
+                 prune=None):
+        # trim argument has no effect. It has been left for API compatibility
+        mticker.MaxNLocator.__init__(self, nbins, steps=steps,
+                                     integer=integer,
+                                     symmetric=symmetric, prune=prune)
+        self.create_dummy_axis()
+        self._factor = 1
+
+    def __call__(self, v1, v2):
+        self.set_bounds(v1 * self._factor, v2 * self._factor)
+        locs = mticker.MaxNLocator.__call__(self)
+        return np.array(locs), len(locs), self._factor
+
+    def set_factor(self, f):
+        self._factor = _deprecate_factor_none(f)
+
+
+class FixedLocator:
+    def __init__(self, locs):
+        self._locs = locs
+        self._factor = 1
+
+    def __call__(self, v1, v2):
+        v1, v2 = sorted([v1 * self._factor, v2 * self._factor])
+        locs = np.array([l for l in self._locs if v1 <= l <= v2])
+        return locs, len(locs), self._factor
+
+    def set_factor(self, f):
+        self._factor = _deprecate_factor_none(f)
+
+
+# Tick Formatter
+
+class FormatterPrettyPrint:
+    def __init__(self, useMathText=True):
+        self._fmt = mticker.ScalarFormatter(
+            useMathText=useMathText, useOffset=False)
+        self._fmt.create_dummy_axis()
+        self._ignore_factor = True
+
+    def __call__(self, direction, factor, values):
+        if not self._ignore_factor:
+            values = [v / _deprecate_factor_none(factor) for v in values]
+        return self._fmt.format_ticks(values)
+
+
+class DictFormatter:
+    def __init__(self, format_dict, formatter=None):
+        """
+        format_dict : dictionary for format strings to be used.
+        formatter : fall-back formatter
+        """
+        super().__init__()
+        self._format_dict = format_dict
+        self._fallback_formatter = formatter
+
+    def __call__(self, direction, factor, values):
+        """
+        factor is ignored if value is found in the dictionary
+        """
+        if self._fallback_formatter:
+            fallback_strings = self._fallback_formatter(
+                direction, factor, values)
+        else:
+            fallback_strings = [""] * len(values)
+        return [self._format_dict.get(k, v)
+                for k, v in zip(values, fallback_strings)]
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_helper_curvelinear.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_helper_curvelinear.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/grid_helper_curvelinear.py	(date 1589417755515)
@@ -0,0 +1,401 @@
+"""
+An experimental support for curvilinear grid.
+"""
+from itertools import chain
+
+import numpy as np
+
+from matplotlib.path import Path
+from matplotlib.transforms import Affine2D, IdentityTransform
+from .axislines import AxisArtistHelper, GridHelperBase
+from .axis_artist import AxisArtist
+from .grid_finder import GridFinder, _deprecate_factor_none
+
+
+class FixedAxisArtistHelper(AxisArtistHelper.Fixed):
+    """
+    Helper class for a fixed axis.
+    """
+
+    def __init__(self, grid_helper, side, nth_coord_ticks=None):
+        """
+        nth_coord = along which coordinate value varies.
+         nth_coord = 0 ->  x axis, nth_coord = 1 -> y axis
+        """
+
+        super().__init__(loc=side)
+
+        self.grid_helper = grid_helper
+        if nth_coord_ticks is None:
+            nth_coord_ticks = self.nth_coord
+        self.nth_coord_ticks = nth_coord_ticks
+
+        self.side = side
+        self._limits_inverted = False
+
+    def update_lim(self, axes):
+        self.grid_helper.update_lim(axes)
+
+        if self.nth_coord == 0:
+            xy1, xy2 = axes.get_ylim()
+        else:
+            xy1, xy2 = axes.get_xlim()
+
+        if xy1 > xy2:
+            self._limits_inverted = True
+        else:
+            self._limits_inverted = False
+
+    def change_tick_coord(self, coord_number=None):
+        if coord_number is None:
+            self.nth_coord_ticks = 1 - self.nth_coord_ticks
+        elif coord_number in [0, 1]:
+            self.nth_coord_ticks = coord_number
+        else:
+            raise Exception("wrong coord number")
+
+    def get_tick_transform(self, axes):
+        return axes.transData
+
+    def get_tick_iterators(self, axes):
+        """tick_loc, tick_angle, tick_label"""
+
+        g = self.grid_helper
+
+        if self._limits_inverted:
+            side = {"left": "right", "right": "left",
+                    "top": "bottom", "bottom": "top"}[self.side]
+        else:
+            side = self.side
+
+        ti1 = g.get_tick_iterator(self.nth_coord_ticks, side)
+        ti2 = g.get_tick_iterator(1-self.nth_coord_ticks, side, minor=True)
+
+        return chain(ti1, ti2), iter([])
+
+
+class FloatingAxisArtistHelper(AxisArtistHelper.Floating):
+
+    def __init__(self, grid_helper, nth_coord, value, axis_direction=None):
+        """
+        nth_coord = along which coordinate value varies.
+         nth_coord = 0 ->  x axis, nth_coord = 1 -> y axis
+        """
+
+        super().__init__(nth_coord, value)
+        self.value = value
+        self.grid_helper = grid_helper
+        self._extremes = -np.inf, np.inf
+
+        self._get_line_path = None  # a method that returns a Path.
+        self._line_num_points = 100  # number of points to create a line
+
+    def set_extremes(self, e1, e2):
+        if e1 is None:
+            e1 = -np.inf
+        if e2 is None:
+            e2 = np.inf
+        self._extremes = e1, e2
+
+    def update_lim(self, axes):
+        self.grid_helper.update_lim(axes)
+
+        x1, x2 = axes.get_xlim()
+        y1, y2 = axes.get_ylim()
+        grid_finder = self.grid_helper.grid_finder
+        extremes = grid_finder.extreme_finder(grid_finder.inv_transform_xy,
+                                              x1, y1, x2, y2)
+
+        lon_min, lon_max, lat_min, lat_max = extremes
+        e_min, e_max = self._extremes  # ranges of other coordinates
+        if self.nth_coord == 0:
+            lat_min = max(e_min, lat_min)
+            lat_max = min(e_max, lat_max)
+        elif self.nth_coord == 1:
+            lon_min = max(e_min, lon_min)
+            lon_max = min(e_max, lon_max)
+
+        lon_levs, lon_n, lon_factor = \
+                  grid_finder.grid_locator1(lon_min, lon_max)
+        lat_levs, lat_n, lat_factor = \
+                  grid_finder.grid_locator2(lat_min, lat_max)
+
+        if self.nth_coord == 0:
+            xx0 = np.full(self._line_num_points, self.value, type(self.value))
+            yy0 = np.linspace(lat_min, lat_max, self._line_num_points)
+            xx, yy = grid_finder.transform_xy(xx0, yy0)
+        elif self.nth_coord == 1:
+            xx0 = np.linspace(lon_min, lon_max, self._line_num_points)
+            yy0 = np.full(self._line_num_points, self.value, type(self.value))
+            xx, yy = grid_finder.transform_xy(xx0, yy0)
+
+        self.grid_info = {
+            "extremes": (lon_min, lon_max, lat_min, lat_max),
+            "lon_info": (lon_levs, lon_n, _deprecate_factor_none(lon_factor)),
+            "lat_info": (lat_levs, lat_n, _deprecate_factor_none(lat_factor)),
+            "lon_labels": grid_finder.tick_formatter1(
+                "bottom", _deprecate_factor_none(lon_factor), lon_levs),
+            "lat_labels": grid_finder.tick_formatter2(
+                "bottom", _deprecate_factor_none(lat_factor), lat_levs),
+            "line_xy": (xx, yy),
+        }
+
+    def get_axislabel_transform(self, axes):
+        return Affine2D()  # axes.transData
+
+    def get_axislabel_pos_angle(self, axes):
+
+        extremes = self.grid_info["extremes"]
+
+        if self.nth_coord == 0:
+            xx0 = self.value
+            yy0 = (extremes[2] + extremes[3]) / 2
+            dxx = 0
+            dyy = abs(extremes[2] - extremes[3]) / 1000
+        elif self.nth_coord == 1:
+            xx0 = (extremes[0] + extremes[1]) / 2
+            yy0 = self.value
+            dxx = abs(extremes[0] - extremes[1]) / 1000
+            dyy = 0
+
+        grid_finder = self.grid_helper.grid_finder
+        (xx1,), (yy1,) = grid_finder.transform_xy([xx0], [yy0])
+
+        data_to_axes = axes.transData - axes.transAxes
+        p = data_to_axes.transform([xx1, yy1])
+
+        if 0 <= p[0] <= 1 and 0 <= p[1] <= 1:
+            xx1c, yy1c = axes.transData.transform([xx1, yy1])
+            (xx2,), (yy2,) = grid_finder.transform_xy([xx0 + dxx], [yy0 + dyy])
+            xx2c, yy2c = axes.transData.transform([xx2, yy2])
+            return (xx1c, yy1c), np.rad2deg(np.arctan2(yy2c-yy1c, xx2c-xx1c))
+        else:
+            return None, None
+
+    def get_tick_transform(self, axes):
+        return IdentityTransform()  # axes.transData
+
+    def get_tick_iterators(self, axes):
+        """tick_loc, tick_angle, tick_label, (optionally) tick_label"""
+
+        grid_finder = self.grid_helper.grid_finder
+
+        lat_levs, lat_n, lat_factor = self.grid_info["lat_info"]
+        lat_levs = np.asarray(lat_levs)
+        yy0 = lat_levs / _deprecate_factor_none(lat_factor)
+        dy = 0.01 / _deprecate_factor_none(lat_factor)
+
+        lon_levs, lon_n, lon_factor = self.grid_info["lon_info"]
+        lon_levs = np.asarray(lon_levs)
+        xx0 = lon_levs / _deprecate_factor_none(lon_factor)
+        dx = 0.01 / _deprecate_factor_none(lon_factor)
+
+        if None in self._extremes:
+            e0, e1 = self._extremes
+        else:
+            e0, e1 = sorted(self._extremes)
+        if e0 is None:
+            e0 = -np.inf
+        if e1 is None:
+            e1 = np.inf
+
+        if self.nth_coord == 0:
+            mask = (e0 <= yy0) & (yy0 <= e1)
+            #xx0, yy0 = xx0[mask], yy0[mask]
+            yy0 = yy0[mask]
+        elif self.nth_coord == 1:
+            mask = (e0 <= xx0) & (xx0 <= e1)
+            #xx0, yy0 = xx0[mask], yy0[mask]
+            xx0 = xx0[mask]
+
+        def transform_xy(x, y):
+            x1, y1 = grid_finder.transform_xy(x, y)
+            x2y2 = axes.transData.transform(np.array([x1, y1]).transpose())
+            x2, y2 = x2y2.transpose()
+            return x2, y2
+
+        # find angles
+        if self.nth_coord == 0:
+            xx0 = np.full_like(yy0, self.value)
+
+            xx1, yy1 = transform_xy(xx0, yy0)
+
+            xx00 = xx0.copy()
+            xx00[xx0 + dx > e1] -= dx
+            xx1a, yy1a = transform_xy(xx00, yy0)
+            xx1b, yy1b = transform_xy(xx00+dx, yy0)
+
+            xx2a, yy2a = transform_xy(xx0, yy0)
+            xx2b, yy2b = transform_xy(xx0, yy0+dy)
+
+            labels = self.grid_info["lat_labels"]
+            labels = [l for l, m in zip(labels, mask) if m]
+
+        elif self.nth_coord == 1:
+            yy0 = np.full_like(xx0, self.value)
+
+            xx1, yy1 = transform_xy(xx0, yy0)
+
+            xx1a, yy1a = transform_xy(xx0, yy0)
+            xx1b, yy1b = transform_xy(xx0, yy0+dy)
+
+            xx00 = xx0.copy()
+            xx00[xx0 + dx > e1] -= dx
+            xx2a, yy2a = transform_xy(xx00, yy0)
+            xx2b, yy2b = transform_xy(xx00+dx, yy0)
+
+            labels = self.grid_info["lon_labels"]
+            labels = [l for l, m in zip(labels, mask) if m]
+
+        def f1():
+            dd = np.arctan2(yy1b-yy1a, xx1b-xx1a)  # angle normal
+            dd2 = np.arctan2(yy2b-yy2a, xx2b-xx2a)  # angle tangent
+            mm = (yy1b == yy1a) & (xx1b == xx1a)  # mask where dd not defined
+            dd[mm] = dd2[mm] + np.pi / 2
+
+            tick_to_axes = self.get_tick_transform(axes) - axes.transAxes
+            for x, y, d, d2, lab in zip(xx1, yy1, dd, dd2, labels):
+                c2 = tick_to_axes.transform((x, y))
+                delta = 0.00001
+                if 0-delta <= c2[0] <= 1+delta and 0-delta <= c2[1] <= 1+delta:
+                    d1, d2 = np.rad2deg([d, d2])
+                    yield [x, y], d1, d2, lab
+
+        return f1(), iter([])
+
+    def get_line_transform(self, axes):
+        return axes.transData
+
+    def get_line(self, axes):
+        self.update_lim(axes)
+        x, y = self.grid_info["line_xy"]
+
+        if self._get_line_path is None:
+            return Path(np.column_stack([x, y]))
+        else:
+            return self._get_line_path(axes, x, y)
+
+
+class GridHelperCurveLinear(GridHelperBase):
+
+    def __init__(self, aux_trans,
+                 extreme_finder=None,
+                 grid_locator1=None,
+                 grid_locator2=None,
+                 tick_formatter1=None,
+                 tick_formatter2=None):
+        """
+        aux_trans : a transform from the source (curved) coordinate to
+        target (rectilinear) coordinate. An instance of MPL's Transform
+        (inverse transform should be defined) or a tuple of two callable
+        objects which defines the transform and its inverse. The callables
+        need take two arguments of array of source coordinates and
+        should return two target coordinates.
+
+        e.g., ``x2, y2 = trans(x1, y1)``
+        """
+        super().__init__()
+        self.grid_info = None
+        self._old_values = None
+        self._aux_trans = aux_trans
+        self.grid_finder = GridFinder(aux_trans,
+                                      extreme_finder,
+                                      grid_locator1,
+                                      grid_locator2,
+                                      tick_formatter1,
+                                      tick_formatter2)
+
+    def update_grid_finder(self, aux_trans=None, **kw):
+        if aux_trans is not None:
+            self.grid_finder.update_transform(aux_trans)
+        self.grid_finder.update(**kw)
+        self.invalidate()
+
+    def _update(self, x1, x2, y1, y2):
+        "bbox in 0-based image coordinates"
+        # update wcsgrid
+        if self.valid() and self._old_values == (x1, x2, y1, y2):
+            return
+        self._update_grid(x1, y1, x2, y2)
+        self._old_values = (x1, x2, y1, y2)
+        self._force_update = False
+
+    def new_fixed_axis(self, loc,
+                       nth_coord=None,
+                       axis_direction=None,
+                       offset=None,
+                       axes=None):
+        if axes is None:
+            axes = self.axes
+        if axis_direction is None:
+            axis_direction = loc
+        _helper = FixedAxisArtistHelper(self, loc, nth_coord_ticks=nth_coord)
+        axisline = AxisArtist(axes, _helper, axis_direction=axis_direction)
+        # Why is clip not set on axisline, unlike in new_floating_axis or in
+        # the floating_axig.GridHelperCurveLinear subclass?
+        return axisline
+
+    def new_floating_axis(self, nth_coord,
+                          value,
+                          axes=None,
+                          axis_direction="bottom"
+                          ):
+
+        if axes is None:
+            axes = self.axes
+
+        _helper = FloatingAxisArtistHelper(
+            self, nth_coord, value, axis_direction)
+
+        axisline = AxisArtist(axes, _helper)
+
+        # _helper = FloatingAxisArtistHelper(self, nth_coord,
+        #                                    value,
+        #                                    label_direction=label_direction,
+        #                                    )
+
+        # axisline = AxisArtistFloating(axes, _helper,
+        #                               axis_direction=axis_direction)
+        axisline.line.set_clip_on(True)
+        axisline.line.set_clip_box(axisline.axes.bbox)
+        # axisline.major_ticklabels.set_visible(True)
+        # axisline.minor_ticklabels.set_visible(False)
+
+        # axisline.major_ticklabels.set_rotate_along_line(True)
+        # axisline.set_rotate_label_along_line(True)
+
+        return axisline
+
+    def _update_grid(self, x1, y1, x2, y2):
+        self.grid_info = self.grid_finder.get_grid_info(x1, y1, x2, y2)
+
+    def get_gridlines(self, which="major", axis="both"):
+        grid_lines = []
+        if axis in ["both", "x"]:
+            for gl in self.grid_info["lon"]["lines"]:
+                grid_lines.extend(gl)
+        if axis in ["both", "y"]:
+            for gl in self.grid_info["lat"]["lines"]:
+                grid_lines.extend(gl)
+        return grid_lines
+
+    def get_tick_iterator(self, nth_coord, axis_side, minor=False):
+
+        # axisnr = dict(left=0, bottom=1, right=2, top=3)[axis_side]
+        angle_tangent = dict(left=90, right=90, bottom=0, top=0)[axis_side]
+        # angle = [0, 90, 180, 270][axisnr]
+        lon_or_lat = ["lon", "lat"][nth_coord]
+        if not minor:  # major ticks
+            for (xy, a), l in zip(
+                    self.grid_info[lon_or_lat]["tick_locs"][axis_side],
+                    self.grid_info[lon_or_lat]["tick_labels"][axis_side]):
+                angle_normal = a
+                yield xy, angle_normal, angle_tangent, l
+        else:
+            for (xy, a), l in zip(
+                    self.grid_info[lon_or_lat]["tick_locs"][axis_side],
+                    self.grid_info[lon_or_lat]["tick_labels"][axis_side]):
+                angle_normal = a
+                yield xy, angle_normal, angle_tangent, ""
+            # for xy, a, l in self.grid_info[lon_or_lat]["ticks"][axis_side]:
+            #     yield xy, a, ""
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axislines.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axislines.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axislines.py	(date 1589417755515)
@@ -0,0 +1,648 @@
+"""
+Axislines includes modified implementation of the Axes class. The
+biggest difference is that the artists responsible for drawing the axis spine,
+ticks, ticklabels and axis labels are separated out from mpl's Axis
+class. Originally, this change was motivated to support curvilinear
+grid. Here are a few reasons that I came up with a new axes class:
+
+* "top" and "bottom" x-axis (or "left" and "right" y-axis) can have
+  different ticks (tick locations and labels). This is not possible
+  with the current mpl, although some twin axes trick can help.
+
+* Curvilinear grid.
+
+* angled ticks.
+
+In the new axes class, xaxis and yaxis is set to not visible by
+default, and new set of artist (AxisArtist) are defined to draw axis
+line, ticks, ticklabels and axis label. Axes.axis attribute serves as
+a dictionary of these artists, i.e., ax.axis["left"] is a AxisArtist
+instance responsible to draw left y-axis. The default Axes.axis contains
+"bottom", "left", "top" and "right".
+
+AxisArtist can be considered as a container artist and
+has following children artists which will draw ticks, labels, etc.
+
+* line
+* major_ticks, major_ticklabels
+* minor_ticks, minor_ticklabels
+* offsetText
+* label
+
+Note that these are separate artists from Axis class of the
+original mpl, thus most of tick-related command in the original mpl
+won't work, although some effort has made to work with. For example,
+color and markerwidth of the ax.axis["bottom"].major_ticks will follow
+those of Axes.xaxis unless explicitly specified.
+
+In addition to AxisArtist, the Axes will have *gridlines* attribute,
+which obviously draws grid lines. The gridlines needs to be separated
+from the axis as some gridlines can never pass any axis.
+"""
+
+import numpy as np
+
+from matplotlib import cbook, rcParams
+import matplotlib.artist as martist
+import matplotlib.axes as maxes
+from matplotlib.path import Path
+from mpl_toolkits.axes_grid1 import mpl_axes
+from .axisline_style import AxislineStyle
+from .axis_artist import AxisArtist, GridlinesCollection
+
+
+class AxisArtistHelper:
+    """
+    AxisArtistHelper should define
+    following method with given APIs. Note that the first axes argument
+    will be axes attribute of the caller artist.::
+
+
+        # LINE (spinal line?)
+
+        def get_line(self, axes):
+            # path : Path
+            return path
+
+        def get_line_transform(self, axes):
+            # ...
+            # trans : transform
+            return trans
+
+        # LABEL
+
+        def get_label_pos(self, axes):
+            # x, y : position
+            return (x, y), trans
+
+
+        def get_label_offset_transform(self,
+                axes,
+                pad_points, fontprops, renderer,
+                bboxes,
+                ):
+            # va : vertical alignment
+            # ha : horizontal alignment
+            # a : angle
+            return trans, va, ha, a
+
+        # TICK
+
+        def get_tick_transform(self, axes):
+            return trans
+
+        def get_tick_iterators(self, axes):
+            # iter : iterable object that yields (c, angle, l) where
+            # c, angle, l is position, tick angle, and label
+
+            return iter_major, iter_minor
+    """
+
+    class _Base:
+        """Base class for axis helper."""
+        def __init__(self):
+            self.delta1, self.delta2 = 0.00001, 0.00001
+
+        def update_lim(self, axes):
+            pass
+
+    class Fixed(_Base):
+        """Helper class for a fixed (in the axes coordinate) axis."""
+
+        _default_passthru_pt = dict(left=(0, 0),
+                                    right=(1, 0),
+                                    bottom=(0, 0),
+                                    top=(0, 1))
+
+        def __init__(self, loc, nth_coord=None):
+            """
+            nth_coord = along which coordinate value varies
+            in 2d, nth_coord = 0 ->  x axis, nth_coord = 1 -> y axis
+            """
+            cbook._check_in_list(["left", "right", "bottom", "top"], loc=loc)
+            self._loc = loc
+
+            if nth_coord is None:
+                if loc in ["left", "right"]:
+                    nth_coord = 1
+                elif loc in ["bottom", "top"]:
+                    nth_coord = 0
+
+            self.nth_coord = nth_coord
+
+            super().__init__()
+
+            self.passthru_pt = self._default_passthru_pt[loc]
+
+            _verts = np.array([[0., 0.],
+                               [1., 1.]])
+            fixed_coord = 1 - nth_coord
+            _verts[:, fixed_coord] = self.passthru_pt[fixed_coord]
+
+            # axis line in transAxes
+            self._path = Path(_verts)
+
+        def get_nth_coord(self):
+            return self.nth_coord
+
+        # LINE
+
+        def get_line(self, axes):
+            return self._path
+
+        def get_line_transform(self, axes):
+            return axes.transAxes
+
+        # LABEL
+
+        def get_axislabel_transform(self, axes):
+            return axes.transAxes
+
+        def get_axislabel_pos_angle(self, axes):
+            """
+            label reference position in transAxes.
+
+            get_label_transform() returns a transform of (transAxes+offset)
+            """
+            return dict(left=((0., 0.5), 90),  # (position, angle_tangent)
+                        right=((1., 0.5), 90),
+                        bottom=((0.5, 0.), 0),
+                        top=((0.5, 1.), 0))[self._loc]
+
+        # TICK
+
+        def get_tick_transform(self, axes):
+            return [axes.get_xaxis_transform(),
+                    axes.get_yaxis_transform()][self.nth_coord]
+
+    class Floating(_Base):
+
+        def __init__(self, nth_coord, value):
+            self.nth_coord = nth_coord
+            self._value = value
+            super().__init__()
+
+        def get_nth_coord(self):
+            return self.nth_coord
+
+        def get_line(self, axes):
+            raise RuntimeError(
+                "get_line method should be defined by the derived class")
+
+
+class AxisArtistHelperRectlinear:
+
+    class Fixed(AxisArtistHelper.Fixed):
+
+        def __init__(self, axes, loc, nth_coord=None):
+            """
+            nth_coord = along which coordinate value varies
+            in 2d, nth_coord = 0 ->  x axis, nth_coord = 1 -> y axis
+            """
+            super().__init__(loc, nth_coord)
+            self.axis = [axes.xaxis, axes.yaxis][self.nth_coord]
+
+        # TICK
+
+        def get_tick_iterators(self, axes):
+            """tick_loc, tick_angle, tick_label"""
+
+            loc = self._loc
+
+            if loc in ["bottom", "top"]:
+                angle_normal, angle_tangent = 90, 0
+            else:
+                angle_normal, angle_tangent = 0, 90
+
+            major = self.axis.major
+            majorLocs = major.locator()
+            majorLabels = major.formatter.format_ticks(majorLocs)
+
+            minor = self.axis.minor
+            minorLocs = minor.locator()
+            minorLabels = minor.formatter.format_ticks(minorLocs)
+
+            tick_to_axes = self.get_tick_transform(axes) - axes.transAxes
+
+            def _f(locs, labels):
+                for x, l in zip(locs, labels):
+
+                    c = list(self.passthru_pt)  # copy
+                    c[self.nth_coord] = x
+
+                    # check if the tick point is inside axes
+                    c2 = tick_to_axes.transform(c)
+                    if (0 - self.delta1
+                            <= c2[self.nth_coord]
+                            <= 1 + self.delta2):
+                        yield c, angle_normal, angle_tangent, l
+
+            return _f(majorLocs, majorLabels), _f(minorLocs, minorLabels)
+
+    class Floating(AxisArtistHelper.Floating):
+        def __init__(self, axes, nth_coord,
+                     passingthrough_point, axis_direction="bottom"):
+            super().__init__(nth_coord, passingthrough_point)
+            self._axis_direction = axis_direction
+            self.axis = [axes.xaxis, axes.yaxis][self.nth_coord]
+
+        def get_line(self, axes):
+            _verts = np.array([[0., 0.],
+                               [1., 1.]])
+
+            fixed_coord = 1 - self.nth_coord
+            data_to_axes = axes.transData - axes.transAxes
+            p = data_to_axes.transform([self._value, self._value])
+            _verts[:, fixed_coord] = p[fixed_coord]
+
+            return Path(_verts)
+
+        def get_line_transform(self, axes):
+            return axes.transAxes
+
+        def get_axislabel_transform(self, axes):
+            return axes.transAxes
+
+        def get_axislabel_pos_angle(self, axes):
+            """
+            label reference position in transAxes.
+
+            get_label_transform() returns a transform of (transAxes+offset)
+            """
+            angle = [0, 90][self.nth_coord]
+            _verts = [0.5, 0.5]
+            fixed_coord = 1 - self.nth_coord
+            data_to_axes = axes.transData - axes.transAxes
+            p = data_to_axes.transform([self._value, self._value])
+            _verts[fixed_coord] = p[fixed_coord]
+            if 0 <= _verts[fixed_coord] <= 1:
+                return _verts, angle
+            else:
+                return None, None
+
+        def get_tick_transform(self, axes):
+            return axes.transData
+
+        def get_tick_iterators(self, axes):
+            """tick_loc, tick_angle, tick_label"""
+            if self.nth_coord == 0:
+                angle_normal, angle_tangent = 90, 0
+            else:
+                angle_normal, angle_tangent = 0, 90
+
+            major = self.axis.major
+            majorLocs = major.locator()
+            majorLabels = major.formatter.format_ticks(majorLocs)
+
+            minor = self.axis.minor
+            minorLocs = minor.locator()
+            minorLabels = minor.formatter.format_ticks(minorLocs)
+
+            data_to_axes = axes.transData - axes.transAxes
+
+            def _f(locs, labels):
+                for x, l in zip(locs, labels):
+                    c = [self._value, self._value]
+                    c[self.nth_coord] = x
+                    c1, c2 = data_to_axes.transform(c)
+                    if (0 <= c1 <= 1 and 0 <= c2 <= 1
+                            and 0 - self.delta1
+                                <= [c1, c2][self.nth_coord]
+                                <= 1 + self.delta2):
+                        yield c, angle_normal, angle_tangent, l
+
+            return _f(majorLocs, majorLabels), _f(minorLocs, minorLabels)
+
+
+class GridHelperBase:
+
+    def __init__(self):
+        self._force_update = True
+        self._old_limits = None
+        super().__init__()
+
+    def update_lim(self, axes):
+        x1, x2 = axes.get_xlim()
+        y1, y2 = axes.get_ylim()
+
+        if self._force_update or self._old_limits != (x1, x2, y1, y2):
+            self._update(x1, x2, y1, y2)
+            self._force_update = False
+            self._old_limits = (x1, x2, y1, y2)
+
+    def _update(self, x1, x2, y1, y2):
+        pass
+
+    def invalidate(self):
+        self._force_update = True
+
+    def valid(self):
+        return not self._force_update
+
+    def get_gridlines(self, which, axis):
+        """
+        Return list of grid lines as a list of paths (list of points).
+
+        *which* : "major" or "minor"
+        *axis* : "both", "x" or "y"
+        """
+        return []
+
+    def new_gridlines(self, ax):
+        """
+        Create and return a new GridlineCollection instance.
+
+        *which* : "major" or "minor"
+        *axis* : "both", "x" or "y"
+
+        """
+        gridlines = GridlinesCollection(None, transform=ax.transData,
+                                        colors=rcParams['grid.color'],
+                                        linestyles=rcParams['grid.linestyle'],
+                                        linewidths=rcParams['grid.linewidth'])
+        ax._set_artist_props(gridlines)
+        gridlines.set_grid_helper(self)
+
+        ax.axes._set_artist_props(gridlines)
+        # gridlines.set_clip_path(self.axes.patch)
+        # set_clip_path need to be deferred after Axes.cla is completed.
+        # It is done inside the cla.
+
+        return gridlines
+
+
+class GridHelperRectlinear(GridHelperBase):
+
+    def __init__(self, axes):
+        super().__init__()
+        self.axes = axes
+
+    def new_fixed_axis(self, loc,
+                       nth_coord=None,
+                       axis_direction=None,
+                       offset=None,
+                       axes=None,
+                       ):
+
+        if axes is None:
+            cbook._warn_external(
+                "'new_fixed_axis' explicitly requires the axes keyword.")
+            axes = self.axes
+
+        _helper = AxisArtistHelperRectlinear.Fixed(axes, loc, nth_coord)
+
+        if axis_direction is None:
+            axis_direction = loc
+        axisline = AxisArtist(axes, _helper, offset=offset,
+                              axis_direction=axis_direction,
+                              )
+
+        return axisline
+
+    def new_floating_axis(self, nth_coord, value,
+                          axis_direction="bottom",
+                          axes=None,
+                          ):
+
+        if axes is None:
+            cbook._warn_external(
+                "'new_floating_axis' explicitly requires the axes keyword.")
+            axes = self.axes
+
+        _helper = AxisArtistHelperRectlinear.Floating(
+            axes, nth_coord, value, axis_direction)
+
+        axisline = AxisArtist(axes, _helper)
+
+        axisline.line.set_clip_on(True)
+        axisline.line.set_clip_box(axisline.axes.bbox)
+        return axisline
+
+    def get_gridlines(self, which="major", axis="both"):
+        """
+        return list of gridline coordinates in data coordinates.
+
+        *which* : "major" or "minor"
+        *axis* : "both", "x" or "y"
+        """
+        gridlines = []
+
+        if axis in ["both", "x"]:
+            locs = []
+            y1, y2 = self.axes.get_ylim()
+            if which in ["both", "major"]:
+                locs.extend(self.axes.xaxis.major.locator())
+            if which in ["both", "minor"]:
+                locs.extend(self.axes.xaxis.minor.locator())
+
+            for x in locs:
+                gridlines.append([[x, x], [y1, y2]])
+
+        if axis in ["both", "y"]:
+            x1, x2 = self.axes.get_xlim()
+            locs = []
+            if self.axes.yaxis._gridOnMajor:
+                locs.extend(self.axes.yaxis.major.locator())
+            if self.axes.yaxis._gridOnMinor:
+                locs.extend(self.axes.yaxis.minor.locator())
+
+            for y in locs:
+                gridlines.append([[x1, x2], [y, y]])
+
+        return gridlines
+
+
+@cbook.deprecated("3.1")
+class SimpleChainedObjects:
+    def __init__(self, objects):
+        self._objects = objects
+
+    def __getattr__(self, k):
+        _a = SimpleChainedObjects([getattr(a, k) for a in self._objects])
+        return _a
+
+    def __call__(self, *args, **kwargs):
+        for m in self._objects:
+            m(*args, **kwargs)
+
+
+class Axes(maxes.Axes):
+
+    @cbook.deprecated("3.1")
+    class AxisDict(dict):
+        def __init__(self, axes):
+            self.axes = axes
+            super().__init__()
+
+        def __getitem__(self, k):
+            if isinstance(k, tuple):
+                return SimpleChainedObjects(
+                    [dict.__getitem__(self, k1) for k1 in k])
+            elif isinstance(k, slice):
+                if k == slice(None):
+                    return SimpleChainedObjects(list(self.values()))
+                else:
+                    raise ValueError("Unsupported slice")
+            else:
+                return dict.__getitem__(self, k)
+
+        def __call__(self, *args, **kwargs):
+            return maxes.Axes.axis(self.axes, *args, **kwargs)
+
+    def __init__(self, *args, grid_helper=None, **kwargs):
+        self._axisline_on = True
+        self._grid_helper = (grid_helper if grid_helper
+                             else GridHelperRectlinear(self))
+        super().__init__(*args, **kwargs)
+        self.toggle_axisline(True)
+
+    def toggle_axisline(self, b=None):
+        if b is None:
+            b = not self._axisline_on
+        if b:
+            self._axisline_on = True
+            for s in self.spines.values():
+                s.set_visible(False)
+            self.xaxis.set_visible(False)
+            self.yaxis.set_visible(False)
+        else:
+            self._axisline_on = False
+            for s in self.spines.values():
+                s.set_visible(True)
+            self.xaxis.set_visible(True)
+            self.yaxis.set_visible(True)
+
+    def _init_axis_artists(self, axes=None):
+        if axes is None:
+            axes = self
+
+        self._axislines = mpl_axes.Axes.AxisDict(self)
+        new_fixed_axis = self.get_grid_helper().new_fixed_axis
+        for loc in ["bottom", "top", "left", "right"]:
+            self._axislines[loc] = new_fixed_axis(loc=loc, axes=axes,
+                                                  axis_direction=loc)
+
+        for axisline in [self._axislines["top"], self._axislines["right"]]:
+            axisline.label.set_visible(False)
+            axisline.major_ticklabels.set_visible(False)
+            axisline.minor_ticklabels.set_visible(False)
+
+    @property
+    def axis(self):
+        return self._axislines
+
+    def new_gridlines(self, grid_helper=None):
+        """
+        Create and return a new GridlineCollection instance.
+
+        *which* : "major" or "minor"
+        *axis* : "both", "x" or "y"
+
+        """
+        if grid_helper is None:
+            grid_helper = self.get_grid_helper()
+
+        gridlines = grid_helper.new_gridlines(self)
+        return gridlines
+
+    def _init_gridlines(self, grid_helper=None):
+        # It is done inside the cla.
+        self.gridlines = self.new_gridlines(grid_helper)
+
+    def cla(self):
+        # gridlines need to b created before cla() since cla calls grid()
+        self._init_gridlines()
+        super().cla()
+
+        # the clip_path should be set after Axes.cla() since that's
+        # when a patch is created.
+        self.gridlines.set_clip_path(self.axes.patch)
+
+        self._init_axis_artists()
+
+    def get_grid_helper(self):
+        return self._grid_helper
+
+    def grid(self, b=None, which='major', axis="both", **kwargs):
+        """
+        Toggle the gridlines, and optionally set the properties of the lines.
+        """
+        # their are some discrepancy between the behavior of grid in
+        # axes_grid and the original mpl's grid, because axes_grid
+        # explicitly set the visibility of the gridlines.
+
+        super().grid(b, which=which, axis=axis, **kwargs)
+        if not self._axisline_on:
+            return
+
+        if b is None:
+            b = (self.axes.xaxis._gridOnMinor
+                    or self.axes.xaxis._gridOnMajor
+                    or self.axes.yaxis._gridOnMinor
+                    or self.axes.yaxis._gridOnMajor)
+
+        self.gridlines.set_which(which)
+        self.gridlines.set_axis(axis)
+        self.gridlines.set_visible(b)
+
+        if len(kwargs):
+            martist.setp(self.gridlines, **kwargs)
+
+    def get_children(self):
+        if self._axisline_on:
+            children = [*self._axislines.values(), self.gridlines]
+        else:
+            children = []
+        children.extend(super().get_children())
+        return children
+
+    def invalidate_grid_helper(self):
+        self._grid_helper.invalidate()
+
+    def new_fixed_axis(self, loc, offset=None):
+        gh = self.get_grid_helper()
+        axis = gh.new_fixed_axis(loc,
+                                 nth_coord=None,
+                                 axis_direction=None,
+                                 offset=offset,
+                                 axes=self,
+                                 )
+        return axis
+
+    def new_floating_axis(self, nth_coord, value, axis_direction="bottom"):
+        gh = self.get_grid_helper()
+        axis = gh.new_floating_axis(nth_coord, value,
+                                    axis_direction=axis_direction,
+                                    axes=self)
+        return axis
+
+
+Subplot = maxes.subplot_class_factory(Axes)
+
+
+class AxesZero(Axes):
+
+    def _init_axis_artists(self):
+        super()._init_axis_artists()
+
+        new_floating_axis = self._grid_helper.new_floating_axis
+        xaxis_zero = new_floating_axis(nth_coord=0,
+                                       value=0.,
+                                       axis_direction="bottom",
+                                       axes=self)
+
+        xaxis_zero.line.set_clip_path(self.patch)
+        xaxis_zero.set_visible(False)
+        self._axislines["xzero"] = xaxis_zero
+
+        yaxis_zero = new_floating_axis(nth_coord=1,
+                                       value=0.,
+                                       axis_direction="left",
+                                       axes=self)
+
+        yaxis_zero.line.set_clip_path(self.patch)
+        yaxis_zero.set_visible(False)
+        self._axislines["yzero"] = yaxis_zero
+
+
+SubplotZero = maxes.subplot_class_factory(AxesZero)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_rgb.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_rgb.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/axes_rgb.py	(date 1589417755515)
@@ -0,0 +1,8 @@
+from mpl_toolkits.axes_grid1.axes_rgb import (
+    make_rgb_axes, imshow_rgb, RGBAxesBase)
+
+from .axislines import Axes
+
+
+class RGBAxes(RGBAxesBase):
+    _defaultAxesClass = Axes
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/floating_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/floating_axes.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/floating_axes.py	(date 1589417755515)
@@ -0,0 +1,378 @@
+"""
+An experimental support for curvilinear grid.
+"""
+
+# TODO :
+# see if tick_iterator method can be simplified by reusing the parent method.
+
+import functools
+
+import numpy as np
+
+import matplotlib.patches as mpatches
+from matplotlib.path import Path
+from matplotlib.transforms import IdentityTransform
+import matplotlib.axes as maxes
+
+from mpl_toolkits.axes_grid1.parasite_axes import host_axes_class_factory
+
+from . import axislines, grid_helper_curvelinear
+from .axis_artist import AxisArtist
+from .grid_finder import ExtremeFinderSimple
+
+
+class FloatingAxisArtistHelper(
+        grid_helper_curvelinear.FloatingAxisArtistHelper):
+    pass
+
+
+class FixedAxisArtistHelper(grid_helper_curvelinear.FloatingAxisArtistHelper):
+
+    def __init__(self, grid_helper, side, nth_coord_ticks=None):
+        """
+        nth_coord = along which coordinate value varies.
+         nth_coord = 0 ->  x axis, nth_coord = 1 -> y axis
+        """
+        value, nth_coord = grid_helper.get_data_boundary(side)
+        super().__init__(grid_helper, nth_coord, value, axis_direction=side)
+        if nth_coord_ticks is None:
+            nth_coord_ticks = nth_coord
+        self.nth_coord_ticks = nth_coord_ticks
+
+        self.value = value
+        self.grid_helper = grid_helper
+        self._side = side
+
+    def update_lim(self, axes):
+        self.grid_helper.update_lim(axes)
+        self.grid_info = self.grid_helper.grid_info
+
+    def get_tick_iterators(self, axes):
+        """tick_loc, tick_angle, tick_label, (optionally) tick_label"""
+
+        grid_finder = self.grid_helper.grid_finder
+
+        lat_levs, lat_n, lat_factor = self.grid_info["lat_info"]
+        lon_levs, lon_n, lon_factor = self.grid_info["lon_info"]
+
+        lon_levs, lat_levs = np.asarray(lon_levs), np.asarray(lat_levs)
+        if lat_factor is not None:
+            yy0 = lat_levs / lat_factor
+            dy = 0.001 / lat_factor
+        else:
+            yy0 = lat_levs
+            dy = 0.001
+
+        if lon_factor is not None:
+            xx0 = lon_levs / lon_factor
+            dx = 0.001 / lon_factor
+        else:
+            xx0 = lon_levs
+            dx = 0.001
+
+        extremes = self.grid_helper._extremes
+        xmin, xmax = sorted(extremes[:2])
+        ymin, ymax = sorted(extremes[2:])
+
+        def transform_xy(x, y):
+            x1, y1 = grid_finder.transform_xy(x, y)
+            x2, y2 = axes.transData.transform(np.array([x1, y1]).T).T
+            return x2, y2
+
+        if self.nth_coord == 0:
+            mask = (ymin <= yy0) & (yy0 <= ymax)
+            yy0 = yy0[mask]
+            xx0 = np.full_like(yy0, self.value)
+            xx1, yy1 = transform_xy(xx0, yy0)
+
+            xx00 = xx0.astype(float, copy=True)
+            xx00[xx0 + dx > xmax] -= dx
+            xx1a, yy1a = transform_xy(xx00, yy0)
+            xx1b, yy1b = transform_xy(xx00 + dx, yy0)
+
+            yy00 = yy0.astype(float, copy=True)
+            yy00[yy0 + dy > ymax] -= dy
+            xx2a, yy2a = transform_xy(xx0, yy00)
+            xx2b, yy2b = transform_xy(xx0, yy00 + dy)
+
+            labels = self.grid_info["lat_labels"]
+            labels = [l for l, m in zip(labels, mask) if m]
+
+        elif self.nth_coord == 1:
+            mask = (xmin <= xx0) & (xx0 <= xmax)
+            xx0 = xx0[mask]
+            yy0 = np.full_like(xx0, self.value)
+            xx1, yy1 = transform_xy(xx0, yy0)
+
+            yy00 = yy0.astype(float, copy=True)
+            yy00[yy0 + dy > ymax] -= dy
+            xx1a, yy1a = transform_xy(xx0, yy00)
+            xx1b, yy1b = transform_xy(xx0, yy00 + dy)
+
+            xx00 = xx0.astype(float, copy=True)
+            xx00[xx0 + dx > xmax] -= dx
+            xx2a, yy2a = transform_xy(xx00, yy0)
+            xx2b, yy2b = transform_xy(xx00 + dx, yy0)
+
+            labels = self.grid_info["lon_labels"]
+            labels = [l for l, m in zip(labels, mask) if m]
+
+        def f1():
+            dd = np.arctan2(yy1b - yy1a, xx1b - xx1a)  # angle normal
+            dd2 = np.arctan2(yy2b - yy2a, xx2b - xx2a)  # angle tangent
+            mm = (yy1b - yy1a == 0) & (xx1b - xx1a == 0)  # mask not defined dd
+            dd[mm] = dd2[mm] + np.pi / 2
+
+            tick_to_axes = self.get_tick_transform(axes) - axes.transAxes
+            for x, y, d, d2, lab in zip(xx1, yy1, dd, dd2, labels):
+                c2 = tick_to_axes.transform((x, y))
+                delta = 0.00001
+                if 0-delta <= c2[0] <= 1+delta and 0-delta <= c2[1] <= 1+delta:
+                    d1, d2 = np.rad2deg([d, d2])
+                    yield [x, y], d1, d2, lab
+
+        return f1(), iter([])
+
+    def get_line(self, axes):
+        self.update_lim(axes)
+        k, v = dict(left=("lon_lines0", 0),
+                    right=("lon_lines0", 1),
+                    bottom=("lat_lines0", 0),
+                    top=("lat_lines0", 1))[self._side]
+        xx, yy = self.grid_info[k][v]
+        return Path(np.column_stack([xx, yy]))
+
+
+class ExtremeFinderFixed(ExtremeFinderSimple):
+    def __init__(self, extremes):
+        self._extremes = extremes
+
+    def __call__(self, transform_xy, x1, y1, x2, y2):
+        """
+        get extreme values.
+
+        x1, y1, x2, y2 in image coordinates (0-based)
+        nx, ny : number of division in each axis
+        """
+        return self._extremes
+
+
+class GridHelperCurveLinear(grid_helper_curvelinear.GridHelperCurveLinear):
+
+    def __init__(self, aux_trans, extremes,
+                 grid_locator1=None,
+                 grid_locator2=None,
+                 tick_formatter1=None,
+                 tick_formatter2=None):
+        # docstring inherited
+        self._extremes = extremes
+        extreme_finder = ExtremeFinderFixed(extremes)
+        super().__init__(aux_trans,
+                         extreme_finder,
+                         grid_locator1=grid_locator1,
+                         grid_locator2=grid_locator2,
+                         tick_formatter1=tick_formatter1,
+                         tick_formatter2=tick_formatter2)
+
+    def get_data_boundary(self, side):
+        """
+        return v=0, nth=1
+        """
+        lon1, lon2, lat1, lat2 = self._extremes
+        return dict(left=(lon1, 0),
+                    right=(lon2, 0),
+                    bottom=(lat1, 1),
+                    top=(lat2, 1))[side]
+
+    def new_fixed_axis(self, loc,
+                       nth_coord=None,
+                       axis_direction=None,
+                       offset=None,
+                       axes=None):
+        if axes is None:
+            axes = self.axes
+        if axis_direction is None:
+            axis_direction = loc
+        # This is not the same as the FixedAxisArtistHelper class used by
+        # grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis!
+        _helper = FixedAxisArtistHelper(
+            self, loc, nth_coord_ticks=nth_coord)
+        axisline = AxisArtist(axes, _helper, axis_direction=axis_direction)
+        # Perhaps should be moved to the base class?
+        axisline.line.set_clip_on(True)
+        axisline.line.set_clip_box(axisline.axes.bbox)
+        return axisline
+
+    # new_floating_axis will inherit the grid_helper's extremes.
+
+    # def new_floating_axis(self, nth_coord,
+    #                       value,
+    #                       axes=None,
+    #                       axis_direction="bottom"
+    #                       ):
+
+    #     axis = super(GridHelperCurveLinear,
+    #                  self).new_floating_axis(nth_coord,
+    #                                          value, axes=axes,
+    #                                          axis_direction=axis_direction)
+
+    #     # set extreme values of the axis helper
+    #     if nth_coord == 1:
+    #         axis.get_helper().set_extremes(*self._extremes[:2])
+    #     elif nth_coord == 0:
+    #         axis.get_helper().set_extremes(*self._extremes[2:])
+
+    #     return axis
+
+    def _update_grid(self, x1, y1, x2, y2):
+        if self.grid_info is None:
+            self.grid_info = dict()
+
+        grid_info = self.grid_info
+
+        grid_finder = self.grid_finder
+        extremes = grid_finder.extreme_finder(grid_finder.inv_transform_xy,
+                                              x1, y1, x2, y2)
+
+        lon_min, lon_max = sorted(extremes[:2])
+        lat_min, lat_max = sorted(extremes[2:])
+        lon_levs, lon_n, lon_factor = \
+                  grid_finder.grid_locator1(lon_min, lon_max)
+        lat_levs, lat_n, lat_factor = \
+                  grid_finder.grid_locator2(lat_min, lat_max)
+        grid_info["extremes"] = lon_min, lon_max, lat_min, lat_max  # extremes
+
+        grid_info["lon_info"] = lon_levs, lon_n, lon_factor
+        grid_info["lat_info"] = lat_levs, lat_n, lat_factor
+
+        grid_info["lon_labels"] = grid_finder.tick_formatter1("bottom",
+                                                              lon_factor,
+                                                              lon_levs)
+
+        grid_info["lat_labels"] = grid_finder.tick_formatter2("bottom",
+                                                              lat_factor,
+                                                              lat_levs)
+
+        if lon_factor is None:
+            lon_values = np.asarray(lon_levs[:lon_n])
+        else:
+            lon_values = np.asarray(lon_levs[:lon_n]/lon_factor)
+        if lat_factor is None:
+            lat_values = np.asarray(lat_levs[:lat_n])
+        else:
+            lat_values = np.asarray(lat_levs[:lat_n]/lat_factor)
+
+        lon_lines, lat_lines = grid_finder._get_raw_grid_lines(
+            lon_values[(lon_min < lon_values) & (lon_values < lon_max)],
+            lat_values[(lat_min < lat_values) & (lat_values < lat_max)],
+            lon_min, lon_max, lat_min, lat_max)
+
+        grid_info["lon_lines"] = lon_lines
+        grid_info["lat_lines"] = lat_lines
+
+        lon_lines, lat_lines = grid_finder._get_raw_grid_lines(
+            # lon_min, lon_max, lat_min, lat_max)
+            extremes[:2], extremes[2:], *extremes)
+
+        grid_info["lon_lines0"] = lon_lines
+        grid_info["lat_lines0"] = lat_lines
+
+    def get_gridlines(self, which="major", axis="both"):
+        grid_lines = []
+        if axis in ["both", "x"]:
+            grid_lines.extend(self.grid_info["lon_lines"])
+        if axis in ["both", "y"]:
+            grid_lines.extend(self.grid_info["lat_lines"])
+        return grid_lines
+
+    def get_boundary(self):
+        """
+        Return (N, 2) array of (x, y) coordinate of the boundary.
+        """
+        x0, x1, y0, y1 = self._extremes
+        tr = self._aux_trans
+
+        xx = np.linspace(x0, x1, 100)
+        yy0 = np.full_like(xx, y0)
+        yy1 = np.full_like(xx, y1)
+        yy = np.linspace(y0, y1, 100)
+        xx0 = np.full_like(yy, x0)
+        xx1 = np.full_like(yy, x1)
+
+        xxx = np.concatenate([xx[:-1], xx1[:-1], xx[-1:0:-1], xx0])
+        yyy = np.concatenate([yy0[:-1], yy[:-1], yy1[:-1], yy[::-1]])
+        t = tr.transform(np.array([xxx, yyy]).transpose())
+
+        return t
+
+
+class FloatingAxesBase:
+
+    def __init__(self, *args, **kwargs):
+        grid_helper = kwargs.get("grid_helper", None)
+        if grid_helper is None:
+            raise ValueError("FloatingAxes requires grid_helper argument")
+        if not hasattr(grid_helper, "get_boundary"):
+            raise ValueError("grid_helper must implement get_boundary method")
+
+        self._axes_class_floating.__init__(self, *args, **kwargs)
+
+        self.set_aspect(1.)
+        self.adjust_axes_lim()
+
+    def _gen_axes_patch(self):
+        """
+        Returns the patch used to draw the background of the axes.  It
+        is also used as the clipping path for any data elements on the
+        axes.
+
+        In the standard axes, this is a rectangle, but in other
+        projections it may not be.
+
+        .. note::
+            Intended to be overridden by new projection types.
+        """
+        grid_helper = self.get_grid_helper()
+        t = grid_helper.get_boundary()
+        return mpatches.Polygon(t)
+
+    def cla(self):
+        self._axes_class_floating.cla(self)
+        # HostAxes.cla(self)
+        self.patch.set_transform(self.transData)
+
+        patch = self._axes_class_floating._gen_axes_patch(self)
+        patch.set_figure(self.figure)
+        patch.set_visible(False)
+        patch.set_transform(self.transAxes)
+
+        self.patch.set_clip_path(patch)
+        self.gridlines.set_clip_path(patch)
+
+        self._original_patch = patch
+
+    def adjust_axes_lim(self):
+        grid_helper = self.get_grid_helper()
+        t = grid_helper.get_boundary()
+        x, y = t[:, 0], t[:, 1]
+
+        xmin, xmax = min(x), max(x)
+        ymin, ymax = min(y), max(y)
+
+        dx = (xmax-xmin) / 100
+        dy = (ymax-ymin) / 100
+
+        self.set_xlim(xmin-dx, xmax+dx)
+        self.set_ylim(ymin-dy, ymax+dy)
+
+
+@functools.lru_cache(None)
+def floatingaxes_class_factory(axes_class):
+    return type("Floating %s" % axes_class.__name__,
+                (FloatingAxesBase, axes_class),
+                {'_axes_class_floating': axes_class})
+
+
+FloatingAxes = floatingaxes_class_factory(
+    host_axes_class_factory(axislines.Axes))
+FloatingSubplot = maxes.subplot_class_factory(FloatingAxes)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/angle_helper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/angle_helper.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/angle_helper.py	(date 1589417755515)
@@ -0,0 +1,402 @@
+import numpy as np
+import math
+
+from mpl_toolkits.axisartist.grid_finder import ExtremeFinderSimple
+
+
+def select_step_degree(dv):
+
+    degree_limits_ = [1.5, 3, 7, 13, 20, 40, 70, 120, 270, 520]
+    degree_steps_  = [1,   2, 5, 10, 15, 30, 45,  90, 180, 360]
+    degree_factors = [1.] * len(degree_steps_)
+
+    minsec_limits_ = [1.5, 2.5, 3.5, 8, 11, 18, 25, 45]
+    minsec_steps_  = [1,   2,   3,   5, 10, 15, 20, 30]
+
+    minute_limits_ = np.array(minsec_limits_) / 60
+    minute_factors = [60.] * len(minute_limits_)
+
+    second_limits_ = np.array(minsec_limits_) / 3600
+    second_factors = [3600.] * len(second_limits_)
+
+    degree_limits = np.concatenate([second_limits_,
+                                    minute_limits_,
+                                    degree_limits_])
+
+    degree_steps = np.concatenate([minsec_steps_,
+                                   minsec_steps_,
+                                   degree_steps_])
+
+    degree_factors = np.concatenate([second_factors,
+                                     minute_factors,
+                                     degree_factors])
+
+    n = degree_limits.searchsorted(dv)
+    step = degree_steps[n]
+    factor = degree_factors[n]
+
+    return step, factor
+
+
+def select_step_hour(dv):
+
+    hour_limits_ = [1.5, 2.5, 3.5, 5, 7, 10, 15, 21, 36]
+    hour_steps_  = [1,   2,   3,   4, 6,  8, 12, 18, 24]
+    hour_factors = [1.] * len(hour_steps_)
+
+    minsec_limits_ = [1.5, 2.5, 3.5, 4.5, 5.5, 8, 11, 14, 18, 25, 45]
+    minsec_steps_  = [1,   2,   3,   4,   5,   6, 10, 12, 15, 20, 30]
+
+    minute_limits_ = np.array(minsec_limits_) / 60
+    minute_factors = [60.] * len(minute_limits_)
+
+    second_limits_ = np.array(minsec_limits_) / 3600
+    second_factors = [3600.] * len(second_limits_)
+
+    hour_limits = np.concatenate([second_limits_,
+                                  minute_limits_,
+                                  hour_limits_])
+
+    hour_steps = np.concatenate([minsec_steps_,
+                                 minsec_steps_,
+                                 hour_steps_])
+
+    hour_factors = np.concatenate([second_factors,
+                                   minute_factors,
+                                   hour_factors])
+
+    n = hour_limits.searchsorted(dv)
+    step = hour_steps[n]
+    factor = hour_factors[n]
+
+    return step, factor
+
+
+def select_step_sub(dv):
+
+    # subarcsec or degree
+    tmp = 10.**(int(math.log10(dv))-1.)
+
+    factor = 1./tmp
+
+    if 1.5*tmp >= dv:
+        step = 1
+    elif 3.*tmp >= dv:
+        step = 2
+    elif 7.*tmp >= dv:
+        step = 5
+    else:
+        step = 1
+        factor = 0.1*factor
+
+    return step, factor
+
+
+def select_step(v1, v2, nv, hour=False, include_last=True,
+                threshold_factor=3600.):
+
+    if v1 > v2:
+        v1, v2 = v2, v1
+
+    dv = (v2 - v1) / nv
+
+    if hour:
+        _select_step = select_step_hour
+        cycle = 24.
+    else:
+        _select_step = select_step_degree
+        cycle = 360.
+
+    # for degree
+    if dv > 1 / threshold_factor:
+        step, factor = _select_step(dv)
+    else:
+        step, factor = select_step_sub(dv*threshold_factor)
+
+        factor = factor * threshold_factor
+
+    levs = np.arange(np.floor(v1 * factor / step),
+                     np.ceil(v2 * factor / step) + 0.5,
+                     dtype=int) * step
+
+    # n : number of valid levels. If there is a cycle, e.g., [0, 90, 180,
+    # 270, 360], the grid line needs to be extended from 0 to 360, so
+    # we need to return the whole array. However, the last level (360)
+    # needs to be ignored often. In this case, so we return n=4.
+
+    n = len(levs)
+
+    # we need to check the range of values
+    # for example, -90 to 90, 0 to 360,
+
+    if factor == 1. and levs[-1] >= levs[0] + cycle:  # check for cycle
+        nv = int(cycle / step)
+        if include_last:
+            levs = levs[0] + np.arange(0, nv+1, 1) * step
+        else:
+            levs = levs[0] + np.arange(0, nv, 1) * step
+
+        n = len(levs)
+
+    return np.array(levs), n, factor
+
+
+def select_step24(v1, v2, nv, include_last=True, threshold_factor=3600):
+    v1, v2 = v1 / 15, v2 / 15
+    levs, n, factor = select_step(v1, v2, nv, hour=True,
+                                  include_last=include_last,
+                                  threshold_factor=threshold_factor)
+    return levs * 15, n, factor
+
+
+def select_step360(v1, v2, nv, include_last=True, threshold_factor=3600):
+    return select_step(v1, v2, nv, hour=False,
+                       include_last=include_last,
+                       threshold_factor=threshold_factor)
+
+
+class LocatorBase:
+    def __init__(self, den, include_last=True):
+        self.den = den
+        self._include_last = include_last
+
+    @property
+    def nbins(self):
+        return self.den
+
+    @nbins.setter
+    def nbins(self, v):
+        self.den = v
+
+    def set_params(self, nbins=None):
+        if nbins is not None:
+            self.den = int(nbins)
+
+
+class LocatorHMS(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step24(v1, v2, self.den, self._include_last)
+
+
+class LocatorHM(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step24(v1, v2, self.den, self._include_last,
+                             threshold_factor=60)
+
+
+class LocatorH(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step24(v1, v2, self.den, self._include_last,
+                             threshold_factor=1)
+
+
+class LocatorDMS(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step360(v1, v2, self.den, self._include_last)
+
+
+class LocatorDM(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step360(v1, v2, self.den, self._include_last,
+                              threshold_factor=60)
+
+
+class LocatorD(LocatorBase):
+    def __call__(self, v1, v2):
+        return select_step360(v1, v2, self.den, self._include_last,
+                              threshold_factor=1)
+
+
+class FormatterDMS:
+    deg_mark = r"^{\circ}"
+    min_mark = r"^{\prime}"
+    sec_mark = r"^{\prime\prime}"
+
+    fmt_d = "$%d" + deg_mark + "$"
+    fmt_ds = r"$%d.%s" + deg_mark + "$"
+
+    # %s for sign
+    fmt_d_m = r"$%s%d" + deg_mark + r"\,%02d" + min_mark + "$"
+    fmt_d_ms = r"$%s%d" + deg_mark + r"\,%02d.%s" + min_mark + "$"
+
+    fmt_d_m_partial = "$%s%d" + deg_mark + r"\,%02d" + min_mark + r"\,"
+    fmt_s_partial = "%02d" + sec_mark + "$"
+    fmt_ss_partial = "%02d.%s" + sec_mark + "$"
+
+    def _get_number_fraction(self, factor):
+        ## check for fractional numbers
+        number_fraction = None
+        # check for 60
+
+        for threshold in [1, 60, 3600]:
+            if factor <= threshold:
+                break
+
+            d = factor // threshold
+            int_log_d = int(np.floor(np.log10(d)))
+            if 10**int_log_d == d and d != 1:
+                number_fraction = int_log_d
+                factor = factor // 10**int_log_d
+                return factor, number_fraction
+
+        return factor, number_fraction
+
+    def __call__(self, direction, factor, values):
+        if len(values) == 0:
+            return []
+
+        ss = np.sign(values)
+        signs = ["-" if v < 0 else "" for v in values]
+
+        factor, number_fraction = self._get_number_fraction(factor)
+
+        values = np.abs(values)
+
+        if number_fraction is not None:
+            values, frac_part = divmod(values, 10 ** number_fraction)
+            frac_fmt = "%%0%dd" % (number_fraction,)
+            frac_str = [frac_fmt % (f1,) for f1 in frac_part]
+
+        if factor == 1:
+            if number_fraction is None:
+                return [self.fmt_d % (s * int(v),) for s, v in zip(ss, values)]
+            else:
+                return [self.fmt_ds % (s * int(v), f1)
+                        for s, v, f1 in zip(ss, values, frac_str)]
+        elif factor == 60:
+            deg_part, min_part = divmod(values, 60)
+            if number_fraction is None:
+                return [self.fmt_d_m % (s1, d1, m1)
+                        for s1, d1, m1 in zip(signs, deg_part, min_part)]
+            else:
+                return [self.fmt_d_ms % (s, d1, m1, f1)
+                        for s, d1, m1, f1
+                        in zip(signs, deg_part, min_part, frac_str)]
+
+        elif factor == 3600:
+            if ss[-1] == -1:
+                inverse_order = True
+                values = values[::-1]
+                signs = signs[::-1]
+            else:
+                inverse_order = False
+
+            l_hm_old = ""
+            r = []
+
+            deg_part, min_part_ = divmod(values, 3600)
+            min_part, sec_part = divmod(min_part_, 60)
+
+            if number_fraction is None:
+                sec_str = [self.fmt_s_partial % (s1,) for s1 in sec_part]
+            else:
+                sec_str = [self.fmt_ss_partial % (s1, f1)
+                           for s1, f1 in zip(sec_part, frac_str)]
+
+            for s, d1, m1, s1 in zip(signs, deg_part, min_part, sec_str):
+                l_hm = self.fmt_d_m_partial % (s, d1, m1)
+                if l_hm != l_hm_old:
+                    l_hm_old = l_hm
+                    l = l_hm + s1
+                else:
+                    l = "$" + s + s1
+                r.append(l)
+
+            if inverse_order:
+                return r[::-1]
+            else:
+                return r
+
+        else:  # factor > 3600.
+            return [r"$%s^{\circ}$" % (str(v),) for v in ss*values]
+
+
+class FormatterHMS(FormatterDMS):
+    deg_mark = r"^\mathrm{h}"
+    min_mark = r"^\mathrm{m}"
+    sec_mark = r"^\mathrm{s}"
+
+    fmt_d = "$%d" + deg_mark + "$"
+    fmt_ds = r"$%d.%s" + deg_mark + "$"
+
+    # %s for sign
+    fmt_d_m = r"$%s%d" + deg_mark + r"\,%02d" + min_mark+"$"
+    fmt_d_ms = r"$%s%d" + deg_mark + r"\,%02d.%s" + min_mark+"$"
+
+    fmt_d_m_partial = "$%s%d" + deg_mark + r"\,%02d" + min_mark + r"\,"
+    fmt_s_partial = "%02d" + sec_mark + "$"
+    fmt_ss_partial = "%02d.%s" + sec_mark + "$"
+
+    def __call__(self, direction, factor, values):  # hour
+        return super().__call__(direction, factor, np.asarray(values) / 15)
+
+
+class ExtremeFinderCycle(ExtremeFinderSimple):
+    """
+    When there is a cycle, e.g., longitude goes from 0-360.
+    """
+    def __init__(self, nx, ny,
+                 lon_cycle=360., lat_cycle=None,
+                 lon_minmax=None, lat_minmax=(-90, 90)):
+        self.nx, self.ny = nx, ny
+        self.lon_cycle, self.lat_cycle = lon_cycle, lat_cycle
+        self.lon_minmax = lon_minmax
+        self.lat_minmax = lat_minmax
+
+    def __call__(self, transform_xy, x1, y1, x2, y2):
+        """
+        get extreme values.
+
+        x1, y1, x2, y2 in image coordinates (0-based)
+        nx, ny : number of divisions in each axis
+        """
+        x_, y_ = np.linspace(x1, x2, self.nx), np.linspace(y1, y2, self.ny)
+        x, y = np.meshgrid(x_, y_)
+        lon, lat = transform_xy(np.ravel(x), np.ravel(y))
+
+        # iron out jumps, but algorithm should be improved.
+        # This is just naive way of doing and my fail for some cases.
+        # Consider replacing this with numpy.unwrap
+        # We are ignoring invalid warnings. They are triggered when
+        # comparing arrays with NaNs using > We are already handling
+        # that correctly using np.nanmin and np.nanmax
+        with np.errstate(invalid='ignore'):
+            if self.lon_cycle is not None:
+                lon0 = np.nanmin(lon)
+                lon -= 360. * ((lon - lon0) > 180.)
+            if self.lat_cycle is not None:
+                lat0 = np.nanmin(lat)
+                lat -= 360. * ((lat - lat0) > 180.)
+
+        lon_min, lon_max = np.nanmin(lon), np.nanmax(lon)
+        lat_min, lat_max = np.nanmin(lat), np.nanmax(lat)
+
+        lon_min, lon_max, lat_min, lat_max = \
+                 self._adjust_extremes(lon_min, lon_max, lat_min, lat_max)
+
+        return lon_min, lon_max, lat_min, lat_max
+
+    def _adjust_extremes(self, lon_min, lon_max, lat_min, lat_max):
+
+        lon_min, lon_max, lat_min, lat_max = \
+                 self._add_pad(lon_min, lon_max, lat_min, lat_max)
+
+        # check cycle
+        if self.lon_cycle:
+            lon_max = min(lon_max, lon_min + self.lon_cycle)
+        if self.lat_cycle:
+            lat_max = min(lat_max, lat_min + self.lat_cycle)
+
+        if self.lon_minmax is not None:
+            min0 = self.lon_minmax[0]
+            lon_min = max(min0, lon_min)
+            max0 = self.lon_minmax[1]
+            lon_max = min(max0, lon_max)
+
+        if self.lat_minmax is not None:
+            min0 = self.lat_minmax[0]
+            lat_min = max(min0, lat_min)
+            max0 = self.lat_minmax[1]
+            lat_max = min(max0, lat_max)
+
+        return lon_min, lon_max, lat_min, lat_max
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/clip_path.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/clip_path.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axisartist/clip_path.py	(date 1589417755515)
@@ -0,0 +1,118 @@
+import numpy as np
+from math import degrees
+from matplotlib import cbook
+import math
+
+
+def atan2(dy, dx):
+    if dx == 0 and dy == 0:
+        cbook._warn_external("dx and dy are 0")
+        return 0
+    else:
+        return math.atan2(dy, dx)
+
+
+# FIXME : The current algorithm seems to return incorrect angle when the line
+# ends at the boundary.
+def clip(xlines, ylines, x0, clip="right", xdir=True, ydir=True):
+
+    clipped_xlines = []
+    clipped_ylines = []
+
+    _pos_angles = []
+
+    xsign = 1 if xdir else -1
+    ysign = 1 if ydir else -1
+
+    for x, y in zip(xlines, ylines):
+
+        if clip in ["up", "right"]:
+            b = (x < x0).astype("i")
+            db = b[1:] - b[:-1]
+        else:
+            b = (x > x0).astype("i")
+            db = b[1:] - b[:-1]
+
+        if b[0]:
+            ns = 0
+        else:
+            ns = -1
+        segx, segy = [], []
+        for (i,) in np.argwhere(db):
+            c = db[i]
+            if c == -1:
+                dx = (x0 - x[i])
+                dy = (y[i+1] - y[i]) * (dx / (x[i+1] - x[i]))
+                y0 = y[i] + dy
+                clipped_xlines.append(np.concatenate([segx, x[ns:i+1], [x0]]))
+                clipped_ylines.append(np.concatenate([segy, y[ns:i+1], [y0]]))
+                ns = -1
+                segx, segy = [], []
+
+                if dx == 0. and dy == 0:
+                    dx = x[i+1] - x[i]
+                    dy = y[i+1] - y[i]
+
+                a = degrees(atan2(ysign*dy, xsign*dx))
+                _pos_angles.append((x0, y0, a))
+
+            elif c == 1:
+                dx = (x0 - x[i])
+                dy = (y[i+1] - y[i]) * (dx / (x[i+1] - x[i]))
+                y0 = y[i] + dy
+                segx, segy = [x0], [y0]
+                ns = i+1
+
+                if dx == 0. and dy == 0:
+                    dx = x[i+1] - x[i]
+                    dy = y[i+1] - y[i]
+
+                a = degrees(atan2(ysign*dy, xsign*dx))
+                _pos_angles.append((x0, y0, a))
+
+        if ns != -1:
+            clipped_xlines.append(np.concatenate([segx, x[ns:]]))
+            clipped_ylines.append(np.concatenate([segy, y[ns:]]))
+
+    return clipped_xlines, clipped_ylines, _pos_angles
+
+
+def clip_line_to_rect(xline, yline, bbox):
+
+    x0, y0, x1, y1 = bbox.extents
+
+    xdir = x1 > x0
+    ydir = y1 > y0
+
+    if x1 > x0:
+        lx1, ly1, c_right_ = clip([xline], [yline], x1,
+                                  clip="right", xdir=xdir, ydir=ydir)
+        lx2, ly2, c_left_ = clip(lx1, ly1, x0,
+                                 clip="left", xdir=xdir, ydir=ydir)
+    else:
+        lx1, ly1, c_right_ = clip([xline], [yline], x0,
+                                  clip="right", xdir=xdir, ydir=ydir)
+        lx2, ly2, c_left_ = clip(lx1, ly1, x1,
+                                 clip="left", xdir=xdir, ydir=ydir)
+
+    if y1 > y0:
+        ly3, lx3, c_top_ = clip(ly2, lx2, y1,
+                                clip="right", xdir=ydir, ydir=xdir)
+        ly4, lx4, c_bottom_ = clip(ly3, lx3, y0,
+                                   clip="left", xdir=ydir, ydir=xdir)
+    else:
+        ly3, lx3, c_top_ = clip(ly2, lx2, y0,
+                                clip="right", xdir=ydir, ydir=xdir)
+        ly4, lx4, c_bottom_ = clip(ly3, lx3, y1,
+                                   clip="left", xdir=ydir, ydir=xdir)
+
+    c_left = [((x, y), (a + 90) % 180 - 90) for x, y, a in c_left_
+              if bbox.containsy(y)]
+    c_bottom = [((x, y), (90 - a) % 180) for y, x, a in c_bottom_
+                if bbox.containsx(x)]
+    c_right = [((x, y), (a + 90) % 180 + 90) for x, y, a in c_right_
+               if bbox.containsy(y)]
+    c_top = [((x, y), (90 - a) % 180 + 180) for y, x, a in c_top_
+             if bbox.containsx(x)]
+
+    return list(zip(lx4, ly4)), [c_left, c_bottom, c_right, c_top]
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/__init__.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/__init__.py	(date 1589417755518)
@@ -0,0 +1,5 @@
+from . import axes_size as Size
+from .axes_divider import Divider, SubplotDivider, make_axes_locatable
+from .axes_grid import Grid, ImageGrid, AxesGrid
+
+from .parasite_axes import host_subplot, host_axes
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/mpl_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/mpl_axes.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/mpl_axes.py	(date 1589417755518)
@@ -0,0 +1,134 @@
+import matplotlib.axes as maxes
+from matplotlib.artist import Artist
+from matplotlib.axis import XAxis, YAxis
+
+
+class SimpleChainedObjects:
+    def __init__(self, objects):
+        self._objects = objects
+
+    def __getattr__(self, k):
+        _a = SimpleChainedObjects([getattr(a, k) for a in self._objects])
+        return _a
+
+    def __call__(self, *args, **kwargs):
+        for m in self._objects:
+            m(*args, **kwargs)
+
+
+class Axes(maxes.Axes):
+
+    class AxisDict(dict):
+        def __init__(self, axes):
+            self.axes = axes
+            super().__init__()
+
+        def __getitem__(self, k):
+            if isinstance(k, tuple):
+                r = SimpleChainedObjects(
+                    # super() within a list comprehension needs explicit args.
+                    [super(Axes.AxisDict, self).__getitem__(k1) for k1 in k])
+                return r
+            elif isinstance(k, slice):
+                if k.start is None and k.stop is None and k.step is None:
+                    return SimpleChainedObjects(list(self.values()))
+                else:
+                    raise ValueError("Unsupported slice")
+            else:
+                return dict.__getitem__(self, k)
+
+        def __call__(self, *v, **kwargs):
+            return maxes.Axes.axis(self.axes, *v, **kwargs)
+
+    def _init_axis_artists(self, axes=None):
+        if axes is None:
+            axes = self
+        self._axislines = self.AxisDict(self)
+        self._axislines.update(
+            bottom=SimpleAxisArtist(self.xaxis, 1, self.spines["bottom"]),
+            top=SimpleAxisArtist(self.xaxis, 2, self.spines["top"]),
+            left=SimpleAxisArtist(self.yaxis, 1, self.spines["left"]),
+            right=SimpleAxisArtist(self.yaxis, 2, self.spines["right"]))
+
+    @property
+    def axis(self):
+        return self._axislines
+
+    def cla(self):
+        super().cla()
+        self._init_axis_artists()
+
+
+class SimpleAxisArtist(Artist):
+    def __init__(self, axis, axisnum, spine):
+        self._axis = axis
+        self._axisnum = axisnum
+        self.line = spine
+
+        if isinstance(axis, XAxis):
+            self._axis_direction = ["bottom", "top"][axisnum-1]
+        elif isinstance(axis, YAxis):
+            self._axis_direction = ["left", "right"][axisnum-1]
+        else:
+            raise ValueError(
+                f"axis must be instance of XAxis or YAxis, but got {axis}")
+        Artist.__init__(self)
+
+    @property
+    def major_ticks(self):
+        tickline = "tick%dline" % self._axisnum
+        return SimpleChainedObjects([getattr(tick, tickline)
+                                     for tick in self._axis.get_major_ticks()])
+
+    @property
+    def major_ticklabels(self):
+        label = "label%d" % self._axisnum
+        return SimpleChainedObjects([getattr(tick, label)
+                                     for tick in self._axis.get_major_ticks()])
+
+    @property
+    def label(self):
+        return self._axis.label
+
+    def set_visible(self, b):
+        self.toggle(all=b)
+        self.line.set_visible(b)
+        self._axis.set_visible(True)
+        Artist.set_visible(self, b)
+
+    def set_label(self, txt):
+        self._axis.set_label_text(txt)
+
+    def toggle(self, all=None, ticks=None, ticklabels=None, label=None):
+
+        if all:
+            _ticks, _ticklabels, _label = True, True, True
+        elif all is not None:
+            _ticks, _ticklabels, _label = False, False, False
+        else:
+            _ticks, _ticklabels, _label = None, None, None
+
+        if ticks is not None:
+            _ticks = ticks
+        if ticklabels is not None:
+            _ticklabels = ticklabels
+        if label is not None:
+            _label = label
+
+        tickOn = "tick%dOn" % self._axisnum
+        labelOn = "label%dOn" % self._axisnum
+
+        if _ticks is not None:
+            tickparam = {tickOn: _ticks}
+            self._axis.set_tick_params(**tickparam)
+        if _ticklabels is not None:
+            tickparam = {labelOn: _ticklabels}
+            self._axis.set_tick_params(**tickparam)
+
+        if _label is not None:
+            pos = self._axis.get_label_position()
+            if (pos == self._axis_direction) and not _label:
+                self._axis.label.set_visible(False)
+            elif _label:
+                self._axis.label.set_visible(True)
+                self._axis.set_label_position(self._axis_direction)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_grid.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_grid.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_grid.py	(date 1589417755518)
@@ -0,0 +1,785 @@
+from numbers import Number
+
+import matplotlib as mpl
+from matplotlib import cbook
+import matplotlib.axes as maxes
+import matplotlib.ticker as ticker
+from matplotlib.gridspec import SubplotSpec
+
+from .axes_divider import Size, SubplotDivider, Divider
+from .mpl_axes import Axes
+
+
+def _extend_axes_pad(value):
+    # Check whether a list/tuple/array or scalar has been passed
+    ret = value
+    if not hasattr(ret, "__getitem__"):
+        ret = (value, value)
+    return ret
+
+
+def _tick_only(ax, bottom_on, left_on):
+    bottom_off = not bottom_on
+    left_off = not left_on
+    # [l.set_visible(bottom_off) for l in ax.get_xticklabels()]
+    # [l.set_visible(left_off) for l in ax.get_yticklabels()]
+    # ax.xaxis.label.set_visible(bottom_off)
+    # ax.yaxis.label.set_visible(left_off)
+    ax.axis["bottom"].toggle(ticklabels=bottom_off, label=bottom_off)
+    ax.axis["left"].toggle(ticklabels=left_off, label=left_off)
+
+
+class CbarAxesBase:
+
+    @cbook._rename_parameter("3.2", "locator", "ticks")
+    def colorbar(self, mappable, *, ticks=None, **kwargs):
+
+        if self.orientation in ["top", "bottom"]:
+            orientation = "horizontal"
+        else:
+            orientation = "vertical"
+
+        if mpl.rcParams["mpl_toolkits.legacy_colorbar"]:
+            cbook.warn_deprecated(
+                "3.2", message="Since %(since)s, mpl_toolkits's own colorbar "
+                "implementation is deprecated; it will be removed "
+                "%(removal)s.  Set the 'mpl_toolkits.legacy_colorbar' rcParam "
+                "to False to use Matplotlib's default colorbar implementation "
+                "and suppress this deprecation warning.")
+            if ticks is None:
+                ticks = ticker.MaxNLocator(5)  # For backcompat.
+            from .colorbar import Colorbar
+        else:
+            from matplotlib.colorbar import Colorbar
+        cb = Colorbar(
+            self, mappable, orientation=orientation, ticks=ticks, **kwargs)
+        self._config_axes()
+
+        def on_changed(m):
+            cb.set_cmap(m.get_cmap())
+            cb.set_clim(m.get_clim())
+            cb.update_bruteforce(m)
+
+        self.cbid = mappable.callbacksSM.connect('changed', on_changed)
+        mappable.colorbar = cb
+
+        if mpl.rcParams["mpl_toolkits.legacy_colorbar"]:
+            self.locator = cb.cbar_axis.get_major_locator()
+        else:
+            self.locator = cb.locator
+
+        return cb
+
+    def _config_axes(self):
+        """Make an axes patch and outline."""
+        ax = self
+        ax.set_navigate(False)
+
+        ax.axis[:].toggle(all=False)
+        b = self._default_label_on
+        ax.axis[self.orientation].toggle(all=b)
+
+        # for axis in ax.axis.values():
+        #     axis.major_ticks.set_visible(False)
+        #     axis.minor_ticks.set_visible(False)
+        #     axis.major_ticklabels.set_visible(False)
+        #     axis.minor_ticklabels.set_visible(False)
+        #     axis.label.set_visible(False)
+
+        # axis = ax.axis[self.orientation]
+        # axis.major_ticks.set_visible(True)
+        # axis.minor_ticks.set_visible(True)
+
+        #axis.major_ticklabels.set_size(
+        #    int(axis.major_ticklabels.get_size()*.9))
+        #axis.major_tick_pad = 3
+
+        # axis.major_ticklabels.set_visible(b)
+        # axis.minor_ticklabels.set_visible(b)
+        # axis.label.set_visible(b)
+
+    def toggle_label(self, b):
+        self._default_label_on = b
+        axis = self.axis[self.orientation]
+        axis.toggle(ticklabels=b, label=b)
+        #axis.major_ticklabels.set_visible(b)
+        #axis.minor_ticklabels.set_visible(b)
+        #axis.label.set_visible(b)
+
+
+class CbarAxes(CbarAxesBase, Axes):
+    def __init__(self, *args, orientation, **kwargs):
+        self.orientation = orientation
+        self._default_label_on = True
+        self.locator = None
+        super().__init__(*args, **kwargs)
+
+    def cla(self):
+        super().cla()
+        self._config_axes()
+
+
+class Grid:
+    """
+    A class that creates a grid of Axes. In matplotlib, the axes
+    location (and size) is specified in the normalized figure
+    coordinates. This may not be ideal for images that needs to be
+    displayed with a given aspect ratio.  For example, displaying
+    images of a same size with some fixed padding between them cannot
+    be easily done in matplotlib. AxesGrid is used in such case.
+    """
+
+    _defaultAxesClass = Axes
+
+    def __init__(self, fig,
+                 rect,
+                 nrows_ncols,
+                 ngrids=None,
+                 direction="row",
+                 axes_pad=0.02,
+                 add_all=True,
+                 share_all=False,
+                 share_x=True,
+                 share_y=True,
+                 #aspect=True,
+                 label_mode="L",
+                 axes_class=None,
+                 ):
+        """
+        Parameters
+        ----------
+        fig : `.Figure`
+            The parent figure.
+        rect : (float, float, float, float) or int
+            The axes position, as a ``(left, bottom, width, height)`` tuple or
+            as a three-digit subplot position code (e.g., "121").
+        direction : {"row", "column"}, default: "row"
+        axes_pad : float or (float, float), default: 0.02
+            Padding or (horizontal padding, vertical padding) between axes, in
+            inches.
+        add_all : bool, default: True
+        share_all : bool, default: False
+        share_x : bool, default: True
+        share_y : bool, default: True
+        label_mode : {"L", "1", "all"}, default: "L"
+            Determines which axes will get tick labels:
+
+            - "L": All axes on the left column get vertical tick labels;
+              all axes on the bottom row get horizontal tick labels.
+            - "1": Only the bottom left axes is labelled.
+            - "all": all axes are labelled.
+
+        axes_class : a type that is a subclass of `matplotlib.axes.Axes`, \
+default: None
+        """
+        self._nrows, self._ncols = nrows_ncols
+
+        if ngrids is None:
+            ngrids = self._nrows * self._ncols
+        else:
+            if not 0 < ngrids <= self._nrows * self._ncols:
+                raise Exception("")
+
+        self.ngrids = ngrids
+
+        self._init_axes_pad(axes_pad)
+
+        if direction not in ["column", "row"]:
+            raise Exception("")
+
+        self._direction = direction
+
+        if axes_class is None:
+            axes_class = self._defaultAxesClass
+            axes_class_args = {}
+        else:
+            if (isinstance(axes_class, type)
+                    and issubclass(axes_class,
+                                   self._defaultAxesClass.Axes)):
+                axes_class_args = {}
+            else:
+                axes_class, axes_class_args = axes_class
+
+        self.axes_all = []
+        self.axes_column = [[] for _ in range(self._ncols)]
+        self.axes_row = [[] for _ in range(self._nrows)]
+
+        h = []
+        v = []
+        if isinstance(rect, (str, Number)):
+            self._divider = SubplotDivider(fig, rect, horizontal=h, vertical=v,
+                                           aspect=False)
+        elif isinstance(rect, SubplotSpec):
+            self._divider = SubplotDivider(fig, rect, horizontal=h, vertical=v,
+                                           aspect=False)
+        elif len(rect) == 3:
+            kw = dict(horizontal=h, vertical=v, aspect=False)
+            self._divider = SubplotDivider(fig, *rect, **kw)
+        elif len(rect) == 4:
+            self._divider = Divider(fig, rect, horizontal=h, vertical=v,
+                                    aspect=False)
+        else:
+            raise Exception("")
+
+        rect = self._divider.get_position()
+
+        # reference axes
+        self._column_refax = [None for _ in range(self._ncols)]
+        self._row_refax = [None for _ in range(self._nrows)]
+        self._refax = None
+
+        for i in range(self.ngrids):
+
+            col, row = self._get_col_row(i)
+
+            if share_all:
+                sharex = self._refax
+                sharey = self._refax
+            else:
+                if share_x:
+                    sharex = self._column_refax[col]
+                else:
+                    sharex = None
+
+                if share_y:
+                    sharey = self._row_refax[row]
+                else:
+                    sharey = None
+
+            ax = axes_class(fig, rect, sharex=sharex, sharey=sharey,
+                            **axes_class_args)
+
+            if share_all:
+                if self._refax is None:
+                    self._refax = ax
+            else:
+                if sharex is None:
+                    self._column_refax[col] = ax
+                if sharey is None:
+                    self._row_refax[row] = ax
+
+            self.axes_all.append(ax)
+            self.axes_column[col].append(ax)
+            self.axes_row[row].append(ax)
+
+        self.axes_llc = self.axes_column[0][-1]
+
+        self._update_locators()
+
+        if add_all:
+            for ax in self.axes_all:
+                fig.add_axes(ax)
+
+        self.set_label_mode(label_mode)
+
+    def _init_axes_pad(self, axes_pad):
+        axes_pad = _extend_axes_pad(axes_pad)
+        self._axes_pad = axes_pad
+
+        self._horiz_pad_size = Size.Fixed(axes_pad[0])
+        self._vert_pad_size = Size.Fixed(axes_pad[1])
+
+    def _update_locators(self):
+
+        h = []
+
+        h_ax_pos = []
+
+        for _ in self._column_refax:
+            #if h: h.append(Size.Fixed(self._axes_pad))
+            if h:
+                h.append(self._horiz_pad_size)
+
+            h_ax_pos.append(len(h))
+
+            sz = Size.Scaled(1)
+            h.append(sz)
+
+        v = []
+
+        v_ax_pos = []
+        for _ in self._row_refax[::-1]:
+            #if v: v.append(Size.Fixed(self._axes_pad))
+            if v:
+                v.append(self._vert_pad_size)
+
+            v_ax_pos.append(len(v))
+            sz = Size.Scaled(1)
+            v.append(sz)
+
+        for i in range(self.ngrids):
+            col, row = self._get_col_row(i)
+            locator = self._divider.new_locator(nx=h_ax_pos[col],
+                                ny=v_ax_pos[self._nrows - 1 - row])
+            self.axes_all[i].set_axes_locator(locator)
+
+        self._divider.set_horizontal(h)
+        self._divider.set_vertical(v)
+
+    def _get_col_row(self, n):
+        if self._direction == "column":
+            col, row = divmod(n, self._nrows)
+        else:
+            row, col = divmod(n, self._ncols)
+
+        return col, row
+
+    # Good to propagate __len__ if we have __getitem__
+    def __len__(self):
+        return len(self.axes_all)
+
+    def __getitem__(self, i):
+        return self.axes_all[i]
+
+    def get_geometry(self):
+        """
+        Return the number of rows and columns of the grid as (nrows, ncols).
+        """
+        return self._nrows, self._ncols
+
+    def set_axes_pad(self, axes_pad):
+        """
+        Set the padding between the axes.
+
+        Parameters
+        ----------
+        axes_pad : (float, float)
+            The padding (horizontal pad, vertical pad) in inches.
+        """
+        self._axes_pad = axes_pad
+
+        # These two lines actually differ from ones in _init_axes_pad
+        self._horiz_pad_size.fixed_size = axes_pad[0]
+        self._vert_pad_size.fixed_size = axes_pad[1]
+
+    def get_axes_pad(self):
+        """
+        Return the axes padding.
+
+        Returns
+        -------
+        hpad, vpad
+            Padding (horizontal pad, vertical pad) in inches.
+        """
+        return self._axes_pad
+
+    def set_aspect(self, aspect):
+        """Set the aspect of the SubplotDivider."""
+        self._divider.set_aspect(aspect)
+
+    def get_aspect(self):
+        """Return the aspect of the SubplotDivider."""
+        return self._divider.get_aspect()
+
+    def set_label_mode(self, mode):
+        """
+        Define which axes have tick labels.
+
+        Parameters
+        ----------
+        mode : {"L", "1", "all"}
+            The label mode:
+
+            - "L": All axes on the left column get vertical tick labels;
+              all axes on the bottom row get horizontal tick labels.
+            - "1": Only the bottom left axes is labelled.
+            - "all": all axes are labelled.
+        """
+        if mode == "all":
+            for ax in self.axes_all:
+                _tick_only(ax, False, False)
+        elif mode == "L":
+            # left-most axes
+            for ax in self.axes_column[0][:-1]:
+                _tick_only(ax, bottom_on=True, left_on=False)
+            # lower-left axes
+            ax = self.axes_column[0][-1]
+            _tick_only(ax, bottom_on=False, left_on=False)
+
+            for col in self.axes_column[1:]:
+                # axes with no labels
+                for ax in col[:-1]:
+                    _tick_only(ax, bottom_on=True, left_on=True)
+
+                # bottom
+                ax = col[-1]
+                _tick_only(ax, bottom_on=False, left_on=True)
+
+        elif mode == "1":
+            for ax in self.axes_all:
+                _tick_only(ax, bottom_on=True, left_on=True)
+
+            ax = self.axes_llc
+            _tick_only(ax, bottom_on=False, left_on=False)
+
+    def get_divider(self):
+        return self._divider
+
+    def set_axes_locator(self, locator):
+        self._divider.set_locator(locator)
+
+    def get_axes_locator(self):
+        return self._divider.get_locator()
+
+    def get_vsize_hsize(self):
+
+        return self._divider.get_vsize_hsize()
+#         from axes_size import AddList
+
+#         vsize = AddList(self._divider.get_vertical())
+#         hsize = AddList(self._divider.get_horizontal())
+
+#         return vsize, hsize
+
+
+class ImageGrid(Grid):
+    """
+    A class that creates a grid of Axes. In matplotlib, the axes
+    location (and size) is specified in the normalized figure
+    coordinates. This may not be ideal for images that needs to be
+    displayed with a given aspect ratio.  For example, displaying
+    images of a same size with some fixed padding between them cannot
+    be easily done in matplotlib. ImageGrid is used in such case.
+    """
+
+    _defaultCbarAxesClass = CbarAxes
+
+    def __init__(self, fig,
+                 rect,
+                 nrows_ncols,
+                 ngrids=None,
+                 direction="row",
+                 axes_pad=0.02,
+                 add_all=True,
+                 share_all=False,
+                 aspect=True,
+                 label_mode="L",
+                 cbar_mode=None,
+                 cbar_location="right",
+                 cbar_pad=None,
+                 cbar_size="5%",
+                 cbar_set_cax=True,
+                 axes_class=None,
+                 ):
+        """
+        Parameters
+        ----------
+        fig : `.Figure`
+            The parent figure.
+        rect : (float, float, float, float) or int
+            The axes position, as a ``(left, bottom, width, height)`` tuple or
+            as a three-digit subplot position code (e.g., "121").
+        direction : {"row", "column"}, default: "row"
+        axes_pad : float or (float, float), default: 0.02
+            Padding or (horizontal padding, vertical padding) between axes, in
+            inches.
+        add_all : bool, default: True
+        share_all : bool, default: False
+        aspect : bool, default: True
+        label_mode : {"L", "1", "all"}, default: "L"
+            Determines which axes will get tick labels:
+
+            - "L": All axes on the left column get vertical tick labels;
+              all axes on the bottom row get horizontal tick labels.
+            - "1": Only the bottom left axes is labelled.
+            - "all": all axes are labelled.
+
+        cbar_mode : {"each", "single", "edge", None }, default: None
+        cbar_location : {"left", "right", "bottom", "top"}, default: "right"
+        cbar_pad : float, default: None
+        cbar_size : size specification (see `.Size.from_any`), default: "5%"
+        cbar_set_cax : bool, default: True
+            If True, each axes in the grid has a *cax* attribute that is bound
+            to associated *cbar_axes*.
+        axes_class : a type that is a subclass of `matplotlib.axes.Axes`, \
+default: None
+        """
+        self._nrows, self._ncols = nrows_ncols
+
+        if ngrids is None:
+            ngrids = self._nrows * self._ncols
+        else:
+            if not 0 < ngrids <= self._nrows * self._ncols:
+                raise Exception
+
+        self.ngrids = ngrids
+
+        axes_pad = _extend_axes_pad(axes_pad)
+        self._axes_pad = axes_pad
+
+        self._colorbar_mode = cbar_mode
+        self._colorbar_location = cbar_location
+        if cbar_pad is None:
+            # horizontal or vertical arrangement?
+            if cbar_location in ("left", "right"):
+                self._colorbar_pad = axes_pad[0]
+            else:
+                self._colorbar_pad = axes_pad[1]
+        else:
+            self._colorbar_pad = cbar_pad
+
+        self._colorbar_size = cbar_size
+
+        self._init_axes_pad(axes_pad)
+
+        if direction not in ["column", "row"]:
+            raise Exception("")
+
+        self._direction = direction
+
+        if axes_class is None:
+            axes_class = self._defaultAxesClass
+            axes_class_args = {}
+        else:
+            if isinstance(axes_class, maxes.Axes):
+                axes_class_args = {}
+            else:
+                axes_class, axes_class_args = axes_class
+
+        self.axes_all = []
+        self.axes_column = [[] for _ in range(self._ncols)]
+        self.axes_row = [[] for _ in range(self._nrows)]
+
+        self.cbar_axes = []
+
+        h = []
+        v = []
+        if isinstance(rect, (str, Number)):
+            self._divider = SubplotDivider(fig, rect, horizontal=h, vertical=v,
+                                           aspect=aspect)
+        elif isinstance(rect, SubplotSpec):
+            self._divider = SubplotDivider(fig, rect, horizontal=h, vertical=v,
+                                           aspect=aspect)
+        elif len(rect) == 3:
+            kw = dict(horizontal=h, vertical=v, aspect=aspect)
+            self._divider = SubplotDivider(fig, *rect, **kw)
+        elif len(rect) == 4:
+            self._divider = Divider(fig, rect, horizontal=h, vertical=v,
+                                    aspect=aspect)
+        else:
+            raise Exception("")
+
+        rect = self._divider.get_position()
+
+        # reference axes
+        self._column_refax = [None for _ in range(self._ncols)]
+        self._row_refax = [None for _ in range(self._nrows)]
+        self._refax = None
+
+        for i in range(self.ngrids):
+
+            col, row = self._get_col_row(i)
+
+            if share_all:
+                if self.axes_all:
+                    sharex = self.axes_all[0]
+                    sharey = self.axes_all[0]
+                else:
+                    sharex = None
+                    sharey = None
+            else:
+                sharex = self._column_refax[col]
+                sharey = self._row_refax[row]
+
+            ax = axes_class(fig, rect, sharex=sharex, sharey=sharey,
+                            **axes_class_args)
+
+            self.axes_all.append(ax)
+            self.axes_column[col].append(ax)
+            self.axes_row[row].append(ax)
+
+            if share_all:
+                if self._refax is None:
+                    self._refax = ax
+            if sharex is None:
+                self._column_refax[col] = ax
+            if sharey is None:
+                self._row_refax[row] = ax
+
+            cax = self._defaultCbarAxesClass(fig, rect,
+                                        orientation=self._colorbar_location)
+            self.cbar_axes.append(cax)
+
+        self.axes_llc = self.axes_column[0][-1]
+
+        self._update_locators()
+
+        if add_all:
+            for ax in self.axes_all+self.cbar_axes:
+                fig.add_axes(ax)
+
+        if cbar_set_cax:
+            if self._colorbar_mode == "single":
+                for ax in self.axes_all:
+                    ax.cax = self.cbar_axes[0]
+            elif self._colorbar_mode == "edge":
+                for index, ax in enumerate(self.axes_all):
+                    col, row = self._get_col_row(index)
+                    if self._colorbar_location in ("left", "right"):
+                        ax.cax = self.cbar_axes[row]
+                    else:
+                        ax.cax = self.cbar_axes[col]
+            else:
+                for ax, cax in zip(self.axes_all, self.cbar_axes):
+                    ax.cax = cax
+
+        self.set_label_mode(label_mode)
+
+    def _update_locators(self):
+
+        h = []
+        v = []
+
+        h_ax_pos = []
+        h_cb_pos = []
+        if (self._colorbar_mode == "single" and
+             self._colorbar_location in ('left', 'bottom')):
+            if self._colorbar_location == "left":
+                #sz = Size.Fraction(Size.AxesX(self.axes_llc), self._nrows)
+                sz = Size.Fraction(self._nrows, Size.AxesX(self.axes_llc))
+                h.append(Size.from_any(self._colorbar_size, sz))
+                h.append(Size.from_any(self._colorbar_pad, sz))
+                locator = self._divider.new_locator(nx=0, ny=0, ny1=-1)
+            elif self._colorbar_location == "bottom":
+                #sz = Size.Fraction(Size.AxesY(self.axes_llc), self._ncols)
+                sz = Size.Fraction(self._ncols, Size.AxesY(self.axes_llc))
+                v.append(Size.from_any(self._colorbar_size, sz))
+                v.append(Size.from_any(self._colorbar_pad, sz))
+                locator = self._divider.new_locator(nx=0, nx1=-1, ny=0)
+            for i in range(self.ngrids):
+                self.cbar_axes[i].set_visible(False)
+            self.cbar_axes[0].set_axes_locator(locator)
+            self.cbar_axes[0].set_visible(True)
+
+        for col, ax in enumerate(self.axes_row[0]):
+            if h:
+                h.append(self._horiz_pad_size)  # Size.Fixed(self._axes_pad))
+
+            if ax:
+                sz = Size.AxesX(ax, aspect="axes", ref_ax=self.axes_all[0])
+            else:
+                sz = Size.AxesX(self.axes_all[0],
+                                aspect="axes", ref_ax=self.axes_all[0])
+
+            if (self._colorbar_mode == "each" or
+                    (self._colorbar_mode == 'edge' and
+                        col == 0)) and self._colorbar_location == "left":
+                h_cb_pos.append(len(h))
+                h.append(Size.from_any(self._colorbar_size, sz))
+                h.append(Size.from_any(self._colorbar_pad, sz))
+
+            h_ax_pos.append(len(h))
+
+            h.append(sz)
+
+            if ((self._colorbar_mode == "each" or
+                    (self._colorbar_mode == 'edge' and
+                        col == self._ncols - 1)) and
+                    self._colorbar_location == "right"):
+                h.append(Size.from_any(self._colorbar_pad, sz))
+                h_cb_pos.append(len(h))
+                h.append(Size.from_any(self._colorbar_size, sz))
+
+        v_ax_pos = []
+        v_cb_pos = []
+        for row, ax in enumerate(self.axes_column[0][::-1]):
+            if v:
+                v.append(self._vert_pad_size)  # Size.Fixed(self._axes_pad))
+
+            if ax:
+                sz = Size.AxesY(ax, aspect="axes", ref_ax=self.axes_all[0])
+            else:
+                sz = Size.AxesY(self.axes_all[0],
+                                aspect="axes", ref_ax=self.axes_all[0])
+
+            if (self._colorbar_mode == "each" or
+                    (self._colorbar_mode == 'edge' and
+                        row == 0)) and self._colorbar_location == "bottom":
+                v_cb_pos.append(len(v))
+                v.append(Size.from_any(self._colorbar_size, sz))
+                v.append(Size.from_any(self._colorbar_pad, sz))
+
+            v_ax_pos.append(len(v))
+            v.append(sz)
+
+            if ((self._colorbar_mode == "each" or
+                    (self._colorbar_mode == 'edge' and
+                        row == self._nrows - 1)) and
+                        self._colorbar_location == "top"):
+                v.append(Size.from_any(self._colorbar_pad, sz))
+                v_cb_pos.append(len(v))
+                v.append(Size.from_any(self._colorbar_size, sz))
+
+        for i in range(self.ngrids):
+            col, row = self._get_col_row(i)
+            #locator = self._divider.new_locator(nx=4*col,
+            #                                    ny=2*(self._nrows - row - 1))
+            locator = self._divider.new_locator(nx=h_ax_pos[col],
+                                                ny=v_ax_pos[self._nrows-1-row])
+            self.axes_all[i].set_axes_locator(locator)
+
+            if self._colorbar_mode == "each":
+                if self._colorbar_location in ("right", "left"):
+                    locator = self._divider.new_locator(
+                        nx=h_cb_pos[col], ny=v_ax_pos[self._nrows - 1 - row])
+
+                elif self._colorbar_location in ("top", "bottom"):
+                    locator = self._divider.new_locator(
+                        nx=h_ax_pos[col], ny=v_cb_pos[self._nrows - 1 - row])
+
+                self.cbar_axes[i].set_axes_locator(locator)
+            elif self._colorbar_mode == 'edge':
+                if ((self._colorbar_location == 'left' and col == 0) or
+                        (self._colorbar_location == 'right'
+                         and col == self._ncols-1)):
+                    locator = self._divider.new_locator(
+                        nx=h_cb_pos[0], ny=v_ax_pos[self._nrows - 1 - row])
+                    self.cbar_axes[row].set_axes_locator(locator)
+                elif ((self._colorbar_location == 'bottom' and
+                       row == self._nrows - 1) or
+                        (self._colorbar_location == 'top' and row == 0)):
+                    locator = self._divider.new_locator(nx=h_ax_pos[col],
+                                                        ny=v_cb_pos[0])
+                    self.cbar_axes[col].set_axes_locator(locator)
+
+        if self._colorbar_mode == "single":
+            if self._colorbar_location == "right":
+                #sz = Size.Fraction(Size.AxesX(self.axes_llc), self._nrows)
+                sz = Size.Fraction(self._nrows, Size.AxesX(self.axes_llc))
+                h.append(Size.from_any(self._colorbar_pad, sz))
+                h.append(Size.from_any(self._colorbar_size, sz))
+                locator = self._divider.new_locator(nx=-2, ny=0, ny1=-1)
+            elif self._colorbar_location == "top":
+                #sz = Size.Fraction(Size.AxesY(self.axes_llc), self._ncols)
+                sz = Size.Fraction(self._ncols, Size.AxesY(self.axes_llc))
+                v.append(Size.from_any(self._colorbar_pad, sz))
+                v.append(Size.from_any(self._colorbar_size, sz))
+                locator = self._divider.new_locator(nx=0, nx1=-1, ny=-2)
+            if self._colorbar_location in ("right", "top"):
+                for i in range(self.ngrids):
+                    self.cbar_axes[i].set_visible(False)
+                self.cbar_axes[0].set_axes_locator(locator)
+                self.cbar_axes[0].set_visible(True)
+        elif self._colorbar_mode == "each":
+            for i in range(self.ngrids):
+                self.cbar_axes[i].set_visible(True)
+        elif self._colorbar_mode == "edge":
+            if self._colorbar_location in ('right', 'left'):
+                count = self._nrows
+            else:
+                count = self._ncols
+            for i in range(count):
+                self.cbar_axes[i].set_visible(True)
+            for j in range(i + 1, self.ngrids):
+                self.cbar_axes[j].set_visible(False)
+        else:
+            for i in range(self.ngrids):
+                self.cbar_axes[i].set_visible(False)
+                self.cbar_axes[i].set_position([1., 1., 0.001, 0.001],
+                                               which="active")
+
+        self._divider.set_horizontal(h)
+        self._divider.set_vertical(v)
+
+
+AxesGrid = ImageGrid
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/inset_locator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/inset_locator.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/inset_locator.py	(date 1589417755518)
@@ -0,0 +1,679 @@
+"""
+A collection of functions and objects for creating or placing inset axes.
+"""
+
+from matplotlib import cbook, docstring
+from matplotlib.offsetbox import AnchoredOffsetbox
+from matplotlib.patches import Patch, Rectangle
+from matplotlib.path import Path
+from matplotlib.transforms import Bbox, BboxTransformTo
+from matplotlib.transforms import IdentityTransform, TransformedBbox
+
+from . import axes_size as Size
+from .parasite_axes import HostAxes
+
+
+class InsetPosition:
+    @docstring.dedent_interpd
+    def __init__(self, parent, lbwh):
+        """
+        An object for positioning an inset axes.
+
+        This is created by specifying the normalized coordinates in the axes,
+        instead of the figure.
+
+        Parameters
+        ----------
+        parent : `matplotlib.axes.Axes`
+            Axes to use for normalizing coordinates.
+
+        lbwh : iterable of four floats
+            The left edge, bottom edge, width, and height of the inset axes, in
+            units of the normalized coordinate of the *parent* axes.
+
+        See Also
+        --------
+        :meth:`matplotlib.axes.Axes.set_axes_locator`
+
+        Examples
+        --------
+        The following bounds the inset axes to a box with 20%% of the parent
+        axes's height and 40%% of the width. The size of the axes specified
+        ([0, 0, 1, 1]) ensures that the axes completely fills the bounding box:
+
+        >>> parent_axes = plt.gca()
+        >>> ax_ins = plt.axes([0, 0, 1, 1])
+        >>> ip = InsetPosition(ax, [0.5, 0.1, 0.4, 0.2])
+        >>> ax_ins.set_axes_locator(ip)
+        """
+        self.parent = parent
+        self.lbwh = lbwh
+
+    def __call__(self, ax, renderer):
+        bbox_parent = self.parent.get_position(original=False)
+        trans = BboxTransformTo(bbox_parent)
+        bbox_inset = Bbox.from_bounds(*self.lbwh)
+        bb = TransformedBbox(bbox_inset, trans)
+        return bb
+
+
+class AnchoredLocatorBase(AnchoredOffsetbox):
+    def __init__(self, bbox_to_anchor, offsetbox, loc,
+                 borderpad=0.5, bbox_transform=None):
+        super().__init__(
+            loc, pad=0., child=None, borderpad=borderpad,
+            bbox_to_anchor=bbox_to_anchor, bbox_transform=bbox_transform
+        )
+
+    def draw(self, renderer):
+        raise RuntimeError("No draw method should be called")
+
+    def __call__(self, ax, renderer):
+        self.axes = ax
+
+        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
+        self._update_offset_func(renderer, fontsize)
+
+        width, height, xdescent, ydescent = self.get_extent(renderer)
+
+        px, py = self.get_offset(width, height, 0, 0, renderer)
+        bbox_canvas = Bbox.from_bounds(px, py, width, height)
+        tr = ax.figure.transFigure.inverted()
+        bb = TransformedBbox(bbox_canvas, tr)
+
+        return bb
+
+
+class AnchoredSizeLocator(AnchoredLocatorBase):
+    def __init__(self, bbox_to_anchor, x_size, y_size, loc,
+                 borderpad=0.5, bbox_transform=None):
+        super().__init__(
+            bbox_to_anchor, None, loc,
+            borderpad=borderpad, bbox_transform=bbox_transform
+        )
+
+        self.x_size = Size.from_any(x_size)
+        self.y_size = Size.from_any(y_size)
+
+    def get_extent(self, renderer):
+        x, y, w, h = self.get_bbox_to_anchor().bounds
+
+        dpi = renderer.points_to_pixels(72.)
+
+        r, a = self.x_size.get_size(renderer)
+        width = w * r + a * dpi
+
+        r, a = self.y_size.get_size(renderer)
+        height = h * r + a * dpi
+        xd, yd = 0, 0
+
+        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
+        pad = self.pad * fontsize
+
+        return width + 2 * pad, height + 2 * pad, xd + pad, yd + pad
+
+
+class AnchoredZoomLocator(AnchoredLocatorBase):
+    def __init__(self, parent_axes, zoom, loc,
+                 borderpad=0.5,
+                 bbox_to_anchor=None,
+                 bbox_transform=None):
+        self.parent_axes = parent_axes
+        self.zoom = zoom
+
+        if bbox_to_anchor is None:
+            bbox_to_anchor = parent_axes.bbox
+
+        super().__init__(
+            bbox_to_anchor, None, loc, borderpad=borderpad,
+            bbox_transform=bbox_transform)
+
+    def get_extent(self, renderer):
+        bb = TransformedBbox(self.axes.viewLim,
+                             self.parent_axes.transData)
+        x, y, w, h = bb.bounds
+        fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
+        pad = self.pad * fontsize
+        return (abs(w * self.zoom) + 2 * pad, abs(h * self.zoom) + 2 * pad,
+                pad, pad)
+
+
+class BboxPatch(Patch):
+    @docstring.dedent_interpd
+    def __init__(self, bbox, **kwargs):
+        """
+        Patch showing the shape bounded by a Bbox.
+
+        Parameters
+        ----------
+        bbox : `matplotlib.transforms.Bbox`
+            Bbox to use for the extents of this patch.
+
+        **kwargs
+            Patch properties. Valid arguments include:
+
+            %(Patch)s
+        """
+        if "transform" in kwargs:
+            raise ValueError("transform should not be set")
+
+        kwargs["transform"] = IdentityTransform()
+        Patch.__init__(self, **kwargs)
+        self.bbox = bbox
+
+    def get_path(self):
+        # docstring inherited
+        x0, y0, x1, y1 = self.bbox.extents
+        verts = [(x0, y0),
+                 (x1, y0),
+                 (x1, y1),
+                 (x0, y1),
+                 (x0, y0),
+                 (0, 0)]
+        codes = [Path.MOVETO,
+                 Path.LINETO,
+                 Path.LINETO,
+                 Path.LINETO,
+                 Path.LINETO,
+                 Path.CLOSEPOLY]
+        return Path(verts, codes)
+
+
+class BboxConnector(Patch):
+    @staticmethod
+    def get_bbox_edge_pos(bbox, loc):
+        """
+        Helper function to obtain the location of a corner of a bbox
+
+        Parameters
+        ----------
+        bbox : `matplotlib.transforms.Bbox`
+
+        loc : {1, 2, 3, 4}
+            Corner of *bbox*. Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        Returns
+        -------
+        x, y : float
+            Coordinates of the corner specified by *loc*.
+        """
+        x0, y0, x1, y1 = bbox.extents
+        if loc == 1:
+            return x1, y1
+        elif loc == 2:
+            return x0, y1
+        elif loc == 3:
+            return x0, y0
+        elif loc == 4:
+            return x1, y0
+
+    @staticmethod
+    def connect_bbox(bbox1, bbox2, loc1, loc2=None):
+        """
+        Helper function to obtain a Path from one bbox to another.
+
+        Parameters
+        ----------
+        bbox1, bbox2 : `matplotlib.transforms.Bbox`
+            Bounding boxes to connect.
+
+        loc1 : {1, 2, 3, 4}
+            Corner of *bbox1* to use. Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        loc2 : {1, 2, 3, 4}, optional
+            Corner of *bbox2* to use. If None, defaults to *loc1*.
+            Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        Returns
+        -------
+        path : `matplotlib.path.Path`
+            A line segment from the *loc1* corner of *bbox1* to the *loc2*
+            corner of *bbox2*.
+        """
+        if isinstance(bbox1, Rectangle):
+            transform = bbox1.get_transform()
+            bbox1 = Bbox.from_bounds(0, 0, 1, 1)
+            bbox1 = TransformedBbox(bbox1, transform)
+
+        if isinstance(bbox2, Rectangle):
+            transform = bbox2.get_transform()
+            bbox2 = Bbox.from_bounds(0, 0, 1, 1)
+            bbox2 = TransformedBbox(bbox2, transform)
+
+        if loc2 is None:
+            loc2 = loc1
+
+        x1, y1 = BboxConnector.get_bbox_edge_pos(bbox1, loc1)
+        x2, y2 = BboxConnector.get_bbox_edge_pos(bbox2, loc2)
+
+        verts = [[x1, y1], [x2, y2]]
+        codes = [Path.MOVETO, Path.LINETO]
+
+        return Path(verts, codes)
+
+    @docstring.dedent_interpd
+    def __init__(self, bbox1, bbox2, loc1, loc2=None, **kwargs):
+        """
+        Connect two bboxes with a straight line.
+
+        Parameters
+        ----------
+        bbox1, bbox2 : `matplotlib.transforms.Bbox`
+            Bounding boxes to connect.
+
+        loc1 : {1, 2, 3, 4}
+            Corner of *bbox1* to draw the line. Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        loc2 : {1, 2, 3, 4}, optional
+            Corner of *bbox2* to draw the line. If None, defaults to *loc1*.
+            Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        **kwargs
+            Patch properties for the line drawn. Valid arguments include:
+
+            %(Patch)s
+        """
+        if "transform" in kwargs:
+            raise ValueError("transform should not be set")
+
+        kwargs["transform"] = IdentityTransform()
+        if 'fill' in kwargs:
+            Patch.__init__(self, **kwargs)
+        else:
+            fill = bool({'fc', 'facecolor', 'color'}.intersection(kwargs))
+            Patch.__init__(self, fill=fill, **kwargs)
+        self.bbox1 = bbox1
+        self.bbox2 = bbox2
+        self.loc1 = loc1
+        self.loc2 = loc2
+
+    def get_path(self):
+        # docstring inherited
+        return self.connect_bbox(self.bbox1, self.bbox2,
+                                 self.loc1, self.loc2)
+
+
+class BboxConnectorPatch(BboxConnector):
+    @docstring.dedent_interpd
+    def __init__(self, bbox1, bbox2, loc1a, loc2a, loc1b, loc2b, **kwargs):
+        """
+        Connect two bboxes with a quadrilateral.
+
+        The quadrilateral is specified by two lines that start and end at
+        corners of the bboxes. The four sides of the quadrilateral are defined
+        by the two lines given, the line between the two corners specified in
+        *bbox1* and the line between the two corners specified in *bbox2*.
+
+        Parameters
+        ----------
+        bbox1, bbox2 : `matplotlib.transforms.Bbox`
+            Bounding boxes to connect.
+
+        loc1a, loc2a : {1, 2, 3, 4}
+            Corners of *bbox1* and *bbox2* to draw the first line.
+            Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        loc1b, loc2b : {1, 2, 3, 4}
+            Corners of *bbox1* and *bbox2* to draw the second line.
+            Valid values are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4
+
+        **kwargs
+            Patch properties for the line drawn:
+
+            %(Patch)s
+        """
+        if "transform" in kwargs:
+            raise ValueError("transform should not be set")
+        BboxConnector.__init__(self, bbox1, bbox2, loc1a, loc2a, **kwargs)
+        self.loc1b = loc1b
+        self.loc2b = loc2b
+
+    def get_path(self):
+        # docstring inherited
+        path1 = self.connect_bbox(self.bbox1, self.bbox2, self.loc1, self.loc2)
+        path2 = self.connect_bbox(self.bbox2, self.bbox1,
+                                  self.loc2b, self.loc1b)
+        path_merged = [*path1.vertices, *path2.vertices, path1.vertices[0]]
+        return Path(path_merged)
+
+
+def _add_inset_axes(parent_axes, inset_axes):
+    """Helper function to add an inset axes and disable navigation in it"""
+    parent_axes.figure.add_axes(inset_axes)
+    inset_axes.set_navigate(False)
+
+
+@docstring.dedent_interpd
+def inset_axes(parent_axes, width, height, loc='upper right',
+               bbox_to_anchor=None, bbox_transform=None,
+               axes_class=None,
+               axes_kwargs=None,
+               borderpad=0.5):
+    """
+    Create an inset axes with a given width and height.
+
+    Both sizes used can be specified either in inches or percentage.
+    For example,::
+
+        inset_axes(parent_axes, width='40%%', height='30%%', loc=3)
+
+    creates in inset axes in the lower left corner of *parent_axes* which spans
+    over 30%% in height and 40%% in width of the *parent_axes*. Since the usage
+    of `.inset_axes` may become slightly tricky when exceeding such standard
+    cases, it is recommended to read :doc:`the examples
+    </gallery/axes_grid1/inset_locator_demo>`.
+
+    Notes
+    -----
+    The meaning of *bbox_to_anchor* and *bbox_to_transform* is interpreted
+    differently from that of legend. The value of bbox_to_anchor
+    (or the return value of its get_points method; the default is
+    *parent_axes.bbox*) is transformed by the bbox_transform (the default
+    is Identity transform) and then interpreted as points in the pixel
+    coordinate (which is dpi dependent).
+
+    Thus, following three calls are identical and creates an inset axes
+    with respect to the *parent_axes*::
+
+       axins = inset_axes(parent_axes, "30%%", "40%%")
+       axins = inset_axes(parent_axes, "30%%", "40%%",
+                          bbox_to_anchor=parent_axes.bbox)
+       axins = inset_axes(parent_axes, "30%%", "40%%",
+                          bbox_to_anchor=(0, 0, 1, 1),
+                          bbox_transform=parent_axes.transAxes)
+
+    Parameters
+    ----------
+    parent_axes : `matplotlib.axes.Axes`
+        Axes to place the inset axes.
+
+    width, height : float or str
+        Size of the inset axes to create. If a float is provided, it is
+        the size in inches, e.g. *width=1.3*. If a string is provided, it is
+        the size in relative units, e.g. *width='40%%'*. By default, i.e. if
+        neither *bbox_to_anchor* nor *bbox_transform* are specified, those
+        are relative to the parent_axes. Otherwise they are to be understood
+        relative to the bounding box provided via *bbox_to_anchor*.
+
+    loc : int or str, optional, default to 1
+        Location to place the inset axes. The valid locations are::
+
+            'upper right'  : 1,
+            'upper left'   : 2,
+            'lower left'   : 3,
+            'lower right'  : 4,
+            'right'        : 5,
+            'center left'  : 6,
+            'center right' : 7,
+            'lower center' : 8,
+            'upper center' : 9,
+            'center'       : 10
+
+    bbox_to_anchor : tuple or `matplotlib.transforms.BboxBase`, optional
+        Bbox that the inset axes will be anchored to. If None,
+        a tuple of (0, 0, 1, 1) is used if *bbox_transform* is set
+        to *parent_axes.transAxes* or *parent_axes.figure.transFigure*.
+        Otherwise, *parent_axes.bbox* is used. If a tuple, can be either
+        [left, bottom, width, height], or [left, bottom].
+        If the kwargs *width* and/or *height* are specified in relative units,
+        the 2-tuple [left, bottom] cannot be used. Note that,
+        unless *bbox_transform* is set, the units of the bounding box
+        are interpreted in the pixel coordinate. When using *bbox_to_anchor*
+        with tuple, it almost always makes sense to also specify
+        a *bbox_transform*. This might often be the axes transform
+        *parent_axes.transAxes*.
+
+    bbox_transform : `matplotlib.transforms.Transform`, optional
+        Transformation for the bbox that contains the inset axes.
+        If None, a `.transforms.IdentityTransform` is used. The value
+        of *bbox_to_anchor* (or the return value of its get_points method)
+        is transformed by the *bbox_transform* and then interpreted
+        as points in the pixel coordinate (which is dpi dependent).
+        You may provide *bbox_to_anchor* in some normalized coordinate,
+        and give an appropriate transform (e.g., *parent_axes.transAxes*).
+
+    axes_class : `matplotlib.axes.Axes` type, optional
+        If specified, the inset axes created will be created with this class's
+        constructor.
+
+    axes_kwargs : dict, optional
+        Keyworded arguments to pass to the constructor of the inset axes.
+        Valid arguments include:
+
+        %(Axes)s
+
+    borderpad : float, optional
+        Padding between inset axes and the bbox_to_anchor. Defaults to 0.5.
+        The units are axes font size, i.e. for a default font size of 10 points
+        *borderpad = 0.5* is equivalent to a padding of 5 points.
+
+    Returns
+    -------
+    inset_axes : `axes_class`
+        Inset axes object created.
+    """
+
+    if axes_class is None:
+        axes_class = HostAxes
+
+    if axes_kwargs is None:
+        inset_axes = axes_class(parent_axes.figure, parent_axes.get_position())
+    else:
+        inset_axes = axes_class(parent_axes.figure, parent_axes.get_position(),
+                                **axes_kwargs)
+
+    if bbox_transform in [parent_axes.transAxes,
+                          parent_axes.figure.transFigure]:
+        if bbox_to_anchor is None:
+            cbook._warn_external("Using the axes or figure transform "
+                                 "requires a bounding box in the respective "
+                                 "coordinates. "
+                                 "Using bbox_to_anchor=(0, 0, 1, 1) now.")
+            bbox_to_anchor = (0, 0, 1, 1)
+
+    if bbox_to_anchor is None:
+        bbox_to_anchor = parent_axes.bbox
+
+    if isinstance(bbox_to_anchor, tuple) and \
+        (isinstance(width, str) or isinstance(height, str)):
+        if len(bbox_to_anchor) != 4:
+            raise ValueError("Using relative units for width or height "
+                             "requires to provide a 4-tuple or a "
+                             "`Bbox` instance to `bbox_to_anchor.")
+
+    axes_locator = AnchoredSizeLocator(bbox_to_anchor,
+                                       width, height,
+                                       loc=loc,
+                                       bbox_transform=bbox_transform,
+                                       borderpad=borderpad)
+
+    inset_axes.set_axes_locator(axes_locator)
+
+    _add_inset_axes(parent_axes, inset_axes)
+
+    return inset_axes
+
+
+@docstring.dedent_interpd
+def zoomed_inset_axes(parent_axes, zoom, loc='upper right',
+                      bbox_to_anchor=None, bbox_transform=None,
+                      axes_class=None,
+                      axes_kwargs=None,
+                      borderpad=0.5):
+    """
+    Create an anchored inset axes by scaling a parent axes. For usage, also see
+    :doc:`the examples </gallery/axes_grid1/inset_locator_demo2>`.
+
+    Parameters
+    ----------
+    parent_axes : `matplotlib.axes.Axes`
+        Axes to place the inset axes.
+
+    zoom : float
+        Scaling factor of the data axes. *zoom* > 1 will enlargen the
+        coordinates (i.e., "zoomed in"), while *zoom* < 1 will shrink the
+        coordinates (i.e., "zoomed out").
+
+    loc : int or str, optional, default to 1
+        Location to place the inset axes. The valid locations are::
+
+            'upper right'  : 1,
+            'upper left'   : 2,
+            'lower left'   : 3,
+            'lower right'  : 4,
+            'right'        : 5,
+            'center left'  : 6,
+            'center right' : 7,
+            'lower center' : 8,
+            'upper center' : 9,
+            'center'       : 10
+
+    bbox_to_anchor : tuple or `matplotlib.transforms.BboxBase`, optional
+        Bbox that the inset axes will be anchored to. If None,
+        *parent_axes.bbox* is used. If a tuple, can be either
+        [left, bottom, width, height], or [left, bottom].
+        If the kwargs *width* and/or *height* are specified in relative units,
+        the 2-tuple [left, bottom] cannot be used. Note that
+        the units of the bounding box are determined through the transform
+        in use. When using *bbox_to_anchor* it almost always makes sense to
+        also specify a *bbox_transform*. This might often be the axes transform
+        *parent_axes.transAxes*.
+
+    bbox_transform : `matplotlib.transforms.Transform`, optional
+        Transformation for the bbox that contains the inset axes.
+        If None, a `.transforms.IdentityTransform` is used (i.e. pixel
+        coordinates). This is useful when not providing any argument to
+        *bbox_to_anchor*. When using *bbox_to_anchor* it almost always makes
+        sense to also specify a *bbox_transform*. This might often be the
+        axes transform *parent_axes.transAxes*. Inversely, when specifying
+        the axes- or figure-transform here, be aware that not specifying
+        *bbox_to_anchor* will use *parent_axes.bbox*, the units of which are
+        in display (pixel) coordinates.
+
+    axes_class : `matplotlib.axes.Axes` type, optional
+        If specified, the inset axes created will be created with this class's
+        constructor.
+
+    axes_kwargs : dict, optional
+        Keyworded arguments to pass to the constructor of the inset axes.
+        Valid arguments include:
+
+        %(Axes)s
+
+    borderpad : float, optional
+        Padding between inset axes and the bbox_to_anchor. Defaults to 0.5.
+        The units are axes font size, i.e. for a default font size of 10 points
+        *borderpad = 0.5* is equivalent to a padding of 5 points.
+
+    Returns
+    -------
+    inset_axes : `axes_class`
+        Inset axes object created.
+    """
+
+    if axes_class is None:
+        axes_class = HostAxes
+
+    if axes_kwargs is None:
+        inset_axes = axes_class(parent_axes.figure, parent_axes.get_position())
+    else:
+        inset_axes = axes_class(parent_axes.figure, parent_axes.get_position(),
+                                **axes_kwargs)
+
+    axes_locator = AnchoredZoomLocator(parent_axes, zoom=zoom, loc=loc,
+                                       bbox_to_anchor=bbox_to_anchor,
+                                       bbox_transform=bbox_transform,
+                                       borderpad=borderpad)
+    inset_axes.set_axes_locator(axes_locator)
+
+    _add_inset_axes(parent_axes, inset_axes)
+
+    return inset_axes
+
+
+@docstring.dedent_interpd
+def mark_inset(parent_axes, inset_axes, loc1, loc2, **kwargs):
+    """
+    Draw a box to mark the location of an area represented by an inset axes.
+
+    This function draws a box in *parent_axes* at the bounding box of
+    *inset_axes*, and shows a connection with the inset axes by drawing lines
+    at the corners, giving a "zoomed in" effect.
+
+    Parameters
+    ----------
+    parent_axes : `matplotlib.axes.Axes`
+        Axes which contains the area of the inset axes.
+
+    inset_axes : `matplotlib.axes.Axes`
+        The inset axes.
+
+    loc1, loc2 : {1, 2, 3, 4}
+        Corners to use for connecting the inset axes and the area in the
+        parent axes.
+
+    **kwargs
+        Patch properties for the lines and box drawn:
+
+        %(Patch)s
+
+    Returns
+    -------
+    pp : `matplotlib.patches.Patch`
+        The patch drawn to represent the area of the inset axes.
+
+    p1, p2 : `matplotlib.patches.Patch`
+        The patches connecting two corners of the inset axes and its area.
+    """
+    rect = TransformedBbox(inset_axes.viewLim, parent_axes.transData)
+
+    if 'fill' in kwargs:
+        pp = BboxPatch(rect, **kwargs)
+    else:
+        fill = bool({'fc', 'facecolor', 'color'}.intersection(kwargs))
+        pp = BboxPatch(rect, fill=fill, **kwargs)
+    parent_axes.add_patch(pp)
+
+    p1 = BboxConnector(inset_axes.bbox, rect, loc1=loc1, **kwargs)
+    inset_axes.add_patch(p1)
+    p1.set_clip_on(False)
+    p2 = BboxConnector(inset_axes.bbox, rect, loc1=loc2, **kwargs)
+    inset_axes.add_patch(p2)
+    p2.set_clip_on(False)
+
+    return pp, p1, p2
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_rgb.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_rgb.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_rgb.py	(date 1589417755515)
@@ -0,0 +1,223 @@
+import numpy as np
+
+from .axes_divider import make_axes_locatable, Size
+from .mpl_axes import Axes
+
+
+def make_rgb_axes(ax, pad=0.01, axes_class=None, add_all=True):
+    """
+    Parameters
+    ----------
+    pad : float
+        Fraction of the axes height.
+    """
+
+    divider = make_axes_locatable(ax)
+
+    pad_size = Size.Fraction(pad, Size.AxesY(ax))
+
+    xsize = Size.Fraction((1.-2.*pad)/3., Size.AxesX(ax))
+    ysize = Size.Fraction((1.-2.*pad)/3., Size.AxesY(ax))
+
+    divider.set_horizontal([Size.AxesX(ax), pad_size, xsize])
+    divider.set_vertical([ysize, pad_size, ysize, pad_size, ysize])
+
+    ax.set_axes_locator(divider.new_locator(0, 0, ny1=-1))
+
+    ax_rgb = []
+    if axes_class is None:
+        try:
+            axes_class = ax._axes_class
+        except AttributeError:
+            axes_class = type(ax)
+
+    for ny in [4, 2, 0]:
+        ax1 = axes_class(ax.get_figure(),
+                         ax.get_position(original=True),
+                         sharex=ax, sharey=ax)
+        locator = divider.new_locator(nx=2, ny=ny)
+        ax1.set_axes_locator(locator)
+        for t in ax1.yaxis.get_ticklabels() + ax1.xaxis.get_ticklabels():
+            t.set_visible(False)
+        try:
+            for axis in ax1.axis.values():
+                axis.major_ticklabels.set_visible(False)
+        except AttributeError:
+            pass
+
+        ax_rgb.append(ax1)
+
+    if add_all:
+        fig = ax.get_figure()
+        for ax1 in ax_rgb:
+            fig.add_axes(ax1)
+
+    return ax_rgb
+
+
+def imshow_rgb(ax, r, g, b, **kwargs):
+    ny, nx = r.shape
+    R = np.zeros([ny, nx, 3], dtype="d")
+    R[:, :, 0] = r
+    G = np.zeros_like(R)
+    G[:, :, 1] = g
+    B = np.zeros_like(R)
+    B[:, :, 2] = b
+
+    RGB = R + G + B
+
+    im_rgb = ax.imshow(RGB, **kwargs)
+
+    return im_rgb
+
+
+class RGBAxesBase:
+    """base class for a 4-panel imshow (RGB, R, G, B)
+
+    Layout:
+    +---------------+-----+
+    |               |  R  |
+    +               +-----+
+    |      RGB      |  G  |
+    +               +-----+
+    |               |  B  |
+    +---------------+-----+
+
+    Attributes
+    ----------
+    _defaultAxesClass : matplotlib.axes.Axes
+        defaults to 'Axes' in RGBAxes child class.
+        No default in abstract base class
+    RGB : _defaultAxesClass
+        The axes object for the three-channel imshow
+    R : _defaultAxesClass
+        The axes object for the red channel imshow
+    G : _defaultAxesClass
+        The axes object for the green channel imshow
+    B : _defaultAxesClass
+        The axes object for the blue channel imshow
+    """
+    def __init__(self, *args, pad=0, add_all=True, **kwargs):
+        """
+        Parameters
+        ----------
+        pad : float
+            fraction of the axes height to put as padding.
+            defaults to 0.0
+        add_all : bool
+            True: Add the {rgb, r, g, b} axes to the figure
+            defaults to True.
+        axes_class : matplotlib.axes.Axes
+
+        *args
+            Unpacked into axes_class() init for RGB
+        **kwargs
+            Unpacked into axes_class() init for RGB, R, G, B axes
+        """
+        try:
+            axes_class = kwargs.pop("axes_class", self._defaultAxesClass)
+        except AttributeError:
+            raise AttributeError(
+                'A subclass of RGBAxesBase must have a _defaultAxesClass '
+                'attribute. If you are not sure which axes class to use, '
+                'consider using mpl_toolkits.axes_grid1.mpl_axes.Axes.'
+            )
+
+        ax = axes_class(*args, **kwargs)
+
+        divider = make_axes_locatable(ax)
+
+        pad_size = Size.Fraction(pad, Size.AxesY(ax))
+
+        xsize = Size.Fraction((1.-2.*pad)/3., Size.AxesX(ax))
+        ysize = Size.Fraction((1.-2.*pad)/3., Size.AxesY(ax))
+
+        divider.set_horizontal([Size.AxesX(ax), pad_size, xsize])
+        divider.set_vertical([ysize, pad_size, ysize, pad_size, ysize])
+
+        ax.set_axes_locator(divider.new_locator(0, 0, ny1=-1))
+
+        ax_rgb = []
+        for ny in [4, 2, 0]:
+            ax1 = axes_class(ax.get_figure(),
+                             ax.get_position(original=True),
+                             sharex=ax, sharey=ax, **kwargs)
+            locator = divider.new_locator(nx=2, ny=ny)
+            ax1.set_axes_locator(locator)
+            ax1.axis[:].toggle(ticklabels=False)
+            ax_rgb.append(ax1)
+
+        self.RGB = ax
+        self.R, self.G, self.B = ax_rgb
+
+        if add_all:
+            fig = ax.get_figure()
+            fig.add_axes(ax)
+            self.add_RGB_to_figure()
+
+        self._config_axes()
+
+    def _config_axes(self, line_color='w', marker_edge_color='w'):
+        """Set the line color and ticks for the axes
+
+        Parameters
+        ----------
+        line_color : any matplotlib color
+        marker_edge_color : any matplotlib color
+        """
+        for ax1 in [self.RGB, self.R, self.G, self.B]:
+            ax1.axis[:].line.set_color(line_color)
+            ax1.axis[:].major_ticks.set_markeredgecolor(marker_edge_color)
+
+    def add_RGB_to_figure(self):
+        """Add the red, green and blue axes to the RGB composite's axes figure
+        """
+        self.RGB.get_figure().add_axes(self.R)
+        self.RGB.get_figure().add_axes(self.G)
+        self.RGB.get_figure().add_axes(self.B)
+
+    def imshow_rgb(self, r, g, b, **kwargs):
+        """Create the four images {rgb, r, g, b}
+
+        Parameters
+        ----------
+        r : array-like
+            The red array
+        g : array-like
+            The green array
+        b : array-like
+            The blue array
+        kwargs : imshow kwargs
+            kwargs get unpacked into the imshow calls for the four images
+
+        Returns
+        -------
+        rgb : matplotlib.image.AxesImage
+        r : matplotlib.image.AxesImage
+        g : matplotlib.image.AxesImage
+        b : matplotlib.image.AxesImage
+        """
+        if not (r.shape == g.shape == b.shape):
+            raise ValueError('Input shapes do not match.'
+                             '\nr.shape = {}'
+                             '\ng.shape = {}'
+                             '\nb.shape = {}'
+                             .format(r.shape, g.shape, b.shape))
+        RGB = np.dstack([r, g, b])
+        R = np.zeros_like(RGB)
+        R[:, :, 0] = r
+        G = np.zeros_like(RGB)
+        G[:, :, 1] = g
+        B = np.zeros_like(RGB)
+        B[:, :, 2] = b
+
+        im_rgb = self.RGB.imshow(RGB, **kwargs)
+        im_r = self.R.imshow(R, **kwargs)
+        im_g = self.G.imshow(G, **kwargs)
+        im_b = self.B.imshow(B, **kwargs)
+
+        return im_rgb, im_r, im_g, im_b
+
+
+class RGBAxes(RGBAxesBase):
+    _defaultAxesClass = Axes
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/colorbar.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/colorbar.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/colorbar.py	(date 1589417755518)
@@ -0,0 +1,800 @@
+"""
+Colorbar toolkit with two classes and a function:
+
+    :class:`ColorbarBase`
+        the base class with full colorbar drawing functionality.
+        It can be used as-is to make a colorbar for a given colormap;
+        a mappable object (e.g., image) is not needed.
+
+    :class:`Colorbar`
+        the derived class for use with images or contour plots.
+
+    :func:`make_axes`
+        a function for resizing an axes and adding a second axes
+        suitable for a colorbar
+
+The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
+and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
+is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.
+"""
+
+import numpy as np
+import matplotlib as mpl
+from matplotlib import cbook
+import matplotlib.colors as colors
+import matplotlib.cm as cm
+from matplotlib import docstring
+import matplotlib.ticker as ticker
+import matplotlib.collections as collections
+import matplotlib.contour as contour
+from matplotlib.path import Path
+from matplotlib.patches import PathPatch
+from matplotlib.transforms import Bbox
+
+
+cbook.warn_deprecated(
+    "3.2", name=__name__, obj_type="module", alternative="matplotlib.colorbar")
+
+
+make_axes_kw_doc = '''
+
+    ============= ====================================================
+    Property      Description
+    ============= ====================================================
+    *orientation* vertical or horizontal
+    *fraction*    0.15; fraction of original axes to use for colorbar
+    *pad*         0.05 if vertical, 0.15 if horizontal; fraction
+                  of original axes between colorbar and new image axes
+    *shrink*      1.0; fraction by which to shrink the colorbar
+    *aspect*      20; ratio of long to short dimensions
+    ============= ====================================================
+
+'''
+
+colormap_kw_doc = '''
+
+    ===========   ====================================================
+    Property      Description
+    ===========   ====================================================
+    *extend*      [ 'neither' | 'both' | 'min' | 'max' ]
+                  If not 'neither', make pointed end(s) for out-of-
+                  range values.  These are set for a given colormap
+                  using the colormap set_under and set_over methods.
+    *spacing*     [ 'uniform' | 'proportional' ]
+                  Uniform spacing gives each discrete color the same
+                  space; proportional makes the space proportional to
+                  the data interval.
+    *ticks*       [ None | list of ticks | Locator object ]
+                  If None, ticks are determined automatically from the
+                  input.
+    *format*      [ None | format string | Formatter object ]
+                  If None, the
+                  :class:`~matplotlib.ticker.ScalarFormatter` is used.
+                  If a format string is given, e.g., '%.3f', that is
+                  used. An alternative
+                  :class:`~matplotlib.ticker.Formatter` object may be
+                  given instead.
+    *drawedges*   bool
+                  Whether to draw lines at color boundaries.
+    ===========   ====================================================
+
+    The following will probably be useful only in the context of
+    indexed colors (that is, when the mappable has norm=NoNorm()),
+    or other unusual circumstances.
+
+    ============   ===================================================
+    Property       Description
+    ============   ===================================================
+    *boundaries*   None or a sequence
+    *values*       None or a sequence which must be of length 1 less
+                   than the sequence of *boundaries*. For each region
+                   delimited by adjacent entries in *boundaries*, the
+                   color mapped to the corresponding value in values
+                   will be used.
+    ============   ===================================================
+
+'''
+
+colorbar_doc = '''
+
+Add a colorbar to a plot.
+
+Function signatures for the :mod:`~matplotlib.pyplot` interface; all
+but the first are also method signatures for the
+:meth:`~matplotlib.figure.Figure.colorbar` method::
+
+  colorbar(**kwargs)
+  colorbar(mappable, **kwargs)
+  colorbar(mappable, cax=cax, **kwargs)
+  colorbar(mappable, ax=ax, **kwargs)
+
+arguments:
+
+  *mappable*
+    the :class:`~matplotlib.image.Image`,
+    :class:`~matplotlib.contour.ContourSet`, etc. to
+    which the colorbar applies; this argument is mandatory for the
+    :meth:`~matplotlib.figure.Figure.colorbar` method but optional for the
+    :func:`~matplotlib.pyplot.colorbar` function, which sets the
+    default to the current image.
+
+keyword arguments:
+
+  *cax*
+    None | axes object into which the colorbar will be drawn
+  *ax*
+    None | parent axes object from which space for a new
+    colorbar axes will be stolen
+
+
+Additional keyword arguments are of two kinds:
+
+  axes properties:
+    %s
+  colorbar properties:
+    %s
+
+If *mappable* is a :class:`~matplotlib.contours.ContourSet`, its *extend*
+kwarg is included automatically.
+
+Note that the *shrink* kwarg provides a simple way to keep a vertical
+colorbar, for example, from being taller than the axes of the mappable
+to which the colorbar is attached; but it is a manual method requiring
+some trial and error. If the colorbar is too tall (or a horizontal
+colorbar is too wide) use a smaller value of *shrink*.
+
+For more precise control, you can manually specify the positions of
+the axes objects in which the mappable and the colorbar are drawn.  In
+this case, do not use any of the axes properties kwargs.
+
+It is known that some vector graphics viewer (svg and pdf) renders white gaps
+between segments of the colorbar. This is due to bugs in the viewers not
+matplotlib. As a workaround the colorbar can be rendered with overlapping
+segments::
+
+    cbar = colorbar()
+    cbar.solids.set_edgecolor("face")
+    draw()
+
+However this has negative consequences in other circumstances. Particularly
+with semi transparent images (alpha < 1) and colorbar extensions and is not
+enabled by default see (issue #1188).
+
+returns:
+    :class:`~matplotlib.colorbar.Colorbar` instance; see also its base class,
+    :class:`~matplotlib.colorbar.ColorbarBase`.  Call the
+    :meth:`~matplotlib.colorbar.ColorbarBase.set_label` method
+    to label the colorbar.
+
+
+The transData of the *cax* is adjusted so that the limits in the
+longest axis actually corresponds to the limits in colorbar range. On
+the other hand, the shortest axis has a data limits of [1,2], whose
+unconventional value is to prevent underflow when log scale is used.
+''' % (make_axes_kw_doc, colormap_kw_doc)
+
+#docstring.interpd.update(colorbar_doc=colorbar_doc)
+
+
+class CbarAxesLocator:
+    """
+    CbarAxesLocator is a axes_locator for colorbar axes. It adjust the
+    position of the axes to make a room for extended ends, i.e., the
+    extended ends are located outside the axes area.
+    """
+
+    def __init__(self, locator=None, extend="neither", orientation="vertical"):
+        """
+        *locator* : the bbox returned from the locator is used as a
+            initial axes location. If None, axes.bbox is used.
+
+        *extend* : same as in ColorbarBase
+        *orientation* : same as in ColorbarBase
+
+        """
+        self._locator = locator
+        self.extesion_fraction = 0.05
+        self.extend = extend
+        self.orientation = orientation
+
+    def get_original_position(self, axes, renderer):
+        """
+        get the original position of the axes.
+        """
+        if self._locator is None:
+            bbox = axes.get_position(original=True)
+        else:
+            bbox = self._locator(axes, renderer)
+        return bbox
+
+    def get_end_vertices(self):
+        """
+        return a tuple of two vertices for the colorbar extended ends.
+        The first vertices is for the minimum end, and the second is for
+        the maximum end.
+        """
+        # Note that concatenating two vertices needs to make a
+        # vertices for the frame.
+        extesion_fraction = self.extesion_fraction
+
+        corx = extesion_fraction*2.
+        cory = 1./(1. - corx)
+        x1, y1, w, h = 0, 0, 1, 1
+        x2, y2 = x1 + w, y1 + h
+        dw, dh = w*extesion_fraction, h*extesion_fraction*cory
+
+        if self.extend in ["min", "both"]:
+            bottom = [(x1, y1),
+                      (x1+w/2., y1-dh),
+                      (x2, y1)]
+        else:
+            bottom = [(x1, y1),
+                      (x2, y1)]
+
+        if self.extend in ["max", "both"]:
+            top = [(x2, y2),
+                   (x1+w/2., y2+dh),
+                   (x1, y2)]
+        else:
+            top = [(x2, y2),
+                   (x1, y2)]
+
+        if self.orientation == "horizontal":
+            bottom = [(y, x) for (x, y) in bottom]
+            top = [(y, x) for (x, y) in top]
+
+        return bottom, top
+
+    def get_path_patch(self):
+        """
+        get the path for axes patch
+        """
+        end1, end2 = self.get_end_vertices()
+        verts = [] + end1 + end2 + end1[:1]
+        return Path(verts)
+
+    def get_path_ends(self):
+        """
+        get the paths for extended ends
+        """
+        end1, end2 = self.get_end_vertices()
+        return Path(end1), Path(end2)
+
+    def __call__(self, axes, renderer):
+        """
+        Return the adjusted position of the axes
+        """
+        bbox0 = self.get_original_position(axes, renderer)
+        bbox = bbox0
+
+        x1, y1, w, h = bbox.bounds
+        extesion_fraction = self.extesion_fraction
+        dw, dh = w*extesion_fraction, h*extesion_fraction
+
+        if self.extend in ["min", "both"]:
+            if self.orientation == "horizontal":
+                x1 = x1 + dw
+            else:
+                y1 = y1+dh
+
+        if self.extend in ["max", "both"]:
+            if self.orientation == "horizontal":
+                w = w-2*dw
+            else:
+                h = h-2*dh
+
+        return Bbox.from_bounds(x1, y1, w, h)
+
+
+class ColorbarBase(cm.ScalarMappable):
+    '''
+    Draw a colorbar in an existing axes.
+
+    This is a base class for the :class:`Colorbar` class, which is the
+    basis for the :func:`~matplotlib.pyplot.colorbar` method and pyplot
+    function.
+
+    It is also useful by itself for showing a colormap.  If the *cmap*
+    kwarg is given but *boundaries* and *values* are left as None,
+    then the colormap will be displayed on a 0-1 scale. To show the
+    under- and over-value colors, specify the *norm* as::
+
+        colors.Normalize(clip=False)
+
+    To show the colors versus index instead of on the 0-1 scale,
+    use::
+
+        norm=colors.NoNorm.
+
+    Useful attributes:
+
+        :attr:`ax`
+            the Axes instance in which the colorbar is drawn
+
+        :attr:`lines`
+            a LineCollection if lines were drawn, otherwise None
+
+        :attr:`dividers`
+            a LineCollection if *drawedges* is True, otherwise None
+
+    Useful public methods are :meth:`set_label` and :meth:`add_lines`.
+    '''
+
+    def __init__(self, ax,
+                 cmap=None,
+                 norm=None,
+                 alpha=1.0,
+                 values=None,
+                 boundaries=None,
+                 orientation='vertical',
+                 extend='neither',
+                 spacing='uniform',  # uniform or proportional
+                 ticks=None,
+                 format=None,
+                 drawedges=False,
+                 filled=True,
+                 ):
+        self.ax = ax
+
+        if cmap is None:
+            cmap = cm.get_cmap()
+        if norm is None:
+            norm = colors.Normalize()
+        self.alpha = alpha
+        cm.ScalarMappable.__init__(self, cmap=cmap, norm=norm)
+        self.values = values
+        self.boundaries = boundaries
+        self.extend = extend
+        self.spacing = spacing
+        self.orientation = orientation
+        self.drawedges = drawedges
+        self.filled = filled
+
+        # artists
+        self.solids = None
+        self.lines = None
+        self.dividers = None
+        self.extension_patch1 = None
+        self.extension_patch2 = None
+
+        if orientation == "vertical":
+            self.cbar_axis = self.ax.yaxis
+        else:
+            self.cbar_axis = self.ax.xaxis
+
+        if format is None:
+            if isinstance(self.norm, colors.LogNorm):
+                # change both axis for proper aspect
+                self.ax.set_xscale("log")
+                self.ax.set_yscale("log")
+                self.cbar_axis.set_minor_locator(ticker.NullLocator())
+                formatter = ticker.LogFormatter()
+            else:
+                formatter = None
+        elif isinstance(format, str):
+            formatter = ticker.FormatStrFormatter(format)
+        else:
+            formatter = format  # Assume it is a Formatter
+
+        if formatter is None:
+            formatter = self.cbar_axis.get_major_formatter()
+        else:
+            self.cbar_axis.set_major_formatter(formatter)
+
+        if np.iterable(ticks):
+            self.cbar_axis.set_ticks(ticks)
+        elif ticks is not None:
+            self.cbar_axis.set_major_locator(ticks)
+        else:
+            self._select_locator(formatter)
+
+        self._config_axes()
+
+        self.update_artists()
+
+        self.set_label_text('')
+
+    def _get_colorbar_limits(self):
+        """
+        initial limits for colorbar range. The returned min, max values
+        will be used to create colorbar solid(?) and etc.
+        """
+        if self.boundaries is not None:
+            C = self.boundaries
+            if self.extend in ["min", "both"]:
+                C = C[1:]
+
+            if self.extend in ["max", "both"]:
+                C = C[:-1]
+            return min(C), max(C)
+        else:
+            return self.get_clim()
+
+    def _config_axes(self):
+        '''
+        Adjust the properties of the axes to be adequate for colorbar display.
+        '''
+        ax = self.ax
+
+        axes_locator = CbarAxesLocator(ax.get_axes_locator(),
+                                       extend=self.extend,
+                                       orientation=self.orientation)
+        ax.set_axes_locator(axes_locator)
+
+        # override the get_data_ratio for the aspect works.
+        def _f():
+            return 1.
+        ax.get_data_ratio = _f
+        ax.get_data_ratio_log = _f
+
+        ax.set_frame_on(True)
+        ax.set_navigate(False)
+
+        self.ax.set_autoscalex_on(False)
+        self.ax.set_autoscaley_on(False)
+
+        if self.orientation == 'horizontal':
+            ax.xaxis.set_label_position('bottom')
+            ax.set_yticks([])
+        else:
+            ax.set_xticks([])
+            ax.yaxis.set_label_position('right')
+            ax.yaxis.set_ticks_position('right')
+
+    def update_artists(self):
+        """
+        Update the colorbar associated artists, *filled* and
+        *ends*. Note that *lines* are not updated.  This needs to be
+        called whenever clim of associated image changes.
+        """
+        self._process_values()
+        self._add_ends()
+
+        X, Y = self._mesh()
+        if self.filled:
+            C = self._values[:, np.newaxis]
+            self._add_solids(X, Y, C)
+
+        ax = self.ax
+        vmin, vmax = self._get_colorbar_limits()
+        if self.orientation == 'horizontal':
+            ax.set_ylim(1, 2)
+            ax.set_xlim(vmin, vmax)
+        else:
+            ax.set_xlim(1, 2)
+            ax.set_ylim(vmin, vmax)
+
+    def _add_ends(self):
+        """
+        Create patches from extended ends and add them to the axes.
+        """
+
+        del self.extension_patch1
+        del self.extension_patch2
+
+        path1, path2 = self.ax.get_axes_locator().get_path_ends()
+        fc = mpl.rcParams['axes.facecolor']
+        ec = mpl.rcParams['axes.edgecolor']
+        linewidths = 0.5 * mpl.rcParams['axes.linewidth']
+        self.extension_patch1 = PathPatch(path1,
+                                          fc=fc, ec=ec, lw=linewidths,
+                                          zorder=2.,
+                                          transform=self.ax.transAxes,
+                                          clip_on=False)
+        self.extension_patch2 = PathPatch(path2,
+                                          fc=fc, ec=ec, lw=linewidths,
+                                          zorder=2.,
+                                          transform=self.ax.transAxes,
+                                          clip_on=False)
+        self.ax.add_artist(self.extension_patch1)
+        self.ax.add_artist(self.extension_patch2)
+
+    def _set_label_text(self):
+        """
+        set label.
+        """
+        self.cbar_axis.set_label_text(self._label, **self._labelkw)
+
+    def set_label_text(self, label, **kw):
+        '''
+        Label the long axis of the colorbar
+        '''
+        self._label = label
+        self._labelkw = kw
+        self._set_label_text()
+
+    def _edges(self, X, Y):
+        '''
+        Return the separator line segments; helper for _add_solids.
+        '''
+        N = X.shape[0]
+        # Using the non-array form of these line segments is much
+        # simpler than making them into arrays.
+        if self.orientation == 'vertical':
+            return [list(zip(X[i], Y[i])) for i in range(1, N-1)]
+        else:
+            return [list(zip(Y[i], X[i])) for i in range(1, N-1)]
+
+    def _add_solids(self, X, Y, C):
+        '''
+        Draw the colors using :meth:`~matplotlib.axes.Axes.pcolormesh`;
+        optionally add separators.
+        '''
+        ## Change to pcolorfast after fixing bugs in some backends...
+
+        if self.extend in ["min", "both"]:
+            cc = self.to_rgba([C[0][0]])
+            self.extension_patch1.set_facecolor(cc[0])
+            X, Y, C = X[1:], Y[1:], C[1:]
+
+        if self.extend in ["max", "both"]:
+            cc = self.to_rgba([C[-1][0]])
+            self.extension_patch2.set_facecolor(cc[0])
+            X, Y, C = X[:-1], Y[:-1], C[:-1]
+
+        if self.orientation == 'vertical':
+            args = (X, Y, C)
+        else:
+            args = (np.transpose(Y), np.transpose(X), np.transpose(C))
+
+        del self.solids
+        del self.dividers
+
+        col = self.ax.pcolormesh(
+            *args,
+            cmap=self.cmap, norm=self.norm, shading='flat', alpha=self.alpha)
+
+        self.solids = col
+        if self.drawedges:
+            self.dividers = collections.LineCollection(
+                self._edges(X, Y),
+                colors=(mpl.rcParams['axes.edgecolor'],),
+                linewidths=(0.5*mpl.rcParams['axes.linewidth'],),
+            )
+            self.ax.add_collection(self.dividers)
+        else:
+            self.dividers = None
+
+    def add_lines(self, levels, colors, linewidths):
+        '''
+        Draw lines on the colorbar. It deletes preexisting lines.
+        '''
+        X, Y = np.meshgrid([1, 2], levels)
+        if self.orientation == 'vertical':
+            xy = np.stack([X, Y], axis=-1)
+        else:
+            xy = np.stack([Y, X], axis=-1)
+        col = collections.LineCollection(xy, linewidths=linewidths)
+        self.lines = col
+        col.set_color(colors)
+        self.ax.add_collection(col)
+
+    def _select_locator(self, formatter):
+        '''
+        select a suitable locator
+        '''
+        if self.boundaries is None:
+            if isinstance(self.norm, colors.NoNorm):
+                nv = len(self._values)
+                base = 1 + int(nv/10)
+                locator = ticker.IndexLocator(base=base, offset=0)
+            elif isinstance(self.norm, colors.BoundaryNorm):
+                b = self.norm.boundaries
+                locator = ticker.FixedLocator(b, nbins=10)
+            elif isinstance(self.norm, colors.LogNorm):
+                locator = ticker.LogLocator()
+            else:
+                locator = ticker.MaxNLocator(nbins=5)
+        else:
+            b = self._boundaries[self._inside]
+            locator = ticker.FixedLocator(b)
+
+        self.cbar_axis.set_major_locator(locator)
+
+    def _process_values(self, b=None):
+        '''
+        Set the :attr:`_boundaries` and :attr:`_values` attributes
+        based on the input boundaries and values.  Input boundaries
+        can be *self.boundaries* or the argument *b*.
+        '''
+        if b is None:
+            b = self.boundaries
+        if b is not None:
+            self._boundaries = np.asarray(b, dtype=float)
+            if self.values is None:
+                self._values = (self._boundaries[:-1]
+                                + self._boundaries[1:]) / 2
+                if isinstance(self.norm, colors.NoNorm):
+                    self._values = (self._values + 0.00001).astype(np.int16)
+                return
+            self._values = np.array(self.values)
+            return
+        if self.values is not None:
+            self._values = np.array(self.values)
+            if self.boundaries is None:
+                b = np.zeros(len(self.values) + 1)
+                b[1:-1] = 0.5*(self._values[:-1] - self._values[1:])
+                b[0] = 2.0*b[1] - b[2]
+                b[-1] = 2.0*b[-2] - b[-3]
+                self._boundaries = b
+                return
+            self._boundaries = np.array(self.boundaries)
+            return
+        # Neither boundaries nor values are specified;
+        # make reasonable ones based on cmap and norm.
+        if isinstance(self.norm, colors.NoNorm):
+            self._boundaries = (
+                self._uniform_y(self.cmap.N + 1) * self.cmap.N - 0.5)
+            self._values = np.arange(self.cmap.N, dtype=np.int16)
+            return
+        elif isinstance(self.norm, colors.BoundaryNorm):
+            self._boundaries = np.array(self.norm.boundaries)
+            self._values = (self._boundaries[:-1] + self._boundaries[1:]) / 2
+            return
+        else:
+            b = self._uniform_y(self.cmap.N + 1)
+
+        self._process_values(b)
+
+    def _uniform_y(self, N):
+        '''
+        Return colorbar data coordinates for *N* uniformly
+        spaced boundaries.
+        '''
+        vmin, vmax = self._get_colorbar_limits()
+        if isinstance(self.norm, colors.LogNorm):
+            y = np.logspace(np.log10(vmin), np.log10(vmax), N)
+        else:
+            y = np.linspace(vmin, vmax, N)
+        return y
+
+    def _mesh(self):
+        '''
+        Return X,Y, the coordinate arrays for the colorbar pcolormesh.
+        These are suitable for a vertical colorbar; swapping and
+        transposition for a horizontal colorbar are done outside
+        this function.
+        '''
+        x = np.array([1.0, 2.0])
+        if self.spacing == 'uniform':
+            y = self._uniform_y(len(self._boundaries))
+        else:
+            y = self._boundaries
+        self._y = y
+
+        X, Y = np.meshgrid(x, y)
+        return X, Y
+
+    def set_alpha(self, alpha):
+        """
+        set alpha value.
+        """
+        self.alpha = alpha
+
+
+class Colorbar(ColorbarBase):
+    def __init__(self, ax, mappable, **kw):
+        # Ensure mappable.norm.vmin, vmax are set when colorbar is called, even
+        # if mappable.draw has not yet been called. This will not change vmin,
+        # vmax if they are already set.
+        mappable.autoscale_None()
+
+        self.mappable = mappable
+        kw['cmap'] = mappable.cmap
+        kw['norm'] = mappable.norm
+        kw['alpha'] = mappable.get_alpha()
+        if isinstance(mappable, contour.ContourSet):
+            CS = mappable
+            kw['boundaries'] = CS._levels
+            kw['values'] = CS.cvalues
+            kw['extend'] = CS.extend
+            #kw['ticks'] = CS._levels
+            kw.setdefault('ticks', ticker.FixedLocator(CS.levels, nbins=10))
+            kw['filled'] = CS.filled
+            ColorbarBase.__init__(self, ax, **kw)
+            if not CS.filled:
+                self.add_lines(CS)
+        else:
+            ColorbarBase.__init__(self, ax, **kw)
+
+    def add_lines(self, CS):
+        '''
+        Add the lines from a non-filled
+        :class:`~matplotlib.contour.ContourSet` to the colorbar.
+        '''
+        if not isinstance(CS, contour.ContourSet) or CS.filled:
+            raise ValueError('add_lines is only for a ContourSet of lines')
+        tcolors = [c[0] for c in CS.tcolors]
+        tlinewidths = [t[0] for t in CS.tlinewidths]
+        # The following was an attempt to get the colorbar lines
+        # to follow subsequent changes in the contour lines,
+        # but more work is needed: specifically, a careful
+        # look at event sequences, and at how
+        # to make one object track another automatically.
+        #tcolors = [col.get_colors()[0] for col in CS.collections]
+        #tlinewidths = [col.get_linewidth()[0] for lw in CS.collections]
+        ColorbarBase.add_lines(self, CS.levels, tcolors, tlinewidths)
+
+    def update_bruteforce(self, mappable):
+        """
+        Update the colorbar artists to reflect the change of the
+        associated mappable.
+        """
+        self.update_artists()
+
+        if isinstance(mappable, contour.ContourSet):
+            if not mappable.filled:
+                self.add_lines(mappable)
+
+
+@docstring.Substitution(make_axes_kw_doc)
+def make_axes(parent, *, fraction=0.15, shrink=1.0, aspect=20, **kw):
+    '''
+    Resize and reposition a parent axes, and return a child
+    axes suitable for a colorbar
+
+    ::
+
+        cax, kw = make_axes(parent, **kw)
+
+    Keyword arguments may include the following (with defaults):
+
+        *orientation*
+            'vertical'  or 'horizontal'
+
+    %s
+
+    All but the first of these are stripped from the input kw set.
+
+    Returns (cax, kw), the child axes and the reduced kw dictionary.
+    '''
+    orientation = kw.setdefault('orientation', 'vertical')
+    #pb = transforms.PBox(parent.get_position())
+    pb = parent.get_position(original=True).frozen()
+    if orientation == 'vertical':
+        pad = kw.pop('pad', 0.05)
+        x1 = 1.0-fraction
+        pb1, pbx, pbcb = pb.splitx(x1-pad, x1)
+        pbcb = pbcb.shrunk(1.0, shrink).anchored('C', pbcb)
+        anchor = (0.0, 0.5)
+        panchor = (1.0, 0.5)
+    else:
+        pad = kw.pop('pad', 0.15)
+        pbcb, pbx, pb1 = pb.splity(fraction, fraction+pad)
+        pbcb = pbcb.shrunk(shrink, 1.0).anchored('C', pbcb)
+        aspect = 1.0/aspect
+        anchor = (0.5, 1.0)
+        panchor = (0.5, 0.0)
+    parent.set_position(pb1)
+    parent.set_anchor(panchor)
+    fig = parent.get_figure()
+    cax = fig.add_axes(pbcb)
+    cax.set_aspect(aspect, anchor=anchor, adjustable='box')
+    return cax, kw
+
+
+@docstring.Substitution(colorbar_doc)
+def colorbar(mappable, cax=None, ax=None, **kw):
+    """
+    Create a colorbar for a ScalarMappable instance.
+
+    Documentation for the pyplot thin wrapper:
+
+    %s
+    """
+    import matplotlib.pyplot as plt
+    if ax is None:
+        ax = plt.gca()
+    if cax is None:
+        cax, kw = make_axes(ax, **kw)
+    cb = Colorbar(cax, mappable, **kw)
+
+    def on_changed(m):
+        cb.set_cmap(m.get_cmap())
+        cb.set_clim(m.get_clim())
+        cb.update_bruteforce(m)
+
+    mappable.callbacksSM.connect('changed', on_changed)
+    mappable.colorbar = cb
+    ax.figure.sca(ax)
+    return cb
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/parasite_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/parasite_axes.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/parasite_axes.py	(date 1589417755518)
@@ -0,0 +1,419 @@
+import functools
+
+from matplotlib import artist as martist, cbook, transforms as mtransforms
+from matplotlib.axes import subplot_class_factory
+from matplotlib.transforms import Bbox
+from .mpl_axes import Axes
+
+import numpy as np
+
+
+class ParasiteAxesBase:
+
+    def get_images_artists(self):
+        artists = {a for a in self.get_children() if a.get_visible()}
+        images = {a for a in self.images if a.get_visible()}
+
+        return list(images), list(artists - images)
+
+    def __init__(self, parent_axes, **kwargs):
+        self._parent_axes = parent_axes
+        kwargs["frameon"] = False
+        super().__init__(parent_axes.figure, parent_axes._position, **kwargs)
+
+    def cla(self):
+        super().cla()
+
+        martist.setp(self.get_children(), visible=False)
+        self._get_lines = self._parent_axes._get_lines
+
+        # In mpl's Axes, zorders of x- and y-axis are originally set
+        # within Axes.draw().
+        if self._axisbelow:
+            self.xaxis.set_zorder(0.5)
+            self.yaxis.set_zorder(0.5)
+        else:
+            self.xaxis.set_zorder(2.5)
+            self.yaxis.set_zorder(2.5)
+
+    def pick(self, mouseevent):
+        # This most likely goes to Artist.pick (depending on axes_class given
+        # to the factory), which only handles pick events registered on the
+        # axes associated with each child:
+        super().pick(mouseevent)
+        # But parasite axes are additionally given pick events from their host
+        # axes (cf. HostAxesBase.pick), which we handle here:
+        for a in self.get_children():
+            if (hasattr(mouseevent.inaxes, "parasites")
+                    and self in mouseevent.inaxes.parasites):
+                a.pick(mouseevent)
+
+
+@functools.lru_cache(None)
+def parasite_axes_class_factory(axes_class=None):
+    if axes_class is None:
+        axes_class = Axes
+
+    return type("%sParasite" % axes_class.__name__,
+                (ParasiteAxesBase, axes_class), {})
+
+
+ParasiteAxes = parasite_axes_class_factory()
+
+
+class ParasiteAxesAuxTransBase:
+    def __init__(self, parent_axes, aux_transform, viewlim_mode=None,
+                 **kwargs):
+        self.transAux = aux_transform
+        self.set_viewlim_mode(viewlim_mode)
+        super().__init__(parent_axes, **kwargs)
+
+    def _set_lim_and_transforms(self):
+
+        self.transAxes = self._parent_axes.transAxes
+
+        self.transData = \
+            self.transAux + \
+            self._parent_axes.transData
+
+        self._xaxis_transform = mtransforms.blended_transform_factory(
+                self.transData, self.transAxes)
+        self._yaxis_transform = mtransforms.blended_transform_factory(
+                self.transAxes, self.transData)
+
+    def set_viewlim_mode(self, mode):
+        cbook._check_in_list([None, "equal", "transform"], mode=mode)
+        self._viewlim_mode = mode
+
+    def get_viewlim_mode(self):
+        return self._viewlim_mode
+
+    def update_viewlim(self):
+        viewlim = self._parent_axes.viewLim.frozen()
+        mode = self.get_viewlim_mode()
+        if mode is None:
+            pass
+        elif mode == "equal":
+            self.axes.viewLim.set(viewlim)
+        elif mode == "transform":
+            self.axes.viewLim.set(
+                viewlim.transformed(self.transAux.inverted()))
+        else:
+            cbook._check_in_list([None, "equal", "transform"], mode=mode)
+
+    def _pcolor(self, super_pcolor, *XYC, **kwargs):
+        if len(XYC) == 1:
+            C = XYC[0]
+            ny, nx = C.shape
+
+            gx = np.arange(-0.5, nx)
+            gy = np.arange(-0.5, ny)
+
+            X, Y = np.meshgrid(gx, gy)
+        else:
+            X, Y, C = XYC
+
+        if "transform" in kwargs:
+            mesh = super_pcolor(X, Y, C, **kwargs)
+        else:
+            orig_shape = X.shape
+            xyt = np.column_stack([X.flat, Y.flat])
+            wxy = self.transAux.transform(xyt)
+            gx = wxy[:, 0].reshape(orig_shape)
+            gy = wxy[:, 1].reshape(orig_shape)
+            mesh = super_pcolor(gx, gy, C, **kwargs)
+            mesh.set_transform(self._parent_axes.transData)
+
+        return mesh
+
+    def pcolormesh(self, *XYC, **kwargs):
+        return self._pcolor(super().pcolormesh, *XYC, **kwargs)
+
+    def pcolor(self, *XYC, **kwargs):
+        return self._pcolor(super().pcolor, *XYC, **kwargs)
+
+    def _contour(self, super_contour, *XYCL, **kwargs):
+
+        if len(XYCL) <= 2:
+            C = XYCL[0]
+            ny, nx = C.shape
+
+            gx = np.arange(0., nx)
+            gy = np.arange(0., ny)
+
+            X, Y = np.meshgrid(gx, gy)
+            CL = XYCL
+        else:
+            X, Y = XYCL[:2]
+            CL = XYCL[2:]
+
+        if "transform" in kwargs:
+            cont = super_contour(X, Y, *CL, **kwargs)
+        else:
+            orig_shape = X.shape
+            xyt = np.column_stack([X.flat, Y.flat])
+            wxy = self.transAux.transform(xyt)
+            gx = wxy[:, 0].reshape(orig_shape)
+            gy = wxy[:, 1].reshape(orig_shape)
+            cont = super_contour(gx, gy, *CL, **kwargs)
+            for c in cont.collections:
+                c.set_transform(self._parent_axes.transData)
+
+        return cont
+
+    def contour(self, *XYCL, **kwargs):
+        return self._contour(super().contour, *XYCL, **kwargs)
+
+    def contourf(self, *XYCL, **kwargs):
+        return self._contour(super().contourf, *XYCL, **kwargs)
+
+    def apply_aspect(self, position=None):
+        self.update_viewlim()
+        super().apply_aspect()
+
+
+@functools.lru_cache(None)
+def parasite_axes_auxtrans_class_factory(axes_class=None):
+    if axes_class is None:
+        parasite_axes_class = ParasiteAxes
+    elif not issubclass(axes_class, ParasiteAxesBase):
+        parasite_axes_class = parasite_axes_class_factory(axes_class)
+    else:
+        parasite_axes_class = axes_class
+    return type("%sParasiteAuxTrans" % parasite_axes_class.__name__,
+                (ParasiteAxesAuxTransBase, parasite_axes_class),
+                {'name': 'parasite_axes'})
+
+
+ParasiteAxesAuxTrans = parasite_axes_auxtrans_class_factory(
+    axes_class=ParasiteAxes)
+
+
+class HostAxesBase:
+    def __init__(self, *args, **kwargs):
+        self.parasites = []
+        super().__init__(*args, **kwargs)
+
+    def get_aux_axes(self, tr, viewlim_mode="equal", axes_class=None):
+        parasite_axes_class = parasite_axes_auxtrans_class_factory(axes_class)
+        ax2 = parasite_axes_class(self, tr, viewlim_mode)
+        # note that ax2.transData == tr + ax1.transData
+        # Anything you draw in ax2 will match the ticks and grids of ax1.
+        self.parasites.append(ax2)
+        ax2._remove_method = self.parasites.remove
+        return ax2
+
+    def _get_legend_handles(self, legend_handler_map=None):
+        all_handles = super()._get_legend_handles()
+        for ax in self.parasites:
+            all_handles.extend(ax._get_legend_handles(legend_handler_map))
+        return all_handles
+
+    def draw(self, renderer):
+
+        orig_artists = list(self.artists)
+        orig_images = list(self.images)
+
+        if hasattr(self, "get_axes_locator"):
+            locator = self.get_axes_locator()
+            if locator:
+                pos = locator(self, renderer)
+                self.set_position(pos, which="active")
+                self.apply_aspect(pos)
+            else:
+                self.apply_aspect()
+        else:
+            self.apply_aspect()
+
+        rect = self.get_position()
+
+        for ax in self.parasites:
+            ax.apply_aspect(rect)
+            images, artists = ax.get_images_artists()
+            self.images.extend(images)
+            self.artists.extend(artists)
+
+        super().draw(renderer)
+        self.artists = orig_artists
+        self.images = orig_images
+
+    def cla(self):
+        for ax in self.parasites:
+            ax.cla()
+        super().cla()
+
+    def pick(self, mouseevent):
+        super().pick(mouseevent)
+        # Also pass pick events on to parasite axes and, in turn, their
+        # children (cf. ParasiteAxesBase.pick)
+        for a in self.parasites:
+            a.pick(mouseevent)
+
+    def twinx(self, axes_class=None):
+        """
+        Create a twin of Axes with a shared x-axis but independent y-axis.
+
+        The y-axis of self will have ticks on the left and the returned axes
+        will have ticks on the right.
+        """
+        if axes_class is None:
+            axes_class = self._get_base_axes()
+
+        parasite_axes_class = parasite_axes_class_factory(axes_class)
+
+        ax2 = parasite_axes_class(self, sharex=self, frameon=False)
+        self.parasites.append(ax2)
+        ax2._remove_method = self._remove_twinx
+
+        self.axis["right"].set_visible(False)
+
+        ax2.axis["right"].set_visible(True)
+        ax2.axis["left", "top", "bottom"].set_visible(False)
+
+        return ax2
+
+    def _remove_twinx(self, ax):
+        self.parasites.remove(ax)
+        self.axis["right"].set_visible(True)
+        self.axis["right"].toggle(ticklabels=False, label=False)
+
+    def twiny(self, axes_class=None):
+        """
+        Create a twin of Axes with a shared y-axis but independent x-axis.
+
+        The x-axis of self will have ticks on the bottom and the returned axes
+        will have ticks on the top.
+        """
+        if axes_class is None:
+            axes_class = self._get_base_axes()
+
+        parasite_axes_class = parasite_axes_class_factory(axes_class)
+
+        ax2 = parasite_axes_class(self, sharey=self, frameon=False)
+        self.parasites.append(ax2)
+        ax2._remove_method = self._remove_twiny
+
+        self.axis["top"].set_visible(False)
+
+        ax2.axis["top"].set_visible(True)
+        ax2.axis["left", "right", "bottom"].set_visible(False)
+
+        return ax2
+
+    def _remove_twiny(self, ax):
+        self.parasites.remove(ax)
+        self.axis["top"].set_visible(True)
+        self.axis["top"].toggle(ticklabels=False, label=False)
+
+    def twin(self, aux_trans=None, axes_class=None):
+        """
+        Create a twin of Axes with no shared axis.
+
+        While self will have ticks on the left and bottom axis, the returned
+        axes will have ticks on the top and right axis.
+        """
+        if axes_class is None:
+            axes_class = self._get_base_axes()
+
+        parasite_axes_auxtrans_class = \
+            parasite_axes_auxtrans_class_factory(axes_class)
+
+        if aux_trans is None:
+            ax2 = parasite_axes_auxtrans_class(
+                self, mtransforms.IdentityTransform(), viewlim_mode="equal")
+        else:
+            ax2 = parasite_axes_auxtrans_class(
+                self, aux_trans, viewlim_mode="transform")
+        self.parasites.append(ax2)
+        ax2._remove_method = self.parasites.remove
+
+        self.axis["top", "right"].set_visible(False)
+
+        ax2.axis["top", "right"].set_visible(True)
+        ax2.axis["left", "bottom"].set_visible(False)
+
+        def _remove_method(h):
+            self.parasites.remove(h)
+            self.axis["top", "right"].set_visible(True)
+            self.axis["top", "right"].toggle(ticklabels=False, label=False)
+        ax2._remove_method = _remove_method
+
+        return ax2
+
+    def get_tightbbox(self, renderer, call_axes_locator=True,
+                      bbox_extra_artists=None):
+        bbs = [ax.get_tightbbox(renderer, call_axes_locator=call_axes_locator)
+               for ax in self.parasites]
+        bbs.append(super().get_tightbbox(renderer,
+                call_axes_locator=call_axes_locator,
+                bbox_extra_artists=bbox_extra_artists))
+        return Bbox.union([b for b in bbs if b.width != 0 or b.height != 0])
+
+
+@functools.lru_cache(None)
+def host_axes_class_factory(axes_class=None):
+    if axes_class is None:
+        axes_class = Axes
+
+    def _get_base_axes(self):
+        return axes_class
+
+    return type("%sHostAxes" % axes_class.__name__,
+                (HostAxesBase, axes_class),
+                {'_get_base_axes': _get_base_axes})
+
+
+def host_subplot_class_factory(axes_class):
+    host_axes_class = host_axes_class_factory(axes_class=axes_class)
+    subplot_host_class = subplot_class_factory(host_axes_class)
+    return subplot_host_class
+
+
+HostAxes = host_axes_class_factory(axes_class=Axes)
+SubplotHost = subplot_class_factory(HostAxes)
+
+
+def host_axes(*args, axes_class=None, figure=None, **kwargs):
+    """
+    Create axes that can act as a hosts to parasitic axes.
+
+    Parameters
+    ----------
+    figure : `matplotlib.figure.Figure`
+        Figure to which the axes will be added. Defaults to the current figure
+        `pyplot.gcf()`.
+
+    *args, **kwargs
+        Will be passed on to the underlying ``Axes`` object creation.
+    """
+    import matplotlib.pyplot as plt
+    host_axes_class = host_axes_class_factory(axes_class)
+    if figure is None:
+        figure = plt.gcf()
+    ax = host_axes_class(figure, *args, **kwargs)
+    figure.add_axes(ax)
+    plt.draw_if_interactive()
+    return ax
+
+
+def host_subplot(*args, axes_class=None, figure=None, **kwargs):
+    """
+    Create a subplot that can act as a host to parasitic axes.
+
+    Parameters
+    ----------
+    figure : `matplotlib.figure.Figure`
+        Figure to which the subplot will be added. Defaults to the current
+        figure `pyplot.gcf()`.
+
+    *args, **kwargs
+        Will be passed on to the underlying ``Axes`` object creation.
+    """
+    import matplotlib.pyplot as plt
+    host_subplot_class = host_subplot_class_factory(axes_class)
+    if figure is None:
+        figure = plt.gcf()
+    ax = host_subplot_class(figure, *args, **kwargs)
+    figure.add_subplot(ax)
+    plt.draw_if_interactive()
+    return ax
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_size.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_size.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_size.py	(date 1589417755518)
@@ -0,0 +1,313 @@
+"""
+Provides classes of simple units that will be used with AxesDivider
+class (or others) to determine the size of each axes. The unit
+classes define `get_size` method that returns a tuple of two floats,
+meaning relative and absolute sizes, respectively.
+
+Note that this class is nothing more than a simple tuple of two
+floats. Take a look at the Divider class to see how these two
+values are used.
+"""
+
+from numbers import Number
+
+from matplotlib import cbook
+from matplotlib.axes import Axes
+
+
+class _Base:
+    "Base class"
+
+    def __rmul__(self, other):
+        float(other)  # just to check if number if given
+        return Fraction(other, self)
+
+    def __add__(self, other):
+        if isinstance(other, _Base):
+            return Add(self, other)
+        else:
+            float(other)
+            other = Fixed(other)
+            return Add(self, other)
+
+
+class Add(_Base):
+    def __init__(self, a, b):
+        self._a = a
+        self._b = b
+
+    def get_size(self, renderer):
+        a_rel_size, a_abs_size = self._a.get_size(renderer)
+        b_rel_size, b_abs_size = self._b.get_size(renderer)
+        return a_rel_size + b_rel_size, a_abs_size + b_abs_size
+
+
+class AddList(_Base):
+    def __init__(self, add_list):
+        self._list = add_list
+
+    def get_size(self, renderer):
+        sum_rel_size = sum([a.get_size(renderer)[0] for a in self._list])
+        sum_abs_size = sum([a.get_size(renderer)[1] for a in self._list])
+        return sum_rel_size, sum_abs_size
+
+
+class Fixed(_Base):
+    """
+    Simple fixed size with absolute part = *fixed_size* and relative part = 0.
+    """
+    def __init__(self, fixed_size):
+        self.fixed_size = fixed_size
+
+    def get_size(self, renderer):
+        rel_size = 0.
+        abs_size = self.fixed_size
+        return rel_size, abs_size
+
+
+class Scaled(_Base):
+    """
+    Simple scaled(?) size with absolute part = 0 and
+    relative part = *scalable_size*.
+    """
+
+    def __init__(self, scalable_size):
+        self._scalable_size = scalable_size
+
+    def get_size(self, renderer):
+        rel_size = self._scalable_size
+        abs_size = 0.
+        return rel_size, abs_size
+
+Scalable = Scaled
+
+
+def _get_axes_aspect(ax):
+    aspect = ax.get_aspect()
+    # when aspec is "auto", consider it as 1.
+    if aspect in ('normal', 'auto'):
+        aspect = 1.
+    elif aspect == "equal":
+        aspect = 1
+    else:
+        aspect = float(aspect)
+
+    return aspect
+
+
+class AxesX(_Base):
+    """
+    Scaled size whose relative part corresponds to the data width
+    of the *axes* multiplied by the *aspect*.
+    """
+    def __init__(self, axes, aspect=1., ref_ax=None):
+        self._axes = axes
+        self._aspect = aspect
+        if aspect == "axes" and ref_ax is None:
+            raise ValueError("ref_ax must be set when aspect='axes'")
+        self._ref_ax = ref_ax
+
+    def get_size(self, renderer):
+        l1, l2 = self._axes.get_xlim()
+        if self._aspect == "axes":
+            ref_aspect = _get_axes_aspect(self._ref_ax)
+            aspect = ref_aspect / _get_axes_aspect(self._axes)
+        else:
+            aspect = self._aspect
+
+        rel_size = abs(l2-l1)*aspect
+        abs_size = 0.
+        return rel_size, abs_size
+
+
+class AxesY(_Base):
+    """
+    Scaled size whose relative part corresponds to the data height
+    of the *axes* multiplied by the *aspect*.
+    """
+    def __init__(self, axes, aspect=1., ref_ax=None):
+        self._axes = axes
+        self._aspect = aspect
+        if aspect == "axes" and ref_ax is None:
+            raise ValueError("ref_ax must be set when aspect='axes'")
+        self._ref_ax = ref_ax
+
+    def get_size(self, renderer):
+        l1, l2 = self._axes.get_ylim()
+
+        if self._aspect == "axes":
+            ref_aspect = _get_axes_aspect(self._ref_ax)
+            aspect = _get_axes_aspect(self._axes)
+        else:
+            aspect = self._aspect
+
+        rel_size = abs(l2-l1)*aspect
+        abs_size = 0.
+        return rel_size, abs_size
+
+
+class MaxExtent(_Base):
+    """
+    Size whose absolute part is the largest width (or height) of
+    the given *artist_list*.
+    """
+    def __init__(self, artist_list, w_or_h):
+        self._artist_list = artist_list
+
+        cbook._check_in_list(["width", "height"], w_or_h=w_or_h)
+        self._w_or_h = w_or_h
+
+    def add_artist(self, a):
+        self._artist_list.append(a)
+
+    def get_size(self, renderer):
+        rel_size = 0.
+        w_list, h_list = [], []
+        for a in self._artist_list:
+            bb = a.get_window_extent(renderer)
+            w_list.append(bb.width)
+            h_list.append(bb.height)
+        dpi = a.get_figure().get_dpi()
+        if self._w_or_h == "width":
+            abs_size = max(w_list)/dpi
+        elif self._w_or_h == "height":
+            abs_size = max(h_list)/dpi
+
+        return rel_size, abs_size
+
+
+class MaxWidth(_Base):
+    """
+    Size whose absolute part is the largest width of
+    the given *artist_list*.
+    """
+    def __init__(self, artist_list):
+        self._artist_list = artist_list
+
+    def add_artist(self, a):
+        self._artist_list.append(a)
+
+    def get_size(self, renderer):
+        rel_size = 0.
+        w_list = []
+        for a in self._artist_list:
+            bb = a.get_window_extent(renderer)
+            w_list.append(bb.width)
+        dpi = a.get_figure().get_dpi()
+        abs_size = max(w_list)/dpi
+
+        return rel_size, abs_size
+
+
+class MaxHeight(_Base):
+    """
+    Size whose absolute part is the largest height of
+    the given *artist_list*.
+    """
+    def __init__(self, artist_list):
+        self._artist_list = artist_list
+
+    def add_artist(self, a):
+        self._artist_list.append(a)
+
+    def get_size(self, renderer):
+        rel_size = 0.
+        h_list = []
+        for a in self._artist_list:
+            bb = a.get_window_extent(renderer)
+            h_list.append(bb.height)
+        dpi = a.get_figure().get_dpi()
+        abs_size = max(h_list)/dpi
+
+        return rel_size, abs_size
+
+
+class Fraction(_Base):
+    """
+    An instance whose size is a *fraction* of the *ref_size*.
+
+    >>> s = Fraction(0.3, AxesX(ax))
+
+    """
+    def __init__(self, fraction, ref_size):
+        self._fraction_ref = ref_size
+        self._fraction = fraction
+
+    def get_size(self, renderer):
+        if self._fraction_ref is None:
+            return self._fraction, 0.
+        else:
+            r, a = self._fraction_ref.get_size(renderer)
+            rel_size = r*self._fraction
+            abs_size = a*self._fraction
+            return rel_size, abs_size
+
+
+class Padded(_Base):
+    """
+    Return a instance where the absolute part of *size* is
+    increase by the amount of *pad*.
+    """
+    def __init__(self, size, pad):
+        self._size = size
+        self._pad = pad
+
+    def get_size(self, renderer):
+        r, a = self._size.get_size(renderer)
+        rel_size = r
+        abs_size = a + self._pad
+        return rel_size, abs_size
+
+
+def from_any(size, fraction_ref=None):
+    """
+    Creates Fixed unit when the first argument is a float, or a
+    Fraction unit if that is a string that ends with %. The second
+    argument is only meaningful when Fraction unit is created.::
+
+      >>> a = Size.from_any(1.2) # => Size.Fixed(1.2)
+      >>> Size.from_any("50%", a) # => Size.Fraction(0.5, a)
+
+    """
+    if isinstance(size, Number):
+        return Fixed(size)
+    elif isinstance(size, str):
+        if size[-1] == "%":
+            return Fraction(float(size[:-1]) / 100, fraction_ref)
+
+    raise ValueError("Unknown format")
+
+
+class SizeFromFunc(_Base):
+    def __init__(self, func):
+        self._func = func
+
+    def get_size(self, renderer):
+        rel_size = 0.
+
+        bb = self._func(renderer)
+        dpi = renderer.points_to_pixels(72.)
+        abs_size = bb/dpi
+
+        return rel_size, abs_size
+
+
+class GetExtentHelper:
+    _get_func_map = {
+        "left":   lambda self, axes_bbox: axes_bbox.xmin - self.xmin,
+        "right":  lambda self, axes_bbox: self.xmax - axes_bbox.xmax,
+        "bottom": lambda self, axes_bbox: axes_bbox.ymin - self.ymin,
+        "top":    lambda self, axes_bbox: self.ymax - axes_bbox.ymax,
+    }
+
+    def __init__(self, ax, direction):
+        cbook._check_in_list(self._get_func_map, direction=direction)
+        self._ax_list = [ax] if isinstance(ax, Axes) else ax
+        self._direction = direction
+
+    def __call__(self, renderer):
+        get_func = self._get_func_map[self._direction]
+        vl = [get_func(ax.get_tightbbox(renderer, call_axes_locator=False),
+                       ax.bbox)
+              for ax in self._ax_list]
+        return max(vl)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_divider.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_divider.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/axes_divider.py	(date 1589417755518)
@@ -0,0 +1,866 @@
+"""
+The axes_divider module provides helper classes to adjust the positions of
+multiple axes at drawing time.
+
+ Divider: this is the class that is used to calculate the axes
+    position. It divides the given rectangular area into several sub
+    rectangles. You initialize the divider by setting the horizontal
+    and vertical lists of sizes that the division will be based on. You
+    then use the new_locator method, whose return value is a callable
+    object that can be used to set the axes_locator of the axes.
+"""
+
+from matplotlib import cbook
+from matplotlib.axes import SubplotBase
+from matplotlib.gridspec import SubplotSpec, GridSpec
+import matplotlib.transforms as mtransforms
+from . import axes_size as Size
+
+
+class Divider:
+    """
+    This class calculates the axes position. It
+    divides the given rectangular area into several
+    sub-rectangles. You initialize the divider by setting the
+    horizontal and vertical lists of sizes
+    (:mod:`mpl_toolkits.axes_grid.axes_size`) that the division will
+    be based on. You then use the new_locator method to create a
+    callable object that can be used as the axes_locator of the
+    axes.
+    """
+
+    def __init__(self, fig, pos, horizontal, vertical,
+                 aspect=None, anchor="C"):
+        """
+        Parameters
+        ----------
+        fig : Figure
+        pos : tuple of 4 floats
+            position of the rectangle that will be divided
+        horizontal : list of :mod:`~mpl_toolkits.axes_grid.axes_size`
+            sizes for horizontal division
+        vertical : list of :mod:`~mpl_toolkits.axes_grid.axes_size`
+            sizes for vertical division
+        aspect : bool
+            if True, the overall rectangular area is reduced
+            so that the relative part of the horizontal and
+            vertical scales have the same scale.
+        anchor : {'C', 'SW', 'S', 'SE', 'E', 'NE', 'N', 'NW', 'W'}
+            placement of the reduced rectangle when *aspect* is True
+        """
+
+        self._fig = fig
+        self._pos = pos
+        self._horizontal = horizontal
+        self._vertical = vertical
+        self._anchor = anchor
+        self._aspect = aspect
+        self._xrefindex = 0
+        self._yrefindex = 0
+        self._locator = None
+
+    def get_horizontal_sizes(self, renderer):
+        return [s.get_size(renderer) for s in self.get_horizontal()]
+
+    def get_vertical_sizes(self, renderer):
+        return [s.get_size(renderer) for s in self.get_vertical()]
+
+    def get_vsize_hsize(self):
+
+        from .axes_size import AddList
+
+        vsize = AddList(self.get_vertical())
+        hsize = AddList(self.get_horizontal())
+
+        return vsize, hsize
+
+    @staticmethod
+    def _calc_k(l, total_size):
+
+        rs_sum, as_sum = 0., 0.
+
+        for _rs, _as in l:
+            rs_sum += _rs
+            as_sum += _as
+
+        if rs_sum != 0.:
+            k = (total_size - as_sum) / rs_sum
+            return k
+        else:
+            return 0.
+
+    @staticmethod
+    def _calc_offsets(l, k):
+        offsets = [0.]
+        for _rs, _as in l:
+            offsets.append(offsets[-1] + _rs*k + _as)
+        return offsets
+
+    def set_position(self, pos):
+        """
+        set the position of the rectangle.
+
+        Parameters
+        ----------
+        pos : tuple of 4 floats
+            position of the rectangle that will be divided
+        """
+        self._pos = pos
+
+    def get_position(self):
+        "return the position of the rectangle."
+        return self._pos
+
+    def set_anchor(self, anchor):
+        """
+        Parameters
+        ----------
+        anchor : {'C', 'SW', 'S', 'SE', 'E', 'NE', 'N', 'NW', 'W'}
+            anchor position
+
+          =====  ============
+          value  description
+          =====  ============
+          'C'    Center
+          'SW'   bottom left
+          'S'    bottom
+          'SE'   bottom right
+          'E'    right
+          'NE'   top right
+          'N'    top
+          'NW'   top left
+          'W'    left
+          =====  ============
+
+        """
+        if len(anchor) != 2:
+            cbook._check_in_list(mtransforms.Bbox.coefs, anchor=anchor)
+        self._anchor = anchor
+
+    def get_anchor(self):
+        "return the anchor"
+        return self._anchor
+
+    def set_horizontal(self, h):
+        """
+        Parameters
+        ----------
+        h : list of :mod:`~mpl_toolkits.axes_grid.axes_size`
+            sizes for horizontal division
+        """
+        self._horizontal = h
+
+    def get_horizontal(self):
+        "return horizontal sizes"
+        return self._horizontal
+
+    def set_vertical(self, v):
+        """
+        Parameters
+        ----------
+        v : list of :mod:`~mpl_toolkits.axes_grid.axes_size`
+            sizes for vertical division
+        """
+        self._vertical = v
+
+    def get_vertical(self):
+        "return vertical sizes"
+        return self._vertical
+
+    def set_aspect(self, aspect=False):
+        """
+        Parameters
+        ----------
+        aspect : bool
+        """
+        self._aspect = aspect
+
+    def get_aspect(self):
+        "return aspect"
+        return self._aspect
+
+    def set_locator(self, _locator):
+        self._locator = _locator
+
+    def get_locator(self):
+        return self._locator
+
+    def get_position_runtime(self, ax, renderer):
+        if self._locator is None:
+            return self.get_position()
+        else:
+            return self._locator(ax, renderer).bounds
+
+    def locate(self, nx, ny, nx1=None, ny1=None, axes=None, renderer=None):
+        """
+        Parameters
+        ----------
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        axes
+        renderer
+        """
+
+        figW, figH = self._fig.get_size_inches()
+        x, y, w, h = self.get_position_runtime(axes, renderer)
+
+        hsizes = self.get_horizontal_sizes(renderer)
+        vsizes = self.get_vertical_sizes(renderer)
+        k_h = self._calc_k(hsizes, figW*w)
+        k_v = self._calc_k(vsizes, figH*h)
+
+        if self.get_aspect():
+            k = min(k_h, k_v)
+            ox = self._calc_offsets(hsizes, k)
+            oy = self._calc_offsets(vsizes, k)
+
+            ww = (ox[-1] - ox[0])/figW
+            hh = (oy[-1] - oy[0])/figH
+            pb = mtransforms.Bbox.from_bounds(x, y, w, h)
+            pb1 = mtransforms.Bbox.from_bounds(x, y, ww, hh)
+            pb1_anchored = pb1.anchored(self.get_anchor(), pb)
+            x0, y0 = pb1_anchored.x0, pb1_anchored.y0
+
+        else:
+            ox = self._calc_offsets(hsizes, k_h)
+            oy = self._calc_offsets(vsizes, k_v)
+            x0, y0 = x, y
+
+        if nx1 is None:
+            nx1 = nx+1
+        if ny1 is None:
+            ny1 = ny+1
+
+        x1, w1 = x0 + ox[nx]/figW, (ox[nx1] - ox[nx])/figW
+        y1, h1 = y0 + oy[ny]/figH, (oy[ny1] - oy[ny])/figH
+
+        return mtransforms.Bbox.from_bounds(x1, y1, w1, h1)
+
+    def new_locator(self, nx, ny, nx1=None, ny1=None):
+        """
+        Returns a new locator
+        (:class:`mpl_toolkits.axes_grid.axes_divider.AxesLocator`) for
+        specified cell.
+
+        Parameters
+        ----------
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        """
+        return AxesLocator(self, nx, ny, nx1, ny1)
+
+    def append_size(self, position, size):
+        if position == "left":
+            self._horizontal.insert(0, size)
+            self._xrefindex += 1
+        elif position == "right":
+            self._horizontal.append(size)
+        elif position == "bottom":
+            self._vertical.insert(0, size)
+            self._yrefindex += 1
+        elif position == "top":
+            self._vertical.append(size)
+        else:
+            cbook._check_in_list(["left", "right", "bottom", "top"],
+                                 position=position)
+
+    def add_auto_adjustable_area(self,
+                                 use_axes, pad=0.1,
+                                 adjust_dirs=None,
+                                 ):
+        if adjust_dirs is None:
+            adjust_dirs = ["left", "right", "bottom", "top"]
+        from .axes_size import Padded, SizeFromFunc, GetExtentHelper
+        for d in adjust_dirs:
+            helper = GetExtentHelper(use_axes, d)
+            size = SizeFromFunc(helper)
+            padded_size = Padded(size, pad)  # pad in inch
+            self.append_size(d, padded_size)
+
+
+class AxesLocator:
+    """
+    A simple callable object, initialized with AxesDivider class,
+    returns the position and size of the given cell.
+    """
+    def __init__(self, axes_divider, nx, ny, nx1=None, ny1=None):
+        """
+        Parameters
+        ----------
+        axes_divider : AxesDivider
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        """
+        self._axes_divider = axes_divider
+
+        _xrefindex = axes_divider._xrefindex
+        _yrefindex = axes_divider._yrefindex
+
+        self._nx, self._ny = nx - _xrefindex, ny - _yrefindex
+
+        if nx1 is None:
+            nx1 = nx+1
+        if ny1 is None:
+            ny1 = ny+1
+
+        self._nx1 = nx1 - _xrefindex
+        self._ny1 = ny1 - _yrefindex
+
+    def __call__(self, axes, renderer):
+
+        _xrefindex = self._axes_divider._xrefindex
+        _yrefindex = self._axes_divider._yrefindex
+
+        return self._axes_divider.locate(self._nx + _xrefindex,
+                                         self._ny + _yrefindex,
+                                         self._nx1 + _xrefindex,
+                                         self._ny1 + _yrefindex,
+                                         axes,
+                                         renderer)
+
+    def get_subplotspec(self):
+        if hasattr(self._axes_divider, "get_subplotspec"):
+            return self._axes_divider.get_subplotspec()
+        else:
+            return None
+
+
+class SubplotDivider(Divider):
+    """
+    The Divider class whose rectangle area is specified as a subplot geometry.
+    """
+
+    def __init__(self, fig, *args, horizontal=None, vertical=None,
+                 aspect=None, anchor='C'):
+        """
+        Parameters
+        ----------
+        fig : `matplotlib.figure.Figure`
+
+        *args : tuple (*nrows*, *ncols*, *index*) or int
+            The array of subplots in the figure has dimensions ``(nrows,
+            ncols)``, and *index* is the index of the subplot being created.
+            *index* starts at 1 in the upper left corner and increases to the
+            right.
+
+            If *nrows*, *ncols*, and *index* are all single digit numbers, then
+            *args* can be passed as a single 3-digit number (e.g. 234 for
+            (2, 3, 4)).
+        """
+
+        self.figure = fig
+
+        if len(args) == 1:
+            if isinstance(args[0], SubplotSpec):
+                self._subplotspec = args[0]
+            else:
+                try:
+                    s = str(int(args[0]))
+                    rows, cols, num = map(int, s)
+                except ValueError:
+                    raise ValueError(
+                        'Single argument to subplot must be a 3-digit integer')
+                self._subplotspec = GridSpec(rows, cols)[num-1]
+                # num - 1 for converting from MATLAB to python indexing
+        elif len(args) == 3:
+            rows, cols, num = args
+            rows = int(rows)
+            cols = int(cols)
+            if isinstance(num, tuple) and len(num) == 2:
+                num = [int(n) for n in num]
+                self._subplotspec = GridSpec(rows, cols)[num[0]-1:num[1]]
+            else:
+                self._subplotspec = GridSpec(rows, cols)[int(num)-1]
+                # num - 1 for converting from MATLAB to python indexing
+        else:
+            raise ValueError(f'Illegal argument(s) to subplot: {args}')
+
+        # total = rows*cols
+        # num -= 1    # convert from matlab to python indexing
+        #             # i.e., num in range(0, total)
+        # if num >= total:
+        #     raise ValueError( 'Subplot number exceeds total subplots')
+        # self._rows = rows
+        # self._cols = cols
+        # self._num = num
+
+        # self.update_params()
+
+        # sets self.fixbox
+        self.update_params()
+
+        pos = self.figbox.bounds
+
+        Divider.__init__(self, fig, pos, horizontal or [], vertical or [],
+                         aspect=aspect, anchor=anchor)
+
+    def get_position(self):
+        "return the bounds of the subplot box"
+
+        self.update_params()  # update self.figbox
+        return self.figbox.bounds
+
+    # def update_params(self):
+    #     'update the subplot position from fig.subplotpars'
+
+    #     rows = self._rows
+    #     cols = self._cols
+    #     num = self._num
+
+    #     pars = self.figure.subplotpars
+    #     left = pars.left
+    #     right = pars.right
+    #     bottom = pars.bottom
+    #     top = pars.top
+    #     wspace = pars.wspace
+    #     hspace = pars.hspace
+    #     totWidth = right-left
+    #     totHeight = top-bottom
+
+    #     figH = totHeight/(rows + hspace*(rows-1))
+    #     sepH = hspace*figH
+
+    #     figW = totWidth/(cols + wspace*(cols-1))
+    #     sepW = wspace*figW
+
+    #     rowNum, colNum =  divmod(num, cols)
+
+    #     figBottom = top - (rowNum+1)*figH - rowNum*sepH
+    #     figLeft = left + colNum*(figW + sepW)
+
+    #     self.figbox = mtransforms.Bbox.from_bounds(figLeft, figBottom,
+    #                                                figW, figH)
+
+    def update_params(self):
+        """Update the subplot position from fig.subplotpars."""
+        self.figbox = self.get_subplotspec().get_position(self.figure)
+
+    def get_geometry(self):
+        """Get the subplot geometry, e.g., (2, 2, 3)."""
+        rows, cols, num1, num2 = self.get_subplotspec().get_geometry()
+        return rows, cols, num1+1  # for compatibility
+
+    # COVERAGE NOTE: Never used internally or from examples
+    def change_geometry(self, numrows, numcols, num):
+        """Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3)."""
+        self._subplotspec = GridSpec(numrows, numcols)[num-1]
+        self.update_params()
+        self.set_position(self.figbox)
+
+    def get_subplotspec(self):
+        """Get the SubplotSpec instance."""
+        return self._subplotspec
+
+    def set_subplotspec(self, subplotspec):
+        """Set the SubplotSpec instance."""
+        self._subplotspec = subplotspec
+
+
+class AxesDivider(Divider):
+    """
+    Divider based on the pre-existing axes.
+    """
+
+    def __init__(self, axes, xref=None, yref=None):
+        """
+        Parameters
+        ----------
+        axes : :class:`~matplotlib.axes.Axes`
+        xref
+        yref
+        """
+        self._axes = axes
+        if xref is None:
+            self._xref = Size.AxesX(axes)
+        else:
+            self._xref = xref
+        if yref is None:
+            self._yref = Size.AxesY(axes)
+        else:
+            self._yref = yref
+
+        Divider.__init__(self, fig=axes.get_figure(), pos=None,
+                         horizontal=[self._xref], vertical=[self._yref],
+                         aspect=None, anchor="C")
+
+    def _get_new_axes(self, *, axes_class=None, **kwargs):
+        axes = self._axes
+        if axes_class is None:
+            if isinstance(axes, SubplotBase):
+                axes_class = axes._axes_class
+            else:
+                axes_class = type(axes)
+        return axes_class(axes.get_figure(), axes.get_position(original=True),
+                          **kwargs)
+
+    def new_horizontal(self, size, pad=None, pack_start=False, **kwargs):
+        """
+        Add a new axes on the right (or left) side of the main axes.
+
+        Parameters
+        ----------
+        size : :mod:`~mpl_toolkits.axes_grid.axes_size` or float or str
+            A width of the axes. If float or string is given, *from_any*
+            function is used to create the size, with *ref_size* set to AxesX
+            instance of the current axes.
+        pad : :mod:`~mpl_toolkits.axes_grid.axes_size` or float or str
+            Pad between the axes. It takes same argument as *size*.
+        pack_start : bool
+            If False, the new axes is appended at the end
+            of the list, i.e., it became the right-most axes. If True, it is
+            inserted at the start of the list, and becomes the left-most axes.
+        **kwargs
+            All extra keywords arguments are passed to the created axes.
+            If *axes_class* is given, the new axes will be created as an
+            instance of the given class. Otherwise, the same class of the
+            main axes will be used.
+        """
+        if pad is None:
+            cbook.warn_deprecated(
+                "3.2", message="In a future version, 'pad' will default to "
+                "rcParams['figure.subplot.wspace'].  Set pad=0 to keep the "
+                "old behavior.")
+        if pad:
+            if not isinstance(pad, Size._Base):
+                pad = Size.from_any(pad, fraction_ref=self._xref)
+            if pack_start:
+                self._horizontal.insert(0, pad)
+                self._xrefindex += 1
+            else:
+                self._horizontal.append(pad)
+        if not isinstance(size, Size._Base):
+            size = Size.from_any(size, fraction_ref=self._xref)
+        if pack_start:
+            self._horizontal.insert(0, size)
+            self._xrefindex += 1
+            locator = self.new_locator(nx=0, ny=self._yrefindex)
+        else:
+            self._horizontal.append(size)
+            locator = self.new_locator(
+                nx=len(self._horizontal) - 1, ny=self._yrefindex)
+        ax = self._get_new_axes(**kwargs)
+        ax.set_axes_locator(locator)
+        return ax
+
+    def new_vertical(self, size, pad=None, pack_start=False, **kwargs):
+        """
+        Add a new axes on the top (or bottom) side of the main axes.
+
+        Parameters
+        ----------
+        size : :mod:`~mpl_toolkits.axes_grid.axes_size` or float or str
+            A height of the axes. If float or string is given, *from_any*
+            function is used to create the size, with *ref_size* set to AxesX
+            instance of the current axes.
+        pad : :mod:`~mpl_toolkits.axes_grid.axes_size` or float or str
+            Pad between the axes. It takes same argument as *size*.
+        pack_start : bool
+            If False, the new axes is appended at the end
+            of the list, i.e., it became the right-most axes. If True, it is
+            inserted at the start of the list, and becomes the left-most axes.
+        **kwargs
+            All extra keywords arguments are passed to the created axes.
+            If *axes_class* is given, the new axes will be created as an
+            instance of the given class. Otherwise, the same class of the
+            main axes will be used.
+        """
+        if pad is None:
+            cbook.warn_deprecated(
+                "3.2", message="In a future version, 'pad' will default to "
+                "rcParams['figure.subplot.hspace'].  Set pad=0 to keep the "
+                "old behavior.")
+        if pad:
+            if not isinstance(pad, Size._Base):
+                pad = Size.from_any(pad, fraction_ref=self._yref)
+            if pack_start:
+                self._vertical.insert(0, pad)
+                self._yrefindex += 1
+            else:
+                self._vertical.append(pad)
+        if not isinstance(size, Size._Base):
+            size = Size.from_any(size, fraction_ref=self._yref)
+        if pack_start:
+            self._vertical.insert(0, size)
+            self._yrefindex += 1
+            locator = self.new_locator(nx=self._xrefindex, ny=0)
+        else:
+            self._vertical.append(size)
+            locator = self.new_locator(
+                nx=self._xrefindex, ny=len(self._vertical)-1)
+        ax = self._get_new_axes(**kwargs)
+        ax.set_axes_locator(locator)
+        return ax
+
+    def append_axes(self, position, size, pad=None, add_to_figure=True,
+                    **kwargs):
+        """
+        Create an axes at the given *position* with the same height
+        (or width) of the main axes.
+
+         *position*
+           ["left"|"right"|"bottom"|"top"]
+
+         *size* and *pad* should be axes_grid.axes_size compatible.
+        """
+        if position == "left":
+            ax = self.new_horizontal(size, pad, pack_start=True, **kwargs)
+        elif position == "right":
+            ax = self.new_horizontal(size, pad, pack_start=False, **kwargs)
+        elif position == "bottom":
+            ax = self.new_vertical(size, pad, pack_start=True, **kwargs)
+        elif position == "top":
+            ax = self.new_vertical(size, pad, pack_start=False, **kwargs)
+        else:
+            cbook._check_in_list(["left", "right", "bottom", "top"],
+                                 position=position)
+        if add_to_figure:
+            self._fig.add_axes(ax)
+        return ax
+
+    def get_aspect(self):
+        if self._aspect is None:
+            aspect = self._axes.get_aspect()
+            if aspect == "auto":
+                return False
+            else:
+                return True
+        else:
+            return self._aspect
+
+    def get_position(self):
+        if self._pos is None:
+            bbox = self._axes.get_position(original=True)
+            return bbox.bounds
+        else:
+            return self._pos
+
+    def get_anchor(self):
+        if self._anchor is None:
+            return self._axes.get_anchor()
+        else:
+            return self._anchor
+
+    def get_subplotspec(self):
+        if hasattr(self._axes, "get_subplotspec"):
+            return self._axes.get_subplotspec()
+        else:
+            return None
+
+
+class HBoxDivider(SubplotDivider):
+
+    def __init__(self, fig, *args, **kwargs):
+        SubplotDivider.__init__(self, fig, *args, **kwargs)
+
+    @staticmethod
+    def _determine_karray(equivalent_sizes, appended_sizes,
+                          max_equivalent_size,
+                          total_appended_size):
+
+        n = len(equivalent_sizes)
+        import numpy as np
+        A = np.mat(np.zeros((n+1, n+1), dtype="d"))
+        B = np.zeros((n+1), dtype="d")
+        # AxK = B
+
+        # populated A
+        for i, (r, a) in enumerate(equivalent_sizes):
+            A[i, i] = r
+            A[i, -1] = -1
+            B[i] = -a
+        A[-1, :-1] = [r for r, a in appended_sizes]
+        B[-1] = total_appended_size - sum([a for rs, a in appended_sizes])
+
+        karray_H = (A.I*np.mat(B).T).A1
+        karray = karray_H[:-1]
+        H = karray_H[-1]
+
+        if H > max_equivalent_size:
+            karray = ((max_equivalent_size -
+                      np.array([a for r, a in equivalent_sizes]))
+                      / np.array([r for r, a in equivalent_sizes]))
+        return karray
+
+    @staticmethod
+    def _calc_offsets(appended_sizes, karray):
+        offsets = [0.]
+        for (r, a), k in zip(appended_sizes, karray):
+            offsets.append(offsets[-1] + r*k + a)
+        return offsets
+
+    def new_locator(self, nx, nx1=None):
+        """
+        Create a new `~mpl_toolkits.axes_grid.axes_divider.AxesLocator` for
+        the specified cell.
+
+        Parameters
+        ----------
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        """
+        return AxesLocator(self, nx, 0, nx1, None)
+
+    def _locate(self, x, y, w, h,
+                y_equivalent_sizes, x_appended_sizes,
+                figW, figH):
+        """
+        Parameters
+        ----------
+        x
+        y
+        w
+        h
+        y_equivalent_sizes
+        x_appended_sizes
+        figW
+        figH
+        """
+
+        equivalent_sizes = y_equivalent_sizes
+        appended_sizes = x_appended_sizes
+
+        max_equivalent_size = figH*h
+        total_appended_size = figW*w
+        karray = self._determine_karray(equivalent_sizes, appended_sizes,
+                                        max_equivalent_size,
+                                        total_appended_size)
+
+        ox = self._calc_offsets(appended_sizes, karray)
+
+        ww = (ox[-1] - ox[0])/figW
+        ref_h = equivalent_sizes[0]
+        hh = (karray[0]*ref_h[0] + ref_h[1])/figH
+        pb = mtransforms.Bbox.from_bounds(x, y, w, h)
+        pb1 = mtransforms.Bbox.from_bounds(x, y, ww, hh)
+        pb1_anchored = pb1.anchored(self.get_anchor(), pb)
+        x0, y0 = pb1_anchored.x0, pb1_anchored.y0
+
+        return x0, y0, ox, hh
+
+    def locate(self, nx, ny, nx1=None, ny1=None, axes=None, renderer=None):
+        """
+        Parameters
+        ----------
+        axes_divider : AxesDivider
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        axes
+        renderer
+        """
+
+        figW, figH = self._fig.get_size_inches()
+        x, y, w, h = self.get_position_runtime(axes, renderer)
+
+        y_equivalent_sizes = self.get_vertical_sizes(renderer)
+        x_appended_sizes = self.get_horizontal_sizes(renderer)
+        x0, y0, ox, hh = self._locate(x, y, w, h,
+                                      y_equivalent_sizes, x_appended_sizes,
+                                      figW, figH)
+        if nx1 is None:
+            nx1 = nx+1
+
+        x1, w1 = x0 + ox[nx]/figW, (ox[nx1] - ox[nx])/figW
+        y1, h1 = y0, hh
+
+        return mtransforms.Bbox.from_bounds(x1, y1, w1, h1)
+
+
+class VBoxDivider(HBoxDivider):
+    """
+    The Divider class whose rectangle area is specified as a subplot geometry.
+    """
+
+    def new_locator(self, ny, ny1=None):
+        """
+        Create a new `~mpl_toolkits.axes_grid.axes_divider.AxesLocator` for
+        the specified cell.
+
+        Parameters
+        ----------
+        ny, ny1 : int
+            Integers specifying the row-position of the
+            cell. When *ny1* is None, a single *ny*-th row is
+            specified. Otherwise location of rows spanning between *ny*
+            to *ny1* (but excluding *ny1*-th row) is specified.
+        """
+        return AxesLocator(self, 0, ny, None, ny1)
+
+    def locate(self, nx, ny, nx1=None, ny1=None, axes=None, renderer=None):
+        """
+        Parameters
+        ----------
+        axes_divider : AxesDivider
+        nx, nx1 : int
+            Integers specifying the column-position of the
+            cell. When *nx1* is None, a single *nx*-th column is
+            specified. Otherwise location of columns spanning between *nx*
+            to *nx1* (but excluding *nx1*-th column) is specified.
+        ny, ny1 : int
+            Same as *nx* and *nx1*, but for row positions.
+        axes
+        renderer
+        """
+
+        figW, figH = self._fig.get_size_inches()
+        x, y, w, h = self.get_position_runtime(axes, renderer)
+
+        x_equivalent_sizes = self.get_horizontal_sizes(renderer)
+        y_appended_sizes = self.get_vertical_sizes(renderer)
+
+        y0, x0, oy, ww = self._locate(y, x, h, w,
+                                      x_equivalent_sizes, y_appended_sizes,
+                                      figH, figW)
+        if ny1 is None:
+            ny1 = ny+1
+
+        x1, w1 = x0, ww
+        y1, h1 = y0 + oy[ny]/figH, (oy[ny1] - oy[ny])/figH
+
+        return mtransforms.Bbox.from_bounds(x1, y1, w1, h1)
+
+
+def make_axes_locatable(axes):
+    divider = AxesDivider(axes)
+    locator = divider.new_locator(nx=0, ny=0)
+    axes.set_axes_locator(locator)
+
+    return divider
+
+
+def make_axes_area_auto_adjustable(ax,
+                                   use_axes=None, pad=0.1,
+                                   adjust_dirs=None):
+    if adjust_dirs is None:
+        adjust_dirs = ["left", "right", "bottom", "top"]
+    divider = make_axes_locatable(ax)
+
+    if use_axes is None:
+        use_axes = ax
+
+    divider.add_auto_adjustable_area(use_axes=use_axes, pad=pad,
+                                     adjust_dirs=adjust_dirs)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/anchored_artists.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/anchored_artists.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid1/anchored_artists.py	(date 1589417755518)
@@ -0,0 +1,590 @@
+from matplotlib import transforms
+from matplotlib.offsetbox import (AnchoredOffsetbox, AuxTransformBox,
+                                  DrawingArea, TextArea, VPacker)
+from matplotlib.patches import (Rectangle, Ellipse, ArrowStyle,
+                                FancyArrowPatch, PathPatch)
+from matplotlib.text import TextPath
+
+__all__ = ['AnchoredDrawingArea', 'AnchoredAuxTransformBox',
+           'AnchoredEllipse', 'AnchoredSizeBar', 'AnchoredDirectionArrows']
+
+
+class AnchoredDrawingArea(AnchoredOffsetbox):
+    def __init__(self, width, height, xdescent, ydescent,
+                 loc, pad=0.4, borderpad=0.5, prop=None, frameon=True,
+                 **kwargs):
+        """
+        An anchored container with a fixed size and fillable DrawingArea.
+
+        Artists added to the *drawing_area* will have their coordinates
+        interpreted as pixels. Any transformations set on the artists will be
+        overridden.
+
+        Parameters
+        ----------
+        width, height : int or float
+            width and height of the container, in pixels.
+
+        xdescent, ydescent : int or float
+            descent of the container in the x- and y- direction, in pixels.
+
+        loc : int
+            Location of this artist. Valid location codes are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4,
+                'right'        : 5,
+                'center left'  : 6,
+                'center right' : 7,
+                'lower center' : 8,
+                'upper center' : 9,
+                'center'       : 10
+
+        pad : int or float, optional
+            Padding around the child objects, in fraction of the font
+            size. Defaults to 0.4.
+
+        borderpad : int or float, optional
+            Border padding, in fraction of the font size.
+            Defaults to 0.5.
+
+        prop : `matplotlib.font_manager.FontProperties`, optional
+            Font property used as a reference for paddings.
+
+        frameon : bool, optional
+            If True, draw a box around this artists. Defaults to True.
+
+        **kwargs
+            Keyworded arguments to pass to
+            :class:`matplotlib.offsetbox.AnchoredOffsetbox`.
+
+        Attributes
+        ----------
+        drawing_area : `matplotlib.offsetbox.DrawingArea`
+            A container for artists to display.
+
+        Examples
+        --------
+        To display blue and red circles of different sizes in the upper right
+        of an axes *ax*:
+
+        >>> ada = AnchoredDrawingArea(20, 20, 0, 0,
+        ...                           loc='upper right', frameon=False)
+        >>> ada.drawing_area.add_artist(Circle((10, 10), 10, fc="b"))
+        >>> ada.drawing_area.add_artist(Circle((30, 10), 5, fc="r"))
+        >>> ax.add_artist(ada)
+        """
+        self.da = DrawingArea(width, height, xdescent, ydescent)
+        self.drawing_area = self.da
+
+        super().__init__(
+            loc, pad=pad, borderpad=borderpad, child=self.da, prop=None,
+            frameon=frameon, **kwargs
+        )
+
+
+class AnchoredAuxTransformBox(AnchoredOffsetbox):
+    def __init__(self, transform, loc,
+                 pad=0.4, borderpad=0.5, prop=None, frameon=True, **kwargs):
+        """
+        An anchored container with transformed coordinates.
+
+        Artists added to the *drawing_area* are scaled according to the
+        coordinates of the transformation used. The dimensions of this artist
+        will scale to contain the artists added.
+
+        Parameters
+        ----------
+        transform : `matplotlib.transforms.Transform`
+            The transformation object for the coordinate system in use, i.e.,
+            :attr:`matplotlib.axes.Axes.transData`.
+
+        loc : int
+            Location of this artist. Valid location codes are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4,
+                'right'        : 5,
+                'center left'  : 6,
+                'center right' : 7,
+                'lower center' : 8,
+                'upper center' : 9,
+                'center'       : 10
+
+        pad : int or float, optional
+            Padding around the child objects, in fraction of the font
+            size. Defaults to 0.4.
+
+        borderpad : int or float, optional
+            Border padding, in fraction of the font size.
+            Defaults to 0.5.
+
+        prop : `matplotlib.font_manager.FontProperties`, optional
+            Font property used as a reference for paddings.
+
+        frameon : bool, optional
+            If True, draw a box around this artists. Defaults to True.
+
+        **kwargs
+            Keyworded arguments to pass to
+            :class:`matplotlib.offsetbox.AnchoredOffsetbox`.
+
+        Attributes
+        ----------
+        drawing_area : `matplotlib.offsetbox.AuxTransformBox`
+            A container for artists to display.
+
+        Examples
+        --------
+        To display an ellipse in the upper left, with a width of 0.1 and
+        height of 0.4 in data coordinates:
+
+        >>> box = AnchoredAuxTransformBox(ax.transData, loc='upper left')
+        >>> el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)
+        >>> box.drawing_area.add_artist(el)
+        >>> ax.add_artist(box)
+        """
+        self.drawing_area = AuxTransformBox(transform)
+
+        AnchoredOffsetbox.__init__(self, loc, pad=pad, borderpad=borderpad,
+                                   child=self.drawing_area,
+                                   prop=prop,
+                                   frameon=frameon,
+                                   **kwargs)
+
+
+class AnchoredEllipse(AnchoredOffsetbox):
+    def __init__(self, transform, width, height, angle, loc,
+                 pad=0.1, borderpad=0.1, prop=None, frameon=True, **kwargs):
+        """
+        Draw an anchored ellipse of a given size.
+
+        Parameters
+        ----------
+        transform : `matplotlib.transforms.Transform`
+            The transformation object for the coordinate system in use, i.e.,
+            :attr:`matplotlib.axes.Axes.transData`.
+
+        width, height : int or float
+            Width and height of the ellipse, given in coordinates of
+            *transform*.
+
+        angle : int or float
+            Rotation of the ellipse, in degrees, anti-clockwise.
+
+        loc : int
+            Location of this size bar. Valid location codes are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4,
+                'right'        : 5,
+                'center left'  : 6,
+                'center right' : 7,
+                'lower center' : 8,
+                'upper center' : 9,
+                'center'       : 10
+
+        pad : int or float, optional
+            Padding around the ellipse, in fraction of the font size. Defaults
+            to 0.1.
+
+        borderpad : int or float, optional
+            Border padding, in fraction of the font size. Defaults to 0.1.
+
+        frameon : bool, optional
+            If True, draw a box around the ellipse. Defaults to True.
+
+        prop : `matplotlib.font_manager.FontProperties`, optional
+            Font property used as a reference for paddings.
+
+        **kwargs
+            Keyworded arguments to pass to
+            :class:`matplotlib.offsetbox.AnchoredOffsetbox`.
+
+        Attributes
+        ----------
+        ellipse : `matplotlib.patches.Ellipse`
+            Ellipse patch drawn.
+        """
+        self._box = AuxTransformBox(transform)
+        self.ellipse = Ellipse((0, 0), width, height, angle)
+        self._box.add_artist(self.ellipse)
+
+        AnchoredOffsetbox.__init__(self, loc, pad=pad, borderpad=borderpad,
+                                   child=self._box,
+                                   prop=prop,
+                                   frameon=frameon, **kwargs)
+
+
+class AnchoredSizeBar(AnchoredOffsetbox):
+    def __init__(self, transform, size, label, loc,
+                 pad=0.1, borderpad=0.1, sep=2,
+                 frameon=True, size_vertical=0, color='black',
+                 label_top=False, fontproperties=None, fill_bar=None,
+                 **kwargs):
+        """
+        Draw a horizontal scale bar with a center-aligned label underneath.
+
+        Parameters
+        ----------
+        transform : `matplotlib.transforms.Transform`
+            The transformation object for the coordinate system in use, i.e.,
+            :attr:`matplotlib.axes.Axes.transData`.
+
+        size : int or float
+            Horizontal length of the size bar, given in coordinates of
+            *transform*.
+
+        label : str
+            Label to display.
+
+        loc : int
+            Location of this size bar. Valid location codes are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4,
+                'right'        : 5,
+                'center left'  : 6,
+                'center right' : 7,
+                'lower center' : 8,
+                'upper center' : 9,
+                'center'       : 10
+
+        pad : int or float, optional
+            Padding around the label and size bar, in fraction of the font
+            size. Defaults to 0.1.
+
+        borderpad : int or float, optional
+            Border padding, in fraction of the font size.
+            Defaults to 0.1.
+
+        sep : int or float, optional
+            Separation between the label and the size bar, in points.
+            Defaults to 2.
+
+        frameon : bool, optional
+            If True, draw a box around the horizontal bar and label.
+            Defaults to True.
+
+        size_vertical : int or float, optional
+            Vertical length of the size bar, given in coordinates of
+            *transform*. Defaults to 0.
+
+        color : str, optional
+            Color for the size bar and label.
+            Defaults to black.
+
+        label_top : bool, optional
+            If True, the label will be over the size bar.
+            Defaults to False.
+
+        fontproperties : `matplotlib.font_manager.FontProperties`, optional
+            Font properties for the label text.
+
+        fill_bar : bool, optional
+            If True and if size_vertical is nonzero, the size bar will
+            be filled in with the color specified by the size bar.
+            Defaults to True if `size_vertical` is greater than
+            zero and False otherwise.
+
+        **kwargs
+            Keyworded arguments to pass to
+            :class:`matplotlib.offsetbox.AnchoredOffsetbox`.
+
+        Attributes
+        ----------
+        size_bar : `matplotlib.offsetbox.AuxTransformBox`
+            Container for the size bar.
+
+        txt_label : `matplotlib.offsetbox.TextArea`
+            Container for the label of the size bar.
+
+        Notes
+        -----
+        If *prop* is passed as a keyworded argument, but *fontproperties* is
+        not, then *prop* is be assumed to be the intended *fontproperties*.
+        Using both *prop* and *fontproperties* is not supported.
+
+        Examples
+        --------
+        >>> import matplotlib.pyplot as plt
+        >>> import numpy as np
+        >>> from mpl_toolkits.axes_grid1.anchored_artists import (
+        ...     AnchoredSizeBar)
+        >>> fig, ax = plt.subplots()
+        >>> ax.imshow(np.random.random((10, 10)))
+        >>> bar = AnchoredSizeBar(ax.transData, 3, '3 data units', 4)
+        >>> ax.add_artist(bar)
+        >>> fig.show()
+
+        Using all the optional parameters
+
+        >>> import matplotlib.font_manager as fm
+        >>> fontprops = fm.FontProperties(size=14, family='monospace')
+        >>> bar = AnchoredSizeBar(ax.transData, 3, '3 units', 4, pad=0.5,
+        ...                       sep=5, borderpad=0.5, frameon=False,
+        ...                       size_vertical=0.5, color='white',
+        ...                       fontproperties=fontprops)
+        """
+        if fill_bar is None:
+            fill_bar = size_vertical > 0
+
+        self.size_bar = AuxTransformBox(transform)
+        self.size_bar.add_artist(Rectangle((0, 0), size, size_vertical,
+                                           fill=fill_bar, facecolor=color,
+                                           edgecolor=color))
+
+        if fontproperties is None and 'prop' in kwargs:
+            fontproperties = kwargs.pop('prop')
+
+        if fontproperties is None:
+            textprops = {'color': color}
+        else:
+            textprops = {'color': color, 'fontproperties': fontproperties}
+
+        self.txt_label = TextArea(
+            label,
+            minimumdescent=False,
+            textprops=textprops)
+
+        if label_top:
+            _box_children = [self.txt_label, self.size_bar]
+        else:
+            _box_children = [self.size_bar, self.txt_label]
+
+        self._box = VPacker(children=_box_children,
+                            align="center",
+                            pad=0, sep=sep)
+
+        AnchoredOffsetbox.__init__(self, loc, pad=pad, borderpad=borderpad,
+                                   child=self._box,
+                                   prop=fontproperties,
+                                   frameon=frameon, **kwargs)
+
+
+class AnchoredDirectionArrows(AnchoredOffsetbox):
+    def __init__(self, transform, label_x, label_y, length=0.15,
+                 fontsize=0.08, loc=2, angle=0, aspect_ratio=1, pad=0.4,
+                 borderpad=0.4, frameon=False, color='w', alpha=1,
+                 sep_x=0.01, sep_y=0, fontproperties=None, back_length=0.15,
+                 head_width=10, head_length=15, tail_width=2,
+                 text_props=None, arrow_props=None,
+                 **kwargs):
+        """
+        Draw two perpendicular arrows to indicate directions.
+
+        Parameters
+        ----------
+        transform : `matplotlib.transforms.Transform`
+            The transformation object for the coordinate system in use, i.e.,
+            :attr:`matplotlib.axes.Axes.transAxes`.
+
+        label_x, label_y : str
+            Label text for the x and y arrows
+
+        length : int or float, optional
+            Length of the arrow, given in coordinates of
+            *transform*.
+            Defaults to 0.15.
+
+        fontsize : int, optional
+            Size of label strings, given in coordinates of *transform*.
+            Defaults to 0.08.
+
+        loc : int, optional
+            Location of the direction arrows. Valid location codes are::
+
+                'upper right'  : 1,
+                'upper left'   : 2,
+                'lower left'   : 3,
+                'lower right'  : 4,
+                'right'        : 5,
+                'center left'  : 6,
+                'center right' : 7,
+                'lower center' : 8,
+                'upper center' : 9,
+                'center'       : 10
+
+            Defaults to 2.
+
+        angle : int or float, optional
+            The angle of the arrows in degrees.
+            Defaults to 0.
+
+        aspect_ratio : int or float, optional
+            The ratio of the length of arrow_x and arrow_y.
+            Negative numbers can be used to change the direction.
+            Defaults to 1.
+
+        pad : int or float, optional
+            Padding around the labels and arrows, in fraction of the font
+            size. Defaults to 0.4.
+
+        borderpad : int or float, optional
+            Border padding, in fraction of the font size.
+            Defaults to 0.4.
+
+        frameon : bool, optional
+            If True, draw a box around the arrows and labels.
+            Defaults to False.
+
+        color : str, optional
+            Color for the arrows and labels.
+            Defaults to white.
+
+        alpha : int or float, optional
+            Alpha values of the arrows and labels
+            Defaults to 1.
+
+        sep_x, sep_y : int or float, optional
+            Separation between the arrows and labels in coordinates of
+            *transform*. Defaults to 0.01 and 0.
+
+        fontproperties : `matplotlib.font_manager.FontProperties`, optional
+            Font properties for the label text.
+
+        back_length : float, optional
+            Fraction of the arrow behind the arrow crossing.
+            Defaults to 0.15.
+
+        head_width : int or float, optional
+            Width of arrow head, sent to ArrowStyle.
+            Defaults to 10.
+
+        head_length : int or float, optional
+            Length of arrow head, sent to ArrowStyle.
+            Defaults to 15.
+
+        tail_width : int or float, optional
+            Width of arrow tail, sent to ArrowStyle.
+            Defaults to 2.
+
+        text_props, arrow_props : dict
+            Properties of the text and arrows, passed to
+            :class:`matplotlib.text.TextPath` and
+            `matplotlib.patches.FancyArrowPatch`
+
+        **kwargs
+            Keyworded arguments to pass to
+            :class:`matplotlib.offsetbox.AnchoredOffsetbox`.
+
+        Attributes
+        ----------
+        arrow_x, arrow_y : `matplotlib.patches.FancyArrowPatch`
+            Arrow x and y
+
+        text_path_x, text_path_y : `matplotlib.text.TextPath`
+            Path for arrow labels
+
+        p_x, p_y : `matplotlib.patches.PathPatch`
+            Patch for arrow labels
+
+        box : `matplotlib.offsetbox.AuxTransformBox`
+            Container for the arrows and labels.
+
+        Notes
+        -----
+        If *prop* is passed as a keyword argument, but *fontproperties* is
+        not, then *prop* is be assumed to be the intended *fontproperties*.
+        Using both *prop* and *fontproperties* is not supported.
+
+        Examples
+        --------
+        >>> import matplotlib.pyplot as plt
+        >>> import numpy as np
+        >>> from mpl_toolkits.axes_grid1.anchored_artists import (
+        ...     AnchoredDirectionArrows)
+        >>> fig, ax = plt.subplots()
+        >>> ax.imshow(np.random.random((10, 10)))
+        >>> arrows = AnchoredDirectionArrows(ax.transAxes, '111', '110')
+        >>> ax.add_artist(arrows)
+        >>> fig.show()
+
+        Using several of the optional parameters, creating downward pointing
+        arrow and high contrast text labels.
+
+        >>> import matplotlib.font_manager as fm
+        >>> fontprops = fm.FontProperties(family='monospace')
+        >>> arrows = AnchoredDirectionArrows(ax.transAxes, 'East', 'South',
+        ...                                  loc='lower left', color='k',
+        ...                                  aspect_ratio=-1, sep_x=0.02,
+        ...                                  sep_y=-0.01,
+        ...                                  text_props={'ec':'w', 'fc':'k'},
+        ...                                  fontproperties=fontprops)
+        """
+        if arrow_props is None:
+            arrow_props = {}
+
+        if text_props is None:
+            text_props = {}
+
+        arrowstyle = ArrowStyle("Simple",
+                                head_width=head_width,
+                                head_length=head_length,
+                                tail_width=tail_width)
+
+        if fontproperties is None and 'prop' in kwargs:
+            fontproperties = kwargs.pop('prop')
+
+        if 'color' not in arrow_props:
+            arrow_props['color'] = color
+
+        if 'alpha' not in arrow_props:
+            arrow_props['alpha'] = alpha
+
+        if 'color' not in text_props:
+            text_props['color'] = color
+
+        if 'alpha' not in text_props:
+            text_props['alpha'] = alpha
+
+        t_start = transform
+        t_end = t_start + transforms.Affine2D().rotate_deg(angle)
+
+        self.box = AuxTransformBox(t_end)
+
+        length_x = length
+        length_y = length*aspect_ratio
+
+        self.arrow_x = FancyArrowPatch(
+                (0, back_length*length_y),
+                (length_x, back_length*length_y),
+                arrowstyle=arrowstyle,
+                shrinkA=0.0,
+                shrinkB=0.0,
+                **arrow_props)
+
+        self.arrow_y = FancyArrowPatch(
+                (back_length*length_x, 0),
+                (back_length*length_x, length_y),
+                arrowstyle=arrowstyle,
+                shrinkA=0.0,
+                shrinkB=0.0,
+                **arrow_props)
+
+        self.box.add_artist(self.arrow_x)
+        self.box.add_artist(self.arrow_y)
+
+        text_path_x = TextPath((
+            length_x+sep_x, back_length*length_y+sep_y), label_x,
+            size=fontsize, prop=fontproperties)
+        self.p_x = PathPatch(text_path_x, transform=t_start, **text_props)
+        self.box.add_artist(self.p_x)
+
+        text_path_y = TextPath((
+            length_x*back_length+sep_x, length_y*(1-back_length)+sep_y),
+            label_y, size=fontsize, prop=fontproperties)
+        self.p_y = PathPatch(text_path_y, **text_props)
+        self.box.add_artist(self.p_y)
+
+        AnchoredOffsetbox.__init__(self, loc, pad=pad, borderpad=borderpad,
+                                   child=self.box,
+                                   frameon=frameon, **kwargs)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_floating_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_floating_axes.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_floating_axes.py	(date 1589417755518)
@@ -0,0 +1,120 @@
+import numpy as np
+
+import matplotlib.pyplot as plt
+import matplotlib.projections as mprojections
+import matplotlib.transforms as mtransforms
+from matplotlib.testing.decorators import image_comparison
+from mpl_toolkits.axisartist.axislines import Subplot
+from mpl_toolkits.axisartist.floating_axes import (
+    FloatingSubplot,
+    GridHelperCurveLinear)
+from mpl_toolkits.axisartist.grid_finder import FixedLocator
+from mpl_toolkits.axisartist import angle_helper
+
+
+def test_subplot():
+    fig = plt.figure(figsize=(5, 5))
+    ax = Subplot(fig, 111)
+    fig.add_subplot(ax)
+
+
+@image_comparison(['curvelinear3.png'], style='default', tol=0.01)
+def test_curvelinear3():
+    fig = plt.figure(figsize=(5, 5))
+
+    tr = (mtransforms.Affine2D().scale(np.pi / 180, 1) +
+          mprojections.PolarAxes.PolarTransform())
+
+    grid_locator1 = angle_helper.LocatorDMS(15)
+    tick_formatter1 = angle_helper.FormatterDMS()
+
+    grid_locator2 = FixedLocator([2, 4, 6, 8, 10])
+
+    grid_helper = GridHelperCurveLinear(tr,
+                                        extremes=(0, 360, 10, 3),
+                                        grid_locator1=grid_locator1,
+                                        grid_locator2=grid_locator2,
+                                        tick_formatter1=tick_formatter1,
+                                        tick_formatter2=None)
+
+    ax1 = FloatingSubplot(fig, 111, grid_helper=grid_helper)
+    fig.add_subplot(ax1)
+
+    r_scale = 10
+    tr2 = mtransforms.Affine2D().scale(1, 1 / r_scale) + tr
+    grid_locator2 = FixedLocator([30, 60, 90])
+    grid_helper2 = GridHelperCurveLinear(tr2,
+                                         extremes=(0, 360,
+                                                   10 * r_scale, 3 * r_scale),
+                                         grid_locator2=grid_locator2)
+
+    ax1.axis["right"] = axis = grid_helper2.new_fixed_axis("right", axes=ax1)
+
+    ax1.axis["left"].label.set_text("Test 1")
+    ax1.axis["right"].label.set_text("Test 2")
+
+    for an in ["left", "right"]:
+        ax1.axis[an].set_visible(False)
+
+    axis = grid_helper.new_floating_axis(1, 7, axes=ax1,
+                                         axis_direction="bottom")
+    ax1.axis["z"] = axis
+    axis.toggle(all=True, label=True)
+    axis.label.set_text("z = ?")
+    axis.label.set_visible(True)
+    axis.line.set_color("0.5")
+
+    ax2 = ax1.get_aux_axes(tr)
+
+    xx, yy = [67, 90, 75, 30], [2, 5, 8, 4]
+    ax2.scatter(xx, yy)
+    l, = ax2.plot(xx, yy, "k-")
+    l.set_clip_path(ax1.patch)
+
+
+@image_comparison(['curvelinear4.png'], style='default', tol=0.015)
+def test_curvelinear4():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig = plt.figure(figsize=(5, 5))
+
+    tr = (mtransforms.Affine2D().scale(np.pi / 180, 1) +
+          mprojections.PolarAxes.PolarTransform())
+
+    grid_locator1 = angle_helper.LocatorDMS(5)
+    tick_formatter1 = angle_helper.FormatterDMS()
+
+    grid_locator2 = FixedLocator([2, 4, 6, 8, 10])
+
+    grid_helper = GridHelperCurveLinear(tr,
+                                        extremes=(120, 30, 10, 0),
+                                        grid_locator1=grid_locator1,
+                                        grid_locator2=grid_locator2,
+                                        tick_formatter1=tick_formatter1,
+                                        tick_formatter2=None)
+
+    ax1 = FloatingSubplot(fig, 111, grid_helper=grid_helper)
+    fig.add_subplot(ax1)
+
+    ax1.axis["left"].label.set_text("Test 1")
+    ax1.axis["right"].label.set_text("Test 2")
+
+    for an in ["top"]:
+        ax1.axis[an].set_visible(False)
+
+    axis = grid_helper.new_floating_axis(1, 70, axes=ax1,
+                                         axis_direction="bottom")
+    ax1.axis["z"] = axis
+    axis.toggle(all=True, label=True)
+    axis.label.set_axis_direction("top")
+    axis.label.set_text("z = ?")
+    axis.label.set_visible(True)
+    axis.line.set_color("0.5")
+
+    ax2 = ax1.get_aux_axes(tr)
+
+    xx, yy = [67, 90, 75, 30], [2, 5, 8, 4]
+    ax2.scatter(xx, yy)
+    l, = ax2.plot(xx, yy, "k-")
+    l.set_clip_path(ax1.patch)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/__init__.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/__init__.py	(date 1589417755518)
@@ -0,0 +1,11 @@
+import os
+
+
+# Check that the test directories exist
+if not os.path.exists(os.path.join(
+        os.path.dirname(__file__), 'baseline_images')):
+    raise IOError(
+        'The baseline image directory does not exist. '
+        'This is most likely because the test data is not installed. '
+        'You may need to install matplotlib from source to get the '
+        'test data.')
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axislines.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axislines.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axislines.py	(date 1589417755518)
@@ -0,0 +1,90 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.testing.decorators import image_comparison
+from matplotlib.transforms import IdentityTransform
+
+from mpl_toolkits.axisartist.axislines import SubplotZero, Subplot
+from mpl_toolkits.axisartist import SubplotHost, ParasiteAxesAuxTrans
+
+from mpl_toolkits.axisartist import Axes
+
+
+@image_comparison(['SubplotZero.png'], style='default')
+def test_SubplotZero():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig = plt.figure()
+
+    ax = SubplotZero(fig, 1, 1, 1)
+    fig.add_subplot(ax)
+
+    ax.axis["xzero"].set_visible(True)
+    ax.axis["xzero"].label.set_text("Axis Zero")
+
+    for n in ["top", "right"]:
+        ax.axis[n].set_visible(False)
+
+    xx = np.arange(0, 2 * np.pi, 0.01)
+    ax.plot(xx, np.sin(xx))
+    ax.set_ylabel("Test")
+
+
+@image_comparison(['Subplot.png'], style='default')
+def test_Subplot():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig = plt.figure()
+
+    ax = Subplot(fig, 1, 1, 1)
+    fig.add_subplot(ax)
+
+    xx = np.arange(0, 2 * np.pi, 0.01)
+    ax.plot(xx, np.sin(xx))
+    ax.set_ylabel("Test")
+
+    ax.axis["top"].major_ticks.set_tick_out(True)
+    ax.axis["bottom"].major_ticks.set_tick_out(True)
+
+    ax.axis["bottom"].set_label("Tk0")
+
+
+def test_Axes():
+    fig = plt.figure()
+    ax = Axes(fig, [0.15, 0.1, 0.65, 0.8])
+    fig.add_axes(ax)
+    ax.plot([1, 2, 3], [0, 1, 2])
+    ax.set_xscale('log')
+    fig.canvas.draw()
+
+
+@image_comparison(['ParasiteAxesAuxTrans_meshplot.png'],
+                  remove_text=True, style='default', tol=0.075)
+def test_ParasiteAxesAuxTrans():
+
+    data = np.ones((6, 6))
+    data[2, 2] = 2
+    data[0, :] = 0
+    data[-2, :] = 0
+    data[:, 0] = 0
+    data[:, -2] = 0
+    x = np.arange(6)
+    y = np.arange(6)
+    xx, yy = np.meshgrid(x, y)
+
+    funcnames = ['pcolor', 'pcolormesh', 'contourf']
+
+    fig = plt.figure()
+    for i, name in enumerate(funcnames):
+
+        ax1 = SubplotHost(fig, 1, 3, i+1)
+        fig.add_subplot(ax1)
+
+        ax2 = ParasiteAxesAuxTrans(ax1, IdentityTransform())
+        ax1.parasites.append(ax2)
+        getattr(ax2, name)(xx, yy, data)
+        ax1.set_xlim((0, 5))
+        ax1.set_ylim((0, 5))
+
+    ax2.contour(xx, yy, data, colors='k')
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_angle_helper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_angle_helper.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_angle_helper.py	(date 1589417755518)
@@ -0,0 +1,141 @@
+import re
+
+import numpy as np
+import pytest
+
+from mpl_toolkits.axisartist.angle_helper import (
+    FormatterDMS, FormatterHMS, select_step, select_step24, select_step360)
+
+
+_MS_RE = (
+    r'''\$  # Mathtext
+        (
+            # The sign sometimes appears on a 0 when a fraction is shown.
+            # Check later that there's only one.
+            (?P<degree_sign>-)?
+            (?P<degree>[0-9.]+)  # Degrees value
+            {degree}  # Degree symbol (to be replaced by format.)
+        )?
+        (
+            (?(degree)\\,)  # Separator if degrees are also visible.
+            (?P<minute_sign>-)?
+            (?P<minute>[0-9.]+)  # Minutes value
+            {minute}  # Minute symbol (to be replaced by format.)
+        )?
+        (
+            (?(minute)\\,)  # Separator if minutes are also visible.
+            (?P<second_sign>-)?
+            (?P<second>[0-9.]+)  # Seconds value
+            {second}  # Second symbol (to be replaced by format.)
+        )?
+        \$  # Mathtext
+    '''
+)
+DMS_RE = re.compile(_MS_RE.format(degree=re.escape(FormatterDMS.deg_mark),
+                                  minute=re.escape(FormatterDMS.min_mark),
+                                  second=re.escape(FormatterDMS.sec_mark)),
+                    re.VERBOSE)
+HMS_RE = re.compile(_MS_RE.format(degree=re.escape(FormatterHMS.deg_mark),
+                                  minute=re.escape(FormatterHMS.min_mark),
+                                  second=re.escape(FormatterHMS.sec_mark)),
+                    re.VERBOSE)
+
+
+def dms2float(degrees, minutes=0, seconds=0):
+    return degrees + minutes / 60.0 + seconds / 3600.0
+
+
+@pytest.mark.parametrize('args, kwargs, expected_levels, expected_factor', [
+    ((-180, 180, 10), {'hour': False}, np.arange(-180, 181, 30), 1.0),
+    ((-12, 12, 10), {'hour': True}, np.arange(-12, 13, 2), 1.0)
+])
+def test_select_step(args, kwargs, expected_levels, expected_factor):
+    levels, n, factor = select_step(*args, **kwargs)
+
+    assert n == len(levels)
+    np.testing.assert_array_equal(levels, expected_levels)
+    assert factor == expected_factor
+
+
+@pytest.mark.parametrize('args, kwargs, expected_levels, expected_factor', [
+    ((-180, 180, 10), {}, np.arange(-180, 181, 30), 1.0),
+    ((-12, 12, 10), {}, np.arange(-750, 751, 150), 60.0)
+])
+def test_select_step24(args, kwargs, expected_levels, expected_factor):
+    levels, n, factor = select_step24(*args, **kwargs)
+
+    assert n == len(levels)
+    np.testing.assert_array_equal(levels, expected_levels)
+    assert factor == expected_factor
+
+
+@pytest.mark.parametrize('args, kwargs, expected_levels, expected_factor', [
+    ((dms2float(20, 21.2), dms2float(21, 33.3), 5), {},
+     np.arange(1215, 1306, 15), 60.0),
+    ((dms2float(20.5, seconds=21.2), dms2float(20.5, seconds=33.3), 5), {},
+     np.arange(73820, 73835, 2), 3600.0),
+    ((dms2float(20, 21.2), dms2float(20, 53.3), 5), {},
+     np.arange(1220, 1256, 5), 60.0),
+    ((21.2, 33.3, 5), {},
+     np.arange(20, 35, 2), 1.0),
+    ((dms2float(20, 21.2), dms2float(21, 33.3), 5), {},
+     np.arange(1215, 1306, 15), 60.0),
+    ((dms2float(20.5, seconds=21.2), dms2float(20.5, seconds=33.3), 5), {},
+     np.arange(73820, 73835, 2), 3600.0),
+    ((dms2float(20.5, seconds=21.2), dms2float(20.5, seconds=21.4), 5), {},
+     np.arange(7382120, 7382141, 5), 360000.0),
+    # test threshold factor
+    ((dms2float(20.5, seconds=11.2), dms2float(20.5, seconds=53.3), 5),
+     {'threshold_factor': 60}, np.arange(12301, 12310), 600.0),
+    ((dms2float(20.5, seconds=11.2), dms2float(20.5, seconds=53.3), 5),
+     {'threshold_factor': 1}, np.arange(20502, 20517, 2), 1000.0),
+])
+def test_select_step360(args, kwargs, expected_levels, expected_factor):
+    levels, n, factor = select_step360(*args, **kwargs)
+
+    assert n == len(levels)
+    np.testing.assert_array_equal(levels, expected_levels)
+    assert factor == expected_factor
+
+
+@pytest.mark.parametrize('Formatter, regex',
+                         [(FormatterDMS, DMS_RE),
+                          (FormatterHMS, HMS_RE)],
+                         ids=['Degree/Minute/Second', 'Hour/Minute/Second'])
+@pytest.mark.parametrize('direction, factor, values', [
+    ("left", 60, [0, -30, -60]),
+    ("left", 600, [12301, 12302, 12303]),
+    ("left", 3600, [0, -30, -60]),
+    ("left", 36000, [738210, 738215, 738220]),
+    ("left", 360000, [7382120, 7382125, 7382130]),
+    ("left", 1., [45, 46, 47]),
+    ("left", 10., [452, 453, 454]),
+])
+def test_formatters(Formatter, regex, direction, factor, values):
+    fmt = Formatter()
+    result = fmt(direction, factor, values)
+
+    prev_degree = prev_minute = prev_second = None
+    for tick, value in zip(result, values):
+        m = regex.match(tick)
+        assert m is not None, f'{tick!r} is not an expected tick format.'
+
+        sign = sum(m.group(sign + '_sign') is not None
+                   for sign in ('degree', 'minute', 'second'))
+        assert sign <= 1, f'Only one element of tick {tick!r} may have a sign.'
+        sign = 1 if sign == 0 else -1
+
+        degree = float(m.group('degree') or prev_degree or 0)
+        minute = float(m.group('minute') or prev_minute or 0)
+        second = float(m.group('second') or prev_second or 0)
+        if Formatter == FormatterHMS:
+            # 360 degrees as plot range -> 24 hours as labelled range
+            expected_value = pytest.approx((value // 15) / factor)
+        else:
+            expected_value = pytest.approx(value / factor)
+        assert sign * dms2float(degree, minute, second) == expected_value, \
+            f'{tick!r} does not match expected tick value.'
+
+        prev_degree = degree
+        prev_minute = minute
+        prev_second = second
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/conftest.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/conftest.py	(date 1589417755518)
@@ -0,0 +1,3 @@
+from matplotlib.testing.conftest import (mpl_test_settings,
+                                         mpl_image_comparison_parameters,
+                                         pytest_configure, pytest_unconfigure)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_mplot3d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_mplot3d.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_mplot3d.py	(date 1589417755518)
@@ -0,0 +1,988 @@
+import pytest
+
+from mpl_toolkits.mplot3d import Axes3D, axes3d, proj3d, art3d
+import matplotlib as mpl
+from matplotlib import cm
+from matplotlib import path as mpath
+from matplotlib import colors as mcolors
+from matplotlib.testing.decorators import image_comparison, check_figures_equal
+from matplotlib.cbook.deprecation import MatplotlibDeprecationWarning
+from matplotlib.collections import LineCollection, PolyCollection
+from matplotlib.patches import Circle
+import matplotlib.pyplot as plt
+import numpy as np
+
+
+def test_aspect_equal_error():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    with pytest.raises(NotImplementedError):
+        ax.set_aspect('equal')
+
+
+@image_comparison(['bar3d.png'], remove_text=True)
+def test_bar3d():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    for c, z in zip(['r', 'g', 'b', 'y'], [30, 20, 10, 0]):
+        xs = np.arange(20)
+        ys = np.arange(20)
+        cs = [c] * len(xs)
+        cs[0] = 'c'
+        ax.bar(xs, ys, zs=z, zdir='y', align='edge', color=cs, alpha=0.8)
+
+
+@image_comparison(['bar3d_shaded.png'], remove_text=True)
+def test_bar3d_shaded():
+    x = np.arange(4)
+    y = np.arange(5)
+    x2d, y2d = np.meshgrid(x, y)
+    x2d, y2d = x2d.ravel(), y2d.ravel()
+    z = x2d + y2d
+
+    views = [(-60, 30), (30, 30), (30, -30), (120, -30)]
+    fig = plt.figure(figsize=plt.figaspect(1 / len(views)))
+    axs = fig.subplots(
+        1, len(views),
+        subplot_kw=dict(projection='3d')
+    )
+    for ax, (azim, elev) in zip(axs, views):
+        ax.bar3d(x2d, y2d, x2d * 0, 1, 1, z, shade=True)
+        ax.view_init(azim=azim, elev=elev)
+    fig.canvas.draw()
+
+
+@image_comparison(['bar3d_notshaded.png'], remove_text=True)
+def test_bar3d_notshaded():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    x = np.arange(4)
+    y = np.arange(5)
+    x2d, y2d = np.meshgrid(x, y)
+    x2d, y2d = x2d.ravel(), y2d.ravel()
+    z = x2d + y2d
+    ax.bar3d(x2d, y2d, x2d * 0, 1, 1, z, shade=False)
+    fig.canvas.draw()
+
+
+def test_bar3d_lightsource():
+    fig = plt.figure()
+    ax = fig.add_subplot(1, 1, 1, projection="3d")
+
+    ls = mcolors.LightSource(azdeg=0, altdeg=90)
+
+    length, width = 3, 4
+    area = length * width
+
+    x, y = np.meshgrid(np.arange(length), np.arange(width))
+    x = x.ravel()
+    y = y.ravel()
+    dz = x + y
+
+    color = [cm.coolwarm(i/area) for i in range(area)]
+
+    collection = ax.bar3d(x=x, y=y, z=0,
+                          dx=1, dy=1, dz=dz,
+                          color=color, shade=True, lightsource=ls)
+
+    # Testing that the custom 90° lightsource produces different shading on
+    # the top facecolors compared to the default, and that those colors are
+    # precisely the colors from the colormap, due to the illumination parallel
+    # to the z-axis.
+    np.testing.assert_array_equal(color, collection._facecolors3d[1::6])
+
+
+@image_comparison(['contour3d.png'], remove_text=True, style='mpl20')
+def test_contour3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    ax.contour(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)
+    ax.contour(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)
+    ax.contour(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)
+    ax.set_xlim(-40, 40)
+    ax.set_ylim(-40, 40)
+    ax.set_zlim(-100, 100)
+
+
+@image_comparison(['contourf3d.png'], remove_text=True)
+def test_contourf3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)
+    ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)
+    ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)
+    ax.set_xlim(-40, 40)
+    ax.set_ylim(-40, 40)
+    ax.set_zlim(-100, 100)
+
+
+@image_comparison(['contourf3d_fill.png'], remove_text=True)
+def test_contourf3d_fill():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    X, Y = np.meshgrid(np.arange(-2, 2, 0.25), np.arange(-2, 2, 0.25))
+    Z = X.clip(0, 0)
+    # This produces holes in the z=0 surface that causes rendering errors if
+    # the Poly3DCollection is not aware of path code information (issue #4784)
+    Z[::5, ::5] = 0.1
+    ax.contourf(X, Y, Z, offset=0, levels=[-0.1, 0], cmap=cm.coolwarm)
+    ax.set_xlim(-2, 2)
+    ax.set_ylim(-2, 2)
+    ax.set_zlim(-1, 1)
+
+
+@image_comparison(['tricontour.png'], remove_text=True, style='mpl20')
+def test_tricontour():
+    fig = plt.figure()
+
+    np.random.seed(19680801)
+    x = np.random.rand(1000) - 0.5
+    y = np.random.rand(1000) - 0.5
+    z = -(x**2 + y**2)
+
+    ax = fig.add_subplot(1, 2, 1, projection='3d')
+    ax.tricontour(x, y, z)
+    ax = fig.add_subplot(1, 2, 2, projection='3d')
+    ax.tricontourf(x, y, z)
+
+
+@image_comparison(['lines3d.png'], remove_text=True)
+def test_lines3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
+    z = np.linspace(-2, 2, 100)
+    r = z ** 2 + 1
+    x = r * np.sin(theta)
+    y = r * np.cos(theta)
+    ax.plot(x, y, z)
+
+
+@image_comparison(['mixedsubplot.png'], remove_text=True)
+def test_mixedsubplots():
+    def f(t):
+        return np.cos(2*np.pi*t) * np.exp(-t)
+
+    t1 = np.arange(0.0, 5.0, 0.1)
+    t2 = np.arange(0.0, 5.0, 0.02)
+
+    fig = plt.figure(figsize=plt.figaspect(2.))
+    ax = fig.add_subplot(2, 1, 1)
+    ax.plot(t1, f(t1), 'bo', t2, f(t2), 'k--', markerfacecolor='green')
+    ax.grid(True)
+
+    ax = fig.add_subplot(2, 1, 2, projection='3d')
+    X, Y = np.meshgrid(np.arange(-5, 5, 0.25), np.arange(-5, 5, 0.25))
+    R = np.hypot(X, Y)
+    Z = np.sin(R)
+
+    ax.plot_surface(X, Y, Z, rcount=40, ccount=40,
+                    linewidth=0, antialiased=False)
+
+    ax.set_zlim3d(-1, 1)
+
+
+@check_figures_equal(extensions=['png'])
+def test_tight_layout_text(fig_test, fig_ref):
+    # text is currently ignored in tight layout. So the order of text() and
+    # tight_layout() calls should not influence the result.
+    ax1 = fig_test.gca(projection='3d')
+    ax1.text(.5, .5, .5, s='some string')
+    fig_test.tight_layout()
+
+    ax2 = fig_ref.gca(projection='3d')
+    fig_ref.tight_layout()
+    ax2.text(.5, .5, .5, s='some string')
+
+
+@image_comparison(['scatter3d.png'], remove_text=True)
+def test_scatter3d():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    ax.scatter(np.arange(10), np.arange(10), np.arange(10),
+               c='r', marker='o')
+    ax.scatter(np.arange(10, 20), np.arange(10, 20), np.arange(10, 20),
+               c='b', marker='^')
+
+
+@image_comparison(['scatter3d_color.png'], remove_text=True)
+def test_scatter3d_color():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    ax.scatter(np.arange(10), np.arange(10), np.arange(10),
+               color='r', marker='o')
+    ax.scatter(np.arange(10, 20), np.arange(10, 20), np.arange(10, 20),
+               color='b', marker='s')
+
+
+@image_comparison(['plot_3d_from_2d.png'], remove_text=True)
+def test_plot_3d_from_2d():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    xs = np.arange(0, 5)
+    ys = np.arange(5, 10)
+    ax.plot(xs, ys, zs=0, zdir='x')
+    ax.plot(xs, ys, zs=0, zdir='y')
+
+
+@image_comparison(['surface3d.png'], remove_text=True)
+def test_surface3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    X = np.arange(-5, 5, 0.25)
+    Y = np.arange(-5, 5, 0.25)
+    X, Y = np.meshgrid(X, Y)
+    R = np.hypot(X, Y)
+    Z = np.sin(R)
+    surf = ax.plot_surface(X, Y, Z, rcount=40, ccount=40, cmap=cm.coolwarm,
+                           lw=0, antialiased=False)
+    ax.set_zlim(-1.01, 1.01)
+    fig.colorbar(surf, shrink=0.5, aspect=5)
+
+
+@image_comparison(['surface3d_shaded.png'], remove_text=True)
+def test_surface3d_shaded():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    X = np.arange(-5, 5, 0.25)
+    Y = np.arange(-5, 5, 0.25)
+    X, Y = np.meshgrid(X, Y)
+    R = np.sqrt(X ** 2 + Y ** 2)
+    Z = np.sin(R)
+    ax.plot_surface(X, Y, Z, rstride=5, cstride=5,
+                    color=[0.25, 1, 0.25], lw=1, antialiased=False)
+    ax.set_zlim(-1.01, 1.01)
+
+
+@image_comparison(['text3d.png'])
+def test_text3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    zdirs = (None, 'x', 'y', 'z', (1, 1, 0), (1, 1, 1))
+    xs = (2, 6, 4, 9, 7, 2)
+    ys = (6, 4, 8, 7, 2, 2)
+    zs = (4, 2, 5, 6, 1, 7)
+
+    for zdir, x, y, z in zip(zdirs, xs, ys, zs):
+        label = '(%d, %d, %d), dir=%s' % (x, y, z, zdir)
+        ax.text(x, y, z, label, zdir)
+
+    ax.text(1, 1, 1, "red", color='red')
+    ax.text2D(0.05, 0.95, "2D Text", transform=ax.transAxes)
+    ax.set_xlim3d(0, 10)
+    ax.set_ylim3d(0, 10)
+    ax.set_zlim3d(0, 10)
+    ax.set_xlabel('X axis')
+    ax.set_ylabel('Y axis')
+    ax.set_zlabel('Z axis')
+
+
+@image_comparison(['trisurf3d.png'], remove_text=True, tol=0.03)
+def test_trisurf3d():
+    n_angles = 36
+    n_radii = 8
+    radii = np.linspace(0.125, 1.0, n_radii)
+    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)
+    angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)
+    angles[:, 1::2] += np.pi/n_angles
+
+    x = np.append(0, (radii*np.cos(angles)).flatten())
+    y = np.append(0, (radii*np.sin(angles)).flatten())
+    z = np.sin(-x*y)
+
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    ax.plot_trisurf(x, y, z, cmap=cm.jet, linewidth=0.2)
+
+
+@image_comparison(['trisurf3d_shaded.png'], remove_text=True, tol=0.03)
+def test_trisurf3d_shaded():
+    n_angles = 36
+    n_radii = 8
+    radii = np.linspace(0.125, 1.0, n_radii)
+    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)
+    angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)
+    angles[:, 1::2] += np.pi/n_angles
+
+    x = np.append(0, (radii*np.cos(angles)).flatten())
+    y = np.append(0, (radii*np.sin(angles)).flatten())
+    z = np.sin(-x*y)
+
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    ax.plot_trisurf(x, y, z, color=[1, 0.5, 0], linewidth=0.2)
+
+
+@image_comparison(['wireframe3d.png'], remove_text=True)
+def test_wireframe3d():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    ax.plot_wireframe(X, Y, Z, rcount=13, ccount=13)
+
+
+@image_comparison(['wireframe3dzerocstride.png'], remove_text=True)
+def test_wireframe3dzerocstride():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    ax.plot_wireframe(X, Y, Z, rcount=13, ccount=0)
+
+
+@image_comparison(['wireframe3dzerorstride.png'], remove_text=True)
+def test_wireframe3dzerorstride():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    ax.plot_wireframe(X, Y, Z, rstride=0, cstride=10)
+
+
+def test_wireframe3dzerostrideraises():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    with pytest.raises(ValueError):
+        ax.plot_wireframe(X, Y, Z, rstride=0, cstride=0)
+
+
+def test_mixedsamplesraises():
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    X, Y, Z = axes3d.get_test_data(0.05)
+    with pytest.raises(ValueError):
+        ax.plot_wireframe(X, Y, Z, rstride=10, ccount=50)
+    with pytest.raises(ValueError):
+        ax.plot_surface(X, Y, Z, cstride=50, rcount=10)
+
+
+@image_comparison(['quiver3d.png'], remove_text=True)
+def test_quiver3d():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]
+
+    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
+    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
+    w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
+            np.sin(np.pi * z))
+
+    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)
+
+
+@image_comparison(['quiver3d_empty.png'], remove_text=True)
+def test_quiver3d_empty():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    x, y, z = np.ogrid[-1:0.8:0j, -1:0.8:0j, -1:0.6:0j]
+
+    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
+    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
+    w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
+            np.sin(np.pi * z))
+
+    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)
+
+
+@image_comparison(['quiver3d_masked.png'], remove_text=True)
+def test_quiver3d_masked():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    # Using mgrid here instead of ogrid because masked_where doesn't
+    # seem to like broadcasting very much...
+    x, y, z = np.mgrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]
+
+    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
+    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
+    w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
+            np.sin(np.pi * z))
+    u = np.ma.masked_where((-0.4 < x) & (x < 0.1), u, copy=False)
+    v = np.ma.masked_where((0.1 < y) & (y < 0.7), v, copy=False)
+
+    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)
+
+
+@image_comparison(['quiver3d_pivot_middle.png'], remove_text=True)
+def test_quiver3d_pivot_middle():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]
+
+    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
+    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
+    w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
+            np.sin(np.pi * z))
+
+    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='middle', normalize=True)
+
+
+@image_comparison(['quiver3d_pivot_tail.png'], remove_text=True)
+def test_quiver3d_pivot_tail():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j]
+
+    u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)
+    v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)
+    w = (np.sqrt(2.0 / 3.0) * np.cos(np.pi * x) * np.cos(np.pi * y) *
+            np.sin(np.pi * z))
+
+    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tail', normalize=True)
+
+
+@image_comparison(['poly3dcollection_closed.png'], remove_text=True)
+def test_poly3dcollection_closed():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    poly1 = np.array([[0, 0, 1], [0, 1, 1], [0, 0, 0]], float)
+    poly2 = np.array([[0, 1, 1], [1, 1, 1], [1, 1, 0]], float)
+    c1 = art3d.Poly3DCollection([poly1], linewidths=3, edgecolor='k',
+                                facecolor=(0.5, 0.5, 1, 0.5), closed=True)
+    c2 = art3d.Poly3DCollection([poly2], linewidths=3, edgecolor='k',
+                                facecolor=(1, 0.5, 0.5, 0.5), closed=False)
+    ax.add_collection3d(c1)
+    ax.add_collection3d(c2)
+
+
+def test_poly_collection_2d_to_3d_empty():
+    poly = PolyCollection([])
+    art3d.poly_collection_2d_to_3d(poly)
+    assert isinstance(poly, art3d.Poly3DCollection)
+    assert poly.get_paths() == []
+
+
+@image_comparison(['poly3dcollection_alpha.png'], remove_text=True)
+def test_poly3dcollection_alpha():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+
+    poly1 = np.array([[0, 0, 1], [0, 1, 1], [0, 0, 0]], float)
+    poly2 = np.array([[0, 1, 1], [1, 1, 1], [1, 1, 0]], float)
+    c1 = art3d.Poly3DCollection([poly1], linewidths=3, edgecolor='k',
+                                facecolor=(0.5, 0.5, 1), closed=True)
+    c1.set_alpha(0.5)
+    c2 = art3d.Poly3DCollection([poly2], linewidths=3, edgecolor='k',
+                                facecolor=(1, 0.5, 0.5), closed=False)
+    c2.set_alpha(0.5)
+    ax.add_collection3d(c1)
+    ax.add_collection3d(c2)
+
+
+@image_comparison(['axes3d_labelpad.png'])
+def test_axes3d_labelpad():
+    fig = plt.figure()
+    ax = Axes3D(fig)
+    # labelpad respects rcParams
+    assert ax.xaxis.labelpad == mpl.rcParams['axes.labelpad']
+    # labelpad can be set in set_label
+    ax.set_xlabel('X LABEL', labelpad=10)
+    assert ax.xaxis.labelpad == 10
+    ax.set_ylabel('Y LABEL')
+    ax.set_zlabel('Z LABEL')
+    # or manually
+    ax.yaxis.labelpad = 20
+    ax.zaxis.labelpad = -40
+
+    # Tick labels also respect tick.pad (also from rcParams)
+    for i, tick in enumerate(ax.yaxis.get_major_ticks()):
+        tick.set_pad(tick.get_pad() - i * 5)
+
+
+@image_comparison(['axes3d_cla.png'])
+def test_axes3d_cla():
+    # fixed in pull request 4553
+    fig = plt.figure()
+    ax = fig.add_subplot(1, 1, 1, projection='3d')
+    ax.set_axis_off()
+    ax.cla()  # make sure the axis displayed is 3D (not 2D)
+
+
+def test_plotsurface_1d_raises():
+    x = np.linspace(0.5, 10, num=100)
+    y = np.linspace(0.5, 10, num=100)
+    X, Y = np.meshgrid(x, y)
+    z = np.random.randn(100)
+
+    fig = plt.figure(figsize=(14, 6))
+    ax = fig.add_subplot(1, 2, 1, projection='3d')
+    with pytest.raises(ValueError):
+        ax.plot_surface(X, Y, z)
+
+
+def _test_proj_make_M():
+    # eye point
+    E = np.array([1000, -1000, 2000])
+    R = np.array([100, 100, 100])
+    V = np.array([0, 0, 1])
+    viewM = proj3d.view_transformation(E, R, V)
+    perspM = proj3d.persp_transformation(100, -100)
+    M = np.dot(perspM, viewM)
+    return M
+
+
+def test_proj_transform():
+    M = _test_proj_make_M()
+
+    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 300.0
+    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 300.0
+    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 300.0
+
+    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)
+    ixs, iys, izs = proj3d.inv_transform(txs, tys, tzs, M)
+
+    np.testing.assert_almost_equal(ixs, xs)
+    np.testing.assert_almost_equal(iys, ys)
+    np.testing.assert_almost_equal(izs, zs)
+
+
+def _test_proj_draw_axes(M, s=1, *args, **kwargs):
+    xs = [0, s, 0, 0]
+    ys = [0, 0, s, 0]
+    zs = [0, 0, 0, s]
+    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)
+    o, ax, ay, az = zip(txs, tys)
+    lines = [(o, ax), (o, ay), (o, az)]
+
+    fig, ax = plt.subplots(*args, **kwargs)
+    linec = LineCollection(lines)
+    ax.add_collection(linec)
+    for x, y, t in zip(txs, tys, ['o', 'x', 'y', 'z']):
+        ax.text(x, y, t)
+
+    return fig, ax
+
+
+@image_comparison(['proj3d_axes_cube.png'], remove_text=True, style='default')
+def test_proj_axes_cube():
+    M = _test_proj_make_M()
+
+    ts = '0 1 2 3 0 4 5 6 7 4'.split()
+    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 300.0
+    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 300.0
+    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 300.0
+
+    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)
+
+    fig, ax = _test_proj_draw_axes(M, s=400)
+
+    ax.scatter(txs, tys, c=tzs)
+    ax.plot(txs, tys, c='r')
+    for x, y, t in zip(txs, tys, ts):
+        ax.text(x, y, t)
+
+    ax.set_xlim(-0.2, 0.2)
+    ax.set_ylim(-0.2, 0.2)
+
+
+@image_comparison(['proj3d_axes_cube_ortho.png'],
+                  remove_text=True, style='default')
+def test_proj_axes_cube_ortho():
+    E = np.array([200, 100, 100])
+    R = np.array([0, 0, 0])
+    V = np.array([0, 0, 1])
+    viewM = proj3d.view_transformation(E, R, V)
+    orthoM = proj3d.ortho_transformation(-1, 1)
+    M = np.dot(orthoM, viewM)
+
+    ts = '0 1 2 3 0 4 5 6 7 4'.split()
+    xs = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0, 0]) * 100
+    ys = np.array([0, 0, 1, 1, 0, 0, 0, 1, 1, 0]) * 100
+    zs = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1]) * 100
+
+    txs, tys, tzs = proj3d.proj_transform(xs, ys, zs, M)
+
+    fig, ax = _test_proj_draw_axes(M, s=150)
+
+    ax.scatter(txs, tys, s=300-tzs)
+    ax.plot(txs, tys, c='r')
+    for x, y, t in zip(txs, tys, ts):
+        ax.text(x, y, t)
+
+    ax.set_xlim(-200, 200)
+    ax.set_ylim(-200, 200)
+
+
+def test_rot():
+    V = [1, 0, 0, 1]
+    rotated_V = proj3d.rot_x(V, np.pi / 6)
+    np.testing.assert_allclose(rotated_V, [1, 0, 0, 1])
+
+    V = [0, 1, 0, 1]
+    rotated_V = proj3d.rot_x(V, np.pi / 6)
+    np.testing.assert_allclose(rotated_V, [0, np.sqrt(3) / 2, 0.5, 1])
+
+
+def test_world():
+    xmin, xmax = 100, 120
+    ymin, ymax = -100, 100
+    zmin, zmax = 0.1, 0.2
+    M = proj3d.world_transformation(xmin, xmax, ymin, ymax, zmin, zmax)
+    np.testing.assert_allclose(M,
+                               [[5e-2, 0, 0, -5],
+                                [0, 5e-3, 0, 5e-1],
+                                [0, 0, 1e1, -1],
+                                [0, 0, 0, 1]])
+
+
+@image_comparison(['proj3d_lines_dists.png'],
+                  remove_text=True, style='default')
+def test_lines_dists():
+    fig, ax = plt.subplots(figsize=(4, 6), subplot_kw=dict(aspect='equal'))
+
+    xs = (0, 30)
+    ys = (20, 150)
+    ax.plot(xs, ys)
+    p0, p1 = zip(xs, ys)
+
+    xs = (0, 0, 20, 30)
+    ys = (100, 150, 30, 200)
+    ax.scatter(xs, ys)
+
+    dist = proj3d._line2d_seg_dist(p0, p1, (xs[0], ys[0]))
+    dist = proj3d._line2d_seg_dist(p0, p1, np.array((xs, ys)))
+    for x, y, d in zip(xs, ys, dist):
+        c = Circle((x, y), d, fill=0)
+        ax.add_patch(c)
+
+    ax.set_xlim(-50, 150)
+    ax.set_ylim(0, 300)
+
+
+def test_autoscale():
+    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+    ax.margins(x=0, y=.1, z=.2)
+    ax.plot([0, 1], [0, 1], [0, 1])
+    assert ax.get_w_lims() == (0, 1, -.1, 1.1, -.2, 1.2)
+    ax.autoscale(False)
+    ax.set_autoscalez_on(True)
+    ax.plot([0, 2], [0, 2], [0, 2])
+    assert ax.get_w_lims() == (0, 1, -.1, 1.1, -.4, 2.4)
+
+
+@image_comparison(['axes3d_ortho.png'], style='default')
+def test_axes3d_ortho():
+    fig = plt.figure()
+    ax = fig.gca(projection='3d')
+    ax.set_proj_type('ortho')
+
+
+@pytest.mark.parametrize('value', [np.inf, np.nan])
+@pytest.mark.parametrize(('setter', 'side'), [
+    ('set_xlim3d', 'left'),
+    ('set_xlim3d', 'right'),
+    ('set_ylim3d', 'bottom'),
+    ('set_ylim3d', 'top'),
+    ('set_zlim3d', 'bottom'),
+    ('set_zlim3d', 'top'),
+])
+def test_invalid_axes_limits(setter, side, value):
+    limit = {side: value}
+    fig = plt.figure()
+    obj = fig.add_subplot(111, projection='3d')
+    with pytest.raises(ValueError):
+        getattr(obj, setter)(**limit)
+
+
+class TestVoxels:
+    @image_comparison(['voxels-simple.png'], remove_text=True)
+    def test_simple(self):
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        x, y, z = np.indices((5, 4, 3))
+        voxels = (x == y) | (y == z)
+        ax.voxels(voxels)
+
+    @image_comparison(['voxels-edge-style.png'],
+                      remove_text=True, style='default')
+    def test_edge_style(self):
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        x, y, z = np.indices((5, 5, 4))
+        voxels = ((x - 2)**2 + (y - 2)**2 + (z-1.5)**2) < 2.2**2
+        v = ax.voxels(voxels, linewidths=3, edgecolor='C1')
+
+        # change the edge color of one voxel
+        v[max(v.keys())].set_edgecolor('C2')
+
+    @image_comparison(['voxels-named-colors.png'], remove_text=True)
+    def test_named_colors(self):
+        """Test with colors set to a 3d object array of strings."""
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        x, y, z = np.indices((10, 10, 10))
+        voxels = (x == y) | (y == z)
+        voxels = voxels & ~(x * y * z < 1)
+        colors = np.full((10, 10, 10), 'C0', dtype=np.object_)
+        colors[(x < 5) & (y < 5)] = '0.25'
+        colors[(x + z) < 10] = 'cyan'
+        ax.voxels(voxels, facecolors=colors)
+
+    @image_comparison(['voxels-rgb-data.png'], remove_text=True)
+    def test_rgb_data(self):
+        """Test with colors set to a 4d float array of rgb data."""
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        x, y, z = np.indices((10, 10, 10))
+        voxels = (x == y) | (y == z)
+        colors = np.zeros((10, 10, 10, 3))
+        colors[..., 0] = x / 9
+        colors[..., 1] = y / 9
+        colors[..., 2] = z / 9
+        ax.voxels(voxels, facecolors=colors)
+
+    @image_comparison(['voxels-alpha.png'], remove_text=True)
+    def test_alpha(self):
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        x, y, z = np.indices((10, 10, 10))
+        v1 = x == y
+        v2 = np.abs(x - y) < 2
+        voxels = v1 | v2
+        colors = np.zeros((10, 10, 10, 4))
+        colors[v2] = [1, 0, 0, 0.5]
+        colors[v1] = [0, 1, 0, 0.5]
+        v = ax.voxels(voxels, facecolors=colors)
+
+        assert type(v) is dict
+        for coord, poly in v.items():
+            assert voxels[coord], "faces returned for absent voxel"
+            assert isinstance(poly, art3d.Poly3DCollection)
+
+    @image_comparison(['voxels-xyz.png'], tol=0.01)
+    def test_xyz(self):
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        def midpoints(x):
+            sl = ()
+            for i in range(x.ndim):
+                x = (x[sl + np.index_exp[:-1]] +
+                     x[sl + np.index_exp[1:]]) / 2.0
+                sl += np.index_exp[:]
+            return x
+
+        # prepare some coordinates, and attach rgb values to each
+        r, g, b = np.indices((17, 17, 17)) / 16.0
+        rc = midpoints(r)
+        gc = midpoints(g)
+        bc = midpoints(b)
+
+        # define a sphere about [0.5, 0.5, 0.5]
+        sphere = (rc - 0.5)**2 + (gc - 0.5)**2 + (bc - 0.5)**2 < 0.5**2
+
+        # combine the color components
+        colors = np.zeros(sphere.shape + (3,))
+        colors[..., 0] = rc
+        colors[..., 1] = gc
+        colors[..., 2] = bc
+
+        # and plot everything
+        ax.voxels(r, g, b, sphere,
+                  facecolors=colors,
+                  edgecolors=np.clip(2*colors - 0.5, 0, 1),  # brighter
+                  linewidth=0.5)
+
+    def test_calling_conventions(self):
+        x, y, z = np.indices((3, 4, 5))
+        filled = np.ones((2, 3, 4))
+
+        fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+
+        # all the valid calling conventions
+        for kw in (dict(), dict(edgecolor='k')):
+            ax.voxels(filled, **kw)
+            ax.voxels(filled=filled, **kw)
+            ax.voxels(x, y, z, filled, **kw)
+            ax.voxels(x, y, z, filled=filled, **kw)
+
+        # duplicate argument
+        with pytest.raises(TypeError) as exc:
+            ax.voxels(x, y, z, filled, filled=filled)
+        exc.match(".*voxels.*")
+        # missing arguments
+        with pytest.raises(TypeError) as exc:
+            ax.voxels(x, y)
+        exc.match(".*voxels.*")
+        # x, y, z are positional only - this passes them on as attributes of
+        # Poly3DCollection
+        with pytest.raises(AttributeError):
+            ax.voxels(filled=filled, x=x, y=y, z=z)
+
+
+def test_line3d_set_get_data_3d():
+    x, y, z = [0, 1], [2, 3], [4, 5]
+    x2, y2, z2 = [6, 7], [8, 9], [10, 11]
+    fig = plt.figure()
+    ax = fig.add_subplot(111, projection='3d')
+    lines = ax.plot(x, y, z)
+    line = lines[0]
+    np.testing.assert_array_equal((x, y, z), line.get_data_3d())
+    line.set_data_3d(x2, y2, z2)
+    np.testing.assert_array_equal((x2, y2, z2), line.get_data_3d())
+
+
+@check_figures_equal(extensions=["png"])
+def test_inverted(fig_test, fig_ref):
+    # Plot then invert.
+    ax = fig_test.add_subplot(projection="3d")
+    ax.plot([1, 1, 10, 10], [1, 10, 10, 10], [1, 1, 1, 10])
+    ax.invert_yaxis()
+    # Invert then plot.
+    ax = fig_ref.add_subplot(projection="3d")
+    ax.invert_yaxis()
+    ax.plot([1, 1, 10, 10], [1, 10, 10, 10], [1, 1, 1, 10])
+
+
+def test_inverted_cla():
+    # GitHub PR #5450. Setting autoscale should reset
+    # axes to be non-inverted.
+    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
+    # 1. test that a new axis is not inverted per default
+    assert not ax.xaxis_inverted()
+    assert not ax.yaxis_inverted()
+    assert not ax.zaxis_inverted()
+    ax.set_xlim(1, 0)
+    ax.set_ylim(1, 0)
+    ax.set_zlim(1, 0)
+    assert ax.xaxis_inverted()
+    assert ax.yaxis_inverted()
+    assert ax.zaxis_inverted()
+    ax.cla()
+    assert not ax.xaxis_inverted()
+    assert not ax.yaxis_inverted()
+    assert not ax.zaxis_inverted()
+
+
+def test_art3d_deprecated():
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.norm_angle(0.0)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.norm_text_angle(0.0)
+
+    path = mpath.Path(np.empty((0, 2)))
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.path_to_3d_segment(path)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.paths_to_3d_segments([path])
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.path_to_3d_segment_with_codes(path)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.paths_to_3d_segments_with_codes([path])
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.get_colors([], 1)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        art3d.zalpha([], [])
+
+
+def test_proj3d_deprecated():
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.line2d([0, 1], [0, 1])
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.line2d_dist([0, 1, 3], [0, 1])
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.mod([1, 1, 1])
+
+    vec = np.arange(4)
+    M = np.ones((4, 4))
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.proj_transform_vec(vec, M)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.proj_transform_vec_clip(vec, M)
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.vec_pad_ones(np.ones(3), np.ones(3), np.ones(3))
+
+    with pytest.warns(MatplotlibDeprecationWarning):
+        proj3d.proj_trans_clip_points(np.ones((4, 3)), M)
+
+
+def test_ax3d_tickcolour():
+    fig = plt.figure()
+    ax = Axes3D(fig)
+
+    ax.tick_params(axis='x', colors='red')
+    ax.tick_params(axis='y', colors='red')
+    ax.tick_params(axis='z', colors='red')
+    fig.canvas.draw()
+
+    for tick in ax.xaxis.get_major_ticks():
+        assert tick.tick1line._color == 'red'
+    for tick in ax.yaxis.get_major_ticks():
+        assert tick.tick1line._color == 'red'
+    for tick in ax.zaxis.get_major_ticks():
+        assert tick.tick1line._color == 'red'
+
+
+@check_figures_equal(extensions=["png"])
+def test_ticklabel_format(fig_test, fig_ref):
+    axs = fig_test.subplots(4, 5, subplot_kw={"projection": "3d"})
+    for ax in axs.flat:
+        ax.set_xlim(1e7, 1e7 + 10)
+    for row, name in zip(axs, ["x", "y", "z", "both"]):
+        row[0].ticklabel_format(
+            axis=name, style="plain")
+        row[1].ticklabel_format(
+            axis=name, scilimits=(-2, 2))
+        row[2].ticklabel_format(
+            axis=name, useOffset=not mpl.rcParams["axes.formatter.useoffset"])
+        row[3].ticklabel_format(
+            axis=name, useLocale=not mpl.rcParams["axes.formatter.use_locale"])
+        row[4].ticklabel_format(
+            axis=name,
+            useMathText=not mpl.rcParams["axes.formatter.use_mathtext"])
+
+    def get_formatters(ax, names):
+        return [getattr(ax, name).get_major_formatter() for name in names]
+
+    axs = fig_ref.subplots(4, 5, subplot_kw={"projection": "3d"})
+    for ax in axs.flat:
+        ax.set_xlim(1e7, 1e7 + 10)
+    for row, names in zip(
+            axs, [["xaxis"], ["yaxis"], ["zaxis"], ["xaxis", "yaxis", "zaxis"]]
+    ):
+        for fmt in get_formatters(row[0], names):
+            fmt.set_scientific(False)
+        for fmt in get_formatters(row[1], names):
+            fmt.set_powerlimits((-2, 2))
+        for fmt in get_formatters(row[2], names):
+            fmt.set_useOffset(not mpl.rcParams["axes.formatter.useoffset"])
+        for fmt in get_formatters(row[3], names):
+            fmt.set_useLocale(not mpl.rcParams["axes.formatter.use_locale"])
+        for fmt in get_formatters(row[4], names):
+            fmt.set_useMathText(
+                not mpl.rcParams["axes.formatter.use_mathtext"])
+
+
+@check_figures_equal(extensions=["png"])
+def test_quiver3D_smoke(fig_test, fig_ref):
+    pivot = "middle"
+    # Make the grid
+    x, y, z = np.meshgrid(
+        np.arange(-0.8, 1, 0.2),
+        np.arange(-0.8, 1, 0.2),
+        np.arange(-0.8, 1, 0.8)
+    )
+    u = v = w = np.ones_like(x)
+
+    for fig, length in zip((fig_ref, fig_test), (1, 1.0)):
+        ax = fig.gca(projection="3d")
+        ax.quiver(x, y, z, u, v, w, length=length, pivot=pivot)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py	(date 1589417755518)
@@ -0,0 +1,217 @@
+import numpy as np
+import platform
+
+import matplotlib.pyplot as plt
+from matplotlib.path import Path
+from matplotlib.projections import PolarAxes
+from matplotlib.transforms import Affine2D, Transform
+from matplotlib.testing.decorators import image_comparison
+
+from mpl_toolkits.axes_grid1.parasite_axes import ParasiteAxesAuxTrans
+from mpl_toolkits.axisartist import SubplotHost
+from mpl_toolkits.axes_grid1.parasite_axes import host_subplot_class_factory
+from mpl_toolkits.axisartist import angle_helper
+from mpl_toolkits.axisartist.axislines import Axes
+from mpl_toolkits.axisartist.grid_helper_curvelinear import \
+    GridHelperCurveLinear
+
+
+@image_comparison(['custom_transform.png'], style='default',
+                  tol={'aarch64': 0.034}.get(platform.machine(), 0.03))
+def test_custom_transform():
+    class MyTransform(Transform):
+        input_dims = 2
+        output_dims = 2
+        is_separable = False
+
+        def __init__(self, resolution):
+            """
+            Resolution is the number of steps to interpolate between each input
+            line segment to approximate its path in transformed space.
+            """
+            Transform.__init__(self)
+            self._resolution = resolution
+
+        def transform(self, ll):
+            x, y = ll.T
+            return np.column_stack([x, y - x])
+
+        transform_non_affine = transform
+
+        def transform_path(self, path):
+            ipath = path.interpolated(self._resolution)
+            return Path(self.transform(ipath.vertices), ipath.codes)
+
+        transform_path_non_affine = transform_path
+
+        def inverted(self):
+            return MyTransformInv(self._resolution)
+
+    class MyTransformInv(Transform):
+        input_dims = 2
+        output_dims = 2
+        is_separable = False
+
+        def __init__(self, resolution):
+            Transform.__init__(self)
+            self._resolution = resolution
+
+        def transform(self, ll):
+            x, y = ll.T
+            return np.column_stack([x, y + x])
+
+        def inverted(self):
+            return MyTransform(self._resolution)
+
+    fig = plt.figure()
+
+    SubplotHost = host_subplot_class_factory(Axes)
+
+    tr = MyTransform(1)
+    grid_helper = GridHelperCurveLinear(tr)
+    ax1 = SubplotHost(fig, 1, 1, 1, grid_helper=grid_helper)
+    fig.add_subplot(ax1)
+
+    ax2 = ParasiteAxesAuxTrans(ax1, tr, "equal")
+    ax1.parasites.append(ax2)
+    ax2.plot([3, 6], [5.0, 10.])
+
+    ax1.set_aspect(1.)
+    ax1.set_xlim(0, 10)
+    ax1.set_ylim(0, 10)
+
+    ax1.grid(True)
+
+
+@image_comparison(['polar_box.png'], style='default',
+                  tol={'aarch64': 0.04}.get(platform.machine(), 0.03))
+def test_polar_box():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig = plt.figure(figsize=(5, 5))
+
+    # PolarAxes.PolarTransform takes radian. However, we want our coordinate
+    # system in degree
+    tr = Affine2D().scale(np.pi / 180., 1.) + PolarAxes.PolarTransform()
+
+    # polar projection, which involves cycle, and also has limits in
+    # its coordinates, needs a special method to find the extremes
+    # (min, max of the coordinate within the view).
+    extreme_finder = angle_helper.ExtremeFinderCycle(20, 20,
+                                                     lon_cycle=360,
+                                                     lat_cycle=None,
+                                                     lon_minmax=None,
+                                                     lat_minmax=(0, np.inf))
+
+    grid_locator1 = angle_helper.LocatorDMS(12)
+    tick_formatter1 = angle_helper.FormatterDMS()
+
+    grid_helper = GridHelperCurveLinear(tr,
+                                        extreme_finder=extreme_finder,
+                                        grid_locator1=grid_locator1,
+                                        tick_formatter1=tick_formatter1)
+
+    ax1 = SubplotHost(fig, 1, 1, 1, grid_helper=grid_helper)
+
+    ax1.axis["right"].major_ticklabels.set_visible(True)
+    ax1.axis["top"].major_ticklabels.set_visible(True)
+
+    # let right axis shows ticklabels for 1st coordinate (angle)
+    ax1.axis["right"].get_helper().nth_coord_ticks = 0
+    # let bottom axis shows ticklabels for 2nd coordinate (radius)
+    ax1.axis["bottom"].get_helper().nth_coord_ticks = 1
+
+    fig.add_subplot(ax1)
+
+    ax1.axis["lat"] = axis = grid_helper.new_floating_axis(0, 45, axes=ax1)
+    axis.label.set_text("Test")
+    axis.label.set_visible(True)
+    axis.get_helper()._extremes = 2, 12
+
+    ax1.axis["lon"] = axis = grid_helper.new_floating_axis(1, 6, axes=ax1)
+    axis.label.set_text("Test 2")
+    axis.get_helper()._extremes = -180, 90
+
+    # A parasite axes with given transform
+    ax2 = ParasiteAxesAuxTrans(ax1, tr, "equal")
+    assert ax2.transData == tr + ax1.transData
+    # Anything you draw in ax2 will match the ticks and grids of ax1.
+    ax1.parasites.append(ax2)
+    ax2.plot(np.linspace(0, 30, 50), np.linspace(10, 10, 50))
+
+    ax1.set_aspect(1.)
+    ax1.set_xlim(-5, 12)
+    ax1.set_ylim(-5, 10)
+
+    ax1.grid(True)
+
+
+@image_comparison(['axis_direction.png'], style='default', tol=0.03)
+def test_axis_direction():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig = plt.figure(figsize=(5, 5))
+
+    # PolarAxes.PolarTransform takes radian. However, we want our coordinate
+    # system in degree
+    tr = Affine2D().scale(np.pi / 180., 1.) + PolarAxes.PolarTransform()
+
+    # polar projection, which involves cycle, and also has limits in
+    # its coordinates, needs a special method to find the extremes
+    # (min, max of the coordinate within the view).
+
+    # 20, 20 : number of sampling points along x, y direction
+    extreme_finder = angle_helper.ExtremeFinderCycle(20, 20,
+                                                     lon_cycle=360,
+                                                     lat_cycle=None,
+                                                     lon_minmax=None,
+                                                     lat_minmax=(0, np.inf),
+                                                     )
+
+    grid_locator1 = angle_helper.LocatorDMS(12)
+    tick_formatter1 = angle_helper.FormatterDMS()
+
+    grid_helper = GridHelperCurveLinear(tr,
+                                        extreme_finder=extreme_finder,
+                                        grid_locator1=grid_locator1,
+                                        tick_formatter1=tick_formatter1)
+
+    ax1 = SubplotHost(fig, 1, 1, 1, grid_helper=grid_helper)
+
+    for axis in ax1.axis.values():
+        axis.set_visible(False)
+
+    fig.add_subplot(ax1)
+
+    ax1.axis["lat1"] = axis = grid_helper.new_floating_axis(
+        0, 130,
+        axes=ax1, axis_direction="left")
+    axis.label.set_text("Test")
+    axis.label.set_visible(True)
+    axis.get_helper()._extremes = 0.001, 10
+
+    ax1.axis["lat2"] = axis = grid_helper.new_floating_axis(
+        0, 50,
+        axes=ax1, axis_direction="right")
+    axis.label.set_text("Test")
+    axis.label.set_visible(True)
+    axis.get_helper()._extremes = 0.001, 10
+
+    ax1.axis["lon"] = axis = grid_helper.new_floating_axis(
+        1, 10,
+        axes=ax1, axis_direction="bottom")
+    axis.label.set_text("Test 2")
+    axis.get_helper()._extremes = 50, 130
+    axis.major_ticklabels.set_axis_direction("top")
+    axis.label.set_axis_direction("top")
+
+    grid_helper.grid_finder.grid_locator1.den = 5
+    grid_helper.grid_finder.grid_locator2._nbins = 5
+
+    ax1.set_aspect(1.)
+    ax1.set_xlim(-8, 8)
+    ax1.set_ylim(-4, 12)
+
+    ax1.grid(True)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_clip_path.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_clip_path.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_clip_path.py	(date 1589417755518)
@@ -0,0 +1,32 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.testing.decorators import image_comparison
+from matplotlib.transforms import Bbox
+
+from mpl_toolkits.axisartist.clip_path import clip_line_to_rect
+
+
+@image_comparison(['clip_path.png'], style='default')
+def test_clip_path():
+    x = np.array([-3, -2, -1, 0., 1, 2, 3, 2, 1, 0, -1, -2, -3, 5])
+    y = np.arange(len(x))
+
+    fig, ax = plt.subplots()
+    ax.plot(x, y, lw=1)
+
+    bbox = Bbox.from_extents(-2, 3, 2, 12.5)
+    rect = plt.Rectangle(bbox.p0, bbox.width, bbox.height,
+                         facecolor='none', edgecolor='k', ls='--')
+    ax.add_patch(rect)
+
+    clipped_lines, ticks = clip_line_to_rect(x, y, bbox)
+    for lx, ly in clipped_lines:
+        ax.plot(lx, ly, lw=1, color='C1')
+        for px, py in zip(lx, ly):
+            assert bbox.contains(px, py)
+
+    ccc = iter(['C3o', 'C2x', 'C3o', 'C2x'])
+    for ttt in ticks:
+        cc = next(ccc)
+        for (xx, yy), aa in ttt:
+            ax.plot([xx], [yy], cc)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid1.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid1.py	(date 1589417755518)
@@ -0,0 +1,463 @@
+from itertools import product
+import platform
+
+import matplotlib
+import matplotlib.pyplot as plt
+from matplotlib import cbook
+from matplotlib.cbook import MatplotlibDeprecationWarning
+from matplotlib.backend_bases import MouseEvent
+from matplotlib.colors import LogNorm
+from matplotlib.transforms import Bbox, TransformedBbox
+from matplotlib.testing.decorators import (
+    image_comparison, remove_ticks_and_titles)
+
+from mpl_toolkits.axes_grid1 import (
+    host_subplot, make_axes_locatable, AxesGrid, ImageGrid)
+from mpl_toolkits.axes_grid1.anchored_artists import (
+    AnchoredSizeBar, AnchoredDirectionArrows)
+from mpl_toolkits.axes_grid1.inset_locator import (
+    zoomed_inset_axes, mark_inset, inset_axes, BboxConnectorPatch)
+
+import pytest
+
+import numpy as np
+from numpy.testing import assert_array_equal, assert_array_almost_equal
+
+
+@image_comparison(['divider_append_axes'])
+def test_divider_append_axes():
+
+    # the random data
+    np.random.seed(0)
+    x = np.random.randn(1000)
+    y = np.random.randn(1000)
+
+    fig, axScatter = plt.subplots()
+
+    # the scatter plot:
+    axScatter.scatter(x, y)
+
+    # create new axes on the right and on the top of the current axes
+    # The first argument of the new_vertical(new_horizontal) method is
+    # the height (width) of the axes to be created in inches.
+    divider = make_axes_locatable(axScatter)
+    axHistbot = divider.append_axes("bottom", 1.2, pad=0.1, sharex=axScatter)
+    axHistright = divider.append_axes("right", 1.2, pad=0.1, sharey=axScatter)
+    axHistleft = divider.append_axes("left", 1.2, pad=0.1, sharey=axScatter)
+    axHisttop = divider.append_axes("top", 1.2, pad=0.1, sharex=axScatter)
+
+    # now determine nice limits by hand:
+    binwidth = 0.25
+    xymax = max(np.max(np.abs(x)), np.max(np.abs(y)))
+    lim = (int(xymax/binwidth) + 1) * binwidth
+
+    bins = np.arange(-lim, lim + binwidth, binwidth)
+    axHisttop.hist(x, bins=bins)
+    axHistbot.hist(x, bins=bins)
+    axHistleft.hist(y, bins=bins, orientation='horizontal')
+    axHistright.hist(y, bins=bins, orientation='horizontal')
+
+    axHistbot.invert_yaxis()
+    axHistleft.invert_xaxis()
+
+    axHisttop.xaxis.set_ticklabels(())
+    axHistbot.xaxis.set_ticklabels(())
+    axHistleft.yaxis.set_ticklabels(())
+    axHistright.yaxis.set_ticklabels(())
+
+
+@image_comparison(['twin_axes_empty_and_removed'], extensions=["png"], tol=1)
+def test_twin_axes_empty_and_removed():
+    # Purely cosmetic font changes (avoid overlap)
+    matplotlib.rcParams.update({"font.size": 8})
+    matplotlib.rcParams.update({"xtick.labelsize": 8})
+    matplotlib.rcParams.update({"ytick.labelsize": 8})
+    generators = ["twinx", "twiny", "twin"]
+    modifiers = ["", "host invisible", "twin removed", "twin invisible",
+                 "twin removed\nhost invisible"]
+    # Unmodified host subplot at the beginning for reference
+    h = host_subplot(len(modifiers)+1, len(generators), 2)
+    h.text(0.5, 0.5, "host_subplot", horizontalalignment="center",
+        verticalalignment="center")
+    # Host subplots with various modifications (twin*, visibility) applied
+    for i, (mod, gen) in enumerate(product(modifiers, generators),
+        len(generators)+1):
+        h = host_subplot(len(modifiers)+1, len(generators), i)
+        t = getattr(h, gen)()
+        if "twin invisible" in mod:
+            t.axis[:].set_visible(False)
+        if "twin removed" in mod:
+            t.remove()
+        if "host invisible" in mod:
+            h.axis[:].set_visible(False)
+        h.text(0.5, 0.5, gen + ("\n" + mod if mod else ""),
+            horizontalalignment="center", verticalalignment="center")
+    plt.subplots_adjust(wspace=0.5, hspace=1)
+
+
+@pytest.mark.parametrize("legacy_colorbar", [False, True])
+def test_axesgrid_colorbar_log_smoketest(legacy_colorbar):
+    matplotlib.rcParams["mpl_toolkits.legacy_colorbar"] = legacy_colorbar
+
+    fig = plt.figure()
+    grid = AxesGrid(fig, 111,  # modified to be only subplot
+                    nrows_ncols=(1, 1),
+                    ngrids=1,
+                    label_mode="L",
+                    cbar_location="top",
+                    cbar_mode="single",
+                    )
+
+    Z = 10000 * np.random.rand(10, 10)
+    im = grid[0].imshow(Z, interpolation="nearest", norm=LogNorm())
+
+    if legacy_colorbar:
+        with pytest.warns(MatplotlibDeprecationWarning):
+            grid.cbar_axes[0].colorbar(im)
+    else:
+        grid.cbar_axes[0].colorbar(im)
+
+
+@image_comparison(['inset_locator.png'], style='default', remove_text=True)
+def test_inset_locator():
+    fig, ax = plt.subplots(figsize=[5, 4])
+
+    # prepare the demo image
+    # Z is a 15x15 array
+    Z = np.load(cbook.get_sample_data("axes_grid/bivariate_normal.npy"))
+    extent = (-3, 4, -4, 3)
+    Z2 = np.zeros([150, 150], dtype="d")
+    ny, nx = Z.shape
+    Z2[30:30 + ny, 30:30 + nx] = Z
+
+    # extent = [-3, 4, -4, 3]
+    ax.imshow(Z2, extent=extent, interpolation="nearest",
+              origin="lower")
+
+    axins = zoomed_inset_axes(ax, zoom=6, loc='upper right')
+    axins.imshow(Z2, extent=extent, interpolation="nearest",
+                 origin="lower")
+    axins.yaxis.get_major_locator().set_params(nbins=7)
+    axins.xaxis.get_major_locator().set_params(nbins=7)
+    # sub region of the original image
+    x1, x2, y1, y2 = -1.5, -0.9, -2.5, -1.9
+    axins.set_xlim(x1, x2)
+    axins.set_ylim(y1, y2)
+
+    plt.xticks(visible=False)
+    plt.yticks(visible=False)
+
+    # draw a bbox of the region of the inset axes in the parent axes and
+    # connecting lines between the bbox and the inset axes area
+    mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
+
+    asb = AnchoredSizeBar(ax.transData,
+                          0.5,
+                          '0.5',
+                          loc='lower center',
+                          pad=0.1, borderpad=0.5, sep=5,
+                          frameon=False)
+    ax.add_artist(asb)
+
+
+@image_comparison(['inset_axes.png'], style='default', remove_text=True)
+def test_inset_axes():
+    fig, ax = plt.subplots(figsize=[5, 4])
+
+    # prepare the demo image
+    # Z is a 15x15 array
+    Z = np.load(cbook.get_sample_data("axes_grid/bivariate_normal.npy"))
+    extent = (-3, 4, -4, 3)
+    Z2 = np.zeros([150, 150], dtype="d")
+    ny, nx = Z.shape
+    Z2[30:30 + ny, 30:30 + nx] = Z
+
+    # extent = [-3, 4, -4, 3]
+    ax.imshow(Z2, extent=extent, interpolation="nearest",
+              origin="lower")
+
+    # creating our inset axes with a bbox_transform parameter
+    axins = inset_axes(ax, width=1., height=1., bbox_to_anchor=(1, 1),
+                       bbox_transform=ax.transAxes)
+
+    axins.imshow(Z2, extent=extent, interpolation="nearest",
+                 origin="lower")
+    axins.yaxis.get_major_locator().set_params(nbins=7)
+    axins.xaxis.get_major_locator().set_params(nbins=7)
+    # sub region of the original image
+    x1, x2, y1, y2 = -1.5, -0.9, -2.5, -1.9
+    axins.set_xlim(x1, x2)
+    axins.set_ylim(y1, y2)
+
+    plt.xticks(visible=False)
+    plt.yticks(visible=False)
+
+    # draw a bbox of the region of the inset axes in the parent axes and
+    # connecting lines between the bbox and the inset axes area
+    mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
+
+    asb = AnchoredSizeBar(ax.transData,
+                          0.5,
+                          '0.5',
+                          loc='lower center',
+                          pad=0.1, borderpad=0.5, sep=5,
+                          frameon=False)
+    ax.add_artist(asb)
+
+
+def test_inset_axes_complete():
+    dpi = 100
+    figsize = (6, 5)
+    fig, ax = plt.subplots(figsize=figsize, dpi=dpi)
+    fig.subplots_adjust(.1, .1, .9, .9)
+
+    ins = inset_axes(ax, width=2., height=2., borderpad=0)
+    fig.canvas.draw()
+    assert_array_almost_equal(
+            ins.get_position().extents,
+            np.array(((0.9*figsize[0]-2.)/figsize[0],
+                      (0.9*figsize[1]-2.)/figsize[1], 0.9, 0.9)))
+
+    ins = inset_axes(ax, width="40%", height="30%", borderpad=0)
+    fig.canvas.draw()
+    assert_array_almost_equal(
+            ins.get_position().extents,
+            np.array((.9-.8*.4, .9-.8*.3, 0.9, 0.9)))
+
+    ins = inset_axes(ax, width=1., height=1.2, bbox_to_anchor=(200, 100),
+                     loc=3, borderpad=0)
+    fig.canvas.draw()
+    assert_array_almost_equal(
+            ins.get_position().extents,
+            np.array((200./dpi/figsize[0], 100./dpi/figsize[1],
+                     (200./dpi+1)/figsize[0], (100./dpi+1.2)/figsize[1])))
+
+    ins1 = inset_axes(ax, width="35%", height="60%", loc=3, borderpad=1)
+    ins2 = inset_axes(ax, width="100%", height="100%",
+                      bbox_to_anchor=(0, 0, .35, .60),
+                      bbox_transform=ax.transAxes, loc=3, borderpad=1)
+    fig.canvas.draw()
+    assert_array_equal(ins1.get_position().extents,
+                       ins2.get_position().extents)
+
+    with pytest.raises(ValueError):
+        ins = inset_axes(ax, width="40%", height="30%",
+                         bbox_to_anchor=(0.4, 0.5))
+
+    with pytest.warns(UserWarning):
+        ins = inset_axes(ax, width="40%", height="30%",
+                         bbox_transform=ax.transAxes)
+
+
+@image_comparison(['fill_facecolor.png'], remove_text=True, style='mpl20')
+def test_fill_facecolor():
+    fig, ax = plt.subplots(1, 5)
+    fig.set_size_inches(5, 5)
+    for i in range(1, 4):
+        ax[i].yaxis.set_visible(False)
+    ax[4].yaxis.tick_right()
+    bbox = Bbox.from_extents(0, 0.4, 1, 0.6)
+
+    # fill with blue by setting 'fc' field
+    bbox1 = TransformedBbox(bbox, ax[0].transData)
+    bbox2 = TransformedBbox(bbox, ax[1].transData)
+    # set color to BboxConnectorPatch
+    p = BboxConnectorPatch(
+        bbox1, bbox2, loc1a=1, loc2a=2, loc1b=4, loc2b=3,
+        ec="r", fc="b")
+    p.set_clip_on(False)
+    ax[0].add_patch(p)
+    # set color to marked area
+    axins = zoomed_inset_axes(ax[0], 1, loc='upper right')
+    axins.set_xlim(0, 0.2)
+    axins.set_ylim(0, 0.2)
+    plt.gca().axes.get_xaxis().set_ticks([])
+    plt.gca().axes.get_yaxis().set_ticks([])
+    mark_inset(ax[0], axins, loc1=2, loc2=4, fc="b", ec="0.5")
+
+    # fill with yellow by setting 'facecolor' field
+    bbox3 = TransformedBbox(bbox, ax[1].transData)
+    bbox4 = TransformedBbox(bbox, ax[2].transData)
+    # set color to BboxConnectorPatch
+    p = BboxConnectorPatch(
+        bbox3, bbox4, loc1a=1, loc2a=2, loc1b=4, loc2b=3,
+        ec="r", facecolor="y")
+    p.set_clip_on(False)
+    ax[1].add_patch(p)
+    # set color to marked area
+    axins = zoomed_inset_axes(ax[1], 1, loc='upper right')
+    axins.set_xlim(0, 0.2)
+    axins.set_ylim(0, 0.2)
+    plt.gca().axes.get_xaxis().set_ticks([])
+    plt.gca().axes.get_yaxis().set_ticks([])
+    mark_inset(ax[1], axins, loc1=2, loc2=4, facecolor="y", ec="0.5")
+
+    # fill with green by setting 'color' field
+    bbox5 = TransformedBbox(bbox, ax[2].transData)
+    bbox6 = TransformedBbox(bbox, ax[3].transData)
+    # set color to BboxConnectorPatch
+    p = BboxConnectorPatch(
+        bbox5, bbox6, loc1a=1, loc2a=2, loc1b=4, loc2b=3,
+        ec="r", color="g")
+    p.set_clip_on(False)
+    ax[2].add_patch(p)
+    # set color to marked area
+    axins = zoomed_inset_axes(ax[2], 1, loc='upper right')
+    axins.set_xlim(0, 0.2)
+    axins.set_ylim(0, 0.2)
+    plt.gca().axes.get_xaxis().set_ticks([])
+    plt.gca().axes.get_yaxis().set_ticks([])
+    mark_inset(ax[2], axins, loc1=2, loc2=4, color="g", ec="0.5")
+
+    # fill with green but color won't show if set fill to False
+    bbox7 = TransformedBbox(bbox, ax[3].transData)
+    bbox8 = TransformedBbox(bbox, ax[4].transData)
+    # BboxConnectorPatch won't show green
+    p = BboxConnectorPatch(
+        bbox7, bbox8, loc1a=1, loc2a=2, loc1b=4, loc2b=3,
+        ec="r", fc="g", fill=False)
+    p.set_clip_on(False)
+    ax[3].add_patch(p)
+    # marked area won't show green
+    axins = zoomed_inset_axes(ax[3], 1, loc='upper right')
+    axins.set_xlim(0, 0.2)
+    axins.set_ylim(0, 0.2)
+    axins.get_xaxis().set_ticks([])
+    axins.get_yaxis().set_ticks([])
+    mark_inset(ax[3], axins, loc1=2, loc2=4, fc="g", ec="0.5", fill=False)
+
+
+@image_comparison(['zoomed_axes.png', 'inverted_zoomed_axes.png'])
+def test_zooming_with_inverted_axes():
+    fig, ax = plt.subplots()
+    ax.plot([1, 2, 3], [1, 2, 3])
+    ax.axis([1, 3, 1, 3])
+    inset_ax = zoomed_inset_axes(ax, zoom=2.5, loc='lower right')
+    inset_ax.axis([1.1, 1.4, 1.1, 1.4])
+
+    fig, ax = plt.subplots()
+    ax.plot([1, 2, 3], [1, 2, 3])
+    ax.axis([3, 1, 3, 1])
+    inset_ax = zoomed_inset_axes(ax, zoom=2.5, loc='lower right')
+    inset_ax.axis([1.4, 1.1, 1.4, 1.1])
+
+
+@image_comparison(['anchored_direction_arrows.png'],
+                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+def test_anchored_direction_arrows():
+    fig, ax = plt.subplots()
+    ax.imshow(np.zeros((10, 10)), interpolation='nearest')
+
+    simple_arrow = AnchoredDirectionArrows(ax.transAxes, 'X', 'Y')
+    ax.add_artist(simple_arrow)
+
+
+@image_comparison(['anchored_direction_arrows_many_args.png'])
+def test_anchored_direction_arrows_many_args():
+    fig, ax = plt.subplots()
+    ax.imshow(np.ones((10, 10)))
+
+    direction_arrows = AnchoredDirectionArrows(
+            ax.transAxes, 'A', 'B', loc='upper right', color='red',
+            aspect_ratio=-0.5, pad=0.6, borderpad=2, frameon=True, alpha=0.7,
+            sep_x=-0.06, sep_y=-0.08, back_length=0.1, head_width=9,
+            head_length=10, tail_width=5)
+    ax.add_artist(direction_arrows)
+
+
+def test_axes_locatable_position():
+    fig, ax = plt.subplots()
+    divider = make_axes_locatable(ax)
+    cax = divider.append_axes('right', size='5%', pad='2%')
+    fig.canvas.draw()
+    assert np.isclose(cax.get_position(original=False).width,
+                      0.03621495327102808)
+
+
+@image_comparison(['image_grid.png'],
+                  remove_text=True, style='mpl20',
+                  savefig_kwarg={'bbox_inches': 'tight'})
+def test_image_grid():
+    # test that image grid works with bbox_inches=tight.
+    im = np.arange(100).reshape((10, 10))
+
+    fig = plt.figure(1, (4, 4))
+    grid = ImageGrid(fig, 111, nrows_ncols=(2, 2), axes_pad=0.1)
+
+    for i in range(4):
+        grid[i].imshow(im, interpolation='nearest')
+        grid[i].set_title('test {0}{0}'.format(i))
+
+
+def test_gettightbbox():
+    fig, ax = plt.subplots(figsize=(8, 6))
+
+    l, = ax.plot([1, 2, 3], [0, 1, 0])
+
+    ax_zoom = zoomed_inset_axes(ax, 4)
+    ax_zoom.plot([1, 2, 3], [0, 1, 0])
+
+    mark_inset(ax, ax_zoom, loc1=1, loc2=3, fc="none", ec='0.3')
+
+    remove_ticks_and_titles(fig)
+    bbox = fig.get_tightbbox(fig.canvas.get_renderer())
+    np.testing.assert_array_almost_equal(bbox.extents,
+                                         [-17.7, -13.9, 7.2, 5.4])
+
+
+@pytest.mark.parametrize("click_on", ["big", "small"])
+@pytest.mark.parametrize("big_on_axes,small_on_axes", [
+    ("gca", "gca"),
+    ("host", "host"),
+    ("host", "parasite"),
+    ("parasite", "host"),
+    ("parasite", "parasite")
+])
+def test_picking_callbacks_overlap(big_on_axes, small_on_axes, click_on):
+    """Test pick events on normal, host or parasite axes."""
+    # Two rectangles are drawn and "clicked on", a small one and a big one
+    # enclosing the small one. The axis on which they are drawn as well as the
+    # rectangle that is clicked on are varied.
+    # In each case we expect that both rectangles are picked if we click on the
+    # small one and only the big one is picked if we click on the big one.
+    # Also tests picking on normal axes ("gca") as a control.
+    big = plt.Rectangle((0.25, 0.25), 0.5, 0.5, picker=5)
+    small = plt.Rectangle((0.4, 0.4), 0.2, 0.2, facecolor="r", picker=5)
+    # Machinery for "receiving" events
+    received_events = []
+    def on_pick(event):
+        received_events.append(event)
+    plt.gcf().canvas.mpl_connect('pick_event', on_pick)
+    # Shortcut
+    rectangles_on_axes = (big_on_axes, small_on_axes)
+    # Axes setup
+    axes = {"gca": None, "host": None, "parasite": None}
+    if "gca" in rectangles_on_axes:
+        axes["gca"] = plt.gca()
+    if "host" in rectangles_on_axes or "parasite" in rectangles_on_axes:
+        axes["host"] = host_subplot(111)
+        axes["parasite"] = axes["host"].twin()
+    # Add rectangles to axes
+    axes[big_on_axes].add_patch(big)
+    axes[small_on_axes].add_patch(small)
+    # Simulate picking with click mouse event
+    if click_on == "big":
+        click_axes = axes[big_on_axes]
+        axes_coords = (0.3, 0.3)
+    else:
+        click_axes = axes[small_on_axes]
+        axes_coords = (0.5, 0.5)
+    # In reality mouse events never happen on parasite axes, only host axes
+    if click_axes is axes["parasite"]:
+        click_axes = axes["host"]
+    (x, y) = click_axes.transAxes.transform(axes_coords)
+    m = MouseEvent("button_press_event", click_axes.figure.canvas, x, y,
+                   button=1)
+    click_axes.pick(m)
+    # Checks
+    expected_n_events = 2 if click_on == "small" else 1
+    assert len(received_events) == expected_n_events
+    event_rects = [event.artist for event in received_events]
+    assert big in event_rects
+    if click_on == "small":
+        assert small in event_rects
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axes_grid.py	(date 1589417755518)
@@ -0,0 +1,69 @@
+from contextlib import ExitStack
+
+import numpy as np
+import pytest
+
+import matplotlib as mpl
+from matplotlib.testing.decorators import image_comparison
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1 import ImageGrid
+
+
+# The original version of this test relied on mpl_toolkits's slightly different
+# colorbar implementation; moving to matplotlib's own colorbar implementation
+# caused the small image comparison error.
+@image_comparison(['imagegrid_cbar_mode.png', 'imagegrid_cbar_mode.png'],
+                  remove_text=True, style='mpl20', tol=0.3)
+def test_imagegrid_cbar_mode_edge():
+    # Note, we don't use @pytest.mark.parametrize, because in parallel this
+    # might cause one process result to overwrite another's.
+    for legacy_colorbar in [False, True]:
+        _test_imagegrid_cbar_mode_edge(legacy_colorbar)
+
+
+def _test_imagegrid_cbar_mode_edge(legacy_colorbar):
+    mpl.rcParams["mpl_toolkits.legacy_colorbar"] = legacy_colorbar
+
+    X, Y = np.meshgrid(np.linspace(0, 6, 30), np.linspace(0, 6, 30))
+    arr = np.sin(X) * np.cos(Y) + 1j*(np.sin(3*Y) * np.cos(Y/2.))
+
+    fig = plt.figure(figsize=(18, 9))
+
+    positions = (241, 242, 243, 244, 245, 246, 247, 248)
+    directions = ['row']*4 + ['column']*4
+    cbar_locations = ['left', 'right', 'top', 'bottom']*2
+
+    for position, direction, location in zip(
+            positions, directions, cbar_locations):
+        grid = ImageGrid(fig, position,
+                         nrows_ncols=(2, 2),
+                         direction=direction,
+                         cbar_location=location,
+                         cbar_size='20%',
+                         cbar_mode='edge')
+        ax1, ax2, ax3, ax4, = grid
+
+        ax1.imshow(arr.real, cmap='nipy_spectral')
+        ax2.imshow(arr.imag, cmap='hot')
+        ax3.imshow(np.abs(arr), cmap='jet')
+        ax4.imshow(np.arctan2(arr.imag, arr.real), cmap='hsv')
+
+        with (pytest.warns(mpl.MatplotlibDeprecationWarning) if legacy_colorbar
+              else ExitStack()):
+            # In each row/column, the "first" colorbars must be overwritten by
+            # the "second" ones.  To achieve this, clear out the axes first.
+            for ax in grid:
+                ax.cax.cla()
+                cb = ax.cax.colorbar(
+                    ax.images[0],
+                    ticks=mpl.ticker.MaxNLocator(5))  # old default locator.
+
+
+def test_imagegrid():
+    mpl.rcParams["mpl_toolkits.legacy_colorbar"] = False
+    fig = plt.figure()
+    grid = ImageGrid(fig, 111, nrows_ncols=(1, 1))
+    ax = grid[0]
+    im = ax.imshow([[1, 2]], norm=mpl.colors.LogNorm())
+    cb = ax.cax.colorbar(im)
+    assert isinstance(cb.locator, mpl.colorbar._ColorbarLogLocator)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_finder.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_finder.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_grid_finder.py	(date 1589417755518)
@@ -0,0 +1,13 @@
+from mpl_toolkits.axisartist.grid_finder import (
+    FormatterPrettyPrint,
+    MaxNLocator)
+
+
+def test_pretty_print_format():
+    locator = MaxNLocator()
+    locs, nloc, factor = locator(0, 100)
+
+    fmt = FormatterPrettyPrint()
+
+    assert fmt("left", None, locs) == \
+        [r'$\mathdefault{%d}$' % (l, ) for l in locs]
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axis_artist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axis_artist.py	(date 1589417755518)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/test_axisartist_axis_artist.py	(date 1589417755518)
@@ -0,0 +1,99 @@
+import matplotlib.pyplot as plt
+from matplotlib.testing.decorators import image_comparison
+
+from mpl_toolkits.axisartist import AxisArtistHelperRectlinear
+from mpl_toolkits.axisartist.axis_artist import (AxisArtist, AxisLabel,
+                                                 LabelBase, Ticks, TickLabels)
+
+
+@image_comparison(['axis_artist_ticks.png'], style='default')
+def test_ticks():
+    fig, ax = plt.subplots()
+
+    ax.xaxis.set_visible(False)
+    ax.yaxis.set_visible(False)
+
+    locs_angles = [((i / 10, 0.0), i * 30) for i in range(-1, 12)]
+
+    ticks_in = Ticks(ticksize=10, axis=ax.xaxis)
+    ticks_in.set_locs_angles(locs_angles)
+    ax.add_artist(ticks_in)
+
+    ticks_out = Ticks(ticksize=10, tick_out=True, color='C3', axis=ax.xaxis)
+    ticks_out.set_locs_angles(locs_angles)
+    ax.add_artist(ticks_out)
+
+
+@image_comparison(['axis_artist_labelbase.png'], style='default')
+def test_labelbase():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig, ax = plt.subplots()
+
+    ax.plot([0.5], [0.5], "o")
+
+    label = LabelBase(0.5, 0.5, "Test")
+    label._set_ref_angle(-90)
+    label._set_offset_radius(offset_radius=50)
+    label.set_rotation(-90)
+    label.set(ha="center", va="top")
+    ax.add_artist(label)
+
+
+@image_comparison(['axis_artist_ticklabels.png'], style='default')
+def test_ticklabels():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig, ax = plt.subplots()
+
+    ax.xaxis.set_visible(False)
+    ax.yaxis.set_visible(False)
+
+    ax.plot([0.2, 0.4], [0.5, 0.5], "o")
+
+    ticks = Ticks(ticksize=10, axis=ax.xaxis)
+    ax.add_artist(ticks)
+    locs_angles_labels = [((0.2, 0.5), -90, "0.2"),
+                          ((0.4, 0.5), -120, "0.4")]
+    tick_locs_angles = [(xy, a + 180) for xy, a, l in locs_angles_labels]
+    ticks.set_locs_angles(tick_locs_angles)
+
+    ticklabels = TickLabels(axis_direction="left")
+    ticklabels._locs_angles_labels = locs_angles_labels
+    ticklabels.set_pad(10)
+    ax.add_artist(ticklabels)
+
+    ax.plot([0.5], [0.5], "s")
+    axislabel = AxisLabel(0.5, 0.5, "Test")
+    axislabel._set_offset_radius(20)
+    axislabel._set_ref_angle(0)
+    axislabel.set_axis_direction("bottom")
+    ax.add_artist(axislabel)
+
+    ax.set_xlim(0, 1)
+    ax.set_ylim(0, 1)
+
+
+@image_comparison(['axis_artist.png'], style='default')
+def test_axis_artist():
+    # Remove this line when this test image is regenerated.
+    plt.rcParams['text.kerning_factor'] = 6
+
+    fig, ax = plt.subplots()
+
+    ax.xaxis.set_visible(False)
+    ax.yaxis.set_visible(False)
+
+    for loc in ('left', 'right', 'bottom'):
+        _helper = AxisArtistHelperRectlinear.Fixed(ax, loc=loc)
+        axisline = AxisArtist(ax, _helper, offset=None, axis_direction=loc)
+        ax.add_artist(axisline)
+
+    # Settings for bottom AxisArtist.
+    axisline.set_label("TTT")
+    axisline.major_ticks.set_tick_out(False)
+    axisline.label.set_pad(5)
+
+    ax.set_ylabel("Test")
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1-py3.8-nspkg.pth
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1-py3.8-nspkg.pth	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1-py3.8-nspkg.pth	(date 1589417755512)
@@ -0,0 +1,1 @@
+import sys, types, os;has_mfs = sys.version_info > (3, 5);p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('mpl_toolkits',));importlib = has_mfs and __import__('importlib.util');has_mfs and __import__('importlib.machinery');m = has_mfs and sys.modules.setdefault('mpl_toolkits', importlib.util.module_from_spec(importlib.machinery.PathFinder.find_spec('mpl_toolkits', [os.path.dirname(p)])));m = m or sys.modules.setdefault('mpl_toolkits', types.ModuleType('mpl_toolkits'));mp = (m or []) and m.__dict__.setdefault('__path__',[]);(p not in mp) and mp.append(p)
Index: venv/lib/python3.8/site-packages/cycler.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler.py	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler.py	(date 1589417757018)
@@ -0,0 +1,558 @@
+"""
+Cycler
+======
+
+Cycling through combinations of values, producing dictionaries.
+
+You can add cyclers::
+
+    from cycler import cycler
+    cc = (cycler(color=list('rgb')) +
+          cycler(linestyle=['-', '--', '-.']))
+    for d in cc:
+        print(d)
+
+Results in::
+
+    {'color': 'r', 'linestyle': '-'}
+    {'color': 'g', 'linestyle': '--'}
+    {'color': 'b', 'linestyle': '-.'}
+
+
+You can multiply cyclers::
+
+    from cycler import cycler
+    cc = (cycler(color=list('rgb')) *
+          cycler(linestyle=['-', '--', '-.']))
+    for d in cc:
+        print(d)
+
+Results in::
+
+    {'color': 'r', 'linestyle': '-'}
+    {'color': 'r', 'linestyle': '--'}
+    {'color': 'r', 'linestyle': '-.'}
+    {'color': 'g', 'linestyle': '-'}
+    {'color': 'g', 'linestyle': '--'}
+    {'color': 'g', 'linestyle': '-.'}
+    {'color': 'b', 'linestyle': '-'}
+    {'color': 'b', 'linestyle': '--'}
+    {'color': 'b', 'linestyle': '-.'}
+"""
+
+from __future__ import (absolute_import, division, print_function,
+                        unicode_literals)
+
+import six
+from itertools import product, cycle
+from six.moves import zip, reduce
+from operator import mul, add
+import copy
+
+__version__ = '0.10.0'
+
+
+def _process_keys(left, right):
+    """
+    Helper function to compose cycler keys
+
+    Parameters
+    ----------
+    left, right : iterable of dictionaries or None
+        The cyclers to be composed
+    Returns
+    -------
+    keys : set
+        The keys in the composition of the two cyclers
+    """
+    l_peek = next(iter(left)) if left is not None else {}
+    r_peek = next(iter(right)) if right is not None else {}
+    l_key = set(l_peek.keys())
+    r_key = set(r_peek.keys())
+    if l_key & r_key:
+        raise ValueError("Can not compose overlapping cycles")
+    return l_key | r_key
+
+
+class Cycler(object):
+    """
+    Composable cycles
+
+    This class has compositions methods:
+
+    ``+``
+      for 'inner' products (zip)
+
+    ``+=``
+      in-place ``+``
+
+    ``*``
+      for outer products (itertools.product) and integer multiplication
+
+    ``*=``
+      in-place ``*``
+
+    and supports basic slicing via ``[]``
+
+    Parameters
+    ----------
+    left : Cycler or None
+        The 'left' cycler
+
+    right : Cycler or None
+        The 'right' cycler
+
+    op : func or None
+        Function which composes the 'left' and 'right' cyclers.
+
+    """
+    def __call__(self):
+        return cycle(self)
+
+    def __init__(self, left, right=None, op=None):
+        """Semi-private init
+
+        Do not use this directly, use `cycler` function instead.
+        """
+        if isinstance(left, Cycler):
+            self._left = Cycler(left._left, left._right, left._op)
+        elif left is not None:
+            # Need to copy the dictionary or else that will be a residual
+            # mutable that could lead to strange errors
+            self._left = [copy.copy(v) for v in left]
+        else:
+            self._left = None
+
+        if isinstance(right, Cycler):
+            self._right = Cycler(right._left, right._right, right._op)
+        elif right is not None:
+            # Need to copy the dictionary or else that will be a residual
+            # mutable that could lead to strange errors
+            self._right = [copy.copy(v) for v in right]
+        else:
+            self._right = None
+
+        self._keys = _process_keys(self._left, self._right)
+        self._op = op
+
+    @property
+    def keys(self):
+        """
+        The keys this Cycler knows about
+        """
+        return set(self._keys)
+
+    def change_key(self, old, new):
+        """
+        Change a key in this cycler to a new name.
+        Modification is performed in-place.
+
+        Does nothing if the old key is the same as the new key.
+        Raises a ValueError if the new key is already a key.
+        Raises a KeyError if the old key isn't a key.
+
+        """
+        if old == new:
+            return
+        if new in self._keys:
+            raise ValueError("Can't replace %s with %s, %s is already a key" %
+                             (old, new, new))
+        if old not in self._keys:
+            raise KeyError("Can't replace %s with %s, %s is not a key" %
+                           (old, new, old))
+
+        self._keys.remove(old)
+        self._keys.add(new)
+
+        if self._right is not None and old in self._right.keys:
+            self._right.change_key(old, new)
+
+        # self._left should always be non-None
+        # if self._keys is non-empty.
+        elif isinstance(self._left, Cycler):
+            self._left.change_key(old, new)
+        else:
+            # It should be completely safe at this point to
+            # assume that the old key can be found in each
+            # iteration.
+            self._left = [{new: entry[old]} for entry in self._left]
+
+    def _compose(self):
+        """
+        Compose the 'left' and 'right' components of this cycle
+        with the proper operation (zip or product as of now)
+        """
+        for a, b in self._op(self._left, self._right):
+            out = dict()
+            out.update(a)
+            out.update(b)
+            yield out
+
+    @classmethod
+    def _from_iter(cls, label, itr):
+        """
+        Class method to create 'base' Cycler objects
+        that do not have a 'right' or 'op' and for which
+        the 'left' object is not another Cycler.
+
+        Parameters
+        ----------
+        label : str
+            The property key.
+
+        itr : iterable
+            Finite length iterable of the property values.
+
+        Returns
+        -------
+        cycler : Cycler
+            New 'base' `Cycler`
+        """
+        ret = cls(None)
+        ret._left = list({label: v} for v in itr)
+        ret._keys = set([label])
+        return ret
+
+    def __getitem__(self, key):
+        # TODO : maybe add numpy style fancy slicing
+        if isinstance(key, slice):
+            trans = self.by_key()
+            return reduce(add, (_cycler(k, v[key])
+                                for k, v in six.iteritems(trans)))
+        else:
+            raise ValueError("Can only use slices with Cycler.__getitem__")
+
+    def __iter__(self):
+        if self._right is None:
+            return iter(dict(l) for l in self._left)
+
+        return self._compose()
+
+    def __add__(self, other):
+        """
+        Pair-wise combine two equal length cycles (zip)
+
+        Parameters
+        ----------
+        other : Cycler
+           The second Cycler
+        """
+        if len(self) != len(other):
+            raise ValueError("Can only add equal length cycles, "
+                             "not {0} and {1}".format(len(self), len(other)))
+        return Cycler(self, other, zip)
+
+    def __mul__(self, other):
+        """
+        Outer product of two cycles (`itertools.product`) or integer
+        multiplication.
+
+        Parameters
+        ----------
+        other : Cycler or int
+           The second Cycler or integer
+        """
+        if isinstance(other, Cycler):
+            return Cycler(self, other, product)
+        elif isinstance(other, int):
+            trans = self.by_key()
+            return reduce(add, (_cycler(k, v*other)
+                                for k, v in six.iteritems(trans)))
+        else:
+            return NotImplemented
+
+    def __rmul__(self, other):
+        return self * other
+
+    def __len__(self):
+        op_dict = {zip: min, product: mul}
+        if self._right is None:
+            return len(self._left)
+        l_len = len(self._left)
+        r_len = len(self._right)
+        return op_dict[self._op](l_len, r_len)
+
+    def __iadd__(self, other):
+        """
+        In-place pair-wise combine two equal length cycles (zip)
+
+        Parameters
+        ----------
+        other : Cycler
+           The second Cycler
+        """
+        if not isinstance(other, Cycler):
+            raise TypeError("Cannot += with a non-Cycler object")
+        # True shallow copy of self is fine since this is in-place
+        old_self = copy.copy(self)
+        self._keys = _process_keys(old_self, other)
+        self._left = old_self
+        self._op = zip
+        self._right = Cycler(other._left, other._right, other._op)
+        return self
+
+    def __imul__(self, other):
+        """
+        In-place outer product of two cycles (`itertools.product`)
+
+        Parameters
+        ----------
+        other : Cycler
+           The second Cycler
+        """
+        if not isinstance(other, Cycler):
+            raise TypeError("Cannot *= with a non-Cycler object")
+        # True shallow copy of self is fine since this is in-place
+        old_self = copy.copy(self)
+        self._keys = _process_keys(old_self, other)
+        self._left = old_self
+        self._op = product
+        self._right = Cycler(other._left, other._right, other._op)
+        return self
+
+    def __eq__(self, other):
+        """
+        Check equality
+        """
+        if len(self) != len(other):
+            return False
+        if self.keys ^ other.keys:
+            return False
+
+        return all(a == b for a, b in zip(self, other))
+
+    def __repr__(self):
+        op_map = {zip: '+', product: '*'}
+        if self._right is None:
+            lab = self.keys.pop()
+            itr = list(v[lab] for v in self)
+            return "cycler({lab!r}, {itr!r})".format(lab=lab, itr=itr)
+        else:
+            op = op_map.get(self._op, '?')
+            msg = "({left!r} {op} {right!r})"
+            return msg.format(left=self._left, op=op, right=self._right)
+
+    def _repr_html_(self):
+        # an table showing the value of each key through a full cycle
+        output = "<table>"
+        sorted_keys = sorted(self.keys, key=repr)
+        for key in sorted_keys:
+            output += "<th>{key!r}</th>".format(key=key)
+        for d in iter(self):
+            output += "<tr>"
+            for k in sorted_keys:
+                output += "<td>{val!r}</td>".format(val=d[k])
+            output += "</tr>"
+        output += "</table>"
+        return output
+
+    def by_key(self):
+        """Values by key
+
+        This returns the transposed values of the cycler.  Iterating
+        over a `Cycler` yields dicts with a single value for each key,
+        this method returns a `dict` of `list` which are the values
+        for the given key.
+
+        The returned value can be used to create an equivalent `Cycler`
+        using only `+`.
+
+        Returns
+        -------
+        transpose : dict
+            dict of lists of the values for each key.
+        """
+
+        # TODO : sort out if this is a bottle neck, if there is a better way
+        # and if we care.
+
+        keys = self.keys
+        # change this to dict comprehension when drop 2.6
+        out = dict((k,  list()) for k in keys)
+
+        for d in self:
+            for k in keys:
+                out[k].append(d[k])
+        return out
+
+    # for back compatibility
+    _transpose = by_key
+
+    def simplify(self):
+        """Simplify the Cycler
+
+        Returned as a composition using only sums (no multiplications)
+
+        Returns
+        -------
+        simple : Cycler
+            An equivalent cycler using only summation"""
+        # TODO: sort out if it is worth the effort to make sure this is
+        # balanced.  Currently it is is
+        # (((a + b) + c) + d) vs
+        # ((a + b) + (c + d))
+        # I would believe that there is some performance implications
+
+        trans = self.by_key()
+        return reduce(add, (_cycler(k, v) for k, v in six.iteritems(trans)))
+
+    def concat(self, other):
+        """Concatenate this cycler and an other.
+
+        The keys must match exactly.
+
+        This returns a single Cycler which is equivalent to
+        `itertools.chain(self, other)`
+
+        Examples
+        --------
+
+        >>> num = cycler('a', range(3))
+        >>> let = cycler('a', 'abc')
+        >>> num.concat(let)
+        cycler('a', [0, 1, 2, 'a', 'b', 'c'])
+
+        Parameters
+        ----------
+        other : `Cycler`
+            The `Cycler` to concatenate to this one.
+
+        Returns
+        -------
+        ret : `Cycler`
+            The concatenated `Cycler`
+        """
+        return concat(self, other)
+
+
+def concat(left, right):
+    """Concatenate two cyclers.
+
+    The keys must match exactly.
+
+    This returns a single Cycler which is equivalent to
+    `itertools.chain(left, right)`
+
+    Examples
+    --------
+
+    >>> num = cycler('a', range(3))
+    >>> let = cycler('a', 'abc')
+    >>> num.concat(let)
+    cycler('a', [0, 1, 2, 'a', 'b', 'c'])
+
+    Parameters
+    ----------
+    left, right : `Cycler`
+        The two `Cycler` instances to concatenate
+
+    Returns
+    -------
+    ret : `Cycler`
+        The concatenated `Cycler`
+    """
+    if left.keys != right.keys:
+        msg = '\n\t'.join(["Keys do not match:",
+                           "Intersection: {both!r}",
+                           "Disjoint: {just_one!r}"]).format(
+                               both=left.keys & right.keys,
+                               just_one=left.keys ^ right.keys)
+
+        raise ValueError(msg)
+
+    _l = left.by_key()
+    _r = right.by_key()
+    return reduce(add, (_cycler(k, _l[k] + _r[k]) for k in left.keys))
+
+
+def cycler(*args, **kwargs):
+    """
+    Create a new `Cycler` object from a single positional argument,
+    a pair of positional arguments, or the combination of keyword arguments.
+
+    cycler(arg)
+    cycler(label1=itr1[, label2=iter2[, ...]])
+    cycler(label, itr)
+
+    Form 1 simply copies a given `Cycler` object.
+
+    Form 2 composes a `Cycler` as an inner product of the
+    pairs of keyword arguments. In other words, all of the
+    iterables are cycled simultaneously, as if through zip().
+
+    Form 3 creates a `Cycler` from a label and an iterable.
+    This is useful for when the label cannot be a keyword argument
+    (e.g., an integer or a name that has a space in it).
+
+    Parameters
+    ----------
+    arg : Cycler
+        Copy constructor for Cycler (does a shallow copy of iterables).
+
+    label : name
+        The property key. In the 2-arg form of the function,
+        the label can be any hashable object. In the keyword argument
+        form of the function, it must be a valid python identifier.
+
+    itr : iterable
+        Finite length iterable of the property values.
+        Can be a single-property `Cycler` that would
+        be like a key change, but as a shallow copy.
+
+    Returns
+    -------
+    cycler : Cycler
+        New `Cycler` for the given property
+
+    """
+    if args and kwargs:
+        raise TypeError("cyl() can only accept positional OR keyword "
+                        "arguments -- not both.")
+
+    if len(args) == 1:
+        if not isinstance(args[0], Cycler):
+            raise TypeError("If only one positional argument given, it must "
+                            " be a Cycler instance.")
+        return Cycler(args[0])
+    elif len(args) == 2:
+        return _cycler(*args)
+    elif len(args) > 2:
+        raise TypeError("Only a single Cycler can be accepted as the lone "
+                        "positional argument. Use keyword arguments instead.")
+
+    if kwargs:
+        return reduce(add, (_cycler(k, v) for k, v in six.iteritems(kwargs)))
+
+    raise TypeError("Must have at least a positional OR keyword arguments")
+
+
+def _cycler(label, itr):
+    """
+    Create a new `Cycler` object from a property name and
+    iterable of values.
+
+    Parameters
+    ----------
+    label : hashable
+        The property key.
+
+    itr : iterable
+        Finite length iterable of the property values.
+
+    Returns
+    -------
+    cycler : Cycler
+        New `Cycler` for the given property
+    """
+    if isinstance(itr, Cycler):
+        keys = itr.keys
+        if len(keys) != 1:
+            msg = "Can not create Cycler from a multi-property Cycler"
+            raise ValueError(msg)
+
+        lab = keys.pop()
+        # Doesn't need to be a new list because
+        # _from_iter() will be creating that new list anyway.
+        itr = (v[lab] for v in itr)
+
+    return Cycler._from_iter(label, itr)
Index: venv/lib/python3.8/site-packages/pyparsing.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing.py	(date 1589417755835)
+++ venv/lib/python3.8/site-packages/pyparsing.py	(date 1589417755835)
@@ -0,0 +1,7107 @@
+# -*- coding: utf-8 -*-
+# module pyparsing.py
+#
+# Copyright (c) 2003-2019  Paul T. McGuire
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__doc__ = \
+"""
+pyparsing module - Classes and methods to define and execute parsing grammars
+=============================================================================
+
+The pyparsing module is an alternative approach to creating and
+executing simple grammars, vs. the traditional lex/yacc approach, or the
+use of regular expressions.  With pyparsing, you don't need to learn
+a new syntax for defining grammars or matching expressions - the parsing
+module provides a library of classes that you use to construct the
+grammar directly in Python.
+
+Here is a program to parse "Hello, World!" (or any greeting of the form
+``"<salutation>, <addressee>!"``), built up using :class:`Word`,
+:class:`Literal`, and :class:`And` elements
+(the :class:`'+'<ParserElement.__add__>` operators create :class:`And` expressions,
+and the strings are auto-converted to :class:`Literal` expressions)::
+
+    from pyparsing import Word, alphas
+
+    # define grammar of a greeting
+    greet = Word(alphas) + "," + Word(alphas) + "!"
+
+    hello = "Hello, World!"
+    print (hello, "->", greet.parseString(hello))
+
+The program outputs the following::
+
+    Hello, World! -> ['Hello', ',', 'World', '!']
+
+The Python representation of the grammar is quite readable, owing to the
+self-explanatory class names, and the use of '+', '|' and '^' operators.
+
+The :class:`ParseResults` object returned from
+:class:`ParserElement.parseString` can be
+accessed as a nested list, a dictionary, or an object with named
+attributes.
+
+The pyparsing module handles some of the problems that are typically
+vexing when writing text parsers:
+
+  - extra or missing whitespace (the above program will also handle
+    "Hello,World!", "Hello  ,  World  !", etc.)
+  - quoted strings
+  - embedded comments
+
+
+Getting Started -
+-----------------
+Visit the classes :class:`ParserElement` and :class:`ParseResults` to
+see the base classes that most other pyparsing
+classes inherit from. Use the docstrings for examples of how to:
+
+ - construct literal match expressions from :class:`Literal` and
+   :class:`CaselessLiteral` classes
+ - construct character word-group expressions using the :class:`Word`
+   class
+ - see how to create repetitive expressions using :class:`ZeroOrMore`
+   and :class:`OneOrMore` classes
+ - use :class:`'+'<And>`, :class:`'|'<MatchFirst>`, :class:`'^'<Or>`,
+   and :class:`'&'<Each>` operators to combine simple expressions into
+   more complex ones
+ - associate names with your parsed results using
+   :class:`ParserElement.setResultsName`
+ - access the parsed data, which is returned as a :class:`ParseResults`
+   object
+ - find some helpful expression short-cuts like :class:`delimitedList`
+   and :class:`oneOf`
+ - find more useful common expressions in the :class:`pyparsing_common`
+   namespace class
+"""
+
+__version__ = "2.4.7"
+__versionTime__ = "30 Mar 2020 00:43 UTC"
+__author__ = "Paul McGuire <ptmcg@users.sourceforge.net>"
+
+import string
+from weakref import ref as wkref
+import copy
+import sys
+import warnings
+import re
+import sre_constants
+import collections
+import pprint
+import traceback
+import types
+from datetime import datetime
+from operator import itemgetter
+import itertools
+from functools import wraps
+from contextlib import contextmanager
+
+try:
+    # Python 3
+    from itertools import filterfalse
+except ImportError:
+    from itertools import ifilterfalse as filterfalse
+
+try:
+    from _thread import RLock
+except ImportError:
+    from threading import RLock
+
+try:
+    # Python 3
+    from collections.abc import Iterable
+    from collections.abc import MutableMapping, Mapping
+except ImportError:
+    # Python 2.7
+    from collections import Iterable
+    from collections import MutableMapping, Mapping
+
+try:
+    from collections import OrderedDict as _OrderedDict
+except ImportError:
+    try:
+        from ordereddict import OrderedDict as _OrderedDict
+    except ImportError:
+        _OrderedDict = None
+
+try:
+    from types import SimpleNamespace
+except ImportError:
+    class SimpleNamespace: pass
+
+# version compatibility configuration
+__compat__ = SimpleNamespace()
+__compat__.__doc__ = """
+    A cross-version compatibility configuration for pyparsing features that will be
+    released in a future version. By setting values in this configuration to True,
+    those features can be enabled in prior versions for compatibility development
+    and testing.
+
+     - collect_all_And_tokens - flag to enable fix for Issue #63 that fixes erroneous grouping
+       of results names when an And expression is nested within an Or or MatchFirst; set to
+       True to enable bugfix released in pyparsing 2.3.0, or False to preserve
+       pre-2.3.0 handling of named results
+"""
+__compat__.collect_all_And_tokens = True
+
+__diag__ = SimpleNamespace()
+__diag__.__doc__ = """
+Diagnostic configuration (all default to False)
+     - warn_multiple_tokens_in_named_alternation - flag to enable warnings when a results
+       name is defined on a MatchFirst or Or expression with one or more And subexpressions
+       (only warns if __compat__.collect_all_And_tokens is False)
+     - warn_ungrouped_named_tokens_in_collection - flag to enable warnings when a results
+       name is defined on a containing expression with ungrouped subexpressions that also
+       have results names
+     - warn_name_set_on_empty_Forward - flag to enable warnings whan a Forward is defined
+       with a results name, but has no contents defined
+     - warn_on_multiple_string_args_to_oneof - flag to enable warnings whan oneOf is
+       incorrectly called with multiple str arguments
+     - enable_debug_on_named_expressions - flag to auto-enable debug on all subsequent
+       calls to ParserElement.setName()
+"""
+__diag__.warn_multiple_tokens_in_named_alternation = False
+__diag__.warn_ungrouped_named_tokens_in_collection = False
+__diag__.warn_name_set_on_empty_Forward = False
+__diag__.warn_on_multiple_string_args_to_oneof = False
+__diag__.enable_debug_on_named_expressions = False
+__diag__._all_names = [nm for nm in vars(__diag__) if nm.startswith("enable_") or nm.startswith("warn_")]
+
+def _enable_all_warnings():
+    __diag__.warn_multiple_tokens_in_named_alternation = True
+    __diag__.warn_ungrouped_named_tokens_in_collection = True
+    __diag__.warn_name_set_on_empty_Forward = True
+    __diag__.warn_on_multiple_string_args_to_oneof = True
+__diag__.enable_all_warnings = _enable_all_warnings
+
+
+__all__ = ['__version__', '__versionTime__', '__author__', '__compat__', '__diag__',
+           'And', 'CaselessKeyword', 'CaselessLiteral', 'CharsNotIn', 'Combine', 'Dict', 'Each', 'Empty',
+           'FollowedBy', 'Forward', 'GoToColumn', 'Group', 'Keyword', 'LineEnd', 'LineStart', 'Literal',
+           'PrecededBy', 'MatchFirst', 'NoMatch', 'NotAny', 'OneOrMore', 'OnlyOnce', 'Optional', 'Or',
+           'ParseBaseException', 'ParseElementEnhance', 'ParseException', 'ParseExpression', 'ParseFatalException',
+           'ParseResults', 'ParseSyntaxException', 'ParserElement', 'QuotedString', 'RecursiveGrammarException',
+           'Regex', 'SkipTo', 'StringEnd', 'StringStart', 'Suppress', 'Token', 'TokenConverter',
+           'White', 'Word', 'WordEnd', 'WordStart', 'ZeroOrMore', 'Char',
+           'alphanums', 'alphas', 'alphas8bit', 'anyCloseTag', 'anyOpenTag', 'cStyleComment', 'col',
+           'commaSeparatedList', 'commonHTMLEntity', 'countedArray', 'cppStyleComment', 'dblQuotedString',
+           'dblSlashComment', 'delimitedList', 'dictOf', 'downcaseTokens', 'empty', 'hexnums',
+           'htmlComment', 'javaStyleComment', 'line', 'lineEnd', 'lineStart', 'lineno',
+           'makeHTMLTags', 'makeXMLTags', 'matchOnlyAtCol', 'matchPreviousExpr', 'matchPreviousLiteral',
+           'nestedExpr', 'nullDebugAction', 'nums', 'oneOf', 'opAssoc', 'operatorPrecedence', 'printables',
+           'punc8bit', 'pythonStyleComment', 'quotedString', 'removeQuotes', 'replaceHTMLEntity',
+           'replaceWith', 'restOfLine', 'sglQuotedString', 'srange', 'stringEnd',
+           'stringStart', 'traceParseAction', 'unicodeString', 'upcaseTokens', 'withAttribute',
+           'indentedBlock', 'originalTextFor', 'ungroup', 'infixNotation', 'locatedExpr', 'withClass',
+           'CloseMatch', 'tokenMap', 'pyparsing_common', 'pyparsing_unicode', 'unicode_set',
+           'conditionAsParseAction', 're',
+           ]
+
+system_version = tuple(sys.version_info)[:3]
+PY_3 = system_version[0] == 3
+if PY_3:
+    _MAX_INT = sys.maxsize
+    basestring = str
+    unichr = chr
+    unicode = str
+    _ustr = str
+
+    # build list of single arg builtins, that can be used as parse actions
+    singleArgBuiltins = [sum, len, sorted, reversed, list, tuple, set, any, all, min, max]
+
+else:
+    _MAX_INT = sys.maxint
+    range = xrange
+
+    def _ustr(obj):
+        """Drop-in replacement for str(obj) that tries to be Unicode
+        friendly. It first tries str(obj). If that fails with
+        a UnicodeEncodeError, then it tries unicode(obj). It then
+        < returns the unicode object | encodes it with the default
+        encoding | ... >.
+        """
+        if isinstance(obj, unicode):
+            return obj
+
+        try:
+            # If this works, then _ustr(obj) has the same behaviour as str(obj), so
+            # it won't break any existing code.
+            return str(obj)
+
+        except UnicodeEncodeError:
+            # Else encode it
+            ret = unicode(obj).encode(sys.getdefaultencoding(), 'xmlcharrefreplace')
+            xmlcharref = Regex(r'&#\d+;')
+            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
+            return xmlcharref.transformString(ret)
+
+    # build list of single arg builtins, tolerant of Python version, that can be used as parse actions
+    singleArgBuiltins = []
+    import __builtin__
+
+    for fname in "sum len sorted reversed list tuple set any all min max".split():
+        try:
+            singleArgBuiltins.append(getattr(__builtin__, fname))
+        except AttributeError:
+            continue
+
+_generatorType = type((y for y in range(1)))
+
+def _xml_escape(data):
+    """Escape &, <, >, ", ', etc. in a string of data."""
+
+    # ampersand must be replaced first
+    from_symbols = '&><"\''
+    to_symbols = ('&' + s + ';' for s in "amp gt lt quot apos".split())
+    for from_, to_ in zip(from_symbols, to_symbols):
+        data = data.replace(from_, to_)
+    return data
+
+alphas = string.ascii_uppercase + string.ascii_lowercase
+nums = "0123456789"
+hexnums = nums + "ABCDEFabcdef"
+alphanums = alphas + nums
+_bslash = chr(92)
+printables = "".join(c for c in string.printable if c not in string.whitespace)
+
+
+def conditionAsParseAction(fn, message=None, fatal=False):
+    msg = message if message is not None else "failed user-defined condition"
+    exc_type = ParseFatalException if fatal else ParseException
+    fn = _trim_arity(fn)
+
+    @wraps(fn)
+    def pa(s, l, t):
+        if not bool(fn(s, l, t)):
+            raise exc_type(s, l, msg)
+
+    return pa
+
+class ParseBaseException(Exception):
+    """base exception class for all parsing runtime exceptions"""
+    # Performance tuning: we construct a *lot* of these, so keep this
+    # constructor as small and fast as possible
+    def __init__(self, pstr, loc=0, msg=None, elem=None):
+        self.loc = loc
+        if msg is None:
+            self.msg = pstr
+            self.pstr = ""
+        else:
+            self.msg = msg
+            self.pstr = pstr
+        self.parserElement = elem
+        self.args = (pstr, loc, msg)
+
+    @classmethod
+    def _from_exception(cls, pe):
+        """
+        internal factory method to simplify creating one type of ParseException
+        from another - avoids having __init__ signature conflicts among subclasses
+        """
+        return cls(pe.pstr, pe.loc, pe.msg, pe.parserElement)
+
+    def __getattr__(self, aname):
+        """supported attributes by name are:
+           - lineno - returns the line number of the exception text
+           - col - returns the column number of the exception text
+           - line - returns the line containing the exception text
+        """
+        if aname == "lineno":
+            return lineno(self.loc, self.pstr)
+        elif aname in ("col", "column"):
+            return col(self.loc, self.pstr)
+        elif aname == "line":
+            return line(self.loc, self.pstr)
+        else:
+            raise AttributeError(aname)
+
+    def __str__(self):
+        if self.pstr:
+            if self.loc >= len(self.pstr):
+                foundstr = ', found end of text'
+            else:
+                foundstr = (', found %r' % self.pstr[self.loc:self.loc + 1]).replace(r'\\', '\\')
+        else:
+            foundstr = ''
+        return ("%s%s  (at char %d), (line:%d, col:%d)" %
+                   (self.msg, foundstr, self.loc, self.lineno, self.column))
+    def __repr__(self):
+        return _ustr(self)
+    def markInputline(self, markerString=">!<"):
+        """Extracts the exception line from the input string, and marks
+           the location of the exception with a special symbol.
+        """
+        line_str = self.line
+        line_column = self.column - 1
+        if markerString:
+            line_str = "".join((line_str[:line_column],
+                                markerString, line_str[line_column:]))
+        return line_str.strip()
+    def __dir__(self):
+        return "lineno col line".split() + dir(type(self))
+
+class ParseException(ParseBaseException):
+    """
+    Exception thrown when parse expressions don't match class;
+    supported attributes by name are:
+    - lineno - returns the line number of the exception text
+    - col - returns the column number of the exception text
+    - line - returns the line containing the exception text
+
+    Example::
+
+        try:
+            Word(nums).setName("integer").parseString("ABC")
+        except ParseException as pe:
+            print(pe)
+            print("column: {}".format(pe.col))
+
+    prints::
+
+       Expected integer (at char 0), (line:1, col:1)
+        column: 1
+
+    """
+
+    @staticmethod
+    def explain(exc, depth=16):
+        """
+        Method to take an exception and translate the Python internal traceback into a list
+        of the pyparsing expressions that caused the exception to be raised.
+
+        Parameters:
+
+         - exc - exception raised during parsing (need not be a ParseException, in support
+           of Python exceptions that might be raised in a parse action)
+         - depth (default=16) - number of levels back in the stack trace to list expression
+           and function names; if None, the full stack trace names will be listed; if 0, only
+           the failing input line, marker, and exception string will be shown
+
+        Returns a multi-line string listing the ParserElements and/or function names in the
+        exception's stack trace.
+
+        Note: the diagnostic output will include string representations of the expressions
+        that failed to parse. These representations will be more helpful if you use `setName` to
+        give identifiable names to your expressions. Otherwise they will use the default string
+        forms, which may be cryptic to read.
+
+        explain() is only supported under Python 3.
+        """
+        import inspect
+
+        if depth is None:
+            depth = sys.getrecursionlimit()
+        ret = []
+        if isinstance(exc, ParseBaseException):
+            ret.append(exc.line)
+            ret.append(' ' * (exc.col - 1) + '^')
+        ret.append("{0}: {1}".format(type(exc).__name__, exc))
+
+        if depth > 0:
+            callers = inspect.getinnerframes(exc.__traceback__, context=depth)
+            seen = set()
+            for i, ff in enumerate(callers[-depth:]):
+                frm = ff[0]
+
+                f_self = frm.f_locals.get('self', None)
+                if isinstance(f_self, ParserElement):
+                    if frm.f_code.co_name not in ('parseImpl', '_parseNoCache'):
+                        continue
+                    if f_self in seen:
+                        continue
+                    seen.add(f_self)
+
+                    self_type = type(f_self)
+                    ret.append("{0}.{1} - {2}".format(self_type.__module__,
+                                                      self_type.__name__,
+                                                      f_self))
+                elif f_self is not None:
+                    self_type = type(f_self)
+                    ret.append("{0}.{1}".format(self_type.__module__,
+                                                self_type.__name__))
+                else:
+                    code = frm.f_code
+                    if code.co_name in ('wrapper', '<module>'):
+                        continue
+
+                    ret.append("{0}".format(code.co_name))
+
+                depth -= 1
+                if not depth:
+                    break
+
+        return '\n'.join(ret)
+
+
+class ParseFatalException(ParseBaseException):
+    """user-throwable exception thrown when inconsistent parse content
+       is found; stops all parsing immediately"""
+    pass
+
+class ParseSyntaxException(ParseFatalException):
+    """just like :class:`ParseFatalException`, but thrown internally
+    when an :class:`ErrorStop<And._ErrorStop>` ('-' operator) indicates
+    that parsing is to stop immediately because an unbacktrackable
+    syntax error has been found.
+    """
+    pass
+
+#~ class ReparseException(ParseBaseException):
+    #~ """Experimental class - parse actions can raise this exception to cause
+       #~ pyparsing to reparse the input string:
+        #~ - with a modified input string, and/or
+        #~ - with a modified start location
+       #~ Set the values of the ReparseException in the constructor, and raise the
+       #~ exception in a parse action to cause pyparsing to use the new string/location.
+       #~ Setting the values as None causes no change to be made.
+       #~ """
+    #~ def __init_( self, newstring, restartLoc ):
+        #~ self.newParseText = newstring
+        #~ self.reparseLoc = restartLoc
+
+class RecursiveGrammarException(Exception):
+    """exception thrown by :class:`ParserElement.validate` if the
+    grammar could be improperly recursive
+    """
+    def __init__(self, parseElementList):
+        self.parseElementTrace = parseElementList
+
+    def __str__(self):
+        return "RecursiveGrammarException: %s" % self.parseElementTrace
+
+class _ParseResultsWithOffset(object):
+    def __init__(self, p1, p2):
+        self.tup = (p1, p2)
+    def __getitem__(self, i):
+        return self.tup[i]
+    def __repr__(self):
+        return repr(self.tup[0])
+    def setOffset(self, i):
+        self.tup = (self.tup[0], i)
+
+class ParseResults(object):
+    """Structured parse results, to provide multiple means of access to
+    the parsed data:
+
+       - as a list (``len(results)``)
+       - by list index (``results[0], results[1]``, etc.)
+       - by attribute (``results.<resultsName>`` - see :class:`ParserElement.setResultsName`)
+
+    Example::
+
+        integer = Word(nums)
+        date_str = (integer.setResultsName("year") + '/'
+                        + integer.setResultsName("month") + '/'
+                        + integer.setResultsName("day"))
+        # equivalent form:
+        # date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+        # parseString returns a ParseResults object
+        result = date_str.parseString("1999/12/31")
+
+        def test(s, fn=repr):
+            print("%s -> %s" % (s, fn(eval(s))))
+        test("list(result)")
+        test("result[0]")
+        test("result['month']")
+        test("result.day")
+        test("'month' in result")
+        test("'minutes' in result")
+        test("result.dump()", str)
+
+    prints::
+
+        list(result) -> ['1999', '/', '12', '/', '31']
+        result[0] -> '1999'
+        result['month'] -> '12'
+        result.day -> '31'
+        'month' in result -> True
+        'minutes' in result -> False
+        result.dump() -> ['1999', '/', '12', '/', '31']
+        - day: 31
+        - month: 12
+        - year: 1999
+    """
+    def __new__(cls, toklist=None, name=None, asList=True, modal=True):
+        if isinstance(toklist, cls):
+            return toklist
+        retobj = object.__new__(cls)
+        retobj.__doinit = True
+        return retobj
+
+    # Performance tuning: we construct a *lot* of these, so keep this
+    # constructor as small and fast as possible
+    def __init__(self, toklist=None, name=None, asList=True, modal=True, isinstance=isinstance):
+        if self.__doinit:
+            self.__doinit = False
+            self.__name = None
+            self.__parent = None
+            self.__accumNames = {}
+            self.__asList = asList
+            self.__modal = modal
+            if toklist is None:
+                toklist = []
+            if isinstance(toklist, list):
+                self.__toklist = toklist[:]
+            elif isinstance(toklist, _generatorType):
+                self.__toklist = list(toklist)
+            else:
+                self.__toklist = [toklist]
+            self.__tokdict = dict()
+
+        if name is not None and name:
+            if not modal:
+                self.__accumNames[name] = 0
+            if isinstance(name, int):
+                name = _ustr(name)  # will always return a str, but use _ustr for consistency
+            self.__name = name
+            if not (isinstance(toklist, (type(None), basestring, list)) and toklist in (None, '', [])):
+                if isinstance(toklist, basestring):
+                    toklist = [toklist]
+                if asList:
+                    if isinstance(toklist, ParseResults):
+                        self[name] = _ParseResultsWithOffset(ParseResults(toklist.__toklist), 0)
+                    else:
+                        self[name] = _ParseResultsWithOffset(ParseResults(toklist[0]), 0)
+                    self[name].__name = name
+                else:
+                    try:
+                        self[name] = toklist[0]
+                    except (KeyError, TypeError, IndexError):
+                        self[name] = toklist
+
+    def __getitem__(self, i):
+        if isinstance(i, (int, slice)):
+            return self.__toklist[i]
+        else:
+            if i not in self.__accumNames:
+                return self.__tokdict[i][-1][0]
+            else:
+                return ParseResults([v[0] for v in self.__tokdict[i]])
+
+    def __setitem__(self, k, v, isinstance=isinstance):
+        if isinstance(v, _ParseResultsWithOffset):
+            self.__tokdict[k] = self.__tokdict.get(k, list()) + [v]
+            sub = v[0]
+        elif isinstance(k, (int, slice)):
+            self.__toklist[k] = v
+            sub = v
+        else:
+            self.__tokdict[k] = self.__tokdict.get(k, list()) + [_ParseResultsWithOffset(v, 0)]
+            sub = v
+        if isinstance(sub, ParseResults):
+            sub.__parent = wkref(self)
+
+    def __delitem__(self, i):
+        if isinstance(i, (int, slice)):
+            mylen = len(self.__toklist)
+            del self.__toklist[i]
+
+            # convert int to slice
+            if isinstance(i, int):
+                if i < 0:
+                    i += mylen
+                i = slice(i, i + 1)
+            # get removed indices
+            removed = list(range(*i.indices(mylen)))
+            removed.reverse()
+            # fixup indices in token dictionary
+            for name, occurrences in self.__tokdict.items():
+                for j in removed:
+                    for k, (value, position) in enumerate(occurrences):
+                        occurrences[k] = _ParseResultsWithOffset(value, position - (position > j))
+        else:
+            del self.__tokdict[i]
+
+    def __contains__(self, k):
+        return k in self.__tokdict
+
+    def __len__(self):
+        return len(self.__toklist)
+
+    def __bool__(self):
+        return (not not self.__toklist)
+    __nonzero__ = __bool__
+
+    def __iter__(self):
+        return iter(self.__toklist)
+
+    def __reversed__(self):
+        return iter(self.__toklist[::-1])
+
+    def _iterkeys(self):
+        if hasattr(self.__tokdict, "iterkeys"):
+            return self.__tokdict.iterkeys()
+        else:
+            return iter(self.__tokdict)
+
+    def _itervalues(self):
+        return (self[k] for k in self._iterkeys())
+
+    def _iteritems(self):
+        return ((k, self[k]) for k in self._iterkeys())
+
+    if PY_3:
+        keys = _iterkeys
+        """Returns an iterator of all named result keys."""
+
+        values = _itervalues
+        """Returns an iterator of all named result values."""
+
+        items = _iteritems
+        """Returns an iterator of all named result key-value tuples."""
+
+    else:
+        iterkeys = _iterkeys
+        """Returns an iterator of all named result keys (Python 2.x only)."""
+
+        itervalues = _itervalues
+        """Returns an iterator of all named result values (Python 2.x only)."""
+
+        iteritems = _iteritems
+        """Returns an iterator of all named result key-value tuples (Python 2.x only)."""
+
+        def keys(self):
+            """Returns all named result keys (as a list in Python 2.x, as an iterator in Python 3.x)."""
+            return list(self.iterkeys())
+
+        def values(self):
+            """Returns all named result values (as a list in Python 2.x, as an iterator in Python 3.x)."""
+            return list(self.itervalues())
+
+        def items(self):
+            """Returns all named result key-values (as a list of tuples in Python 2.x, as an iterator in Python 3.x)."""
+            return list(self.iteritems())
+
+    def haskeys(self):
+        """Since keys() returns an iterator, this method is helpful in bypassing
+           code that looks for the existence of any defined results names."""
+        return bool(self.__tokdict)
+
+    def pop(self, *args, **kwargs):
+        """
+        Removes and returns item at specified index (default= ``last``).
+        Supports both ``list`` and ``dict`` semantics for ``pop()``. If
+        passed no argument or an integer argument, it will use ``list``
+        semantics and pop tokens from the list of parsed tokens. If passed
+        a non-integer argument (most likely a string), it will use ``dict``
+        semantics and pop the corresponding value from any defined results
+        names. A second default return value argument is supported, just as in
+        ``dict.pop()``.
+
+        Example::
+
+            def remove_first(tokens):
+                tokens.pop(0)
+            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
+            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString("0 123 321")) # -> ['123', '321']
+
+            label = Word(alphas)
+            patt = label("LABEL") + OneOrMore(Word(nums))
+            print(patt.parseString("AAB 123 321").dump())
+
+            # Use pop() in a parse action to remove named result (note that corresponding value is not
+            # removed from list form of results)
+            def remove_LABEL(tokens):
+                tokens.pop("LABEL")
+                return tokens
+            patt.addParseAction(remove_LABEL)
+            print(patt.parseString("AAB 123 321").dump())
+
+        prints::
+
+            ['AAB', '123', '321']
+            - LABEL: AAB
+
+            ['AAB', '123', '321']
+        """
+        if not args:
+            args = [-1]
+        for k, v in kwargs.items():
+            if k == 'default':
+                args = (args[0], v)
+            else:
+                raise TypeError("pop() got an unexpected keyword argument '%s'" % k)
+        if (isinstance(args[0], int)
+                or len(args) == 1
+                or args[0] in self):
+            index = args[0]
+            ret = self[index]
+            del self[index]
+            return ret
+        else:
+            defaultvalue = args[1]
+            return defaultvalue
+
+    def get(self, key, defaultValue=None):
+        """
+        Returns named result matching the given key, or if there is no
+        such name, then returns the given ``defaultValue`` or ``None`` if no
+        ``defaultValue`` is specified.
+
+        Similar to ``dict.get()``.
+
+        Example::
+
+            integer = Word(nums)
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+            result = date_str.parseString("1999/12/31")
+            print(result.get("year")) # -> '1999'
+            print(result.get("hour", "not specified")) # -> 'not specified'
+            print(result.get("hour")) # -> None
+        """
+        if key in self:
+            return self[key]
+        else:
+            return defaultValue
+
+    def insert(self, index, insStr):
+        """
+        Inserts new element at location index in the list of parsed tokens.
+
+        Similar to ``list.insert()``.
+
+        Example::
+
+            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
+
+            # use a parse action to insert the parse location in the front of the parsed results
+            def insert_locn(locn, tokens):
+                tokens.insert(0, locn)
+            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString("0 123 321")) # -> [0, '0', '123', '321']
+        """
+        self.__toklist.insert(index, insStr)
+        # fixup indices in token dictionary
+        for name, occurrences in self.__tokdict.items():
+            for k, (value, position) in enumerate(occurrences):
+                occurrences[k] = _ParseResultsWithOffset(value, position + (position > index))
+
+    def append(self, item):
+        """
+        Add single element to end of ParseResults list of elements.
+
+        Example::
+
+            print(OneOrMore(Word(nums)).parseString("0 123 321")) # -> ['0', '123', '321']
+
+            # use a parse action to compute the sum of the parsed integers, and add it to the end
+            def append_sum(tokens):
+                tokens.append(sum(map(int, tokens)))
+            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString("0 123 321")) # -> ['0', '123', '321', 444]
+        """
+        self.__toklist.append(item)
+
+    def extend(self, itemseq):
+        """
+        Add sequence of elements to end of ParseResults list of elements.
+
+        Example::
+
+            patt = OneOrMore(Word(alphas))
+
+            # use a parse action to append the reverse of the matched strings, to make a palindrome
+            def make_palindrome(tokens):
+                tokens.extend(reversed([t[::-1] for t in tokens]))
+                return ''.join(tokens)
+            print(patt.addParseAction(make_palindrome).parseString("lskdj sdlkjf lksd")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
+        """
+        if isinstance(itemseq, ParseResults):
+            self.__iadd__(itemseq)
+        else:
+            self.__toklist.extend(itemseq)
+
+    def clear(self):
+        """
+        Clear all elements and results names.
+        """
+        del self.__toklist[:]
+        self.__tokdict.clear()
+
+    def __getattr__(self, name):
+        try:
+            return self[name]
+        except KeyError:
+            return ""
+
+    def __add__(self, other):
+        ret = self.copy()
+        ret += other
+        return ret
+
+    def __iadd__(self, other):
+        if other.__tokdict:
+            offset = len(self.__toklist)
+            addoffset = lambda a: offset if a < 0 else a + offset
+            otheritems = other.__tokdict.items()
+            otherdictitems = [(k, _ParseResultsWithOffset(v[0], addoffset(v[1])))
+                              for k, vlist in otheritems for v in vlist]
+            for k, v in otherdictitems:
+                self[k] = v
+                if isinstance(v[0], ParseResults):
+                    v[0].__parent = wkref(self)
+
+        self.__toklist += other.__toklist
+        self.__accumNames.update(other.__accumNames)
+        return self
+
+    def __radd__(self, other):
+        if isinstance(other, int) and other == 0:
+            # useful for merging many ParseResults using sum() builtin
+            return self.copy()
+        else:
+            # this may raise a TypeError - so be it
+            return other + self
+
+    def __repr__(self):
+        return "(%s, %s)" % (repr(self.__toklist), repr(self.__tokdict))
+
+    def __str__(self):
+        return '[' + ', '.join(_ustr(i) if isinstance(i, ParseResults) else repr(i) for i in self.__toklist) + ']'
+
+    def _asStringList(self, sep=''):
+        out = []
+        for item in self.__toklist:
+            if out and sep:
+                out.append(sep)
+            if isinstance(item, ParseResults):
+                out += item._asStringList()
+            else:
+                out.append(_ustr(item))
+        return out
+
+    def asList(self):
+        """
+        Returns the parse results as a nested list of matching tokens, all converted to strings.
+
+        Example::
+
+            patt = OneOrMore(Word(alphas))
+            result = patt.parseString("sldkj lsdkj sldkj")
+            # even though the result prints in string-like form, it is actually a pyparsing ParseResults
+            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
+
+            # Use asList() to create an actual list
+            result_list = result.asList()
+            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
+        """
+        return [res.asList() if isinstance(res, ParseResults) else res for res in self.__toklist]
+
+    def asDict(self):
+        """
+        Returns the named parse results as a nested dictionary.
+
+        Example::
+
+            integer = Word(nums)
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+            result = date_str.parseString('12/31/1999')
+            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
+
+            result_dict = result.asDict()
+            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}
+
+            # even though a ParseResults supports dict-like access, sometime you just need to have a dict
+            import json
+            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
+            print(json.dumps(result.asDict())) # -> {"month": "31", "day": "1999", "year": "12"}
+        """
+        if PY_3:
+            item_fn = self.items
+        else:
+            item_fn = self.iteritems
+
+        def toItem(obj):
+            if isinstance(obj, ParseResults):
+                if obj.haskeys():
+                    return obj.asDict()
+                else:
+                    return [toItem(v) for v in obj]
+            else:
+                return obj
+
+        return dict((k, toItem(v)) for k, v in item_fn())
+
+    def copy(self):
+        """
+        Returns a new copy of a :class:`ParseResults` object.
+        """
+        ret = ParseResults(self.__toklist)
+        ret.__tokdict = dict(self.__tokdict.items())
+        ret.__parent = self.__parent
+        ret.__accumNames.update(self.__accumNames)
+        ret.__name = self.__name
+        return ret
+
+    def asXML(self, doctag=None, namedItemsOnly=False, indent="", formatted=True):
+        """
+        (Deprecated) Returns the parse results as XML. Tags are created for tokens and lists that have defined results names.
+        """
+        nl = "\n"
+        out = []
+        namedItems = dict((v[1], k) for (k, vlist) in self.__tokdict.items()
+                          for v in vlist)
+        nextLevelIndent = indent + "  "
+
+        # collapse out indents if formatting is not desired
+        if not formatted:
+            indent = ""
+            nextLevelIndent = ""
+            nl = ""
+
+        selfTag = None
+        if doctag is not None:
+            selfTag = doctag
+        else:
+            if self.__name:
+                selfTag = self.__name
+
+        if not selfTag:
+            if namedItemsOnly:
+                return ""
+            else:
+                selfTag = "ITEM"
+
+        out += [nl, indent, "<", selfTag, ">"]
+
+        for i, res in enumerate(self.__toklist):
+            if isinstance(res, ParseResults):
+                if i in namedItems:
+                    out += [res.asXML(namedItems[i],
+                                      namedItemsOnly and doctag is None,
+                                      nextLevelIndent,
+                                      formatted)]
+                else:
+                    out += [res.asXML(None,
+                                      namedItemsOnly and doctag is None,
+                                      nextLevelIndent,
+                                      formatted)]
+            else:
+                # individual token, see if there is a name for it
+                resTag = None
+                if i in namedItems:
+                    resTag = namedItems[i]
+                if not resTag:
+                    if namedItemsOnly:
+                        continue
+                    else:
+                        resTag = "ITEM"
+                xmlBodyText = _xml_escape(_ustr(res))
+                out += [nl, nextLevelIndent, "<", resTag, ">",
+                        xmlBodyText,
+                                                "</", resTag, ">"]
+
+        out += [nl, indent, "</", selfTag, ">"]
+        return "".join(out)
+
+    def __lookup(self, sub):
+        for k, vlist in self.__tokdict.items():
+            for v, loc in vlist:
+                if sub is v:
+                    return k
+        return None
+
+    def getName(self):
+        r"""
+        Returns the results name for this token expression. Useful when several
+        different expressions might match at a particular location.
+
+        Example::
+
+            integer = Word(nums)
+            ssn_expr = Regex(r"\d\d\d-\d\d-\d\d\d\d")
+            house_number_expr = Suppress('#') + Word(nums, alphanums)
+            user_data = (Group(house_number_expr)("house_number")
+                        | Group(ssn_expr)("ssn")
+                        | Group(integer)("age"))
+            user_info = OneOrMore(user_data)
+
+            result = user_info.parseString("22 111-22-3333 #221B")
+            for item in result:
+                print(item.getName(), ':', item[0])
+
+        prints::
+
+            age : 22
+            ssn : 111-22-3333
+            house_number : 221B
+        """
+        if self.__name:
+            return self.__name
+        elif self.__parent:
+            par = self.__parent()
+            if par:
+                return par.__lookup(self)
+            else:
+                return None
+        elif (len(self) == 1
+              and len(self.__tokdict) == 1
+              and next(iter(self.__tokdict.values()))[0][1] in (0, -1)):
+            return next(iter(self.__tokdict.keys()))
+        else:
+            return None
+
+    def dump(self, indent='', full=True, include_list=True, _depth=0):
+        """
+        Diagnostic method for listing out the contents of
+        a :class:`ParseResults`. Accepts an optional ``indent`` argument so
+        that this string can be embedded in a nested display of other data.
+
+        Example::
+
+            integer = Word(nums)
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+            result = date_str.parseString('12/31/1999')
+            print(result.dump())
+
+        prints::
+
+            ['12', '/', '31', '/', '1999']
+            - day: 1999
+            - month: 31
+            - year: 12
+        """
+        out = []
+        NL = '\n'
+        if include_list:
+            out.append(indent + _ustr(self.asList()))
+        else:
+            out.append('')
+
+        if full:
+            if self.haskeys():
+                items = sorted((str(k), v) for k, v in self.items())
+                for k, v in items:
+                    if out:
+                        out.append(NL)
+                    out.append("%s%s- %s: " % (indent, ('  ' * _depth), k))
+                    if isinstance(v, ParseResults):
+                        if v:
+                            out.append(v.dump(indent=indent, full=full, include_list=include_list, _depth=_depth + 1))
+                        else:
+                            out.append(_ustr(v))
+                    else:
+                        out.append(repr(v))
+            elif any(isinstance(vv, ParseResults) for vv in self):
+                v = self
+                for i, vv in enumerate(v):
+                    if isinstance(vv, ParseResults):
+                        out.append("\n%s%s[%d]:\n%s%s%s" % (indent,
+                                                            ('  ' * (_depth)),
+                                                            i,
+                                                            indent,
+                                                            ('  ' * (_depth + 1)),
+                                                            vv.dump(indent=indent,
+                                                                    full=full,
+                                                                    include_list=include_list,
+                                                                    _depth=_depth + 1)))
+                    else:
+                        out.append("\n%s%s[%d]:\n%s%s%s" % (indent,
+                                                            ('  ' * (_depth)),
+                                                            i,
+                                                            indent,
+                                                            ('  ' * (_depth + 1)),
+                                                            _ustr(vv)))
+
+        return "".join(out)
+
+    def pprint(self, *args, **kwargs):
+        """
+        Pretty-printer for parsed results as a list, using the
+        `pprint <https://docs.python.org/3/library/pprint.html>`_ module.
+        Accepts additional positional or keyword args as defined for
+        `pprint.pprint <https://docs.python.org/3/library/pprint.html#pprint.pprint>`_ .
+
+        Example::
+
+            ident = Word(alphas, alphanums)
+            num = Word(nums)
+            func = Forward()
+            term = ident | num | Group('(' + func + ')')
+            func <<= ident + Group(Optional(delimitedList(term)))
+            result = func.parseString("fna a,b,(fnb c,d,200),100")
+            result.pprint(width=40)
+
+        prints::
+
+            ['fna',
+             ['a',
+              'b',
+              ['(', 'fnb', ['c', 'd', '200'], ')'],
+              '100']]
+        """
+        pprint.pprint(self.asList(), *args, **kwargs)
+
+    # add support for pickle protocol
+    def __getstate__(self):
+        return (self.__toklist,
+                (self.__tokdict.copy(),
+                 self.__parent is not None and self.__parent() or None,
+                 self.__accumNames,
+                 self.__name))
+
+    def __setstate__(self, state):
+        self.__toklist = state[0]
+        self.__tokdict, par, inAccumNames, self.__name = state[1]
+        self.__accumNames = {}
+        self.__accumNames.update(inAccumNames)
+        if par is not None:
+            self.__parent = wkref(par)
+        else:
+            self.__parent = None
+
+    def __getnewargs__(self):
+        return self.__toklist, self.__name, self.__asList, self.__modal
+
+    def __dir__(self):
+        return dir(type(self)) + list(self.keys())
+
+    @classmethod
+    def from_dict(cls, other, name=None):
+        """
+        Helper classmethod to construct a ParseResults from a dict, preserving the
+        name-value relations as results names. If an optional 'name' argument is
+        given, a nested ParseResults will be returned
+        """
+        def is_iterable(obj):
+            try:
+                iter(obj)
+            except Exception:
+                return False
+            else:
+                if PY_3:
+                    return not isinstance(obj, (str, bytes))
+                else:
+                    return not isinstance(obj, basestring)
+
+        ret = cls([])
+        for k, v in other.items():
+            if isinstance(v, Mapping):
+                ret += cls.from_dict(v, name=k)
+            else:
+                ret += cls([v], name=k, asList=is_iterable(v))
+        if name is not None:
+            ret = cls([ret], name=name)
+        return ret
+
+MutableMapping.register(ParseResults)
+
+def col (loc, strg):
+    """Returns current column within a string, counting newlines as line separators.
+   The first column is number 1.
+
+   Note: the default parsing behavior is to expand tabs in the input string
+   before starting the parsing process.  See
+   :class:`ParserElement.parseString` for more
+   information on parsing strings containing ``<TAB>`` s, and suggested
+   methods to maintain a consistent view of the parsed string, the parse
+   location, and line and column positions within the parsed string.
+   """
+    s = strg
+    return 1 if 0 < loc < len(s) and s[loc-1] == '\n' else loc - s.rfind("\n", 0, loc)
+
+def lineno(loc, strg):
+    """Returns current line number within a string, counting newlines as line separators.
+    The first line is number 1.
+
+    Note - the default parsing behavior is to expand tabs in the input string
+    before starting the parsing process.  See :class:`ParserElement.parseString`
+    for more information on parsing strings containing ``<TAB>`` s, and
+    suggested methods to maintain a consistent view of the parsed string, the
+    parse location, and line and column positions within the parsed string.
+    """
+    return strg.count("\n", 0, loc) + 1
+
+def line(loc, strg):
+    """Returns the line of text containing loc within a string, counting newlines as line separators.
+       """
+    lastCR = strg.rfind("\n", 0, loc)
+    nextCR = strg.find("\n", loc)
+    if nextCR >= 0:
+        return strg[lastCR + 1:nextCR]
+    else:
+        return strg[lastCR + 1:]
+
+def _defaultStartDebugAction(instring, loc, expr):
+    print(("Match " + _ustr(expr) + " at loc " + _ustr(loc) + "(%d,%d)" % (lineno(loc, instring), col(loc, instring))))
+
+def _defaultSuccessDebugAction(instring, startloc, endloc, expr, toks):
+    print("Matched " + _ustr(expr) + " -> " + str(toks.asList()))
+
+def _defaultExceptionDebugAction(instring, loc, expr, exc):
+    print("Exception raised:" + _ustr(exc))
+
+def nullDebugAction(*args):
+    """'Do-nothing' debug action, to suppress debugging output during parsing."""
+    pass
+
+# Only works on Python 3.x - nonlocal is toxic to Python 2 installs
+#~ 'decorator to trim function calls to match the arity of the target'
+#~ def _trim_arity(func, maxargs=3):
+    #~ if func in singleArgBuiltins:
+        #~ return lambda s,l,t: func(t)
+    #~ limit = 0
+    #~ foundArity = False
+    #~ def wrapper(*args):
+        #~ nonlocal limit,foundArity
+        #~ while 1:
+            #~ try:
+                #~ ret = func(*args[limit:])
+                #~ foundArity = True
+                #~ return ret
+            #~ except TypeError:
+                #~ if limit == maxargs or foundArity:
+                    #~ raise
+                #~ limit += 1
+                #~ continue
+    #~ return wrapper
+
+# this version is Python 2.x-3.x cross-compatible
+'decorator to trim function calls to match the arity of the target'
+def _trim_arity(func, maxargs=2):
+    if func in singleArgBuiltins:
+        return lambda s, l, t: func(t)
+    limit = [0]
+    foundArity = [False]
+
+    # traceback return data structure changed in Py3.5 - normalize back to plain tuples
+    if system_version[:2] >= (3, 5):
+        def extract_stack(limit=0):
+            # special handling for Python 3.5.0 - extra deep call stack by 1
+            offset = -3 if system_version == (3, 5, 0) else -2
+            frame_summary = traceback.extract_stack(limit=-offset + limit - 1)[offset]
+            return [frame_summary[:2]]
+        def extract_tb(tb, limit=0):
+            frames = traceback.extract_tb(tb, limit=limit)
+            frame_summary = frames[-1]
+            return [frame_summary[:2]]
+    else:
+        extract_stack = traceback.extract_stack
+        extract_tb = traceback.extract_tb
+
+    # synthesize what would be returned by traceback.extract_stack at the call to
+    # user's parse action 'func', so that we don't incur call penalty at parse time
+
+    LINE_DIFF = 6
+    # IF ANY CODE CHANGES, EVEN JUST COMMENTS OR BLANK LINES, BETWEEN THE NEXT LINE AND
+    # THE CALL TO FUNC INSIDE WRAPPER, LINE_DIFF MUST BE MODIFIED!!!!
+    this_line = extract_stack(limit=2)[-1]
+    pa_call_line_synth = (this_line[0], this_line[1] + LINE_DIFF)
+
+    def wrapper(*args):
+        while 1:
+            try:
+                ret = func(*args[limit[0]:])
+                foundArity[0] = True
+                return ret
+            except TypeError:
+                # re-raise TypeErrors if they did not come from our arity testing
+                if foundArity[0]:
+                    raise
+                else:
+                    try:
+                        tb = sys.exc_info()[-1]
+                        if not extract_tb(tb, limit=2)[-1][:2] == pa_call_line_synth:
+                            raise
+                    finally:
+                        try:
+                            del tb
+                        except NameError:
+                            pass
+
+                if limit[0] <= maxargs:
+                    limit[0] += 1
+                    continue
+                raise
+
+    # copy func name to wrapper for sensible debug output
+    func_name = "<parse action>"
+    try:
+        func_name = getattr(func, '__name__',
+                            getattr(func, '__class__').__name__)
+    except Exception:
+        func_name = str(func)
+    wrapper.__name__ = func_name
+
+    return wrapper
+
+
+class ParserElement(object):
+    """Abstract base level parser element class."""
+    DEFAULT_WHITE_CHARS = " \n\t\r"
+    verbose_stacktrace = False
+
+    @staticmethod
+    def setDefaultWhitespaceChars(chars):
+        r"""
+        Overrides the default whitespace chars
+
+        Example::
+
+            # default whitespace chars are space, <TAB> and newline
+            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def', 'ghi', 'jkl']
+
+            # change to just treat newline as significant
+            ParserElement.setDefaultWhitespaceChars(" \t")
+            OneOrMore(Word(alphas)).parseString("abc def\nghi jkl")  # -> ['abc', 'def']
+        """
+        ParserElement.DEFAULT_WHITE_CHARS = chars
+
+    @staticmethod
+    def inlineLiteralsUsing(cls):
+        """
+        Set class to be used for inclusion of string literals into a parser.
+
+        Example::
+
+            # default literal class used is Literal
+            integer = Word(nums)
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']
+
+
+            # change to Suppress
+            ParserElement.inlineLiteralsUsing(Suppress)
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+
+            date_str.parseString("1999/12/31")  # -> ['1999', '12', '31']
+        """
+        ParserElement._literalStringClass = cls
+
+    @classmethod
+    def _trim_traceback(cls, tb):
+        while tb.tb_next:
+            tb = tb.tb_next
+        return tb
+
+    def __init__(self, savelist=False):
+        self.parseAction = list()
+        self.failAction = None
+        # ~ self.name = "<unknown>"  # don't define self.name, let subclasses try/except upcall
+        self.strRepr = None
+        self.resultsName = None
+        self.saveAsList = savelist
+        self.skipWhitespace = True
+        self.whiteChars = set(ParserElement.DEFAULT_WHITE_CHARS)
+        self.copyDefaultWhiteChars = True
+        self.mayReturnEmpty = False # used when checking for left-recursion
+        self.keepTabs = False
+        self.ignoreExprs = list()
+        self.debug = False
+        self.streamlined = False
+        self.mayIndexError = True # used to optimize exception handling for subclasses that don't advance parse index
+        self.errmsg = ""
+        self.modalResults = True # used to mark results names as modal (report only last) or cumulative (list all)
+        self.debugActions = (None, None, None)  # custom debug actions
+        self.re = None
+        self.callPreparse = True # used to avoid redundant calls to preParse
+        self.callDuringTry = False
+
+    def copy(self):
+        """
+        Make a copy of this :class:`ParserElement`.  Useful for defining
+        different parse actions for the same parsing pattern, using copies of
+        the original parse element.
+
+        Example::
+
+            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
+            integerK = integer.copy().addParseAction(lambda toks: toks[0] * 1024) + Suppress("K")
+            integerM = integer.copy().addParseAction(lambda toks: toks[0] * 1024 * 1024) + Suppress("M")
+
+            print(OneOrMore(integerK | integerM | integer).parseString("5K 100 640K 256M"))
+
+        prints::
+
+            [5120, 100, 655360, 268435456]
+
+        Equivalent form of ``expr.copy()`` is just ``expr()``::
+
+            integerM = integer().addParseAction(lambda toks: toks[0] * 1024 * 1024) + Suppress("M")
+        """
+        cpy = copy.copy(self)
+        cpy.parseAction = self.parseAction[:]
+        cpy.ignoreExprs = self.ignoreExprs[:]
+        if self.copyDefaultWhiteChars:
+            cpy.whiteChars = ParserElement.DEFAULT_WHITE_CHARS
+        return cpy
+
+    def setName(self, name):
+        """
+        Define name for this expression, makes debugging and exception messages clearer.
+
+        Example::
+
+            Word(nums).parseString("ABC")  # -> Exception: Expected W:(0123...) (at char 0), (line:1, col:1)
+            Word(nums).setName("integer").parseString("ABC")  # -> Exception: Expected integer (at char 0), (line:1, col:1)
+        """
+        self.name = name
+        self.errmsg = "Expected " + self.name
+        if __diag__.enable_debug_on_named_expressions:
+            self.setDebug()
+        return self
+
+    def setResultsName(self, name, listAllMatches=False):
+        """
+        Define name for referencing matching tokens as a nested attribute
+        of the returned parse results.
+        NOTE: this returns a *copy* of the original :class:`ParserElement` object;
+        this is so that the client can define a basic element, such as an
+        integer, and reference it in multiple places with different names.
+
+        You can also set results names using the abbreviated syntax,
+        ``expr("name")`` in place of ``expr.setResultsName("name")``
+        - see :class:`__call__`.
+
+        Example::
+
+            date_str = (integer.setResultsName("year") + '/'
+                        + integer.setResultsName("month") + '/'
+                        + integer.setResultsName("day"))
+
+            # equivalent form:
+            date_str = integer("year") + '/' + integer("month") + '/' + integer("day")
+        """
+        return self._setResultsName(name, listAllMatches)
+
+    def _setResultsName(self, name, listAllMatches=False):
+        newself = self.copy()
+        if name.endswith("*"):
+            name = name[:-1]
+            listAllMatches = True
+        newself.resultsName = name
+        newself.modalResults = not listAllMatches
+        return newself
+
+    def setBreak(self, breakFlag=True):
+        """Method to invoke the Python pdb debugger when this element is
+           about to be parsed. Set ``breakFlag`` to True to enable, False to
+           disable.
+        """
+        if breakFlag:
+            _parseMethod = self._parse
+            def breaker(instring, loc, doActions=True, callPreParse=True):
+                import pdb
+                # this call to pdb.set_trace() is intentional, not a checkin error
+                pdb.set_trace()
+                return _parseMethod(instring, loc, doActions, callPreParse)
+            breaker._originalParseMethod = _parseMethod
+            self._parse = breaker
+        else:
+            if hasattr(self._parse, "_originalParseMethod"):
+                self._parse = self._parse._originalParseMethod
+        return self
+
+    def setParseAction(self, *fns, **kwargs):
+        """
+        Define one or more actions to perform when successfully matching parse element definition.
+        Parse action fn is a callable method with 0-3 arguments, called as ``fn(s, loc, toks)`` ,
+        ``fn(loc, toks)`` , ``fn(toks)`` , or just ``fn()`` , where:
+
+        - s   = the original string being parsed (see note below)
+        - loc = the location of the matching substring
+        - toks = a list of the matched tokens, packaged as a :class:`ParseResults` object
+
+        If the functions in fns modify the tokens, they can return them as the return
+        value from fn, and the modified list of tokens will replace the original.
+        Otherwise, fn does not need to return any value.
+
+        If None is passed as the parse action, all previously added parse actions for this
+        expression are cleared.
+
+        Optional keyword arguments:
+        - callDuringTry = (default= ``False``) indicate if parse action should be run during lookaheads and alternate testing
+
+        Note: the default parsing behavior is to expand tabs in the input string
+        before starting the parsing process.  See :class:`parseString for more
+        information on parsing strings containing ``<TAB>`` s, and suggested
+        methods to maintain a consistent view of the parsed string, the parse
+        location, and line and column positions within the parsed string.
+
+        Example::
+
+            integer = Word(nums)
+            date_str = integer + '/' + integer + '/' + integer
+
+            date_str.parseString("1999/12/31")  # -> ['1999', '/', '12', '/', '31']
+
+            # use parse action to convert to ints at parse time
+            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
+            date_str = integer + '/' + integer + '/' + integer
+
+            # note that integer fields are now ints, not strings
+            date_str.parseString("1999/12/31")  # -> [1999, '/', 12, '/', 31]
+        """
+        if list(fns) == [None,]:
+            self.parseAction = []
+        else:
+            if not all(callable(fn) for fn in fns):
+                raise TypeError("parse actions must be callable")
+            self.parseAction = list(map(_trim_arity, list(fns)))
+            self.callDuringTry = kwargs.get("callDuringTry", False)
+        return self
+
+    def addParseAction(self, *fns, **kwargs):
+        """
+        Add one or more parse actions to expression's list of parse actions. See :class:`setParseAction`.
+
+        See examples in :class:`copy`.
+        """
+        self.parseAction += list(map(_trim_arity, list(fns)))
+        self.callDuringTry = self.callDuringTry or kwargs.get("callDuringTry", False)
+        return self
+
+    def addCondition(self, *fns, **kwargs):
+        """Add a boolean predicate function to expression's list of parse actions. See
+        :class:`setParseAction` for function call signatures. Unlike ``setParseAction``,
+        functions passed to ``addCondition`` need to return boolean success/fail of the condition.
+
+        Optional keyword arguments:
+        - message = define a custom message to be used in the raised exception
+        - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException
+
+        Example::
+
+            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
+            year_int = integer.copy()
+            year_int.addCondition(lambda toks: toks[0] >= 2000, message="Only support years 2000 and later")
+            date_str = year_int + '/' + integer + '/' + integer
+
+            result = date_str.parseString("1999/12/31")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)
+        """
+        for fn in fns:
+            self.parseAction.append(conditionAsParseAction(fn, message=kwargs.get('message'),
+                                                           fatal=kwargs.get('fatal', False)))
+
+        self.callDuringTry = self.callDuringTry or kwargs.get("callDuringTry", False)
+        return self
+
+    def setFailAction(self, fn):
+        """Define action to perform if parsing fails at this expression.
+           Fail acton fn is a callable function that takes the arguments
+           ``fn(s, loc, expr, err)`` where:
+           - s = string being parsed
+           - loc = location where expression match was attempted and failed
+           - expr = the parse expression that failed
+           - err = the exception thrown
+           The function returns no value.  It may throw :class:`ParseFatalException`
+           if it is desired to stop parsing immediately."""
+        self.failAction = fn
+        return self
+
+    def _skipIgnorables(self, instring, loc):
+        exprsFound = True
+        while exprsFound:
+            exprsFound = False
+            for e in self.ignoreExprs:
+                try:
+                    while 1:
+                        loc, dummy = e._parse(instring, loc)
+                        exprsFound = True
+                except ParseException:
+                    pass
+        return loc
+
+    def preParse(self, instring, loc):
+        if self.ignoreExprs:
+            loc = self._skipIgnorables(instring, loc)
+
+        if self.skipWhitespace:
+            wt = self.whiteChars
+            instrlen = len(instring)
+            while loc < instrlen and instring[loc] in wt:
+                loc += 1
+
+        return loc
+
+    def parseImpl(self, instring, loc, doActions=True):
+        return loc, []
+
+    def postParse(self, instring, loc, tokenlist):
+        return tokenlist
+
+    # ~ @profile
+    def _parseNoCache(self, instring, loc, doActions=True, callPreParse=True):
+        TRY, MATCH, FAIL = 0, 1, 2
+        debugging = (self.debug)  # and doActions)
+
+        if debugging or self.failAction:
+            # ~ print ("Match", self, "at loc", loc, "(%d, %d)" % (lineno(loc, instring), col(loc, instring)))
+            if self.debugActions[TRY]:
+                self.debugActions[TRY](instring, loc, self)
+            try:
+                if callPreParse and self.callPreparse:
+                    preloc = self.preParse(instring, loc)
+                else:
+                    preloc = loc
+                tokensStart = preloc
+                if self.mayIndexError or preloc >= len(instring):
+                    try:
+                        loc, tokens = self.parseImpl(instring, preloc, doActions)
+                    except IndexError:
+                        raise ParseException(instring, len(instring), self.errmsg, self)
+                else:
+                    loc, tokens = self.parseImpl(instring, preloc, doActions)
+            except Exception as err:
+                # ~ print ("Exception raised:", err)
+                if self.debugActions[FAIL]:
+                    self.debugActions[FAIL](instring, tokensStart, self, err)
+                if self.failAction:
+                    self.failAction(instring, tokensStart, self, err)
+                raise
+        else:
+            if callPreParse and self.callPreparse:
+                preloc = self.preParse(instring, loc)
+            else:
+                preloc = loc
+            tokensStart = preloc
+            if self.mayIndexError or preloc >= len(instring):
+                try:
+                    loc, tokens = self.parseImpl(instring, preloc, doActions)
+                except IndexError:
+                    raise ParseException(instring, len(instring), self.errmsg, self)
+            else:
+                loc, tokens = self.parseImpl(instring, preloc, doActions)
+
+        tokens = self.postParse(instring, loc, tokens)
+
+        retTokens = ParseResults(tokens, self.resultsName, asList=self.saveAsList, modal=self.modalResults)
+        if self.parseAction and (doActions or self.callDuringTry):
+            if debugging:
+                try:
+                    for fn in self.parseAction:
+                        try:
+                            tokens = fn(instring, tokensStart, retTokens)
+                        except IndexError as parse_action_exc:
+                            exc = ParseException("exception raised in parse action")
+                            exc.__cause__ = parse_action_exc
+                            raise exc
+
+                        if tokens is not None and tokens is not retTokens:
+                            retTokens = ParseResults(tokens,
+                                                      self.resultsName,
+                                                      asList=self.saveAsList and isinstance(tokens, (ParseResults, list)),
+                                                      modal=self.modalResults)
+                except Exception as err:
+                    # ~ print "Exception raised in user parse action:", err
+                    if self.debugActions[FAIL]:
+                        self.debugActions[FAIL](instring, tokensStart, self, err)
+                    raise
+            else:
+                for fn in self.parseAction:
+                    try:
+                        tokens = fn(instring, tokensStart, retTokens)
+                    except IndexError as parse_action_exc:
+                        exc = ParseException("exception raised in parse action")
+                        exc.__cause__ = parse_action_exc
+                        raise exc
+
+                    if tokens is not None and tokens is not retTokens:
+                        retTokens = ParseResults(tokens,
+                                                  self.resultsName,
+                                                  asList=self.saveAsList and isinstance(tokens, (ParseResults, list)),
+                                                  modal=self.modalResults)
+        if debugging:
+            # ~ print ("Matched", self, "->", retTokens.asList())
+            if self.debugActions[MATCH]:
+                self.debugActions[MATCH](instring, tokensStart, loc, self, retTokens)
+
+        return loc, retTokens
+
+    def tryParse(self, instring, loc):
+        try:
+            return self._parse(instring, loc, doActions=False)[0]
+        except ParseFatalException:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+    def canParseNext(self, instring, loc):
+        try:
+            self.tryParse(instring, loc)
+        except (ParseException, IndexError):
+            return False
+        else:
+            return True
+
+    class _UnboundedCache(object):
+        def __init__(self):
+            cache = {}
+            self.not_in_cache = not_in_cache = object()
+
+            def get(self, key):
+                return cache.get(key, not_in_cache)
+
+            def set(self, key, value):
+                cache[key] = value
+
+            def clear(self):
+                cache.clear()
+
+            def cache_len(self):
+                return len(cache)
+
+            self.get = types.MethodType(get, self)
+            self.set = types.MethodType(set, self)
+            self.clear = types.MethodType(clear, self)
+            self.__len__ = types.MethodType(cache_len, self)
+
+    if _OrderedDict is not None:
+        class _FifoCache(object):
+            def __init__(self, size):
+                self.not_in_cache = not_in_cache = object()
+
+                cache = _OrderedDict()
+
+                def get(self, key):
+                    return cache.get(key, not_in_cache)
+
+                def set(self, key, value):
+                    cache[key] = value
+                    while len(cache) > size:
+                        try:
+                            cache.popitem(False)
+                        except KeyError:
+                            pass
+
+                def clear(self):
+                    cache.clear()
+
+                def cache_len(self):
+                    return len(cache)
+
+                self.get = types.MethodType(get, self)
+                self.set = types.MethodType(set, self)
+                self.clear = types.MethodType(clear, self)
+                self.__len__ = types.MethodType(cache_len, self)
+
+    else:
+        class _FifoCache(object):
+            def __init__(self, size):
+                self.not_in_cache = not_in_cache = object()
+
+                cache = {}
+                key_fifo = collections.deque([], size)
+
+                def get(self, key):
+                    return cache.get(key, not_in_cache)
+
+                def set(self, key, value):
+                    cache[key] = value
+                    while len(key_fifo) > size:
+                        cache.pop(key_fifo.popleft(), None)
+                    key_fifo.append(key)
+
+                def clear(self):
+                    cache.clear()
+                    key_fifo.clear()
+
+                def cache_len(self):
+                    return len(cache)
+
+                self.get = types.MethodType(get, self)
+                self.set = types.MethodType(set, self)
+                self.clear = types.MethodType(clear, self)
+                self.__len__ = types.MethodType(cache_len, self)
+
+    # argument cache for optimizing repeated calls when backtracking through recursive expressions
+    packrat_cache = {} # this is set later by enabledPackrat(); this is here so that resetCache() doesn't fail
+    packrat_cache_lock = RLock()
+    packrat_cache_stats = [0, 0]
+
+    # this method gets repeatedly called during backtracking with the same arguments -
+    # we can cache these arguments and save ourselves the trouble of re-parsing the contained expression
+    def _parseCache(self, instring, loc, doActions=True, callPreParse=True):
+        HIT, MISS = 0, 1
+        lookup = (self, instring, loc, callPreParse, doActions)
+        with ParserElement.packrat_cache_lock:
+            cache = ParserElement.packrat_cache
+            value = cache.get(lookup)
+            if value is cache.not_in_cache:
+                ParserElement.packrat_cache_stats[MISS] += 1
+                try:
+                    value = self._parseNoCache(instring, loc, doActions, callPreParse)
+                except ParseBaseException as pe:
+                    # cache a copy of the exception, without the traceback
+                    cache.set(lookup, pe.__class__(*pe.args))
+                    raise
+                else:
+                    cache.set(lookup, (value[0], value[1].copy()))
+                    return value
+            else:
+                ParserElement.packrat_cache_stats[HIT] += 1
+                if isinstance(value, Exception):
+                    raise value
+                return value[0], value[1].copy()
+
+    _parse = _parseNoCache
+
+    @staticmethod
+    def resetCache():
+        ParserElement.packrat_cache.clear()
+        ParserElement.packrat_cache_stats[:] = [0] * len(ParserElement.packrat_cache_stats)
+
+    _packratEnabled = False
+    @staticmethod
+    def enablePackrat(cache_size_limit=128):
+        """Enables "packrat" parsing, which adds memoizing to the parsing logic.
+           Repeated parse attempts at the same string location (which happens
+           often in many complex grammars) can immediately return a cached value,
+           instead of re-executing parsing/validating code.  Memoizing is done of
+           both valid results and parsing exceptions.
+
+           Parameters:
+
+           - cache_size_limit - (default= ``128``) - if an integer value is provided
+             will limit the size of the packrat cache; if None is passed, then
+             the cache size will be unbounded; if 0 is passed, the cache will
+             be effectively disabled.
+
+           This speedup may break existing programs that use parse actions that
+           have side-effects.  For this reason, packrat parsing is disabled when
+           you first import pyparsing.  To activate the packrat feature, your
+           program must call the class method :class:`ParserElement.enablePackrat`.
+           For best results, call ``enablePackrat()`` immediately after
+           importing pyparsing.
+
+           Example::
+
+               import pyparsing
+               pyparsing.ParserElement.enablePackrat()
+        """
+        if not ParserElement._packratEnabled:
+            ParserElement._packratEnabled = True
+            if cache_size_limit is None:
+                ParserElement.packrat_cache = ParserElement._UnboundedCache()
+            else:
+                ParserElement.packrat_cache = ParserElement._FifoCache(cache_size_limit)
+            ParserElement._parse = ParserElement._parseCache
+
+    def parseString(self, instring, parseAll=False):
+        """
+        Execute the parse expression with the given string.
+        This is the main interface to the client code, once the complete
+        expression has been built.
+
+        Returns the parsed data as a :class:`ParseResults` object, which may be
+        accessed as a list, or as a dict or object with attributes if the given parser
+        includes results names.
+
+        If you want the grammar to require that the entire input string be
+        successfully parsed, then set ``parseAll`` to True (equivalent to ending
+        the grammar with ``StringEnd()``).
+
+        Note: ``parseString`` implicitly calls ``expandtabs()`` on the input string,
+        in order to report proper column numbers in parse actions.
+        If the input string contains tabs and
+        the grammar uses parse actions that use the ``loc`` argument to index into the
+        string being parsed, you can ensure you have a consistent view of the input
+        string by:
+
+        - calling ``parseWithTabs`` on your grammar before calling ``parseString``
+          (see :class:`parseWithTabs`)
+        - define your parse action using the full ``(s, loc, toks)`` signature, and
+          reference the input string using the parse action's ``s`` argument
+        - explictly expand the tabs in your input string before calling
+          ``parseString``
+
+        Example::
+
+            Word('a').parseString('aaaaabaaa')  # -> ['aaaaa']
+            Word('a').parseString('aaaaabaaa', parseAll=True)  # -> Exception: Expected end of text
+        """
+        ParserElement.resetCache()
+        if not self.streamlined:
+            self.streamline()
+            # ~ self.saveAsList = True
+        for e in self.ignoreExprs:
+            e.streamline()
+        if not self.keepTabs:
+            instring = instring.expandtabs()
+        try:
+            loc, tokens = self._parse(instring, 0)
+            if parseAll:
+                loc = self.preParse(instring, loc)
+                se = Empty() + StringEnd()
+                se._parse(instring, loc)
+        except ParseBaseException as exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clearing out pyparsing internal stack trace
+                if getattr(exc, '__traceback__', None) is not None:
+                    exc.__traceback__ = self._trim_traceback(exc.__traceback__)
+                raise exc
+        else:
+            return tokens
+
+    def scanString(self, instring, maxMatches=_MAX_INT, overlap=False):
+        """
+        Scan the input string for expression matches.  Each match will return the
+        matching tokens, start location, and end location.  May be called with optional
+        ``maxMatches`` argument, to clip scanning after 'n' matches are found.  If
+        ``overlap`` is specified, then overlapping matches will be reported.
+
+        Note that the start and end locations are reported relative to the string
+        being parsed.  See :class:`parseString` for more information on parsing
+        strings with embedded tabs.
+
+        Example::
+
+            source = "sldjf123lsdjjkf345sldkjf879lkjsfd987"
+            print(source)
+            for tokens, start, end in Word(alphas).scanString(source):
+                print(' '*start + '^'*(end-start))
+                print(' '*start + tokens[0])
+
+        prints::
+
+            sldjf123lsdjjkf345sldkjf879lkjsfd987
+            ^^^^^
+            sldjf
+                    ^^^^^^^
+                    lsdjjkf
+                              ^^^^^^
+                              sldkjf
+                                       ^^^^^^
+                                       lkjsfd
+        """
+        if not self.streamlined:
+            self.streamline()
+        for e in self.ignoreExprs:
+            e.streamline()
+
+        if not self.keepTabs:
+            instring = _ustr(instring).expandtabs()
+        instrlen = len(instring)
+        loc = 0
+        preparseFn = self.preParse
+        parseFn = self._parse
+        ParserElement.resetCache()
+        matches = 0
+        try:
+            while loc <= instrlen and matches < maxMatches:
+                try:
+                    preloc = preparseFn(instring, loc)
+                    nextLoc, tokens = parseFn(instring, preloc, callPreParse=False)
+                except ParseException:
+                    loc = preloc + 1
+                else:
+                    if nextLoc > loc:
+                        matches += 1
+                        yield tokens, preloc, nextLoc
+                        if overlap:
+                            nextloc = preparseFn(instring, loc)
+                            if nextloc > loc:
+                                loc = nextLoc
+                            else:
+                                loc += 1
+                        else:
+                            loc = nextLoc
+                    else:
+                        loc = preloc + 1
+        except ParseBaseException as exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clearing out pyparsing internal stack trace
+                if getattr(exc, '__traceback__', None) is not None:
+                    exc.__traceback__ = self._trim_traceback(exc.__traceback__)
+                raise exc
+
+    def transformString(self, instring):
+        """
+        Extension to :class:`scanString`, to modify matching text with modified tokens that may
+        be returned from a parse action.  To use ``transformString``, define a grammar and
+        attach a parse action to it that modifies the returned token list.
+        Invoking ``transformString()`` on a target string will then scan for matches,
+        and replace the matched text patterns according to the logic in the parse
+        action.  ``transformString()`` returns the resulting transformed string.
+
+        Example::
+
+            wd = Word(alphas)
+            wd.setParseAction(lambda toks: toks[0].title())
+
+            print(wd.transformString("now is the winter of our discontent made glorious summer by this sun of york."))
+
+        prints::
+
+            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.
+        """
+        out = []
+        lastE = 0
+        # force preservation of <TAB>s, to minimize unwanted transformation of string, and to
+        # keep string locs straight between transformString and scanString
+        self.keepTabs = True
+        try:
+            for t, s, e in self.scanString(instring):
+                out.append(instring[lastE:s])
+                if t:
+                    if isinstance(t, ParseResults):
+                        out += t.asList()
+                    elif isinstance(t, list):
+                        out += t
+                    else:
+                        out.append(t)
+                lastE = e
+            out.append(instring[lastE:])
+            out = [o for o in out if o]
+            return "".join(map(_ustr, _flatten(out)))
+        except ParseBaseException as exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clearing out pyparsing internal stack trace
+                if getattr(exc, '__traceback__', None) is not None:
+                    exc.__traceback__ = self._trim_traceback(exc.__traceback__)
+                raise exc
+
+    def searchString(self, instring, maxMatches=_MAX_INT):
+        """
+        Another extension to :class:`scanString`, simplifying the access to the tokens found
+        to match the given parse expression.  May be called with optional
+        ``maxMatches`` argument, to clip searching after 'n' matches are found.
+
+        Example::
+
+            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters
+            cap_word = Word(alphas.upper(), alphas.lower())
+
+            print(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity"))
+
+            # the sum() builtin can be used to merge results into a single ParseResults object
+            print(sum(cap_word.searchString("More than Iron, more than Lead, more than Gold I need Electricity")))
+
+        prints::
+
+            [['More'], ['Iron'], ['Lead'], ['Gold'], ['I'], ['Electricity']]
+            ['More', 'Iron', 'Lead', 'Gold', 'I', 'Electricity']
+        """
+        try:
+            return ParseResults([t for t, s, e in self.scanString(instring, maxMatches)])
+        except ParseBaseException as exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clearing out pyparsing internal stack trace
+                if getattr(exc, '__traceback__', None) is not None:
+                    exc.__traceback__ = self._trim_traceback(exc.__traceback__)
+                raise exc
+
+    def split(self, instring, maxsplit=_MAX_INT, includeSeparators=False):
+        """
+        Generator method to split a string using the given expression as a separator.
+        May be called with optional ``maxsplit`` argument, to limit the number of splits;
+        and the optional ``includeSeparators`` argument (default= ``False``), if the separating
+        matching text should be included in the split results.
+
+        Example::
+
+            punc = oneOf(list(".,;:/-!?"))
+            print(list(punc.split("This, this?, this sentence, is badly punctuated!")))
+
+        prints::
+
+            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']
+        """
+        splits = 0
+        last = 0
+        for t, s, e in self.scanString(instring, maxMatches=maxsplit):
+            yield instring[last:s]
+            if includeSeparators:
+                yield t[0]
+            last = e
+        yield instring[last:]
+
+    def __add__(self, other):
+        """
+        Implementation of + operator - returns :class:`And`. Adding strings to a ParserElement
+        converts them to :class:`Literal`s by default.
+
+        Example::
+
+            greet = Word(alphas) + "," + Word(alphas) + "!"
+            hello = "Hello, World!"
+            print (hello, "->", greet.parseString(hello))
+
+        prints::
+
+            Hello, World! -> ['Hello', ',', 'World', '!']
+
+        ``...`` may be used as a parse expression as a short form of :class:`SkipTo`.
+
+            Literal('start') + ... + Literal('end')
+
+        is equivalent to:
+
+            Literal('start') + SkipTo('end')("_skipped*") + Literal('end')
+
+        Note that the skipped text is returned with '_skipped' as a results name,
+        and to support having multiple skips in the same parser, the value returned is
+        a list of all skipped text.
+        """
+        if other is Ellipsis:
+            return _PendingSkip(self)
+
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return And([self, other])
+
+    def __radd__(self, other):
+        """
+        Implementation of + operator when left operand is not a :class:`ParserElement`
+        """
+        if other is Ellipsis:
+            return SkipTo(self)("_skipped*") + self
+
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return other + self
+
+    def __sub__(self, other):
+        """
+        Implementation of - operator, returns :class:`And` with error stop
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return self + And._ErrorStop() + other
+
+    def __rsub__(self, other):
+        """
+        Implementation of - operator when left operand is not a :class:`ParserElement`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return other - self
+
+    def __mul__(self, other):
+        """
+        Implementation of * operator, allows use of ``expr * 3`` in place of
+        ``expr + expr + expr``.  Expressions may also me multiplied by a 2-integer
+        tuple, similar to ``{min, max}`` multipliers in regular expressions.  Tuples
+        may also include ``None`` as in:
+         - ``expr*(n, None)`` or ``expr*(n, )`` is equivalent
+              to ``expr*n + ZeroOrMore(expr)``
+              (read as "at least n instances of ``expr``")
+         - ``expr*(None, n)`` is equivalent to ``expr*(0, n)``
+              (read as "0 to n instances of ``expr``")
+         - ``expr*(None, None)`` is equivalent to ``ZeroOrMore(expr)``
+         - ``expr*(1, None)`` is equivalent to ``OneOrMore(expr)``
+
+        Note that ``expr*(None, n)`` does not raise an exception if
+        more than n exprs exist in the input stream; that is,
+        ``expr*(None, n)`` does not enforce a maximum number of expr
+        occurrences.  If this behavior is desired, then write
+        ``expr*(None, n) + ~expr``
+        """
+        if other is Ellipsis:
+            other = (0, None)
+        elif isinstance(other, tuple) and other[:1] == (Ellipsis,):
+            other = ((0, ) + other[1:] + (None,))[:2]
+
+        if isinstance(other, int):
+            minElements, optElements = other, 0
+        elif isinstance(other, tuple):
+            other = tuple(o if o is not Ellipsis else None for o in other)
+            other = (other + (None, None))[:2]
+            if other[0] is None:
+                other = (0, other[1])
+            if isinstance(other[0], int) and other[1] is None:
+                if other[0] == 0:
+                    return ZeroOrMore(self)
+                if other[0] == 1:
+                    return OneOrMore(self)
+                else:
+                    return self * other[0] + ZeroOrMore(self)
+            elif isinstance(other[0], int) and isinstance(other[1], int):
+                minElements, optElements = other
+                optElements -= minElements
+            else:
+                raise TypeError("cannot multiply 'ParserElement' and ('%s', '%s') objects", type(other[0]), type(other[1]))
+        else:
+            raise TypeError("cannot multiply 'ParserElement' and '%s' objects", type(other))
+
+        if minElements < 0:
+            raise ValueError("cannot multiply ParserElement by negative value")
+        if optElements < 0:
+            raise ValueError("second tuple value must be greater or equal to first tuple value")
+        if minElements == optElements == 0:
+            raise ValueError("cannot multiply ParserElement by 0 or (0, 0)")
+
+        if optElements:
+            def makeOptionalList(n):
+                if n > 1:
+                    return Optional(self + makeOptionalList(n - 1))
+                else:
+                    return Optional(self)
+            if minElements:
+                if minElements == 1:
+                    ret = self + makeOptionalList(optElements)
+                else:
+                    ret = And([self] * minElements) + makeOptionalList(optElements)
+            else:
+                ret = makeOptionalList(optElements)
+        else:
+            if minElements == 1:
+                ret = self
+            else:
+                ret = And([self] * minElements)
+        return ret
+
+    def __rmul__(self, other):
+        return self.__mul__(other)
+
+    def __or__(self, other):
+        """
+        Implementation of | operator - returns :class:`MatchFirst`
+        """
+        if other is Ellipsis:
+            return _PendingSkip(self, must_skip=True)
+
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return MatchFirst([self, other])
+
+    def __ror__(self, other):
+        """
+        Implementation of | operator when left operand is not a :class:`ParserElement`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return other | self
+
+    def __xor__(self, other):
+        """
+        Implementation of ^ operator - returns :class:`Or`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return Or([self, other])
+
+    def __rxor__(self, other):
+        """
+        Implementation of ^ operator when left operand is not a :class:`ParserElement`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return other ^ self
+
+    def __and__(self, other):
+        """
+        Implementation of & operator - returns :class:`Each`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return Each([self, other])
+
+    def __rand__(self, other):
+        """
+        Implementation of & operator when left operand is not a :class:`ParserElement`
+        """
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        if not isinstance(other, ParserElement):
+            warnings.warn("Cannot combine element of type %s with ParserElement" % type(other),
+                          SyntaxWarning, stacklevel=2)
+            return None
+        return other & self
+
+    def __invert__(self):
+        """
+        Implementation of ~ operator - returns :class:`NotAny`
+        """
+        return NotAny(self)
+
+    def __iter__(self):
+        # must implement __iter__ to override legacy use of sequential access to __getitem__ to
+        # iterate over a sequence
+        raise TypeError('%r object is not iterable' % self.__class__.__name__)
+
+    def __getitem__(self, key):
+        """
+        use ``[]`` indexing notation as a short form for expression repetition:
+         - ``expr[n]`` is equivalent to ``expr*n``
+         - ``expr[m, n]`` is equivalent to ``expr*(m, n)``
+         - ``expr[n, ...]`` or ``expr[n,]`` is equivalent
+              to ``expr*n + ZeroOrMore(expr)``
+              (read as "at least n instances of ``expr``")
+         - ``expr[..., n]`` is equivalent to ``expr*(0, n)``
+              (read as "0 to n instances of ``expr``")
+         - ``expr[...]`` and ``expr[0, ...]`` are equivalent to ``ZeroOrMore(expr)``
+         - ``expr[1, ...]`` is equivalent to ``OneOrMore(expr)``
+         ``None`` may be used in place of ``...``.
+
+        Note that ``expr[..., n]`` and ``expr[m, n]``do not raise an exception
+        if more than ``n`` ``expr``s exist in the input stream.  If this behavior is
+        desired, then write ``expr[..., n] + ~expr``.
+       """
+
+        # convert single arg keys to tuples
+        try:
+            if isinstance(key, str):
+                key = (key,)
+            iter(key)
+        except TypeError:
+            key = (key, key)
+
+        if len(key) > 2:
+            warnings.warn("only 1 or 2 index arguments supported ({0}{1})".format(key[:5],
+                                                                                '... [{0}]'.format(len(key))
+                                                                                if len(key) > 5 else ''))
+
+        # clip to 2 elements
+        ret = self * tuple(key[:2])
+        return ret
+
+    def __call__(self, name=None):
+        """
+        Shortcut for :class:`setResultsName`, with ``listAllMatches=False``.
+
+        If ``name`` is given with a trailing ``'*'`` character, then ``listAllMatches`` will be
+        passed as ``True``.
+
+        If ``name` is omitted, same as calling :class:`copy`.
+
+        Example::
+
+            # these are equivalent
+            userdata = Word(alphas).setResultsName("name") + Word(nums + "-").setResultsName("socsecno")
+            userdata = Word(alphas)("name") + Word(nums + "-")("socsecno")
+        """
+        if name is not None:
+            return self._setResultsName(name)
+        else:
+            return self.copy()
+
+    def suppress(self):
+        """
+        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from
+        cluttering up returned output.
+        """
+        return Suppress(self)
+
+    def leaveWhitespace(self):
+        """
+        Disables the skipping of whitespace before matching the characters in the
+        :class:`ParserElement`'s defined pattern.  This is normally only used internally by
+        the pyparsing module, but may be needed in some whitespace-sensitive grammars.
+        """
+        self.skipWhitespace = False
+        return self
+
+    def setWhitespaceChars(self, chars):
+        """
+        Overrides the default whitespace chars
+        """
+        self.skipWhitespace = True
+        self.whiteChars = chars
+        self.copyDefaultWhiteChars = False
+        return self
+
+    def parseWithTabs(self):
+        """
+        Overrides default behavior to expand ``<TAB>``s to spaces before parsing the input string.
+        Must be called before ``parseString`` when the input grammar contains elements that
+        match ``<TAB>`` characters.
+        """
+        self.keepTabs = True
+        return self
+
+    def ignore(self, other):
+        """
+        Define expression to be ignored (e.g., comments) while doing pattern
+        matching; may be called repeatedly, to define multiple comment or other
+        ignorable patterns.
+
+        Example::
+
+            patt = OneOrMore(Word(alphas))
+            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj']
+
+            patt.ignore(cStyleComment)
+            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj', 'lskjd']
+        """
+        if isinstance(other, basestring):
+            other = Suppress(other)
+
+        if isinstance(other, Suppress):
+            if other not in self.ignoreExprs:
+                self.ignoreExprs.append(other)
+        else:
+            self.ignoreExprs.append(Suppress(other.copy()))
+        return self
+
+    def setDebugActions(self, startAction, successAction, exceptionAction):
+        """
+        Enable display of debugging messages while doing pattern matching.
+        """
+        self.debugActions = (startAction or _defaultStartDebugAction,
+                             successAction or _defaultSuccessDebugAction,
+                             exceptionAction or _defaultExceptionDebugAction)
+        self.debug = True
+        return self
+
+    def setDebug(self, flag=True):
+        """
+        Enable display of debugging messages while doing pattern matching.
+        Set ``flag`` to True to enable, False to disable.
+
+        Example::
+
+            wd = Word(alphas).setName("alphaword")
+            integer = Word(nums).setName("numword")
+            term = wd | integer
+
+            # turn on debugging for wd
+            wd.setDebug()
+
+            OneOrMore(term).parseString("abc 123 xyz 890")
+
+        prints::
+
+            Match alphaword at loc 0(1,1)
+            Matched alphaword -> ['abc']
+            Match alphaword at loc 3(1,4)
+            Exception raised:Expected alphaword (at char 4), (line:1, col:5)
+            Match alphaword at loc 7(1,8)
+            Matched alphaword -> ['xyz']
+            Match alphaword at loc 11(1,12)
+            Exception raised:Expected alphaword (at char 12), (line:1, col:13)
+            Match alphaword at loc 15(1,16)
+            Exception raised:Expected alphaword (at char 15), (line:1, col:16)
+
+        The output shown is that produced by the default debug actions - custom debug actions can be
+        specified using :class:`setDebugActions`. Prior to attempting
+        to match the ``wd`` expression, the debugging message ``"Match <exprname> at loc <n>(<line>,<col>)"``
+        is shown. Then if the parse succeeds, a ``"Matched"`` message is shown, or an ``"Exception raised"``
+        message is shown. Also note the use of :class:`setName` to assign a human-readable name to the expression,
+        which makes debugging and exception messages easier to understand - for instance, the default
+        name created for the :class:`Word` expression without calling ``setName`` is ``"W:(ABCD...)"``.
+        """
+        if flag:
+            self.setDebugActions(_defaultStartDebugAction, _defaultSuccessDebugAction, _defaultExceptionDebugAction)
+        else:
+            self.debug = False
+        return self
+
+    def __str__(self):
+        return self.name
+
+    def __repr__(self):
+        return _ustr(self)
+
+    def streamline(self):
+        self.streamlined = True
+        self.strRepr = None
+        return self
+
+    def checkRecursion(self, parseElementList):
+        pass
+
+    def validate(self, validateTrace=None):
+        """
+        Check defined expressions for valid structure, check for infinite recursive definitions.
+        """
+        self.checkRecursion([])
+
+    def parseFile(self, file_or_filename, parseAll=False):
+        """
+        Execute the parse expression on the given file or filename.
+        If a filename is specified (instead of a file object),
+        the entire file is opened, read, and closed before parsing.
+        """
+        try:
+            file_contents = file_or_filename.read()
+        except AttributeError:
+            with open(file_or_filename, "r") as f:
+                file_contents = f.read()
+        try:
+            return self.parseString(file_contents, parseAll)
+        except ParseBaseException as exc:
+            if ParserElement.verbose_stacktrace:
+                raise
+            else:
+                # catch and re-raise exception from here, clearing out pyparsing internal stack trace
+                if getattr(exc, '__traceback__', None) is not None:
+                    exc.__traceback__ = self._trim_traceback(exc.__traceback__)
+                raise exc
+
+    def __eq__(self, other):
+        if self is other:
+            return True
+        elif isinstance(other, basestring):
+            return self.matches(other)
+        elif isinstance(other, ParserElement):
+            return vars(self) == vars(other)
+        return False
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __hash__(self):
+        return id(self)
+
+    def __req__(self, other):
+        return self == other
+
+    def __rne__(self, other):
+        return not (self == other)
+
+    def matches(self, testString, parseAll=True):
+        """
+        Method for quick testing of a parser against a test string. Good for simple
+        inline microtests of sub expressions while building up larger parser.
+
+        Parameters:
+         - testString - to test against this expression for a match
+         - parseAll - (default= ``True``) - flag to pass to :class:`parseString` when running tests
+
+        Example::
+
+            expr = Word(nums)
+            assert expr.matches("100")
+        """
+        try:
+            self.parseString(_ustr(testString), parseAll=parseAll)
+            return True
+        except ParseBaseException:
+            return False
+
+    def runTests(self, tests, parseAll=True, comment='#',
+                 fullDump=True, printResults=True, failureTests=False, postParse=None,
+                 file=None):
+        """
+        Execute the parse expression on a series of test strings, showing each
+        test, the parsed results or where the parse failed. Quick and easy way to
+        run a parse expression against a list of sample strings.
+
+        Parameters:
+         - tests - a list of separate test strings, or a multiline string of test strings
+         - parseAll - (default= ``True``) - flag to pass to :class:`parseString` when running tests
+         - comment - (default= ``'#'``) - expression for indicating embedded comments in the test
+              string; pass None to disable comment filtering
+         - fullDump - (default= ``True``) - dump results as list followed by results names in nested outline;
+              if False, only dump nested list
+         - printResults - (default= ``True``) prints test output to stdout
+         - failureTests - (default= ``False``) indicates if these tests are expected to fail parsing
+         - postParse - (default= ``None``) optional callback for successful parse results; called as
+              `fn(test_string, parse_results)` and returns a string to be added to the test output
+         - file - (default=``None``) optional file-like object to which test output will be written;
+              if None, will default to ``sys.stdout``
+
+        Returns: a (success, results) tuple, where success indicates that all tests succeeded
+        (or failed if ``failureTests`` is True), and the results contain a list of lines of each
+        test's output
+
+        Example::
+
+            number_expr = pyparsing_common.number.copy()
+
+            result = number_expr.runTests('''
+                # unsigned integer
+                100
+                # negative integer
+                -100
+                # float with scientific notation
+                6.02e23
+                # integer with scientific notation
+                1e-12
+                ''')
+            print("Success" if result[0] else "Failed!")
+
+            result = number_expr.runTests('''
+                # stray character
+                100Z
+                # missing leading digit before '.'
+                -.100
+                # too many '.'
+                3.14.159
+                ''', failureTests=True)
+            print("Success" if result[0] else "Failed!")
+
+        prints::
+
+            # unsigned integer
+            100
+            [100]
+
+            # negative integer
+            -100
+            [-100]
+
+            # float with scientific notation
+            6.02e23
+            [6.02e+23]
+
+            # integer with scientific notation
+            1e-12
+            [1e-12]
+
+            Success
+
+            # stray character
+            100Z
+               ^
+            FAIL: Expected end of text (at char 3), (line:1, col:4)
+
+            # missing leading digit before '.'
+            -.100
+            ^
+            FAIL: Expected {real number with scientific notation | real number | signed integer} (at char 0), (line:1, col:1)
+
+            # too many '.'
+            3.14.159
+                ^
+            FAIL: Expected end of text (at char 4), (line:1, col:5)
+
+            Success
+
+        Each test string must be on a single line. If you want to test a string that spans multiple
+        lines, create a test like this::
+
+            expr.runTest(r"this is a test\\n of strings that spans \\n 3 lines")
+
+        (Note that this is a raw string literal, you must include the leading 'r'.)
+        """
+        if isinstance(tests, basestring):
+            tests = list(map(str.strip, tests.rstrip().splitlines()))
+        if isinstance(comment, basestring):
+            comment = Literal(comment)
+        if file is None:
+            file = sys.stdout
+        print_ = file.write
+
+        allResults = []
+        comments = []
+        success = True
+        NL = Literal(r'\n').addParseAction(replaceWith('\n')).ignore(quotedString)
+        BOM = u'\ufeff'
+        for t in tests:
+            if comment is not None and comment.matches(t, False) or comments and not t:
+                comments.append(t)
+                continue
+            if not t:
+                continue
+            out = ['\n' + '\n'.join(comments) if comments else '', t]
+            comments = []
+            try:
+                # convert newline marks to actual newlines, and strip leading BOM if present
+                t = NL.transformString(t.lstrip(BOM))
+                result = self.parseString(t, parseAll=parseAll)
+            except ParseBaseException as pe:
+                fatal = "(FATAL)" if isinstance(pe, ParseFatalException) else ""
+                if '\n' in t:
+                    out.append(line(pe.loc, t))
+                    out.append(' ' * (col(pe.loc, t) - 1) + '^' + fatal)
+                else:
+                    out.append(' ' * pe.loc + '^' + fatal)
+                out.append("FAIL: " + str(pe))
+                success = success and failureTests
+                result = pe
+            except Exception as exc:
+                out.append("FAIL-EXCEPTION: " + str(exc))
+                success = success and failureTests
+                result = exc
+            else:
+                success = success and not failureTests
+                if postParse is not None:
+                    try:
+                        pp_value = postParse(t, result)
+                        if pp_value is not None:
+                            if isinstance(pp_value, ParseResults):
+                                out.append(pp_value.dump())
+                            else:
+                                out.append(str(pp_value))
+                        else:
+                            out.append(result.dump())
+                    except Exception as e:
+                        out.append(result.dump(full=fullDump))
+                        out.append("{0} failed: {1}: {2}".format(postParse.__name__, type(e).__name__, e))
+                else:
+                    out.append(result.dump(full=fullDump))
+
+            if printResults:
+                if fullDump:
+                    out.append('')
+                print_('\n'.join(out))
+
+            allResults.append((t, result))
+
+        return success, allResults
+
+
+class _PendingSkip(ParserElement):
+    # internal placeholder class to hold a place were '...' is added to a parser element,
+    # once another ParserElement is added, this placeholder will be replaced with a SkipTo
+    def __init__(self, expr, must_skip=False):
+        super(_PendingSkip, self).__init__()
+        self.strRepr = str(expr + Empty()).replace('Empty', '...')
+        self.name = self.strRepr
+        self.anchor = expr
+        self.must_skip = must_skip
+
+    def __add__(self, other):
+        skipper = SkipTo(other).setName("...")("_skipped*")
+        if self.must_skip:
+            def must_skip(t):
+                if not t._skipped or t._skipped.asList() == ['']:
+                    del t[0]
+                    t.pop("_skipped", None)
+            def show_skip(t):
+                if t._skipped.asList()[-1:] == ['']:
+                    skipped = t.pop('_skipped')
+                    t['_skipped'] = 'missing <' + repr(self.anchor) + '>'
+            return (self.anchor + skipper().addParseAction(must_skip)
+                    | skipper().addParseAction(show_skip)) + other
+
+        return self.anchor + skipper + other
+
+    def __repr__(self):
+        return self.strRepr
+
+    def parseImpl(self, *args):
+        raise Exception("use of `...` expression without following SkipTo target expression")
+
+
+class Token(ParserElement):
+    """Abstract :class:`ParserElement` subclass, for defining atomic
+    matching patterns.
+    """
+    def __init__(self):
+        super(Token, self).__init__(savelist=False)
+
+
+class Empty(Token):
+    """An empty token, will always match.
+    """
+    def __init__(self):
+        super(Empty, self).__init__()
+        self.name = "Empty"
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+
+
+class NoMatch(Token):
+    """A token that will never match.
+    """
+    def __init__(self):
+        super(NoMatch, self).__init__()
+        self.name = "NoMatch"
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+        self.errmsg = "Unmatchable token"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        raise ParseException(instring, loc, self.errmsg, self)
+
+
+class Literal(Token):
+    """Token to exactly match a specified string.
+
+    Example::
+
+        Literal('blah').parseString('blah')  # -> ['blah']
+        Literal('blah').parseString('blahfooblah')  # -> ['blah']
+        Literal('blah').parseString('bla')  # -> Exception: Expected "blah"
+
+    For case-insensitive matching, use :class:`CaselessLiteral`.
+
+    For keyword matching (force word break before and after the matched string),
+    use :class:`Keyword` or :class:`CaselessKeyword`.
+    """
+    def __init__(self, matchString):
+        super(Literal, self).__init__()
+        self.match = matchString
+        self.matchLen = len(matchString)
+        try:
+            self.firstMatchChar = matchString[0]
+        except IndexError:
+            warnings.warn("null string passed to Literal; use Empty() instead",
+                            SyntaxWarning, stacklevel=2)
+            self.__class__ = Empty
+        self.name = '"%s"' % _ustr(self.match)
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = False
+        self.mayIndexError = False
+
+        # Performance tuning: modify __class__ to select
+        # a parseImpl optimized for single-character check
+        if self.matchLen == 1 and type(self) is Literal:
+            self.__class__ = _SingleCharLiteral
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc] == self.firstMatchChar and instring.startswith(self.match, loc):
+            return loc + self.matchLen, self.match
+        raise ParseException(instring, loc, self.errmsg, self)
+
+class _SingleCharLiteral(Literal):
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc] == self.firstMatchChar:
+            return loc + 1, self.match
+        raise ParseException(instring, loc, self.errmsg, self)
+
+_L = Literal
+ParserElement._literalStringClass = Literal
+
+class Keyword(Token):
+    """Token to exactly match a specified string as a keyword, that is,
+    it must be immediately followed by a non-keyword character.  Compare
+    with :class:`Literal`:
+
+     - ``Literal("if")`` will match the leading ``'if'`` in
+       ``'ifAndOnlyIf'``.
+     - ``Keyword("if")`` will not; it will only match the leading
+       ``'if'`` in ``'if x=1'``, or ``'if(y==2)'``
+
+    Accepts two optional constructor arguments in addition to the
+    keyword string:
+
+     - ``identChars`` is a string of characters that would be valid
+       identifier characters, defaulting to all alphanumerics + "_" and
+       "$"
+     - ``caseless`` allows case-insensitive matching, default is ``False``.
+
+    Example::
+
+        Keyword("start").parseString("start")  # -> ['start']
+        Keyword("start").parseString("starting")  # -> Exception
+
+    For case-insensitive matching, use :class:`CaselessKeyword`.
+    """
+    DEFAULT_KEYWORD_CHARS = alphanums + "_$"
+
+    def __init__(self, matchString, identChars=None, caseless=False):
+        super(Keyword, self).__init__()
+        if identChars is None:
+            identChars = Keyword.DEFAULT_KEYWORD_CHARS
+        self.match = matchString
+        self.matchLen = len(matchString)
+        try:
+            self.firstMatchChar = matchString[0]
+        except IndexError:
+            warnings.warn("null string passed to Keyword; use Empty() instead",
+                          SyntaxWarning, stacklevel=2)
+        self.name = '"%s"' % self.match
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = False
+        self.mayIndexError = False
+        self.caseless = caseless
+        if caseless:
+            self.caselessmatch = matchString.upper()
+            identChars = identChars.upper()
+        self.identChars = set(identChars)
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if self.caseless:
+            if ((instring[loc:loc + self.matchLen].upper() == self.caselessmatch)
+                    and (loc >= len(instring) - self.matchLen
+                         or instring[loc + self.matchLen].upper() not in self.identChars)
+                    and (loc == 0
+                         or instring[loc - 1].upper() not in self.identChars)):
+                return loc + self.matchLen, self.match
+
+        else:
+            if instring[loc] == self.firstMatchChar:
+                if ((self.matchLen == 1 or instring.startswith(self.match, loc))
+                        and (loc >= len(instring) - self.matchLen
+                             or instring[loc + self.matchLen] not in self.identChars)
+                        and (loc == 0 or instring[loc - 1] not in self.identChars)):
+                    return loc + self.matchLen, self.match
+
+        raise ParseException(instring, loc, self.errmsg, self)
+
+    def copy(self):
+        c = super(Keyword, self).copy()
+        c.identChars = Keyword.DEFAULT_KEYWORD_CHARS
+        return c
+
+    @staticmethod
+    def setDefaultKeywordChars(chars):
+        """Overrides the default Keyword chars
+        """
+        Keyword.DEFAULT_KEYWORD_CHARS = chars
+
+class CaselessLiteral(Literal):
+    """Token to match a specified string, ignoring case of letters.
+    Note: the matched results will always be in the case of the given
+    match string, NOT the case of the input text.
+
+    Example::
+
+        OneOrMore(CaselessLiteral("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD', 'CMD']
+
+    (Contrast with example for :class:`CaselessKeyword`.)
+    """
+    def __init__(self, matchString):
+        super(CaselessLiteral, self).__init__(matchString.upper())
+        # Preserve the defining literal.
+        self.returnString = matchString
+        self.name = "'%s'" % self.returnString
+        self.errmsg = "Expected " + self.name
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc:loc + self.matchLen].upper() == self.match:
+            return loc + self.matchLen, self.returnString
+        raise ParseException(instring, loc, self.errmsg, self)
+
+class CaselessKeyword(Keyword):
+    """
+    Caseless version of :class:`Keyword`.
+
+    Example::
+
+        OneOrMore(CaselessKeyword("CMD")).parseString("cmd CMD Cmd10") # -> ['CMD', 'CMD']
+
+    (Contrast with example for :class:`CaselessLiteral`.)
+    """
+    def __init__(self, matchString, identChars=None):
+        super(CaselessKeyword, self).__init__(matchString, identChars, caseless=True)
+
+class CloseMatch(Token):
+    """A variation on :class:`Literal` which matches "close" matches,
+    that is, strings with at most 'n' mismatching characters.
+    :class:`CloseMatch` takes parameters:
+
+     - ``match_string`` - string to be matched
+     - ``maxMismatches`` - (``default=1``) maximum number of
+       mismatches allowed to count as a match
+
+    The results from a successful parse will contain the matched text
+    from the input string and the following named results:
+
+     - ``mismatches`` - a list of the positions within the
+       match_string where mismatches were found
+     - ``original`` - the original match_string used to compare
+       against the input string
+
+    If ``mismatches`` is an empty list, then the match was an exact
+    match.
+
+    Example::
+
+        patt = CloseMatch("ATCATCGAATGGA")
+        patt.parseString("ATCATCGAAXGGA") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
+        patt.parseString("ATCAXCGAAXGGA") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)
+
+        # exact match
+        patt.parseString("ATCATCGAATGGA") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})
+
+        # close match allowing up to 2 mismatches
+        patt = CloseMatch("ATCATCGAATGGA", maxMismatches=2)
+        patt.parseString("ATCAXCGAAXGGA") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
+    """
+    def __init__(self, match_string, maxMismatches=1):
+        super(CloseMatch, self).__init__()
+        self.name = match_string
+        self.match_string = match_string
+        self.maxMismatches = maxMismatches
+        self.errmsg = "Expected %r (with up to %d mismatches)" % (self.match_string, self.maxMismatches)
+        self.mayIndexError = False
+        self.mayReturnEmpty = False
+
+    def parseImpl(self, instring, loc, doActions=True):
+        start = loc
+        instrlen = len(instring)
+        maxloc = start + len(self.match_string)
+
+        if maxloc <= instrlen:
+            match_string = self.match_string
+            match_stringloc = 0
+            mismatches = []
+            maxMismatches = self.maxMismatches
+
+            for match_stringloc, s_m in enumerate(zip(instring[loc:maxloc], match_string)):
+                src, mat = s_m
+                if src != mat:
+                    mismatches.append(match_stringloc)
+                    if len(mismatches) > maxMismatches:
+                        break
+            else:
+                loc = match_stringloc + 1
+                results = ParseResults([instring[start:loc]])
+                results['original'] = match_string
+                results['mismatches'] = mismatches
+                return loc, results
+
+        raise ParseException(instring, loc, self.errmsg, self)
+
+
+class Word(Token):
+    """Token for matching words composed of allowed character sets.
+    Defined with string containing all allowed initial characters, an
+    optional string containing allowed body characters (if omitted,
+    defaults to the initial character set), and an optional minimum,
+    maximum, and/or exact length.  The default value for ``min`` is
+    1 (a minimum value < 1 is not valid); the default values for
+    ``max`` and ``exact`` are 0, meaning no maximum or exact
+    length restriction. An optional ``excludeChars`` parameter can
+    list characters that might be found in the input ``bodyChars``
+    string; useful to define a word of all printables except for one or
+    two characters, for instance.
+
+    :class:`srange` is useful for defining custom character set strings
+    for defining ``Word`` expressions, using range notation from
+    regular expression character sets.
+
+    A common mistake is to use :class:`Word` to match a specific literal
+    string, as in ``Word("Address")``. Remember that :class:`Word`
+    uses the string argument to define *sets* of matchable characters.
+    This expression would match "Add", "AAA", "dAred", or any other word
+    made up of the characters 'A', 'd', 'r', 'e', and 's'. To match an
+    exact literal string, use :class:`Literal` or :class:`Keyword`.
+
+    pyparsing includes helper strings for building Words:
+
+     - :class:`alphas`
+     - :class:`nums`
+     - :class:`alphanums`
+     - :class:`hexnums`
+     - :class:`alphas8bit` (alphabetic characters in ASCII range 128-255
+       - accented, tilded, umlauted, etc.)
+     - :class:`punc8bit` (non-alphabetic characters in ASCII range
+       128-255 - currency, symbols, superscripts, diacriticals, etc.)
+     - :class:`printables` (any non-whitespace character)
+
+    Example::
+
+        # a word composed of digits
+        integer = Word(nums) # equivalent to Word("0123456789") or Word(srange("0-9"))
+
+        # a word with a leading capital, and zero or more lowercase
+        capital_word = Word(alphas.upper(), alphas.lower())
+
+        # hostnames are alphanumeric, with leading alpha, and '-'
+        hostname = Word(alphas, alphanums + '-')
+
+        # roman numeral (not a strict parser, accepts invalid mix of characters)
+        roman = Word("IVXLCDM")
+
+        # any string of non-whitespace characters, except for ','
+        csv_value = Word(printables, excludeChars=",")
+    """
+    def __init__(self, initChars, bodyChars=None, min=1, max=0, exact=0, asKeyword=False, excludeChars=None):
+        super(Word, self).__init__()
+        if excludeChars:
+            excludeChars = set(excludeChars)
+            initChars = ''.join(c for c in initChars if c not in excludeChars)
+            if bodyChars:
+                bodyChars = ''.join(c for c in bodyChars if c not in excludeChars)
+        self.initCharsOrig = initChars
+        self.initChars = set(initChars)
+        if bodyChars:
+            self.bodyCharsOrig = bodyChars
+            self.bodyChars = set(bodyChars)
+        else:
+            self.bodyCharsOrig = initChars
+            self.bodyChars = set(initChars)
+
+        self.maxSpecified = max > 0
+
+        if min < 1:
+            raise ValueError("cannot specify a minimum length < 1; use Optional(Word()) if zero-length word is permitted")
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.asKeyword = asKeyword
+
+        if ' ' not in self.initCharsOrig + self.bodyCharsOrig and (min == 1 and max == 0 and exact == 0):
+            if self.bodyCharsOrig == self.initCharsOrig:
+                self.reString = "[%s]+" % _escapeRegexRangeChars(self.initCharsOrig)
+            elif len(self.initCharsOrig) == 1:
+                self.reString = "%s[%s]*" % (re.escape(self.initCharsOrig),
+                                             _escapeRegexRangeChars(self.bodyCharsOrig),)
+            else:
+                self.reString = "[%s][%s]*" % (_escapeRegexRangeChars(self.initCharsOrig),
+                                               _escapeRegexRangeChars(self.bodyCharsOrig),)
+            if self.asKeyword:
+                self.reString = r"\b" + self.reString + r"\b"
+
+            try:
+                self.re = re.compile(self.reString)
+            except Exception:
+                self.re = None
+            else:
+                self.re_match = self.re.match
+                self.__class__ = _WordRegex
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc] not in self.initChars:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        start = loc
+        loc += 1
+        instrlen = len(instring)
+        bodychars = self.bodyChars
+        maxloc = start + self.maxLen
+        maxloc = min(maxloc, instrlen)
+        while loc < maxloc and instring[loc] in bodychars:
+            loc += 1
+
+        throwException = False
+        if loc - start < self.minLen:
+            throwException = True
+        elif self.maxSpecified and loc < instrlen and instring[loc] in bodychars:
+            throwException = True
+        elif self.asKeyword:
+            if (start > 0 and instring[start - 1] in bodychars
+                    or loc < instrlen and instring[loc] in bodychars):
+                throwException = True
+
+        if throwException:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        return loc, instring[start:loc]
+
+    def __str__(self):
+        try:
+            return super(Word, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None:
+
+            def charsAsStr(s):
+                if len(s) > 4:
+                    return s[:4] + "..."
+                else:
+                    return s
+
+            if self.initCharsOrig != self.bodyCharsOrig:
+                self.strRepr = "W:(%s, %s)" % (charsAsStr(self.initCharsOrig), charsAsStr(self.bodyCharsOrig))
+            else:
+                self.strRepr = "W:(%s)" % charsAsStr(self.initCharsOrig)
+
+        return self.strRepr
+
+class _WordRegex(Word):
+    def parseImpl(self, instring, loc, doActions=True):
+        result = self.re_match(instring, loc)
+        if not result:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        loc = result.end()
+        return loc, result.group()
+
+
+class Char(_WordRegex):
+    """A short-cut class for defining ``Word(characters, exact=1)``,
+    when defining a match of any single character in a string of
+    characters.
+    """
+    def __init__(self, charset, asKeyword=False, excludeChars=None):
+        super(Char, self).__init__(charset, exact=1, asKeyword=asKeyword, excludeChars=excludeChars)
+        self.reString = "[%s]" % _escapeRegexRangeChars(''.join(self.initChars))
+        if asKeyword:
+            self.reString = r"\b%s\b" % self.reString
+        self.re = re.compile(self.reString)
+        self.re_match = self.re.match
+
+
+class Regex(Token):
+    r"""Token for matching strings that match a given regular
+    expression. Defined with string specifying the regular expression in
+    a form recognized by the stdlib Python  `re module <https://docs.python.org/3/library/re.html>`_.
+    If the given regex contains named groups (defined using ``(?P<name>...)``),
+    these will be preserved as named parse results.
+
+    If instead of the Python stdlib re module you wish to use a different RE module
+    (such as the `regex` module), you can replace it by either building your
+    Regex object with a compiled RE that was compiled using regex:
+
+    Example::
+
+        realnum = Regex(r"[+-]?\d+\.\d*")
+        date = Regex(r'(?P<year>\d{4})-(?P<month>\d\d?)-(?P<day>\d\d?)')
+        # ref: https://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
+        roman = Regex(r"M{0,4}(CM|CD|D?{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})")
+
+        # use regex module instead of stdlib re module to construct a Regex using
+        # a compiled regular expression
+        import regex
+        parser = pp.Regex(regex.compile(r'[0-9]'))
+
+    """
+    def __init__(self, pattern, flags=0, asGroupList=False, asMatch=False):
+        """The parameters ``pattern`` and ``flags`` are passed
+        to the ``re.compile()`` function as-is. See the Python
+        `re module <https://docs.python.org/3/library/re.html>`_ module for an
+        explanation of the acceptable patterns and flags.
+        """
+        super(Regex, self).__init__()
+
+        if isinstance(pattern, basestring):
+            if not pattern:
+                warnings.warn("null string passed to Regex; use Empty() instead",
+                              SyntaxWarning, stacklevel=2)
+
+            self.pattern = pattern
+            self.flags = flags
+
+            try:
+                self.re = re.compile(self.pattern, self.flags)
+                self.reString = self.pattern
+            except sre_constants.error:
+                warnings.warn("invalid pattern (%s) passed to Regex" % pattern,
+                              SyntaxWarning, stacklevel=2)
+                raise
+
+        elif hasattr(pattern, 'pattern') and hasattr(pattern, 'match'):
+            self.re = pattern
+            self.pattern = self.reString = pattern.pattern
+            self.flags = flags
+
+        else:
+            raise TypeError("Regex may only be constructed with a string or a compiled RE object")
+
+        self.re_match = self.re.match
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.mayReturnEmpty = self.re_match("") is not None
+        self.asGroupList = asGroupList
+        self.asMatch = asMatch
+        if self.asGroupList:
+            self.parseImpl = self.parseImplAsGroupList
+        if self.asMatch:
+            self.parseImpl = self.parseImplAsMatch
+
+    def parseImpl(self, instring, loc, doActions=True):
+        result = self.re_match(instring, loc)
+        if not result:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        loc = result.end()
+        ret = ParseResults(result.group())
+        d = result.groupdict()
+        if d:
+            for k, v in d.items():
+                ret[k] = v
+        return loc, ret
+
+    def parseImplAsGroupList(self, instring, loc, doActions=True):
+        result = self.re_match(instring, loc)
+        if not result:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        loc = result.end()
+        ret = result.groups()
+        return loc, ret
+
+    def parseImplAsMatch(self, instring, loc, doActions=True):
+        result = self.re_match(instring, loc)
+        if not result:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        loc = result.end()
+        ret = result
+        return loc, ret
+
+    def __str__(self):
+        try:
+            return super(Regex, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "Re:(%s)" % repr(self.pattern)
+
+        return self.strRepr
+
+    def sub(self, repl):
+        r"""
+        Return Regex with an attached parse action to transform the parsed
+        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.
+
+        Example::
+
+            make_html = Regex(r"(\w+):(.*?):").sub(r"<\1>\2</\1>")
+            print(make_html.transformString("h1:main title:"))
+            # prints "<h1>main title</h1>"
+        """
+        if self.asGroupList:
+            warnings.warn("cannot use sub() with Regex(asGroupList=True)",
+                          SyntaxWarning, stacklevel=2)
+            raise SyntaxError()
+
+        if self.asMatch and callable(repl):
+            warnings.warn("cannot use sub() with a callable with Regex(asMatch=True)",
+                          SyntaxWarning, stacklevel=2)
+            raise SyntaxError()
+
+        if self.asMatch:
+            def pa(tokens):
+                return tokens[0].expand(repl)
+        else:
+            def pa(tokens):
+                return self.re.sub(repl, tokens[0])
+        return self.addParseAction(pa)
+
+class QuotedString(Token):
+    r"""
+    Token for matching strings that are delimited by quoting characters.
+
+    Defined with the following parameters:
+
+        - quoteChar - string of one or more characters defining the
+          quote delimiting string
+        - escChar - character to escape quotes, typically backslash
+          (default= ``None``)
+        - escQuote - special quote sequence to escape an embedded quote
+          string (such as SQL's ``""`` to escape an embedded ``"``)
+          (default= ``None``)
+        - multiline - boolean indicating whether quotes can span
+          multiple lines (default= ``False``)
+        - unquoteResults - boolean indicating whether the matched text
+          should be unquoted (default= ``True``)
+        - endQuoteChar - string of one or more characters defining the
+          end of the quote delimited string (default= ``None``  => same as
+          quoteChar)
+        - convertWhitespaceEscapes - convert escaped whitespace
+          (``'\t'``, ``'\n'``, etc.) to actual whitespace
+          (default= ``True``)
+
+    Example::
+
+        qs = QuotedString('"')
+        print(qs.searchString('lsjdf "This is the quote" sldjf'))
+        complex_qs = QuotedString('{{', endQuoteChar='}}')
+        print(complex_qs.searchString('lsjdf {{This is the "quote"}} sldjf'))
+        sql_qs = QuotedString('"', escQuote='""')
+        print(sql_qs.searchString('lsjdf "This is the quote with ""embedded"" quotes" sldjf'))
+
+    prints::
+
+        [['This is the quote']]
+        [['This is the "quote"']]
+        [['This is the quote with "embedded" quotes']]
+    """
+    def __init__(self, quoteChar, escChar=None, escQuote=None, multiline=False,
+                 unquoteResults=True, endQuoteChar=None, convertWhitespaceEscapes=True):
+        super(QuotedString, self).__init__()
+
+        # remove white space from quote chars - wont work anyway
+        quoteChar = quoteChar.strip()
+        if not quoteChar:
+            warnings.warn("quoteChar cannot be the empty string", SyntaxWarning, stacklevel=2)
+            raise SyntaxError()
+
+        if endQuoteChar is None:
+            endQuoteChar = quoteChar
+        else:
+            endQuoteChar = endQuoteChar.strip()
+            if not endQuoteChar:
+                warnings.warn("endQuoteChar cannot be the empty string", SyntaxWarning, stacklevel=2)
+                raise SyntaxError()
+
+        self.quoteChar = quoteChar
+        self.quoteCharLen = len(quoteChar)
+        self.firstQuoteChar = quoteChar[0]
+        self.endQuoteChar = endQuoteChar
+        self.endQuoteCharLen = len(endQuoteChar)
+        self.escChar = escChar
+        self.escQuote = escQuote
+        self.unquoteResults = unquoteResults
+        self.convertWhitespaceEscapes = convertWhitespaceEscapes
+
+        if multiline:
+            self.flags = re.MULTILINE | re.DOTALL
+            self.pattern = r'%s(?:[^%s%s]' % (re.escape(self.quoteChar),
+                                              _escapeRegexRangeChars(self.endQuoteChar[0]),
+                                              (escChar is not None and _escapeRegexRangeChars(escChar) or ''))
+        else:
+            self.flags = 0
+            self.pattern = r'%s(?:[^%s\n\r%s]' % (re.escape(self.quoteChar),
+                                                  _escapeRegexRangeChars(self.endQuoteChar[0]),
+                                                  (escChar is not None and _escapeRegexRangeChars(escChar) or ''))
+        if len(self.endQuoteChar) > 1:
+            self.pattern += (
+                '|(?:' + ')|(?:'.join("%s[^%s]" % (re.escape(self.endQuoteChar[:i]),
+                                                   _escapeRegexRangeChars(self.endQuoteChar[i]))
+                                      for i in range(len(self.endQuoteChar) - 1, 0, -1)) + ')')
+
+        if escQuote:
+            self.pattern += (r'|(?:%s)' % re.escape(escQuote))
+        if escChar:
+            self.pattern += (r'|(?:%s.)' % re.escape(escChar))
+            self.escCharReplacePattern = re.escape(self.escChar) + "(.)"
+        self.pattern += (r')*%s' % re.escape(self.endQuoteChar))
+
+        try:
+            self.re = re.compile(self.pattern, self.flags)
+            self.reString = self.pattern
+            self.re_match = self.re.match
+        except sre_constants.error:
+            warnings.warn("invalid pattern (%s) passed to Regex" % self.pattern,
+                          SyntaxWarning, stacklevel=2)
+            raise
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayIndexError = False
+        self.mayReturnEmpty = True
+
+    def parseImpl(self, instring, loc, doActions=True):
+        result = instring[loc] == self.firstQuoteChar and self.re_match(instring, loc) or None
+        if not result:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        loc = result.end()
+        ret = result.group()
+
+        if self.unquoteResults:
+
+            # strip off quotes
+            ret = ret[self.quoteCharLen: -self.endQuoteCharLen]
+
+            if isinstance(ret, basestring):
+                # replace escaped whitespace
+                if '\\' in ret and self.convertWhitespaceEscapes:
+                    ws_map = {
+                        r'\t': '\t',
+                        r'\n': '\n',
+                        r'\f': '\f',
+                        r'\r': '\r',
+                    }
+                    for wslit, wschar in ws_map.items():
+                        ret = ret.replace(wslit, wschar)
+
+                # replace escaped characters
+                if self.escChar:
+                    ret = re.sub(self.escCharReplacePattern, r"\g<1>", ret)
+
+                # replace escaped quotes
+                if self.escQuote:
+                    ret = ret.replace(self.escQuote, self.endQuoteChar)
+
+        return loc, ret
+
+    def __str__(self):
+        try:
+            return super(QuotedString, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "quoted string, starting with %s ending with %s" % (self.quoteChar, self.endQuoteChar)
+
+        return self.strRepr
+
+
+class CharsNotIn(Token):
+    """Token for matching words composed of characters *not* in a given
+    set (will include whitespace in matched characters if not listed in
+    the provided exclusion set - see example). Defined with string
+    containing all disallowed characters, and an optional minimum,
+    maximum, and/or exact length.  The default value for ``min`` is
+    1 (a minimum value < 1 is not valid); the default values for
+    ``max`` and ``exact`` are 0, meaning no maximum or exact
+    length restriction.
+
+    Example::
+
+        # define a comma-separated-value as anything that is not a ','
+        csv_value = CharsNotIn(',')
+        print(delimitedList(csv_value).parseString("dkls,lsdkjf,s12 34,@!#,213"))
+
+    prints::
+
+        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
+    """
+    def __init__(self, notChars, min=1, max=0, exact=0):
+        super(CharsNotIn, self).__init__()
+        self.skipWhitespace = False
+        self.notChars = notChars
+
+        if min < 1:
+            raise ValueError("cannot specify a minimum length < 1; use "
+                             "Optional(CharsNotIn()) if zero-length char group is permitted")
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+        self.name = _ustr(self)
+        self.errmsg = "Expected " + self.name
+        self.mayReturnEmpty = (self.minLen == 0)
+        self.mayIndexError = False
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc] in self.notChars:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        start = loc
+        loc += 1
+        notchars = self.notChars
+        maxlen = min(start + self.maxLen, len(instring))
+        while loc < maxlen and instring[loc] not in notchars:
+            loc += 1
+
+        if loc - start < self.minLen:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        return loc, instring[start:loc]
+
+    def __str__(self):
+        try:
+            return super(CharsNotIn, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None:
+            if len(self.notChars) > 4:
+                self.strRepr = "!W:(%s...)" % self.notChars[:4]
+            else:
+                self.strRepr = "!W:(%s)" % self.notChars
+
+        return self.strRepr
+
+class White(Token):
+    """Special matching class for matching whitespace.  Normally,
+    whitespace is ignored by pyparsing grammars.  This class is included
+    when some whitespace structures are significant.  Define with
+    a string containing the whitespace characters to be matched; default
+    is ``" \\t\\r\\n"``.  Also takes optional ``min``,
+    ``max``, and ``exact`` arguments, as defined for the
+    :class:`Word` class.
+    """
+    whiteStrs = {
+        ' ' : '<SP>',
+        '\t': '<TAB>',
+        '\n': '<LF>',
+        '\r': '<CR>',
+        '\f': '<FF>',
+        u'\u00A0': '<NBSP>',
+        u'\u1680': '<OGHAM_SPACE_MARK>',
+        u'\u180E': '<MONGOLIAN_VOWEL_SEPARATOR>',
+        u'\u2000': '<EN_QUAD>',
+        u'\u2001': '<EM_QUAD>',
+        u'\u2002': '<EN_SPACE>',
+        u'\u2003': '<EM_SPACE>',
+        u'\u2004': '<THREE-PER-EM_SPACE>',
+        u'\u2005': '<FOUR-PER-EM_SPACE>',
+        u'\u2006': '<SIX-PER-EM_SPACE>',
+        u'\u2007': '<FIGURE_SPACE>',
+        u'\u2008': '<PUNCTUATION_SPACE>',
+        u'\u2009': '<THIN_SPACE>',
+        u'\u200A': '<HAIR_SPACE>',
+        u'\u200B': '<ZERO_WIDTH_SPACE>',
+        u'\u202F': '<NNBSP>',
+        u'\u205F': '<MMSP>',
+        u'\u3000': '<IDEOGRAPHIC_SPACE>',
+        }
+    def __init__(self, ws=" \t\r\n", min=1, max=0, exact=0):
+        super(White, self).__init__()
+        self.matchWhite = ws
+        self.setWhitespaceChars("".join(c for c in self.whiteChars if c not in self.matchWhite))
+        # ~ self.leaveWhitespace()
+        self.name = ("".join(White.whiteStrs[c] for c in self.matchWhite))
+        self.mayReturnEmpty = True
+        self.errmsg = "Expected " + self.name
+
+        self.minLen = min
+
+        if max > 0:
+            self.maxLen = max
+        else:
+            self.maxLen = _MAX_INT
+
+        if exact > 0:
+            self.maxLen = exact
+            self.minLen = exact
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if instring[loc] not in self.matchWhite:
+            raise ParseException(instring, loc, self.errmsg, self)
+        start = loc
+        loc += 1
+        maxloc = start + self.maxLen
+        maxloc = min(maxloc, len(instring))
+        while loc < maxloc and instring[loc] in self.matchWhite:
+            loc += 1
+
+        if loc - start < self.minLen:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        return loc, instring[start:loc]
+
+
+class _PositionToken(Token):
+    def __init__(self):
+        super(_PositionToken, self).__init__()
+        self.name = self.__class__.__name__
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+
+class GoToColumn(_PositionToken):
+    """Token to advance to a specific column of input text; useful for
+    tabular report scraping.
+    """
+    def __init__(self, colno):
+        super(GoToColumn, self).__init__()
+        self.col = colno
+
+    def preParse(self, instring, loc):
+        if col(loc, instring) != self.col:
+            instrlen = len(instring)
+            if self.ignoreExprs:
+                loc = self._skipIgnorables(instring, loc)
+            while loc < instrlen and instring[loc].isspace() and col(loc, instring) != self.col:
+                loc += 1
+        return loc
+
+    def parseImpl(self, instring, loc, doActions=True):
+        thiscol = col(loc, instring)
+        if thiscol > self.col:
+            raise ParseException(instring, loc, "Text not in expected column", self)
+        newloc = loc + self.col - thiscol
+        ret = instring[loc: newloc]
+        return newloc, ret
+
+
+class LineStart(_PositionToken):
+    r"""Matches if current position is at the beginning of a line within
+    the parse string
+
+    Example::
+
+        test = '''\
+        AAA this line
+        AAA and this line
+          AAA but not this one
+        B AAA and definitely not this one
+        '''
+
+        for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
+            print(t)
+
+    prints::
+
+        ['AAA', ' this line']
+        ['AAA', ' and this line']
+
+    """
+    def __init__(self):
+        super(LineStart, self).__init__()
+        self.errmsg = "Expected start of line"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if col(loc, instring) == 1:
+            return loc, []
+        raise ParseException(instring, loc, self.errmsg, self)
+
+class LineEnd(_PositionToken):
+    """Matches if current position is at the end of a line within the
+    parse string
+    """
+    def __init__(self):
+        super(LineEnd, self).__init__()
+        self.setWhitespaceChars(ParserElement.DEFAULT_WHITE_CHARS.replace("\n", ""))
+        self.errmsg = "Expected end of line"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if loc < len(instring):
+            if instring[loc] == "\n":
+                return loc + 1, "\n"
+            else:
+                raise ParseException(instring, loc, self.errmsg, self)
+        elif loc == len(instring):
+            return loc + 1, []
+        else:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+class StringStart(_PositionToken):
+    """Matches if current position is at the beginning of the parse
+    string
+    """
+    def __init__(self):
+        super(StringStart, self).__init__()
+        self.errmsg = "Expected start of text"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if loc != 0:
+            # see if entire string up to here is just whitespace and ignoreables
+            if loc != self.preParse(instring, 0):
+                raise ParseException(instring, loc, self.errmsg, self)
+        return loc, []
+
+class StringEnd(_PositionToken):
+    """Matches if current position is at the end of the parse string
+    """
+    def __init__(self):
+        super(StringEnd, self).__init__()
+        self.errmsg = "Expected end of text"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if loc < len(instring):
+            raise ParseException(instring, loc, self.errmsg, self)
+        elif loc == len(instring):
+            return loc + 1, []
+        elif loc > len(instring):
+            return loc, []
+        else:
+            raise ParseException(instring, loc, self.errmsg, self)
+
+class WordStart(_PositionToken):
+    """Matches if the current position is at the beginning of a Word,
+    and is not preceded by any character in a given set of
+    ``wordChars`` (default= ``printables``). To emulate the
+    ``\b`` behavior of regular expressions, use
+    ``WordStart(alphanums)``. ``WordStart`` will also match at
+    the beginning of the string being parsed, or at the beginning of
+    a line.
+    """
+    def __init__(self, wordChars=printables):
+        super(WordStart, self).__init__()
+        self.wordChars = set(wordChars)
+        self.errmsg = "Not at the start of a word"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if loc != 0:
+            if (instring[loc - 1] in self.wordChars
+                    or instring[loc] not in self.wordChars):
+                raise ParseException(instring, loc, self.errmsg, self)
+        return loc, []
+
+class WordEnd(_PositionToken):
+    """Matches if the current position is at the end of a Word, and is
+    not followed by any character in a given set of ``wordChars``
+    (default= ``printables``). To emulate the ``\b`` behavior of
+    regular expressions, use ``WordEnd(alphanums)``. ``WordEnd``
+    will also match at the end of the string being parsed, or at the end
+    of a line.
+    """
+    def __init__(self, wordChars=printables):
+        super(WordEnd, self).__init__()
+        self.wordChars = set(wordChars)
+        self.skipWhitespace = False
+        self.errmsg = "Not at the end of a word"
+
+    def parseImpl(self, instring, loc, doActions=True):
+        instrlen = len(instring)
+        if instrlen > 0 and loc < instrlen:
+            if (instring[loc] in self.wordChars or
+                    instring[loc - 1] not in self.wordChars):
+                raise ParseException(instring, loc, self.errmsg, self)
+        return loc, []
+
+
+class ParseExpression(ParserElement):
+    """Abstract subclass of ParserElement, for combining and
+    post-processing parsed tokens.
+    """
+    def __init__(self, exprs, savelist=False):
+        super(ParseExpression, self).__init__(savelist)
+        if isinstance(exprs, _generatorType):
+            exprs = list(exprs)
+
+        if isinstance(exprs, basestring):
+            self.exprs = [self._literalStringClass(exprs)]
+        elif isinstance(exprs, ParserElement):
+            self.exprs = [exprs]
+        elif isinstance(exprs, Iterable):
+            exprs = list(exprs)
+            # if sequence of strings provided, wrap with Literal
+            if any(isinstance(expr, basestring) for expr in exprs):
+                exprs = (self._literalStringClass(e) if isinstance(e, basestring) else e for e in exprs)
+            self.exprs = list(exprs)
+        else:
+            try:
+                self.exprs = list(exprs)
+            except TypeError:
+                self.exprs = [exprs]
+        self.callPreparse = False
+
+    def append(self, other):
+        self.exprs.append(other)
+        self.strRepr = None
+        return self
+
+    def leaveWhitespace(self):
+        """Extends ``leaveWhitespace`` defined in base class, and also invokes ``leaveWhitespace`` on
+           all contained expressions."""
+        self.skipWhitespace = False
+        self.exprs = [e.copy() for e in self.exprs]
+        for e in self.exprs:
+            e.leaveWhitespace()
+        return self
+
+    def ignore(self, other):
+        if isinstance(other, Suppress):
+            if other not in self.ignoreExprs:
+                super(ParseExpression, self).ignore(other)
+                for e in self.exprs:
+                    e.ignore(self.ignoreExprs[-1])
+        else:
+            super(ParseExpression, self).ignore(other)
+            for e in self.exprs:
+                e.ignore(self.ignoreExprs[-1])
+        return self
+
+    def __str__(self):
+        try:
+            return super(ParseExpression, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None:
+            self.strRepr = "%s:(%s)" % (self.__class__.__name__, _ustr(self.exprs))
+        return self.strRepr
+
+    def streamline(self):
+        super(ParseExpression, self).streamline()
+
+        for e in self.exprs:
+            e.streamline()
+
+        # collapse nested And's of the form And(And(And(a, b), c), d) to And(a, b, c, d)
+        # but only if there are no parse actions or resultsNames on the nested And's
+        # (likewise for Or's and MatchFirst's)
+        if len(self.exprs) == 2:
+            other = self.exprs[0]
+            if (isinstance(other, self.__class__)
+                    and not other.parseAction
+                    and other.resultsName is None
+                    and not other.debug):
+                self.exprs = other.exprs[:] + [self.exprs[1]]
+                self.strRepr = None
+                self.mayReturnEmpty |= other.mayReturnEmpty
+                self.mayIndexError  |= other.mayIndexError
+
+            other = self.exprs[-1]
+            if (isinstance(other, self.__class__)
+                    and not other.parseAction
+                    and other.resultsName is None
+                    and not other.debug):
+                self.exprs = self.exprs[:-1] + other.exprs[:]
+                self.strRepr = None
+                self.mayReturnEmpty |= other.mayReturnEmpty
+                self.mayIndexError  |= other.mayIndexError
+
+        self.errmsg = "Expected " + _ustr(self)
+
+        return self
+
+    def validate(self, validateTrace=None):
+        tmp = (validateTrace if validateTrace is not None else [])[:] + [self]
+        for e in self.exprs:
+            e.validate(tmp)
+        self.checkRecursion([])
+
+    def copy(self):
+        ret = super(ParseExpression, self).copy()
+        ret.exprs = [e.copy() for e in self.exprs]
+        return ret
+
+    def _setResultsName(self, name, listAllMatches=False):
+        if __diag__.warn_ungrouped_named_tokens_in_collection:
+            for e in self.exprs:
+                if isinstance(e, ParserElement) and e.resultsName:
+                    warnings.warn("{0}: setting results name {1!r} on {2} expression "
+                                  "collides with {3!r} on contained expression".format("warn_ungrouped_named_tokens_in_collection",
+                                                                                       name,
+                                                                                       type(self).__name__,
+                                                                                       e.resultsName),
+                                  stacklevel=3)
+
+        return super(ParseExpression, self)._setResultsName(name, listAllMatches)
+
+
+class And(ParseExpression):
+    """
+    Requires all given :class:`ParseExpression` s to be found in the given order.
+    Expressions may be separated by whitespace.
+    May be constructed using the ``'+'`` operator.
+    May also be constructed using the ``'-'`` operator, which will
+    suppress backtracking.
+
+    Example::
+
+        integer = Word(nums)
+        name_expr = OneOrMore(Word(alphas))
+
+        expr = And([integer("id"), name_expr("name"), integer("age")])
+        # more easily written as:
+        expr = integer("id") + name_expr("name") + integer("age")
+    """
+
+    class _ErrorStop(Empty):
+        def __init__(self, *args, **kwargs):
+            super(And._ErrorStop, self).__init__(*args, **kwargs)
+            self.name = '-'
+            self.leaveWhitespace()
+
+    def __init__(self, exprs, savelist=True):
+        exprs = list(exprs)
+        if exprs and Ellipsis in exprs:
+            tmp = []
+            for i, expr in enumerate(exprs):
+                if expr is Ellipsis:
+                    if i < len(exprs) - 1:
+                        skipto_arg = (Empty() + exprs[i + 1]).exprs[-1]
+                        tmp.append(SkipTo(skipto_arg)("_skipped*"))
+                    else:
+                        raise Exception("cannot construct And with sequence ending in ...")
+                else:
+                    tmp.append(expr)
+            exprs[:] = tmp
+        super(And, self).__init__(exprs, savelist)
+        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)
+        self.setWhitespaceChars(self.exprs[0].whiteChars)
+        self.skipWhitespace = self.exprs[0].skipWhitespace
+        self.callPreparse = True
+
+    def streamline(self):
+        # collapse any _PendingSkip's
+        if self.exprs:
+            if any(isinstance(e, ParseExpression) and e.exprs and isinstance(e.exprs[-1], _PendingSkip)
+                   for e in self.exprs[:-1]):
+                for i, e in enumerate(self.exprs[:-1]):
+                    if e is None:
+                        continue
+                    if (isinstance(e, ParseExpression)
+                            and e.exprs and isinstance(e.exprs[-1], _PendingSkip)):
+                        e.exprs[-1] = e.exprs[-1] + self.exprs[i + 1]
+                        self.exprs[i + 1] = None
+                self.exprs = [e for e in self.exprs if e is not None]
+
+        super(And, self).streamline()
+        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)
+        return self
+
+    def parseImpl(self, instring, loc, doActions=True):
+        # pass False as last arg to _parse for first element, since we already
+        # pre-parsed the string as part of our And pre-parsing
+        loc, resultlist = self.exprs[0]._parse(instring, loc, doActions, callPreParse=False)
+        errorStop = False
+        for e in self.exprs[1:]:
+            if isinstance(e, And._ErrorStop):
+                errorStop = True
+                continue
+            if errorStop:
+                try:
+                    loc, exprtokens = e._parse(instring, loc, doActions)
+                except ParseSyntaxException:
+                    raise
+                except ParseBaseException as pe:
+                    pe.__traceback__ = None
+                    raise ParseSyntaxException._from_exception(pe)
+                except IndexError:
+                    raise ParseSyntaxException(instring, len(instring), self.errmsg, self)
+            else:
+                loc, exprtokens = e._parse(instring, loc, doActions)
+            if exprtokens or exprtokens.haskeys():
+                resultlist += exprtokens
+        return loc, resultlist
+
+    def __iadd__(self, other):
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        return self.append(other)  # And([self, other])
+
+    def checkRecursion(self, parseElementList):
+        subRecCheckList = parseElementList[:] + [self]
+        for e in self.exprs:
+            e.checkRecursion(subRecCheckList)
+            if not e.mayReturnEmpty:
+                break
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " ".join(_ustr(e) for e in self.exprs) + "}"
+
+        return self.strRepr
+
+
+class Or(ParseExpression):
+    """Requires that at least one :class:`ParseExpression` is found. If
+    two expressions match, the expression that matches the longest
+    string will be used. May be constructed using the ``'^'``
+    operator.
+
+    Example::
+
+        # construct Or using '^' operator
+
+        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
+        print(number.searchString("123 3.1416 789"))
+
+    prints::
+
+        [['123'], ['3.1416'], ['789']]
+    """
+    def __init__(self, exprs, savelist=False):
+        super(Or, self).__init__(exprs, savelist)
+        if self.exprs:
+            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)
+        else:
+            self.mayReturnEmpty = True
+
+    def streamline(self):
+        super(Or, self).streamline()
+        if __compat__.collect_all_And_tokens:
+            self.saveAsList = any(e.saveAsList for e in self.exprs)
+        return self
+
+    def parseImpl(self, instring, loc, doActions=True):
+        maxExcLoc = -1
+        maxException = None
+        matches = []
+        for e in self.exprs:
+            try:
+                loc2 = e.tryParse(instring, loc)
+            except ParseException as err:
+                err.__traceback__ = None
+                if err.loc > maxExcLoc:
+                    maxException = err
+                    maxExcLoc = err.loc
+            except IndexError:
+                if len(instring) > maxExcLoc:
+                    maxException = ParseException(instring, len(instring), e.errmsg, self)
+                    maxExcLoc = len(instring)
+            else:
+                # save match among all matches, to retry longest to shortest
+                matches.append((loc2, e))
+
+        if matches:
+            # re-evaluate all matches in descending order of length of match, in case attached actions
+            # might change whether or how much they match of the input.
+            matches.sort(key=itemgetter(0), reverse=True)
+
+            if not doActions:
+                # no further conditions or parse actions to change the selection of
+                # alternative, so the first match will be the best match
+                best_expr = matches[0][1]
+                return best_expr._parse(instring, loc, doActions)
+
+            longest = -1, None
+            for loc1, expr1 in matches:
+                if loc1 <= longest[0]:
+                    # already have a longer match than this one will deliver, we are done
+                    return longest
+
+                try:
+                    loc2, toks = expr1._parse(instring, loc, doActions)
+                except ParseException as err:
+                    err.__traceback__ = None
+                    if err.loc > maxExcLoc:
+                        maxException = err
+                        maxExcLoc = err.loc
+                else:
+                    if loc2 >= loc1:
+                        return loc2, toks
+                    # didn't match as much as before
+                    elif loc2 > longest[0]:
+                        longest = loc2, toks
+
+            if longest != (-1, None):
+                return longest
+
+        if maxException is not None:
+            maxException.msg = self.errmsg
+            raise maxException
+        else:
+            raise ParseException(instring, loc, "no defined alternatives to match", self)
+
+
+    def __ixor__(self, other):
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        return self.append(other)  # Or([self, other])
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " ^ ".join(_ustr(e) for e in self.exprs) + "}"
+
+        return self.strRepr
+
+    def checkRecursion(self, parseElementList):
+        subRecCheckList = parseElementList[:] + [self]
+        for e in self.exprs:
+            e.checkRecursion(subRecCheckList)
+
+    def _setResultsName(self, name, listAllMatches=False):
+        if (not __compat__.collect_all_And_tokens
+                and __diag__.warn_multiple_tokens_in_named_alternation):
+            if any(isinstance(e, And) for e in self.exprs):
+                warnings.warn("{0}: setting results name {1!r} on {2} expression "
+                              "may only return a single token for an And alternative, "
+                              "in future will return the full list of tokens".format(
+                    "warn_multiple_tokens_in_named_alternation", name, type(self).__name__),
+                    stacklevel=3)
+
+        return super(Or, self)._setResultsName(name, listAllMatches)
+
+
+class MatchFirst(ParseExpression):
+    """Requires that at least one :class:`ParseExpression` is found. If
+    two expressions match, the first one listed is the one that will
+    match. May be constructed using the ``'|'`` operator.
+
+    Example::
+
+        # construct MatchFirst using '|' operator
+
+        # watch the order of expressions to match
+        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
+        print(number.searchString("123 3.1416 789")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]
+
+        # put more selective expression first
+        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
+        print(number.searchString("123 3.1416 789")) #  Better -> [['123'], ['3.1416'], ['789']]
+    """
+    def __init__(self, exprs, savelist=False):
+        super(MatchFirst, self).__init__(exprs, savelist)
+        if self.exprs:
+            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)
+        else:
+            self.mayReturnEmpty = True
+
+    def streamline(self):
+        super(MatchFirst, self).streamline()
+        if __compat__.collect_all_And_tokens:
+            self.saveAsList = any(e.saveAsList for e in self.exprs)
+        return self
+
+    def parseImpl(self, instring, loc, doActions=True):
+        maxExcLoc = -1
+        maxException = None
+        for e in self.exprs:
+            try:
+                ret = e._parse(instring, loc, doActions)
+                return ret
+            except ParseException as err:
+                if err.loc > maxExcLoc:
+                    maxException = err
+                    maxExcLoc = err.loc
+            except IndexError:
+                if len(instring) > maxExcLoc:
+                    maxException = ParseException(instring, len(instring), e.errmsg, self)
+                    maxExcLoc = len(instring)
+
+        # only got here if no expression matched, raise exception for match that made it the furthest
+        else:
+            if maxException is not None:
+                maxException.msg = self.errmsg
+                raise maxException
+            else:
+                raise ParseException(instring, loc, "no defined alternatives to match", self)
+
+    def __ior__(self, other):
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        return self.append(other)  # MatchFirst([self, other])
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " | ".join(_ustr(e) for e in self.exprs) + "}"
+
+        return self.strRepr
+
+    def checkRecursion(self, parseElementList):
+        subRecCheckList = parseElementList[:] + [self]
+        for e in self.exprs:
+            e.checkRecursion(subRecCheckList)
+
+    def _setResultsName(self, name, listAllMatches=False):
+        if (not __compat__.collect_all_And_tokens
+                and __diag__.warn_multiple_tokens_in_named_alternation):
+            if any(isinstance(e, And) for e in self.exprs):
+                warnings.warn("{0}: setting results name {1!r} on {2} expression "
+                              "may only return a single token for an And alternative, "
+                              "in future will return the full list of tokens".format(
+                    "warn_multiple_tokens_in_named_alternation", name, type(self).__name__),
+                    stacklevel=3)
+
+        return super(MatchFirst, self)._setResultsName(name, listAllMatches)
+
+
+class Each(ParseExpression):
+    """Requires all given :class:`ParseExpression` s to be found, but in
+    any order. Expressions may be separated by whitespace.
+
+    May be constructed using the ``'&'`` operator.
+
+    Example::
+
+        color = oneOf("RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN")
+        shape_type = oneOf("SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON")
+        integer = Word(nums)
+        shape_attr = "shape:" + shape_type("shape")
+        posn_attr = "posn:" + Group(integer("x") + ',' + integer("y"))("posn")
+        color_attr = "color:" + color("color")
+        size_attr = "size:" + integer("size")
+
+        # use Each (using operator '&') to accept attributes in any order
+        # (shape and posn are required, color and size are optional)
+        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)
+
+        shape_spec.runTests('''
+            shape: SQUARE color: BLACK posn: 100, 120
+            shape: CIRCLE size: 50 color: BLUE posn: 50,80
+            color:GREEN size:20 shape:TRIANGLE posn:20,40
+            '''
+            )
+
+    prints::
+
+        shape: SQUARE color: BLACK posn: 100, 120
+        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
+        - color: BLACK
+        - posn: ['100', ',', '120']
+          - x: 100
+          - y: 120
+        - shape: SQUARE
+
+
+        shape: CIRCLE size: 50 color: BLUE posn: 50,80
+        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
+        - color: BLUE
+        - posn: ['50', ',', '80']
+          - x: 50
+          - y: 80
+        - shape: CIRCLE
+        - size: 50
+
+
+        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
+        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
+        - color: GREEN
+        - posn: ['20', ',', '40']
+          - x: 20
+          - y: 40
+        - shape: TRIANGLE
+        - size: 20
+    """
+    def __init__(self, exprs, savelist=True):
+        super(Each, self).__init__(exprs, savelist)
+        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)
+        self.skipWhitespace = True
+        self.initExprGroups = True
+        self.saveAsList = True
+
+    def streamline(self):
+        super(Each, self).streamline()
+        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)
+        return self
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if self.initExprGroups:
+            self.opt1map = dict((id(e.expr), e) for e in self.exprs if isinstance(e, Optional))
+            opt1 = [e.expr for e in self.exprs if isinstance(e, Optional)]
+            opt2 = [e for e in self.exprs if e.mayReturnEmpty and not isinstance(e, (Optional, Regex))]
+            self.optionals = opt1 + opt2
+            self.multioptionals = [e.expr for e in self.exprs if isinstance(e, ZeroOrMore)]
+            self.multirequired = [e.expr for e in self.exprs if isinstance(e, OneOrMore)]
+            self.required = [e for e in self.exprs if not isinstance(e, (Optional, ZeroOrMore, OneOrMore))]
+            self.required += self.multirequired
+            self.initExprGroups = False
+        tmpLoc = loc
+        tmpReqd = self.required[:]
+        tmpOpt  = self.optionals[:]
+        matchOrder = []
+
+        keepMatching = True
+        while keepMatching:
+            tmpExprs = tmpReqd + tmpOpt + self.multioptionals + self.multirequired
+            failed = []
+            for e in tmpExprs:
+                try:
+                    tmpLoc = e.tryParse(instring, tmpLoc)
+                except ParseException:
+                    failed.append(e)
+                else:
+                    matchOrder.append(self.opt1map.get(id(e), e))
+                    if e in tmpReqd:
+                        tmpReqd.remove(e)
+                    elif e in tmpOpt:
+                        tmpOpt.remove(e)
+            if len(failed) == len(tmpExprs):
+                keepMatching = False
+
+        if tmpReqd:
+            missing = ", ".join(_ustr(e) for e in tmpReqd)
+            raise ParseException(instring, loc, "Missing one or more required elements (%s)" % missing)
+
+        # add any unmatched Optionals, in case they have default values defined
+        matchOrder += [e for e in self.exprs if isinstance(e, Optional) and e.expr in tmpOpt]
+
+        resultlist = []
+        for e in matchOrder:
+            loc, results = e._parse(instring, loc, doActions)
+            resultlist.append(results)
+
+        finalResults = sum(resultlist, ParseResults([]))
+        return loc, finalResults
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + " & ".join(_ustr(e) for e in self.exprs) + "}"
+
+        return self.strRepr
+
+    def checkRecursion(self, parseElementList):
+        subRecCheckList = parseElementList[:] + [self]
+        for e in self.exprs:
+            e.checkRecursion(subRecCheckList)
+
+
+class ParseElementEnhance(ParserElement):
+    """Abstract subclass of :class:`ParserElement`, for combining and
+    post-processing parsed tokens.
+    """
+    def __init__(self, expr, savelist=False):
+        super(ParseElementEnhance, self).__init__(savelist)
+        if isinstance(expr, basestring):
+            if issubclass(self._literalStringClass, Token):
+                expr = self._literalStringClass(expr)
+            else:
+                expr = self._literalStringClass(Literal(expr))
+        self.expr = expr
+        self.strRepr = None
+        if expr is not None:
+            self.mayIndexError = expr.mayIndexError
+            self.mayReturnEmpty = expr.mayReturnEmpty
+            self.setWhitespaceChars(expr.whiteChars)
+            self.skipWhitespace = expr.skipWhitespace
+            self.saveAsList = expr.saveAsList
+            self.callPreparse = expr.callPreparse
+            self.ignoreExprs.extend(expr.ignoreExprs)
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if self.expr is not None:
+            return self.expr._parse(instring, loc, doActions, callPreParse=False)
+        else:
+            raise ParseException("", loc, self.errmsg, self)
+
+    def leaveWhitespace(self):
+        self.skipWhitespace = False
+        self.expr = self.expr.copy()
+        if self.expr is not None:
+            self.expr.leaveWhitespace()
+        return self
+
+    def ignore(self, other):
+        if isinstance(other, Suppress):
+            if other not in self.ignoreExprs:
+                super(ParseElementEnhance, self).ignore(other)
+                if self.expr is not None:
+                    self.expr.ignore(self.ignoreExprs[-1])
+        else:
+            super(ParseElementEnhance, self).ignore(other)
+            if self.expr is not None:
+                self.expr.ignore(self.ignoreExprs[-1])
+        return self
+
+    def streamline(self):
+        super(ParseElementEnhance, self).streamline()
+        if self.expr is not None:
+            self.expr.streamline()
+        return self
+
+    def checkRecursion(self, parseElementList):
+        if self in parseElementList:
+            raise RecursiveGrammarException(parseElementList + [self])
+        subRecCheckList = parseElementList[:] + [self]
+        if self.expr is not None:
+            self.expr.checkRecursion(subRecCheckList)
+
+    def validate(self, validateTrace=None):
+        if validateTrace is None:
+            validateTrace = []
+        tmp = validateTrace[:] + [self]
+        if self.expr is not None:
+            self.expr.validate(tmp)
+        self.checkRecursion([])
+
+    def __str__(self):
+        try:
+            return super(ParseElementEnhance, self).__str__()
+        except Exception:
+            pass
+
+        if self.strRepr is None and self.expr is not None:
+            self.strRepr = "%s:(%s)" % (self.__class__.__name__, _ustr(self.expr))
+        return self.strRepr
+
+
+class FollowedBy(ParseElementEnhance):
+    """Lookahead matching of the given parse expression.
+    ``FollowedBy`` does *not* advance the parsing position within
+    the input string, it only verifies that the specified parse
+    expression matches at the current position.  ``FollowedBy``
+    always returns a null token list. If any results names are defined
+    in the lookahead expression, those *will* be returned for access by
+    name.
+
+    Example::
+
+        # use FollowedBy to match a label only if it is followed by a ':'
+        data_word = Word(alphas)
+        label = data_word + FollowedBy(':')
+        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
+
+        OneOrMore(attr_expr).parseString("shape: SQUARE color: BLACK posn: upper left").pprint()
+
+    prints::
+
+        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
+    """
+    def __init__(self, expr):
+        super(FollowedBy, self).__init__(expr)
+        self.mayReturnEmpty = True
+
+    def parseImpl(self, instring, loc, doActions=True):
+        # by using self._expr.parse and deleting the contents of the returned ParseResults list
+        # we keep any named results that were defined in the FollowedBy expression
+        _, ret = self.expr._parse(instring, loc, doActions=doActions)
+        del ret[:]
+
+        return loc, ret
+
+
+class PrecededBy(ParseElementEnhance):
+    """Lookbehind matching of the given parse expression.
+    ``PrecededBy`` does not advance the parsing position within the
+    input string, it only verifies that the specified parse expression
+    matches prior to the current position.  ``PrecededBy`` always
+    returns a null token list, but if a results name is defined on the
+    given expression, it is returned.
+
+    Parameters:
+
+     - expr - expression that must match prior to the current parse
+       location
+     - retreat - (default= ``None``) - (int) maximum number of characters
+       to lookbehind prior to the current parse location
+
+    If the lookbehind expression is a string, Literal, Keyword, or
+    a Word or CharsNotIn with a specified exact or maximum length, then
+    the retreat parameter is not required. Otherwise, retreat must be
+    specified to give a maximum number of characters to look back from
+    the current parse position for a lookbehind match.
+
+    Example::
+
+        # VB-style variable names with type prefixes
+        int_var = PrecededBy("#") + pyparsing_common.identifier
+        str_var = PrecededBy("$") + pyparsing_common.identifier
+
+    """
+    def __init__(self, expr, retreat=None):
+        super(PrecededBy, self).__init__(expr)
+        self.expr = self.expr().leaveWhitespace()
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+        self.exact = False
+        if isinstance(expr, str):
+            retreat = len(expr)
+            self.exact = True
+        elif isinstance(expr, (Literal, Keyword)):
+            retreat = expr.matchLen
+            self.exact = True
+        elif isinstance(expr, (Word, CharsNotIn)) and expr.maxLen != _MAX_INT:
+            retreat = expr.maxLen
+            self.exact = True
+        elif isinstance(expr, _PositionToken):
+            retreat = 0
+            self.exact = True
+        self.retreat = retreat
+        self.errmsg = "not preceded by " + str(expr)
+        self.skipWhitespace = False
+        self.parseAction.append(lambda s, l, t: t.__delitem__(slice(None, None)))
+
+    def parseImpl(self, instring, loc=0, doActions=True):
+        if self.exact:
+            if loc < self.retreat:
+                raise ParseException(instring, loc, self.errmsg)
+            start = loc - self.retreat
+            _, ret = self.expr._parse(instring, start)
+        else:
+            # retreat specified a maximum lookbehind window, iterate
+            test_expr = self.expr + StringEnd()
+            instring_slice = instring[max(0, loc - self.retreat):loc]
+            last_expr = ParseException(instring, loc, self.errmsg)
+            for offset in range(1, min(loc, self.retreat + 1)+1):
+                try:
+                    # print('trying', offset, instring_slice, repr(instring_slice[loc - offset:]))
+                    _, ret = test_expr._parse(instring_slice, len(instring_slice) - offset)
+                except ParseBaseException as pbe:
+                    last_expr = pbe
+                else:
+                    break
+            else:
+                raise last_expr
+        return loc, ret
+
+
+class NotAny(ParseElementEnhance):
+    """Lookahead to disallow matching with the given parse expression.
+    ``NotAny`` does *not* advance the parsing position within the
+    input string, it only verifies that the specified parse expression
+    does *not* match at the current position.  Also, ``NotAny`` does
+    *not* skip over leading whitespace. ``NotAny`` always returns
+    a null token list.  May be constructed using the '~' operator.
+
+    Example::
+
+        AND, OR, NOT = map(CaselessKeyword, "AND OR NOT".split())
+
+        # take care not to mistake keywords for identifiers
+        ident = ~(AND | OR | NOT) + Word(alphas)
+        boolean_term = Optional(NOT) + ident
+
+        # very crude boolean expression - to support parenthesis groups and
+        # operation hierarchy, use infixNotation
+        boolean_expr = boolean_term + ZeroOrMore((AND | OR) + boolean_term)
+
+        # integers that are followed by "." are actually floats
+        integer = Word(nums) + ~Char(".")
+    """
+    def __init__(self, expr):
+        super(NotAny, self).__init__(expr)
+        # ~ self.leaveWhitespace()
+        self.skipWhitespace = False  # do NOT use self.leaveWhitespace(), don't want to propagate to exprs
+        self.mayReturnEmpty = True
+        self.errmsg = "Found unwanted token, " + _ustr(self.expr)
+
+    def parseImpl(self, instring, loc, doActions=True):
+        if self.expr.canParseNext(instring, loc):
+            raise ParseException(instring, loc, self.errmsg, self)
+        return loc, []
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "~{" + _ustr(self.expr) + "}"
+
+        return self.strRepr
+
+class _MultipleMatch(ParseElementEnhance):
+    def __init__(self, expr, stopOn=None):
+        super(_MultipleMatch, self).__init__(expr)
+        self.saveAsList = True
+        ender = stopOn
+        if isinstance(ender, basestring):
+            ender = self._literalStringClass(ender)
+        self.stopOn(ender)
+
+    def stopOn(self, ender):
+        if isinstance(ender, basestring):
+            ender = self._literalStringClass(ender)
+        self.not_ender = ~ender if ender is not None else None
+        return self
+
+    def parseImpl(self, instring, loc, doActions=True):
+        self_expr_parse = self.expr._parse
+        self_skip_ignorables = self._skipIgnorables
+        check_ender = self.not_ender is not None
+        if check_ender:
+            try_not_ender = self.not_ender.tryParse
+
+        # must be at least one (but first see if we are the stopOn sentinel;
+        # if so, fail)
+        if check_ender:
+            try_not_ender(instring, loc)
+        loc, tokens = self_expr_parse(instring, loc, doActions, callPreParse=False)
+        try:
+            hasIgnoreExprs = (not not self.ignoreExprs)
+            while 1:
+                if check_ender:
+                    try_not_ender(instring, loc)
+                if hasIgnoreExprs:
+                    preloc = self_skip_ignorables(instring, loc)
+                else:
+                    preloc = loc
+                loc, tmptokens = self_expr_parse(instring, preloc, doActions)
+                if tmptokens or tmptokens.haskeys():
+                    tokens += tmptokens
+        except (ParseException, IndexError):
+            pass
+
+        return loc, tokens
+
+    def _setResultsName(self, name, listAllMatches=False):
+        if __diag__.warn_ungrouped_named_tokens_in_collection:
+            for e in [self.expr] + getattr(self.expr, 'exprs', []):
+                if isinstance(e, ParserElement) and e.resultsName:
+                    warnings.warn("{0}: setting results name {1!r} on {2} expression "
+                                  "collides with {3!r} on contained expression".format("warn_ungrouped_named_tokens_in_collection",
+                                                                                       name,
+                                                                                       type(self).__name__,
+                                                                                       e.resultsName),
+                                  stacklevel=3)
+
+        return super(_MultipleMatch, self)._setResultsName(name, listAllMatches)
+
+
+class OneOrMore(_MultipleMatch):
+    """Repetition of one or more of the given expression.
+
+    Parameters:
+     - expr - expression that must match one or more times
+     - stopOn - (default= ``None``) - expression for a terminating sentinel
+          (only required if the sentinel would ordinarily match the repetition
+          expression)
+
+    Example::
+
+        data_word = Word(alphas)
+        label = data_word + FollowedBy(':')
+        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))
+
+        text = "shape: SQUARE posn: upper left color: BLACK"
+        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]
+
+        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
+        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
+        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]
+
+        # could also be written as
+        (attr_expr * (1,)).parseString(text).pprint()
+    """
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "{" + _ustr(self.expr) + "}..."
+
+        return self.strRepr
+
+class ZeroOrMore(_MultipleMatch):
+    """Optional repetition of zero or more of the given expression.
+
+    Parameters:
+     - expr - expression that must match zero or more times
+     - stopOn - (default= ``None``) - expression for a terminating sentinel
+          (only required if the sentinel would ordinarily match the repetition
+          expression)
+
+    Example: similar to :class:`OneOrMore`
+    """
+    def __init__(self, expr, stopOn=None):
+        super(ZeroOrMore, self).__init__(expr, stopOn=stopOn)
+        self.mayReturnEmpty = True
+
+    def parseImpl(self, instring, loc, doActions=True):
+        try:
+            return super(ZeroOrMore, self).parseImpl(instring, loc, doActions)
+        except (ParseException, IndexError):
+            return loc, []
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "[" + _ustr(self.expr) + "]..."
+
+        return self.strRepr
+
+
+class _NullToken(object):
+    def __bool__(self):
+        return False
+    __nonzero__ = __bool__
+    def __str__(self):
+        return ""
+
+class Optional(ParseElementEnhance):
+    """Optional matching of the given expression.
+
+    Parameters:
+     - expr - expression that must match zero or more times
+     - default (optional) - value to be returned if the optional expression is not found.
+
+    Example::
+
+        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
+        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
+        zip.runTests('''
+            # traditional ZIP code
+            12345
+
+            # ZIP+4 form
+            12101-0001
+
+            # invalid ZIP
+            98765-
+            ''')
+
+    prints::
+
+        # traditional ZIP code
+        12345
+        ['12345']
+
+        # ZIP+4 form
+        12101-0001
+        ['12101-0001']
+
+        # invalid ZIP
+        98765-
+             ^
+        FAIL: Expected end of text (at char 5), (line:1, col:6)
+    """
+    __optionalNotMatched = _NullToken()
+
+    def __init__(self, expr, default=__optionalNotMatched):
+        super(Optional, self).__init__(expr, savelist=False)
+        self.saveAsList = self.expr.saveAsList
+        self.defaultValue = default
+        self.mayReturnEmpty = True
+
+    def parseImpl(self, instring, loc, doActions=True):
+        try:
+            loc, tokens = self.expr._parse(instring, loc, doActions, callPreParse=False)
+        except (ParseException, IndexError):
+            if self.defaultValue is not self.__optionalNotMatched:
+                if self.expr.resultsName:
+                    tokens = ParseResults([self.defaultValue])
+                    tokens[self.expr.resultsName] = self.defaultValue
+                else:
+                    tokens = [self.defaultValue]
+            else:
+                tokens = []
+        return loc, tokens
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+
+        if self.strRepr is None:
+            self.strRepr = "[" + _ustr(self.expr) + "]"
+
+        return self.strRepr
+
+class SkipTo(ParseElementEnhance):
+    """Token for skipping over all undefined text until the matched
+    expression is found.
+
+    Parameters:
+     - expr - target expression marking the end of the data to be skipped
+     - include - (default= ``False``) if True, the target expression is also parsed
+          (the skipped text and target expression are returned as a 2-element list).
+     - ignore - (default= ``None``) used to define grammars (typically quoted strings and
+          comments) that might contain false matches to the target expression
+     - failOn - (default= ``None``) define expressions that are not allowed to be
+          included in the skipped test; if found before the target expression is found,
+          the SkipTo is not a match
+
+    Example::
+
+        report = '''
+            Outstanding Issues Report - 1 Jan 2000
+
+               # | Severity | Description                               |  Days Open
+            -----+----------+-------------------------------------------+-----------
+             101 | Critical | Intermittent system crash                 |          6
+              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
+              79 | Minor    | System slow when running too many reports |         47
+            '''
+        integer = Word(nums)
+        SEP = Suppress('|')
+        # use SkipTo to simply match everything up until the next SEP
+        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
+        # - parse action will call token.strip() for each matched token, i.e., the description body
+        string_data = SkipTo(SEP, ignore=quotedString)
+        string_data.setParseAction(tokenMap(str.strip))
+        ticket_expr = (integer("issue_num") + SEP
+                      + string_data("sev") + SEP
+                      + string_data("desc") + SEP
+                      + integer("days_open"))
+
+        for tkt in ticket_expr.searchString(report):
+            print tkt.dump()
+
+    prints::
+
+        ['101', 'Critical', 'Intermittent system crash', '6']
+        - days_open: 6
+        - desc: Intermittent system crash
+        - issue_num: 101
+        - sev: Critical
+        ['94', 'Cosmetic', "Spelling error on Login ('log|n')", '14']
+        - days_open: 14
+        - desc: Spelling error on Login ('log|n')
+        - issue_num: 94
+        - sev: Cosmetic
+        ['79', 'Minor', 'System slow when running too many reports', '47']
+        - days_open: 47
+        - desc: System slow when running too many reports
+        - issue_num: 79
+        - sev: Minor
+    """
+    def __init__(self, other, include=False, ignore=None, failOn=None):
+        super(SkipTo, self).__init__(other)
+        self.ignoreExpr = ignore
+        self.mayReturnEmpty = True
+        self.mayIndexError = False
+        self.includeMatch = include
+        self.saveAsList = False
+        if isinstance(failOn, basestring):
+            self.failOn = self._literalStringClass(failOn)
+        else:
+            self.failOn = failOn
+        self.errmsg = "No match found for " + _ustr(self.expr)
+
+    def parseImpl(self, instring, loc, doActions=True):
+        startloc = loc
+        instrlen = len(instring)
+        expr = self.expr
+        expr_parse = self.expr._parse
+        self_failOn_canParseNext = self.failOn.canParseNext if self.failOn is not None else None
+        self_ignoreExpr_tryParse = self.ignoreExpr.tryParse if self.ignoreExpr is not None else None
+
+        tmploc = loc
+        while tmploc <= instrlen:
+            if self_failOn_canParseNext is not None:
+                # break if failOn expression matches
+                if self_failOn_canParseNext(instring, tmploc):
+                    break
+
+            if self_ignoreExpr_tryParse is not None:
+                # advance past ignore expressions
+                while 1:
+                    try:
+                        tmploc = self_ignoreExpr_tryParse(instring, tmploc)
+                    except ParseBaseException:
+                        break
+
+            try:
+                expr_parse(instring, tmploc, doActions=False, callPreParse=False)
+            except (ParseException, IndexError):
+                # no match, advance loc in string
+                tmploc += 1
+            else:
+                # matched skipto expr, done
+                break
+
+        else:
+            # ran off the end of the input string without matching skipto expr, fail
+            raise ParseException(instring, loc, self.errmsg, self)
+
+        # build up return values
+        loc = tmploc
+        skiptext = instring[startloc:loc]
+        skipresult = ParseResults(skiptext)
+
+        if self.includeMatch:
+            loc, mat = expr_parse(instring, loc, doActions, callPreParse=False)
+            skipresult += mat
+
+        return loc, skipresult
+
+class Forward(ParseElementEnhance):
+    """Forward declaration of an expression to be defined later -
+    used for recursive grammars, such as algebraic infix notation.
+    When the expression is known, it is assigned to the ``Forward``
+    variable using the '<<' operator.
+
+    Note: take care when assigning to ``Forward`` not to overlook
+    precedence of operators.
+
+    Specifically, '|' has a lower precedence than '<<', so that::
+
+        fwdExpr << a | b | c
+
+    will actually be evaluated as::
+
+        (fwdExpr << a) | b | c
+
+    thereby leaving b and c out as parseable alternatives.  It is recommended that you
+    explicitly group the values inserted into the ``Forward``::
+
+        fwdExpr << (a | b | c)
+
+    Converting to use the '<<=' operator instead will avoid this problem.
+
+    See :class:`ParseResults.pprint` for an example of a recursive
+    parser created using ``Forward``.
+    """
+    def __init__(self, other=None):
+        super(Forward, self).__init__(other, savelist=False)
+
+    def __lshift__(self, other):
+        if isinstance(other, basestring):
+            other = self._literalStringClass(other)
+        self.expr = other
+        self.strRepr = None
+        self.mayIndexError = self.expr.mayIndexError
+        self.mayReturnEmpty = self.expr.mayReturnEmpty
+        self.setWhitespaceChars(self.expr.whiteChars)
+        self.skipWhitespace = self.expr.skipWhitespace
+        self.saveAsList = self.expr.saveAsList
+        self.ignoreExprs.extend(self.expr.ignoreExprs)
+        return self
+
+    def __ilshift__(self, other):
+        return self << other
+
+    def leaveWhitespace(self):
+        self.skipWhitespace = False
+        return self
+
+    def streamline(self):
+        if not self.streamlined:
+            self.streamlined = True
+            if self.expr is not None:
+                self.expr.streamline()
+        return self
+
+    def validate(self, validateTrace=None):
+        if validateTrace is None:
+            validateTrace = []
+
+        if self not in validateTrace:
+            tmp = validateTrace[:] + [self]
+            if self.expr is not None:
+                self.expr.validate(tmp)
+        self.checkRecursion([])
+
+    def __str__(self):
+        if hasattr(self, "name"):
+            return self.name
+        if self.strRepr is not None:
+            return self.strRepr
+
+        # Avoid infinite recursion by setting a temporary strRepr
+        self.strRepr = ": ..."
+
+        # Use the string representation of main expression.
+        retString = '...'
+        try:
+            if self.expr is not None:
+                retString = _ustr(self.expr)[:1000]
+            else:
+                retString = "None"
+        finally:
+            self.strRepr = self.__class__.__name__ + ": " + retString
+        return self.strRepr
+
+    def copy(self):
+        if self.expr is not None:
+            return super(Forward, self).copy()
+        else:
+            ret = Forward()
+            ret <<= self
+            return ret
+
+    def _setResultsName(self, name, listAllMatches=False):
+        if __diag__.warn_name_set_on_empty_Forward:
+            if self.expr is None:
+                warnings.warn("{0}: setting results name {0!r} on {1} expression "
+                              "that has no contained expression".format("warn_name_set_on_empty_Forward",
+                                                                        name,
+                                                                        type(self).__name__),
+                              stacklevel=3)
+
+        return super(Forward, self)._setResultsName(name, listAllMatches)
+
+class TokenConverter(ParseElementEnhance):
+    """
+    Abstract subclass of :class:`ParseExpression`, for converting parsed results.
+    """
+    def __init__(self, expr, savelist=False):
+        super(TokenConverter, self).__init__(expr)  # , savelist)
+        self.saveAsList = False
+
+class Combine(TokenConverter):
+    """Converter to concatenate all matching tokens to a single string.
+    By default, the matching patterns must also be contiguous in the
+    input string; this can be disabled by specifying
+    ``'adjacent=False'`` in the constructor.
+
+    Example::
+
+        real = Word(nums) + '.' + Word(nums)
+        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
+        # will also erroneously match the following
+        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']
+
+        real = Combine(Word(nums) + '.' + Word(nums))
+        print(real.parseString('3.1416')) # -> ['3.1416']
+        # no match when there are internal spaces
+        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
+    """
+    def __init__(self, expr, joinString="", adjacent=True):
+        super(Combine, self).__init__(expr)
+        # suppress whitespace-stripping in contained parse expressions, but re-enable it on the Combine itself
+        if adjacent:
+            self.leaveWhitespace()
+        self.adjacent = adjacent
+        self.skipWhitespace = True
+        self.joinString = joinString
+        self.callPreparse = True
+
+    def ignore(self, other):
+        if self.adjacent:
+            ParserElement.ignore(self, other)
+        else:
+            super(Combine, self).ignore(other)
+        return self
+
+    def postParse(self, instring, loc, tokenlist):
+        retToks = tokenlist.copy()
+        del retToks[:]
+        retToks += ParseResults(["".join(tokenlist._asStringList(self.joinString))], modal=self.modalResults)
+
+        if self.resultsName and retToks.haskeys():
+            return [retToks]
+        else:
+            return retToks
+
+class Group(TokenConverter):
+    """Converter to return the matched tokens as a list - useful for
+    returning tokens of :class:`ZeroOrMore` and :class:`OneOrMore` expressions.
+
+    Example::
+
+        ident = Word(alphas)
+        num = Word(nums)
+        term = ident | num
+        func = ident + Optional(delimitedList(term))
+        print(func.parseString("fn a, b, 100"))  # -> ['fn', 'a', 'b', '100']
+
+        func = ident + Group(Optional(delimitedList(term)))
+        print(func.parseString("fn a, b, 100"))  # -> ['fn', ['a', 'b', '100']]
+    """
+    def __init__(self, expr):
+        super(Group, self).__init__(expr)
+        self.saveAsList = True
+
+    def postParse(self, instring, loc, tokenlist):
+        return [tokenlist]
+
+class Dict(TokenConverter):
+    """Converter to return a repetitive expression as a list, but also
+    as a dictionary. Each element can also be referenced using the first
+    token in the expression as its key. Useful for tabular report
+    scraping when the first column can be used as a item key.
+
+    Example::
+
+        data_word = Word(alphas)
+        label = data_word + FollowedBy(':')
+        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))
+
+        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
+        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
+
+        # print attributes as plain groups
+        print(OneOrMore(attr_expr).parseString(text).dump())
+
+        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
+        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
+        print(result.dump())
+
+        # access named fields as dict entries, or output as dict
+        print(result['shape'])
+        print(result.asDict())
+
+    prints::
+
+        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']
+        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
+        - color: light blue
+        - posn: upper left
+        - shape: SQUARE
+        - texture: burlap
+        SQUARE
+        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
+
+    See more examples at :class:`ParseResults` of accessing fields by results name.
+    """
+    def __init__(self, expr):
+        super(Dict, self).__init__(expr)
+        self.saveAsList = True
+
+    def postParse(self, instring, loc, tokenlist):
+        for i, tok in enumerate(tokenlist):
+            if len(tok) == 0:
+                continue
+            ikey = tok[0]
+            if isinstance(ikey, int):
+                ikey = _ustr(tok[0]).strip()
+            if len(tok) == 1:
+                tokenlist[ikey] = _ParseResultsWithOffset("", i)
+            elif len(tok) == 2 and not isinstance(tok[1], ParseResults):
+                tokenlist[ikey] = _ParseResultsWithOffset(tok[1], i)
+            else:
+                dictvalue = tok.copy()  # ParseResults(i)
+                del dictvalue[0]
+                if len(dictvalue) != 1 or (isinstance(dictvalue, ParseResults) and dictvalue.haskeys()):
+                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue, i)
+                else:
+                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue[0], i)
+
+        if self.resultsName:
+            return [tokenlist]
+        else:
+            return tokenlist
+
+
+class Suppress(TokenConverter):
+    """Converter for ignoring the results of a parsed expression.
+
+    Example::
+
+        source = "a, b, c,d"
+        wd = Word(alphas)
+        wd_list1 = wd + ZeroOrMore(',' + wd)
+        print(wd_list1.parseString(source))
+
+        # often, delimiters that are useful during parsing are just in the
+        # way afterward - use Suppress to keep them out of the parsed output
+        wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
+        print(wd_list2.parseString(source))
+
+    prints::
+
+        ['a', ',', 'b', ',', 'c', ',', 'd']
+        ['a', 'b', 'c', 'd']
+
+    (See also :class:`delimitedList`.)
+    """
+    def postParse(self, instring, loc, tokenlist):
+        return []
+
+    def suppress(self):
+        return self
+
+
+class OnlyOnce(object):
+    """Wrapper for parse actions, to ensure they are only called once.
+    """
+    def __init__(self, methodCall):
+        self.callable = _trim_arity(methodCall)
+        self.called = False
+    def __call__(self, s, l, t):
+        if not self.called:
+            results = self.callable(s, l, t)
+            self.called = True
+            return results
+        raise ParseException(s, l, "")
+    def reset(self):
+        self.called = False
+
+def traceParseAction(f):
+    """Decorator for debugging parse actions.
+
+    When the parse action is called, this decorator will print
+    ``">> entering method-name(line:<current_source_line>, <parse_location>, <matched_tokens>)"``.
+    When the parse action completes, the decorator will print
+    ``"<<"`` followed by the returned value, or any exception that the parse action raised.
+
+    Example::
+
+        wd = Word(alphas)
+
+        @traceParseAction
+        def remove_duplicate_chars(tokens):
+            return ''.join(sorted(set(''.join(tokens))))
+
+        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
+        print(wds.parseString("slkdjs sld sldd sdlf sdljf"))
+
+    prints::
+
+        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
+        <<leaving remove_duplicate_chars (ret: 'dfjkls')
+        ['dfjkls']
+    """
+    f = _trim_arity(f)
+    def z(*paArgs):
+        thisFunc = f.__name__
+        s, l, t = paArgs[-3:]
+        if len(paArgs) > 3:
+            thisFunc = paArgs[0].__class__.__name__ + '.' + thisFunc
+        sys.stderr.write(">>entering %s(line: '%s', %d, %r)\n" % (thisFunc, line(l, s), l, t))
+        try:
+            ret = f(*paArgs)
+        except Exception as exc:
+            sys.stderr.write("<<leaving %s (exception: %s)\n" % (thisFunc, exc))
+            raise
+        sys.stderr.write("<<leaving %s (ret: %r)\n" % (thisFunc, ret))
+        return ret
+    try:
+        z.__name__ = f.__name__
+    except AttributeError:
+        pass
+    return z
+
+#
+# global helpers
+#
+def delimitedList(expr, delim=",", combine=False):
+    """Helper to define a delimited list of expressions - the delimiter
+    defaults to ','. By default, the list elements and delimiters can
+    have intervening whitespace, and comments, but this can be
+    overridden by passing ``combine=True`` in the constructor. If
+    ``combine`` is set to ``True``, the matching tokens are
+    returned as a single token string, with the delimiters included;
+    otherwise, the matching tokens are returned as a list of tokens,
+    with the delimiters suppressed.
+
+    Example::
+
+        delimitedList(Word(alphas)).parseString("aa,bb,cc") # -> ['aa', 'bb', 'cc']
+        delimitedList(Word(hexnums), delim=':', combine=True).parseString("AA:BB:CC:DD:EE") # -> ['AA:BB:CC:DD:EE']
+    """
+    dlName = _ustr(expr) + " [" + _ustr(delim) + " " + _ustr(expr) + "]..."
+    if combine:
+        return Combine(expr + ZeroOrMore(delim + expr)).setName(dlName)
+    else:
+        return (expr + ZeroOrMore(Suppress(delim) + expr)).setName(dlName)
+
+def countedArray(expr, intExpr=None):
+    """Helper to define a counted list of expressions.
+
+    This helper defines a pattern of the form::
+
+        integer expr expr expr...
+
+    where the leading integer tells how many expr expressions follow.
+    The matched tokens returns the array of expr tokens as a list - the
+    leading count token is suppressed.
+
+    If ``intExpr`` is specified, it should be a pyparsing expression
+    that produces an integer value.
+
+    Example::
+
+        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']
+
+        # in this parser, the leading integer value is given in binary,
+        # '10' indicating that 2 values are in the array
+        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
+        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
+    """
+    arrayExpr = Forward()
+    def countFieldParseAction(s, l, t):
+        n = t[0]
+        arrayExpr << (n and Group(And([expr] * n)) or Group(empty))
+        return []
+    if intExpr is None:
+        intExpr = Word(nums).setParseAction(lambda t: int(t[0]))
+    else:
+        intExpr = intExpr.copy()
+    intExpr.setName("arrayLen")
+    intExpr.addParseAction(countFieldParseAction, callDuringTry=True)
+    return (intExpr + arrayExpr).setName('(len) ' + _ustr(expr) + '...')
+
+def _flatten(L):
+    ret = []
+    for i in L:
+        if isinstance(i, list):
+            ret.extend(_flatten(i))
+        else:
+            ret.append(i)
+    return ret
+
+def matchPreviousLiteral(expr):
+    """Helper to define an expression that is indirectly defined from
+    the tokens matched in a previous expression, that is, it looks for
+    a 'repeat' of a previous expression.  For example::
+
+        first = Word(nums)
+        second = matchPreviousLiteral(first)
+        matchExpr = first + ":" + second
+
+    will match ``"1:1"``, but not ``"1:2"``.  Because this
+    matches a previous literal, will also match the leading
+    ``"1:1"`` in ``"1:10"``. If this is not desired, use
+    :class:`matchPreviousExpr`. Do *not* use with packrat parsing
+    enabled.
+    """
+    rep = Forward()
+    def copyTokenToRepeater(s, l, t):
+        if t:
+            if len(t) == 1:
+                rep << t[0]
+            else:
+                # flatten t tokens
+                tflat = _flatten(t.asList())
+                rep << And(Literal(tt) for tt in tflat)
+        else:
+            rep << Empty()
+    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
+    rep.setName('(prev) ' + _ustr(expr))
+    return rep
+
+def matchPreviousExpr(expr):
+    """Helper to define an expression that is indirectly defined from
+    the tokens matched in a previous expression, that is, it looks for
+    a 'repeat' of a previous expression.  For example::
+
+        first = Word(nums)
+        second = matchPreviousExpr(first)
+        matchExpr = first + ":" + second
+
+    will match ``"1:1"``, but not ``"1:2"``.  Because this
+    matches by expressions, will *not* match the leading ``"1:1"``
+    in ``"1:10"``; the expressions are evaluated first, and then
+    compared, so ``"1"`` is compared with ``"10"``. Do *not* use
+    with packrat parsing enabled.
+    """
+    rep = Forward()
+    e2 = expr.copy()
+    rep <<= e2
+    def copyTokenToRepeater(s, l, t):
+        matchTokens = _flatten(t.asList())
+        def mustMatchTheseTokens(s, l, t):
+            theseTokens = _flatten(t.asList())
+            if theseTokens != matchTokens:
+                raise ParseException('', 0, '')
+        rep.setParseAction(mustMatchTheseTokens, callDuringTry=True)
+    expr.addParseAction(copyTokenToRepeater, callDuringTry=True)
+    rep.setName('(prev) ' + _ustr(expr))
+    return rep
+
+def _escapeRegexRangeChars(s):
+    # ~  escape these chars: ^-[]
+    for c in r"\^-[]":
+        s = s.replace(c, _bslash + c)
+    s = s.replace("\n", r"\n")
+    s = s.replace("\t", r"\t")
+    return _ustr(s)
+
+def oneOf(strs, caseless=False, useRegex=True, asKeyword=False):
+    """Helper to quickly define a set of alternative Literals, and makes
+    sure to do longest-first testing when there is a conflict,
+    regardless of the input order, but returns
+    a :class:`MatchFirst` for best performance.
+
+    Parameters:
+
+     - strs - a string of space-delimited literals, or a collection of
+       string literals
+     - caseless - (default= ``False``) - treat all literals as
+       caseless
+     - useRegex - (default= ``True``) - as an optimization, will
+       generate a Regex object; otherwise, will generate
+       a :class:`MatchFirst` object (if ``caseless=True`` or ``asKeyword=True``, or if
+       creating a :class:`Regex` raises an exception)
+     - asKeyword - (default=``False``) - enforce Keyword-style matching on the
+       generated expressions
+
+    Example::
+
+        comp_oper = oneOf("< = > <= >= !=")
+        var = Word(alphas)
+        number = Word(nums)
+        term = var | number
+        comparison_expr = term + comp_oper + term
+        print(comparison_expr.searchString("B = 12  AA=23 B<=AA AA>12"))
+
+    prints::
+
+        [['B', '=', '12'], ['AA', '=', '23'], ['B', '<=', 'AA'], ['AA', '>', '12']]
+    """
+    if isinstance(caseless, basestring):
+        warnings.warn("More than one string argument passed to oneOf, pass "
+                      "choices as a list or space-delimited string", stacklevel=2)
+
+    if caseless:
+        isequal = (lambda a, b: a.upper() == b.upper())
+        masks = (lambda a, b: b.upper().startswith(a.upper()))
+        parseElementClass = CaselessKeyword if asKeyword else CaselessLiteral
+    else:
+        isequal = (lambda a, b: a == b)
+        masks = (lambda a, b: b.startswith(a))
+        parseElementClass = Keyword if asKeyword else Literal
+
+    symbols = []
+    if isinstance(strs, basestring):
+        symbols = strs.split()
+    elif isinstance(strs, Iterable):
+        symbols = list(strs)
+    else:
+        warnings.warn("Invalid argument to oneOf, expected string or iterable",
+                      SyntaxWarning, stacklevel=2)
+    if not symbols:
+        return NoMatch()
+
+    if not asKeyword:
+        # if not producing keywords, need to reorder to take care to avoid masking
+        # longer choices with shorter ones
+        i = 0
+        while i < len(symbols) - 1:
+            cur = symbols[i]
+            for j, other in enumerate(symbols[i + 1:]):
+                if isequal(other, cur):
+                    del symbols[i + j + 1]
+                    break
+                elif masks(cur, other):
+                    del symbols[i + j + 1]
+                    symbols.insert(i, other)
+                    break
+            else:
+                i += 1
+
+    if not (caseless or asKeyword) and useRegex:
+        # ~ print (strs, "->", "|".join([_escapeRegexChars(sym) for sym in symbols]))
+        try:
+            if len(symbols) == len("".join(symbols)):
+                return Regex("[%s]" % "".join(_escapeRegexRangeChars(sym) for sym in symbols)).setName(' | '.join(symbols))
+            else:
+                return Regex("|".join(re.escape(sym) for sym in symbols)).setName(' | '.join(symbols))
+        except Exception:
+            warnings.warn("Exception creating Regex for oneOf, building MatchFirst",
+                    SyntaxWarning, stacklevel=2)
+
+    # last resort, just use MatchFirst
+    return MatchFirst(parseElementClass(sym) for sym in symbols).setName(' | '.join(symbols))
+
+def dictOf(key, value):
+    """Helper to easily and clearly define a dictionary by specifying
+    the respective patterns for the key and value.  Takes care of
+    defining the :class:`Dict`, :class:`ZeroOrMore`, and
+    :class:`Group` tokens in the proper order.  The key pattern
+    can include delimiting markers or punctuation, as long as they are
+    suppressed, thereby leaving the significant key text.  The value
+    pattern can include named results, so that the :class:`Dict` results
+    can include named token fields.
+
+    Example::
+
+        text = "shape: SQUARE posn: upper left color: light blue texture: burlap"
+        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
+        print(OneOrMore(attr_expr).parseString(text).dump())
+
+        attr_label = label
+        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)
+
+        # similar to Dict, but simpler call format
+        result = dictOf(attr_label, attr_value).parseString(text)
+        print(result.dump())
+        print(result['shape'])
+        print(result.shape)  # object attribute access works too
+        print(result.asDict())
+
+    prints::
+
+        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
+        - color: light blue
+        - posn: upper left
+        - shape: SQUARE
+        - texture: burlap
+        SQUARE
+        SQUARE
+        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
+    """
+    return Dict(OneOrMore(Group(key + value)))
+
+def originalTextFor(expr, asString=True):
+    """Helper to return the original, untokenized text for a given
+    expression.  Useful to restore the parsed fields of an HTML start
+    tag into the raw tag text itself, or to revert separate tokens with
+    intervening whitespace back to the original matching input text. By
+    default, returns astring containing the original parsed text.
+
+    If the optional ``asString`` argument is passed as
+    ``False``, then the return value is
+    a :class:`ParseResults` containing any results names that
+    were originally matched, and a single token containing the original
+    matched text from the input string.  So if the expression passed to
+    :class:`originalTextFor` contains expressions with defined
+    results names, you must set ``asString`` to ``False`` if you
+    want to preserve those results name values.
+
+    Example::
+
+        src = "this is test <b> bold <i>text</i> </b> normal text "
+        for tag in ("b", "i"):
+            opener, closer = makeHTMLTags(tag)
+            patt = originalTextFor(opener + SkipTo(closer) + closer)
+            print(patt.searchString(src)[0])
+
+    prints::
+
+        ['<b> bold <i>text</i> </b>']
+        ['<i>text</i>']
+    """
+    locMarker = Empty().setParseAction(lambda s, loc, t: loc)
+    endlocMarker = locMarker.copy()
+    endlocMarker.callPreparse = False
+    matchExpr = locMarker("_original_start") + expr + endlocMarker("_original_end")
+    if asString:
+        extractText = lambda s, l, t: s[t._original_start: t._original_end]
+    else:
+        def extractText(s, l, t):
+            t[:] = [s[t.pop('_original_start'):t.pop('_original_end')]]
+    matchExpr.setParseAction(extractText)
+    matchExpr.ignoreExprs = expr.ignoreExprs
+    return matchExpr
+
+def ungroup(expr):
+    """Helper to undo pyparsing's default grouping of And expressions,
+    even if all but one are non-empty.
+    """
+    return TokenConverter(expr).addParseAction(lambda t: t[0])
+
+def locatedExpr(expr):
+    """Helper to decorate a returned token with its starting and ending
+    locations in the input string.
+
+    This helper adds the following results names:
+
+     - locn_start = location where matched expression begins
+     - locn_end = location where matched expression ends
+     - value = the actual parsed results
+
+    Be careful if the input text contains ``<TAB>`` characters, you
+    may want to call :class:`ParserElement.parseWithTabs`
+
+    Example::
+
+        wd = Word(alphas)
+        for match in locatedExpr(wd).searchString("ljsdf123lksdjjf123lkkjj1222"):
+            print(match)
+
+    prints::
+
+        [[0, 'ljsdf', 5]]
+        [[8, 'lksdjjf', 15]]
+        [[18, 'lkkjj', 23]]
+    """
+    locator = Empty().setParseAction(lambda s, l, t: l)
+    return Group(locator("locn_start") + expr("value") + locator.copy().leaveWhitespace()("locn_end"))
+
+
+# convenience constants for positional expressions
+empty       = Empty().setName("empty")
+lineStart   = LineStart().setName("lineStart")
+lineEnd     = LineEnd().setName("lineEnd")
+stringStart = StringStart().setName("stringStart")
+stringEnd   = StringEnd().setName("stringEnd")
+
+_escapedPunc = Word(_bslash, r"\[]-*.$+^?()~ ", exact=2).setParseAction(lambda s, l, t: t[0][1])
+_escapedHexChar = Regex(r"\\0?[xX][0-9a-fA-F]+").setParseAction(lambda s, l, t: unichr(int(t[0].lstrip(r'\0x'), 16)))
+_escapedOctChar = Regex(r"\\0[0-7]+").setParseAction(lambda s, l, t: unichr(int(t[0][1:], 8)))
+_singleChar = _escapedPunc | _escapedHexChar | _escapedOctChar | CharsNotIn(r'\]', exact=1)
+_charRange = Group(_singleChar + Suppress("-") + _singleChar)
+_reBracketExpr = Literal("[") + Optional("^").setResultsName("negate") + Group(OneOrMore(_charRange | _singleChar)).setResultsName("body") + "]"
+
+def srange(s):
+    r"""Helper to easily define string ranges for use in Word
+    construction. Borrows syntax from regexp '[]' string range
+    definitions::
+
+        srange("[0-9]")   -> "0123456789"
+        srange("[a-z]")   -> "abcdefghijklmnopqrstuvwxyz"
+        srange("[a-z$_]") -> "abcdefghijklmnopqrstuvwxyz$_"
+
+    The input string must be enclosed in []'s, and the returned string
+    is the expanded character set joined into a single string. The
+    values enclosed in the []'s may be:
+
+     - a single character
+     - an escaped character with a leading backslash (such as ``\-``
+       or ``\]``)
+     - an escaped hex character with a leading ``'\x'``
+       (``\x21``, which is a ``'!'`` character) (``\0x##``
+       is also supported for backwards compatibility)
+     - an escaped octal character with a leading ``'\0'``
+       (``\041``, which is a ``'!'`` character)
+     - a range of any of the above, separated by a dash (``'a-z'``,
+       etc.)
+     - any combination of the above (``'aeiouy'``,
+       ``'a-zA-Z0-9_$'``, etc.)
+    """
+    _expanded = lambda p: p if not isinstance(p, ParseResults) else ''.join(unichr(c) for c in range(ord(p[0]), ord(p[1]) + 1))
+    try:
+        return "".join(_expanded(part) for part in _reBracketExpr.parseString(s).body)
+    except Exception:
+        return ""
+
+def matchOnlyAtCol(n):
+    """Helper method for defining parse actions that require matching at
+    a specific column in the input text.
+    """
+    def verifyCol(strg, locn, toks):
+        if col(locn, strg) != n:
+            raise ParseException(strg, locn, "matched token not at column %d" % n)
+    return verifyCol
+
+def replaceWith(replStr):
+    """Helper method for common parse actions that simply return
+    a literal value.  Especially useful when used with
+    :class:`transformString<ParserElement.transformString>` ().
+
+    Example::
+
+        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
+        na = oneOf("N/A NA").setParseAction(replaceWith(math.nan))
+        term = na | num
+
+        OneOrMore(term).parseString("324 234 N/A 234") # -> [324, 234, nan, 234]
+    """
+    return lambda s, l, t: [replStr]
+
+def removeQuotes(s, l, t):
+    """Helper parse action for removing quotation marks from parsed
+    quoted strings.
+
+    Example::
+
+        # by default, quotation marks are included in parsed results
+        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["'Now is the Winter of our Discontent'"]
+
+        # use removeQuotes to strip quotation marks from parsed results
+        quotedString.setParseAction(removeQuotes)
+        quotedString.parseString("'Now is the Winter of our Discontent'") # -> ["Now is the Winter of our Discontent"]
+    """
+    return t[0][1:-1]
+
+def tokenMap(func, *args):
+    """Helper to define a parse action by mapping a function to all
+    elements of a ParseResults list. If any additional args are passed,
+    they are forwarded to the given function as additional arguments
+    after the token, as in
+    ``hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))``,
+    which will convert the parsed data to an integer using base 16.
+
+    Example (compare the last to example in :class:`ParserElement.transformString`::
+
+        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
+        hex_ints.runTests('''
+            00 11 22 aa FF 0a 0d 1a
+            ''')
+
+        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
+        OneOrMore(upperword).runTests('''
+            my kingdom for a horse
+            ''')
+
+        wd = Word(alphas).setParseAction(tokenMap(str.title))
+        OneOrMore(wd).setParseAction(' '.join).runTests('''
+            now is the winter of our discontent made glorious summer by this sun of york
+            ''')
+
+    prints::
+
+        00 11 22 aa FF 0a 0d 1a
+        [0, 17, 34, 170, 255, 10, 13, 26]
+
+        my kingdom for a horse
+        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']
+
+        now is the winter of our discontent made glorious summer by this sun of york
+        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
+    """
+    def pa(s, l, t):
+        return [func(tokn, *args) for tokn in t]
+
+    try:
+        func_name = getattr(func, '__name__',
+                            getattr(func, '__class__').__name__)
+    except Exception:
+        func_name = str(func)
+    pa.__name__ = func_name
+
+    return pa
+
+upcaseTokens = tokenMap(lambda t: _ustr(t).upper())
+"""(Deprecated) Helper parse action to convert tokens to upper case.
+Deprecated in favor of :class:`pyparsing_common.upcaseTokens`"""
+
+downcaseTokens = tokenMap(lambda t: _ustr(t).lower())
+"""(Deprecated) Helper parse action to convert tokens to lower case.
+Deprecated in favor of :class:`pyparsing_common.downcaseTokens`"""
+
+def _makeTags(tagStr, xml,
+              suppress_LT=Suppress("<"),
+              suppress_GT=Suppress(">")):
+    """Internal helper to construct opening and closing tag expressions, given a tag name"""
+    if isinstance(tagStr, basestring):
+        resname = tagStr
+        tagStr = Keyword(tagStr, caseless=not xml)
+    else:
+        resname = tagStr.name
+
+    tagAttrName = Word(alphas, alphanums + "_-:")
+    if xml:
+        tagAttrValue = dblQuotedString.copy().setParseAction(removeQuotes)
+        openTag = (suppress_LT
+                   + tagStr("tag")
+                   + Dict(ZeroOrMore(Group(tagAttrName + Suppress("=") + tagAttrValue)))
+                   + Optional("/", default=[False])("empty").setParseAction(lambda s, l, t: t[0] == '/')
+                   + suppress_GT)
+    else:
+        tagAttrValue = quotedString.copy().setParseAction(removeQuotes) | Word(printables, excludeChars=">")
+        openTag = (suppress_LT
+                   + tagStr("tag")
+                   + Dict(ZeroOrMore(Group(tagAttrName.setParseAction(downcaseTokens)
+                                           + Optional(Suppress("=") + tagAttrValue))))
+                   + Optional("/", default=[False])("empty").setParseAction(lambda s, l, t: t[0] == '/')
+                   + suppress_GT)
+    closeTag = Combine(_L("</") + tagStr + ">", adjacent=False)
+
+    openTag.setName("<%s>" % resname)
+    # add start<tagname> results name in parse action now that ungrouped names are not reported at two levels
+    openTag.addParseAction(lambda t: t.__setitem__("start" + "".join(resname.replace(":", " ").title().split()), t.copy()))
+    closeTag = closeTag("end" + "".join(resname.replace(":", " ").title().split())).setName("</%s>" % resname)
+    openTag.tag = resname
+    closeTag.tag = resname
+    openTag.tag_body = SkipTo(closeTag())
+    return openTag, closeTag
+
+def makeHTMLTags(tagStr):
+    """Helper to construct opening and closing tag expressions for HTML,
+    given a tag name. Matches tags in either upper or lower case,
+    attributes with namespaces and with quoted or unquoted values.
+
+    Example::
+
+        text = '<td>More info at the <a href="https://github.com/pyparsing/pyparsing/wiki">pyparsing</a> wiki page</td>'
+        # makeHTMLTags returns pyparsing expressions for the opening and
+        # closing tags as a 2-tuple
+        a, a_end = makeHTMLTags("A")
+        link_expr = a + SkipTo(a_end)("link_text") + a_end
+
+        for link in link_expr.searchString(text):
+            # attributes in the <A> tag (like "href" shown here) are
+            # also accessible as named results
+            print(link.link_text, '->', link.href)
+
+    prints::
+
+        pyparsing -> https://github.com/pyparsing/pyparsing/wiki
+    """
+    return _makeTags(tagStr, False)
+
+def makeXMLTags(tagStr):
+    """Helper to construct opening and closing tag expressions for XML,
+    given a tag name. Matches tags only in the given upper/lower case.
+
+    Example: similar to :class:`makeHTMLTags`
+    """
+    return _makeTags(tagStr, True)
+
+def withAttribute(*args, **attrDict):
+    """Helper to create a validating parse action to be used with start
+    tags created with :class:`makeXMLTags` or
+    :class:`makeHTMLTags`. Use ``withAttribute`` to qualify
+    a starting tag with a required attribute value, to avoid false
+    matches on common tags such as ``<TD>`` or ``<DIV>``.
+
+    Call ``withAttribute`` with a series of attribute names and
+    values. Specify the list of filter attributes names and values as:
+
+     - keyword arguments, as in ``(align="right")``, or
+     - as an explicit dict with ``**`` operator, when an attribute
+       name is also a Python reserved word, as in ``**{"class":"Customer", "align":"right"}``
+     - a list of name-value tuples, as in ``(("ns1:class", "Customer"), ("ns2:align", "right"))``
+
+    For attribute names with a namespace prefix, you must use the second
+    form.  Attribute names are matched insensitive to upper/lower case.
+
+    If just testing for ``class`` (with or without a namespace), use
+    :class:`withClass`.
+
+    To verify that the attribute exists, but without specifying a value,
+    pass ``withAttribute.ANY_VALUE`` as the value.
+
+    Example::
+
+        html = '''
+            <div>
+            Some text
+            <div type="grid">1 4 0 1 0</div>
+            <div type="graph">1,3 2,3 1,1</div>
+            <div>this has no type</div>
+            </div>
+
+        '''
+        div,div_end = makeHTMLTags("div")
+
+        # only match div tag having a type attribute with value "grid"
+        div_grid = div().setParseAction(withAttribute(type="grid"))
+        grid_expr = div_grid + SkipTo(div | div_end)("body")
+        for grid_header in grid_expr.searchString(html):
+            print(grid_header.body)
+
+        # construct a match with any div tag having a type attribute, regardless of the value
+        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
+        div_expr = div_any_type + SkipTo(div | div_end)("body")
+        for div_header in div_expr.searchString(html):
+            print(div_header.body)
+
+    prints::
+
+        1 4 0 1 0
+
+        1 4 0 1 0
+        1,3 2,3 1,1
+    """
+    if args:
+        attrs = args[:]
+    else:
+        attrs = attrDict.items()
+    attrs = [(k, v) for k, v in attrs]
+    def pa(s, l, tokens):
+        for attrName, attrValue in attrs:
+            if attrName not in tokens:
+                raise ParseException(s, l, "no matching attribute " + attrName)
+            if attrValue != withAttribute.ANY_VALUE and tokens[attrName] != attrValue:
+                raise ParseException(s, l, "attribute '%s' has value '%s', must be '%s'" %
+                                            (attrName, tokens[attrName], attrValue))
+    return pa
+withAttribute.ANY_VALUE = object()
+
+def withClass(classname, namespace=''):
+    """Simplified version of :class:`withAttribute` when
+    matching on a div class - made difficult because ``class`` is
+    a reserved word in Python.
+
+    Example::
+
+        html = '''
+            <div>
+            Some text
+            <div class="grid">1 4 0 1 0</div>
+            <div class="graph">1,3 2,3 1,1</div>
+            <div>this &lt;div&gt; has no class</div>
+            </div>
+
+        '''
+        div,div_end = makeHTMLTags("div")
+        div_grid = div().setParseAction(withClass("grid"))
+
+        grid_expr = div_grid + SkipTo(div | div_end)("body")
+        for grid_header in grid_expr.searchString(html):
+            print(grid_header.body)
+
+        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
+        div_expr = div_any_type + SkipTo(div | div_end)("body")
+        for div_header in div_expr.searchString(html):
+            print(div_header.body)
+
+    prints::
+
+        1 4 0 1 0
+
+        1 4 0 1 0
+        1,3 2,3 1,1
+    """
+    classattr = "%s:class" % namespace if namespace else "class"
+    return withAttribute(**{classattr: classname})
+
+opAssoc = SimpleNamespace()
+opAssoc.LEFT = object()
+opAssoc.RIGHT = object()
+
+def infixNotation(baseExpr, opList, lpar=Suppress('('), rpar=Suppress(')')):
+    """Helper method for constructing grammars of expressions made up of
+    operators working in a precedence hierarchy.  Operators may be unary
+    or binary, left- or right-associative.  Parse actions can also be
+    attached to operator expressions. The generated parser will also
+    recognize the use of parentheses to override operator precedences
+    (see example below).
+
+    Note: if you define a deep operator list, you may see performance
+    issues when using infixNotation. See
+    :class:`ParserElement.enablePackrat` for a mechanism to potentially
+    improve your parser performance.
+
+    Parameters:
+     - baseExpr - expression representing the most basic element for the
+       nested
+     - opList - list of tuples, one for each operator precedence level
+       in the expression grammar; each tuple is of the form ``(opExpr,
+       numTerms, rightLeftAssoc, parseAction)``, where:
+
+       - opExpr is the pyparsing expression for the operator; may also
+         be a string, which will be converted to a Literal; if numTerms
+         is 3, opExpr is a tuple of two expressions, for the two
+         operators separating the 3 terms
+       - numTerms is the number of terms for this operator (must be 1,
+         2, or 3)
+       - rightLeftAssoc is the indicator whether the operator is right
+         or left associative, using the pyparsing-defined constants
+         ``opAssoc.RIGHT`` and ``opAssoc.LEFT``.
+       - parseAction is the parse action to be associated with
+         expressions matching this operator expression (the parse action
+         tuple member may be omitted); if the parse action is passed
+         a tuple or list of functions, this is equivalent to calling
+         ``setParseAction(*fn)``
+         (:class:`ParserElement.setParseAction`)
+     - lpar - expression for matching left-parentheses
+       (default= ``Suppress('(')``)
+     - rpar - expression for matching right-parentheses
+       (default= ``Suppress(')')``)
+
+    Example::
+
+        # simple example of four-function arithmetic with ints and
+        # variable names
+        integer = pyparsing_common.signed_integer
+        varname = pyparsing_common.identifier
+
+        arith_expr = infixNotation(integer | varname,
+            [
+            ('-', 1, opAssoc.RIGHT),
+            (oneOf('* /'), 2, opAssoc.LEFT),
+            (oneOf('+ -'), 2, opAssoc.LEFT),
+            ])
+
+        arith_expr.runTests('''
+            5+3*6
+            (5+3)*6
+            -2--11
+            ''', fullDump=False)
+
+    prints::
+
+        5+3*6
+        [[5, '+', [3, '*', 6]]]
+
+        (5+3)*6
+        [[[5, '+', 3], '*', 6]]
+
+        -2--11
+        [[['-', 2], '-', ['-', 11]]]
+    """
+    # captive version of FollowedBy that does not do parse actions or capture results names
+    class _FB(FollowedBy):
+        def parseImpl(self, instring, loc, doActions=True):
+            self.expr.tryParse(instring, loc)
+            return loc, []
+
+    ret = Forward()
+    lastExpr = baseExpr | (lpar + ret + rpar)
+    for i, operDef in enumerate(opList):
+        opExpr, arity, rightLeftAssoc, pa = (operDef + (None, ))[:4]
+        termName = "%s term" % opExpr if arity < 3 else "%s%s term" % opExpr
+        if arity == 3:
+            if opExpr is None or len(opExpr) != 2:
+                raise ValueError(
+                    "if numterms=3, opExpr must be a tuple or list of two expressions")
+            opExpr1, opExpr2 = opExpr
+        thisExpr = Forward().setName(termName)
+        if rightLeftAssoc == opAssoc.LEFT:
+            if arity == 1:
+                matchExpr = _FB(lastExpr + opExpr) + Group(lastExpr + OneOrMore(opExpr))
+            elif arity == 2:
+                if opExpr is not None:
+                    matchExpr = _FB(lastExpr + opExpr + lastExpr) + Group(lastExpr + OneOrMore(opExpr + lastExpr))
+                else:
+                    matchExpr = _FB(lastExpr + lastExpr) + Group(lastExpr + OneOrMore(lastExpr))
+            elif arity == 3:
+                matchExpr = (_FB(lastExpr + opExpr1 + lastExpr + opExpr2 + lastExpr)
+                             + Group(lastExpr + OneOrMore(opExpr1 + lastExpr + opExpr2 + lastExpr)))
+            else:
+                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
+        elif rightLeftAssoc == opAssoc.RIGHT:
+            if arity == 1:
+                # try to avoid LR with this extra test
+                if not isinstance(opExpr, Optional):
+                    opExpr = Optional(opExpr)
+                matchExpr = _FB(opExpr.expr + thisExpr) + Group(opExpr + thisExpr)
+            elif arity == 2:
+                if opExpr is not None:
+                    matchExpr = _FB(lastExpr + opExpr + thisExpr) + Group(lastExpr + OneOrMore(opExpr + thisExpr))
+                else:
+                    matchExpr = _FB(lastExpr + thisExpr) + Group(lastExpr + OneOrMore(thisExpr))
+            elif arity == 3:
+                matchExpr = (_FB(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr)
+                             + Group(lastExpr + opExpr1 + thisExpr + opExpr2 + thisExpr))
+            else:
+                raise ValueError("operator must be unary (1), binary (2), or ternary (3)")
+        else:
+            raise ValueError("operator must indicate right or left associativity")
+        if pa:
+            if isinstance(pa, (tuple, list)):
+                matchExpr.setParseAction(*pa)
+            else:
+                matchExpr.setParseAction(pa)
+        thisExpr <<= (matchExpr.setName(termName) | lastExpr)
+        lastExpr = thisExpr
+    ret <<= lastExpr
+    return ret
+
+operatorPrecedence = infixNotation
+"""(Deprecated) Former name of :class:`infixNotation`, will be
+dropped in a future release."""
+
+dblQuotedString = Combine(Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*') + '"').setName("string enclosed in double quotes")
+sglQuotedString = Combine(Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*") + "'").setName("string enclosed in single quotes")
+quotedString = Combine(Regex(r'"(?:[^"\n\r\\]|(?:"")|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*') + '"'
+                       | Regex(r"'(?:[^'\n\r\\]|(?:'')|(?:\\(?:[^x]|x[0-9a-fA-F]+)))*") + "'").setName("quotedString using single or double quotes")
+unicodeString = Combine(_L('u') + quotedString.copy()).setName("unicode string literal")
+
+def nestedExpr(opener="(", closer=")", content=None, ignoreExpr=quotedString.copy()):
+    """Helper method for defining nested lists enclosed in opening and
+    closing delimiters ("(" and ")" are the default).
+
+    Parameters:
+     - opener - opening character for a nested list
+       (default= ``"("``); can also be a pyparsing expression
+     - closer - closing character for a nested list
+       (default= ``")"``); can also be a pyparsing expression
+     - content - expression for items within the nested lists
+       (default= ``None``)
+     - ignoreExpr - expression for ignoring opening and closing
+       delimiters (default= :class:`quotedString`)
+
+    If an expression is not provided for the content argument, the
+    nested expression will capture all whitespace-delimited content
+    between delimiters as a list of separate values.
+
+    Use the ``ignoreExpr`` argument to define expressions that may
+    contain opening or closing characters that should not be treated as
+    opening or closing characters for nesting, such as quotedString or
+    a comment expression.  Specify multiple expressions using an
+    :class:`Or` or :class:`MatchFirst`. The default is
+    :class:`quotedString`, but if no expressions are to be ignored, then
+    pass ``None`` for this argument.
+
+    Example::
+
+        data_type = oneOf("void int short long char float double")
+        decl_data_type = Combine(data_type + Optional(Word('*')))
+        ident = Word(alphas+'_', alphanums+'_')
+        number = pyparsing_common.number
+        arg = Group(decl_data_type + ident)
+        LPAR, RPAR = map(Suppress, "()")
+
+        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))
+
+        c_function = (decl_data_type("type")
+                      + ident("name")
+                      + LPAR + Optional(delimitedList(arg), [])("args") + RPAR
+                      + code_body("body"))
+        c_function.ignore(cStyleComment)
+
+        source_code = '''
+            int is_odd(int x) {
+                return (x%2);
+            }
+
+            int dec_to_hex(char hchar) {
+                if (hchar >= '0' && hchar <= '9') {
+                    return (ord(hchar)-ord('0'));
+                } else {
+                    return (10+ord(hchar)-ord('A'));
+                }
+            }
+        '''
+        for func in c_function.searchString(source_code):
+            print("%(name)s (%(type)s) args: %(args)s" % func)
+
+
+    prints::
+
+        is_odd (int) args: [['int', 'x']]
+        dec_to_hex (int) args: [['char', 'hchar']]
+    """
+    if opener == closer:
+        raise ValueError("opening and closing strings cannot be the same")
+    if content is None:
+        if isinstance(opener, basestring) and isinstance(closer, basestring):
+            if len(opener) == 1 and len(closer) == 1:
+                if ignoreExpr is not None:
+                    content = (Combine(OneOrMore(~ignoreExpr
+                                                 + CharsNotIn(opener
+                                                              + closer
+                                                              + ParserElement.DEFAULT_WHITE_CHARS, exact=1)
+                                                 )
+                                       ).setParseAction(lambda t: t[0].strip()))
+                else:
+                    content = (empty.copy() + CharsNotIn(opener
+                                                         + closer
+                                                         + ParserElement.DEFAULT_WHITE_CHARS
+                                                         ).setParseAction(lambda t: t[0].strip()))
+            else:
+                if ignoreExpr is not None:
+                    content = (Combine(OneOrMore(~ignoreExpr
+                                                 + ~Literal(opener)
+                                                 + ~Literal(closer)
+                                                 + CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS, exact=1))
+                                       ).setParseAction(lambda t: t[0].strip()))
+                else:
+                    content = (Combine(OneOrMore(~Literal(opener)
+                                                 + ~Literal(closer)
+                                                 + CharsNotIn(ParserElement.DEFAULT_WHITE_CHARS, exact=1))
+                                       ).setParseAction(lambda t: t[0].strip()))
+        else:
+            raise ValueError("opening and closing arguments must be strings if no content expression is given")
+    ret = Forward()
+    if ignoreExpr is not None:
+        ret <<= Group(Suppress(opener) + ZeroOrMore(ignoreExpr | ret | content) + Suppress(closer))
+    else:
+        ret <<= Group(Suppress(opener) + ZeroOrMore(ret | content)  + Suppress(closer))
+    ret.setName('nested %s%s expression' % (opener, closer))
+    return ret
+
+def indentedBlock(blockStatementExpr, indentStack, indent=True):
+    """Helper method for defining space-delimited indentation blocks,
+    such as those used to define block statements in Python source code.
+
+    Parameters:
+
+     - blockStatementExpr - expression defining syntax of statement that
+       is repeated within the indented block
+     - indentStack - list created by caller to manage indentation stack
+       (multiple statementWithIndentedBlock expressions within a single
+       grammar should share a common indentStack)
+     - indent - boolean indicating whether block must be indented beyond
+       the current level; set to False for block of left-most
+       statements (default= ``True``)
+
+    A valid block must contain at least one ``blockStatement``.
+
+    Example::
+
+        data = '''
+        def A(z):
+          A1
+          B = 100
+          G = A2
+          A2
+          A3
+        B
+        def BB(a,b,c):
+          BB1
+          def BBA():
+            bba1
+            bba2
+            bba3
+        C
+        D
+        def spam(x,y):
+             def eggs(z):
+                 pass
+        '''
+
+
+        indentStack = [1]
+        stmt = Forward()
+
+        identifier = Word(alphas, alphanums)
+        funcDecl = ("def" + identifier + Group("(" + Optional(delimitedList(identifier)) + ")") + ":")
+        func_body = indentedBlock(stmt, indentStack)
+        funcDef = Group(funcDecl + func_body)
+
+        rvalue = Forward()
+        funcCall = Group(identifier + "(" + Optional(delimitedList(rvalue)) + ")")
+        rvalue << (funcCall | identifier | Word(nums))
+        assignment = Group(identifier + "=" + rvalue)
+        stmt << (funcDef | assignment | identifier)
+
+        module_body = OneOrMore(stmt)
+
+        parseTree = module_body.parseString(data)
+        parseTree.pprint()
+
+    prints::
+
+        [['def',
+          'A',
+          ['(', 'z', ')'],
+          ':',
+          [['A1'], [['B', '=', '100']], [['G', '=', 'A2']], ['A2'], ['A3']]],
+         'B',
+         ['def',
+          'BB',
+          ['(', 'a', 'b', 'c', ')'],
+          ':',
+          [['BB1'], [['def', 'BBA', ['(', ')'], ':', [['bba1'], ['bba2'], ['bba3']]]]]],
+         'C',
+         'D',
+         ['def',
+          'spam',
+          ['(', 'x', 'y', ')'],
+          ':',
+          [[['def', 'eggs', ['(', 'z', ')'], ':', [['pass']]]]]]]
+    """
+    backup_stack = indentStack[:]
+
+    def reset_stack():
+        indentStack[:] = backup_stack
+
+    def checkPeerIndent(s, l, t):
+        if l >= len(s): return
+        curCol = col(l, s)
+        if curCol != indentStack[-1]:
+            if curCol > indentStack[-1]:
+                raise ParseException(s, l, "illegal nesting")
+            raise ParseException(s, l, "not a peer entry")
+
+    def checkSubIndent(s, l, t):
+        curCol = col(l, s)
+        if curCol > indentStack[-1]:
+            indentStack.append(curCol)
+        else:
+            raise ParseException(s, l, "not a subentry")
+
+    def checkUnindent(s, l, t):
+        if l >= len(s): return
+        curCol = col(l, s)
+        if not(indentStack and curCol in indentStack):
+            raise ParseException(s, l, "not an unindent")
+        if curCol < indentStack[-1]:
+            indentStack.pop()
+
+    NL = OneOrMore(LineEnd().setWhitespaceChars("\t ").suppress(), stopOn=StringEnd())
+    INDENT = (Empty() + Empty().setParseAction(checkSubIndent)).setName('INDENT')
+    PEER   = Empty().setParseAction(checkPeerIndent).setName('')
+    UNDENT = Empty().setParseAction(checkUnindent).setName('UNINDENT')
+    if indent:
+        smExpr = Group(Optional(NL)
+                       + INDENT
+                       + OneOrMore(PEER + Group(blockStatementExpr) + Optional(NL), stopOn=StringEnd())
+                       + UNDENT)
+    else:
+        smExpr = Group(Optional(NL)
+                       + OneOrMore(PEER + Group(blockStatementExpr) + Optional(NL), stopOn=StringEnd())
+                       + UNDENT)
+    smExpr.setFailAction(lambda a, b, c, d: reset_stack())
+    blockStatementExpr.ignore(_bslash + LineEnd())
+    return smExpr.setName('indented block')
+
+alphas8bit = srange(r"[\0xc0-\0xd6\0xd8-\0xf6\0xf8-\0xff]")
+punc8bit = srange(r"[\0xa1-\0xbf\0xd7\0xf7]")
+
+anyOpenTag, anyCloseTag = makeHTMLTags(Word(alphas, alphanums + "_:").setName('any tag'))
+_htmlEntityMap = dict(zip("gt lt amp nbsp quot apos".split(), '><& "\''))
+commonHTMLEntity = Regex('&(?P<entity>' + '|'.join(_htmlEntityMap.keys()) +");").setName("common HTML entity")
+def replaceHTMLEntity(t):
+    """Helper parser action to replace common HTML entities with their special characters"""
+    return _htmlEntityMap.get(t.entity)
+
+# it's easy to get these comment structures wrong - they're very common, so may as well make them available
+cStyleComment = Combine(Regex(r"/\*(?:[^*]|\*(?!/))*") + '*/').setName("C style comment")
+"Comment of the form ``/* ... */``"
+
+htmlComment = Regex(r"<!--[\s\S]*?-->").setName("HTML comment")
+"Comment of the form ``<!-- ... -->``"
+
+restOfLine = Regex(r".*").leaveWhitespace().setName("rest of line")
+dblSlashComment = Regex(r"//(?:\\\n|[^\n])*").setName("// comment")
+"Comment of the form ``// ... (to end of line)``"
+
+cppStyleComment = Combine(Regex(r"/\*(?:[^*]|\*(?!/))*") + '*/' | dblSlashComment).setName("C++ style comment")
+"Comment of either form :class:`cStyleComment` or :class:`dblSlashComment`"
+
+javaStyleComment = cppStyleComment
+"Same as :class:`cppStyleComment`"
+
+pythonStyleComment = Regex(r"#.*").setName("Python style comment")
+"Comment of the form ``# ... (to end of line)``"
+
+_commasepitem = Combine(OneOrMore(Word(printables, excludeChars=',')
+                                  + Optional(Word(" \t")
+                                             + ~Literal(",") + ~LineEnd()))).streamline().setName("commaItem")
+commaSeparatedList = delimitedList(Optional(quotedString.copy() | _commasepitem, default="")).setName("commaSeparatedList")
+"""(Deprecated) Predefined expression of 1 or more printable words or
+quoted strings, separated by commas.
+
+This expression is deprecated in favor of :class:`pyparsing_common.comma_separated_list`.
+"""
+
+# some other useful expressions - using lower-case class name since we are really using this as a namespace
+class pyparsing_common:
+    """Here are some common low-level expressions that may be useful in
+    jump-starting parser development:
+
+     - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,
+       :class:`scientific notation<sci_real>`)
+     - common :class:`programming identifiers<identifier>`
+     - network addresses (:class:`MAC<mac_address>`,
+       :class:`IPv4<ipv4_address>`, :class:`IPv6<ipv6_address>`)
+     - ISO8601 :class:`dates<iso8601_date>` and
+       :class:`datetime<iso8601_datetime>`
+     - :class:`UUID<uuid>`
+     - :class:`comma-separated list<comma_separated_list>`
+
+    Parse actions:
+
+     - :class:`convertToInteger`
+     - :class:`convertToFloat`
+     - :class:`convertToDate`
+     - :class:`convertToDatetime`
+     - :class:`stripHTMLTags`
+     - :class:`upcaseTokens`
+     - :class:`downcaseTokens`
+
+    Example::
+
+        pyparsing_common.number.runTests('''
+            # any int or real number, returned as the appropriate type
+            100
+            -100
+            +100
+            3.14159
+            6.02e23
+            1e-12
+            ''')
+
+        pyparsing_common.fnumber.runTests('''
+            # any int or real number, returned as float
+            100
+            -100
+            +100
+            3.14159
+            6.02e23
+            1e-12
+            ''')
+
+        pyparsing_common.hex_integer.runTests('''
+            # hex numbers
+            100
+            FF
+            ''')
+
+        pyparsing_common.fraction.runTests('''
+            # fractions
+            1/2
+            -3/4
+            ''')
+
+        pyparsing_common.mixed_integer.runTests('''
+            # mixed fractions
+            1
+            1/2
+            -3/4
+            1-3/4
+            ''')
+
+        import uuid
+        pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
+        pyparsing_common.uuid.runTests('''
+            # uuid
+            12345678-1234-5678-1234-567812345678
+            ''')
+
+    prints::
+
+        # any int or real number, returned as the appropriate type
+        100
+        [100]
+
+        -100
+        [-100]
+
+        +100
+        [100]
+
+        3.14159
+        [3.14159]
+
+        6.02e23
+        [6.02e+23]
+
+        1e-12
+        [1e-12]
+
+        # any int or real number, returned as float
+        100
+        [100.0]
+
+        -100
+        [-100.0]
+
+        +100
+        [100.0]
+
+        3.14159
+        [3.14159]
+
+        6.02e23
+        [6.02e+23]
+
+        1e-12
+        [1e-12]
+
+        # hex numbers
+        100
+        [256]
+
+        FF
+        [255]
+
+        # fractions
+        1/2
+        [0.5]
+
+        -3/4
+        [-0.75]
+
+        # mixed fractions
+        1
+        [1]
+
+        1/2
+        [0.5]
+
+        -3/4
+        [-0.75]
+
+        1-3/4
+        [1.75]
+
+        # uuid
+        12345678-1234-5678-1234-567812345678
+        [UUID('12345678-1234-5678-1234-567812345678')]
+    """
+
+    convertToInteger = tokenMap(int)
+    """
+    Parse action for converting parsed integers to Python int
+    """
+
+    convertToFloat = tokenMap(float)
+    """
+    Parse action for converting parsed numbers to Python float
+    """
+
+    integer = Word(nums).setName("integer").setParseAction(convertToInteger)
+    """expression that parses an unsigned integer, returns an int"""
+
+    hex_integer = Word(hexnums).setName("hex integer").setParseAction(tokenMap(int, 16))
+    """expression that parses a hexadecimal integer, returns an int"""
+
+    signed_integer = Regex(r'[+-]?\d+').setName("signed integer").setParseAction(convertToInteger)
+    """expression that parses an integer with optional leading sign, returns an int"""
+
+    fraction = (signed_integer().setParseAction(convertToFloat) + '/' + signed_integer().setParseAction(convertToFloat)).setName("fraction")
+    """fractional expression of an integer divided by an integer, returns a float"""
+    fraction.addParseAction(lambda t: t[0]/t[-1])
+
+    mixed_integer = (fraction | signed_integer + Optional(Optional('-').suppress() + fraction)).setName("fraction or mixed integer-fraction")
+    """mixed integer of the form 'integer - fraction', with optional leading integer, returns float"""
+    mixed_integer.addParseAction(sum)
+
+    real = Regex(r'[+-]?(?:\d+\.\d*|\.\d+)').setName("real number").setParseAction(convertToFloat)
+    """expression that parses a floating point number and returns a float"""
+
+    sci_real = Regex(r'[+-]?(?:\d+(?:[eE][+-]?\d+)|(?:\d+\.\d*|\.\d+)(?:[eE][+-]?\d+)?)').setName("real number with scientific notation").setParseAction(convertToFloat)
+    """expression that parses a floating point number with optional
+    scientific notation and returns a float"""
+
+    # streamlining this expression makes the docs nicer-looking
+    number = (sci_real | real | signed_integer).streamline()
+    """any numeric expression, returns the corresponding Python type"""
+
+    fnumber = Regex(r'[+-]?\d+\.?\d*([eE][+-]?\d+)?').setName("fnumber").setParseAction(convertToFloat)
+    """any int or real number, returned as float"""
+
+    identifier = Word(alphas + '_', alphanums + '_').setName("identifier")
+    """typical code identifier (leading alpha or '_', followed by 0 or more alphas, nums, or '_')"""
+
+    ipv4_address = Regex(r'(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}').setName("IPv4 address")
+    "IPv4 address (``0.0.0.0 - 255.255.255.255``)"
+
+    _ipv6_part = Regex(r'[0-9a-fA-F]{1,4}').setName("hex_integer")
+    _full_ipv6_address = (_ipv6_part + (':' + _ipv6_part) * 7).setName("full IPv6 address")
+    _short_ipv6_address = (Optional(_ipv6_part + (':' + _ipv6_part) * (0, 6))
+                           + "::"
+                           + Optional(_ipv6_part + (':' + _ipv6_part) * (0, 6))
+                           ).setName("short IPv6 address")
+    _short_ipv6_address.addCondition(lambda t: sum(1 for tt in t if pyparsing_common._ipv6_part.matches(tt)) < 8)
+    _mixed_ipv6_address = ("::ffff:" + ipv4_address).setName("mixed IPv6 address")
+    ipv6_address = Combine((_full_ipv6_address | _mixed_ipv6_address | _short_ipv6_address).setName("IPv6 address")).setName("IPv6 address")
+    "IPv6 address (long, short, or mixed form)"
+
+    mac_address = Regex(r'[0-9a-fA-F]{2}([:.-])[0-9a-fA-F]{2}(?:\1[0-9a-fA-F]{2}){4}').setName("MAC address")
+    "MAC address xx:xx:xx:xx:xx (may also have '-' or '.' delimiters)"
+
+    @staticmethod
+    def convertToDate(fmt="%Y-%m-%d"):
+        """
+        Helper to create a parse action for converting parsed date string to Python datetime.date
+
+        Params -
+         - fmt - format to be passed to datetime.strptime (default= ``"%Y-%m-%d"``)
+
+        Example::
+
+            date_expr = pyparsing_common.iso8601_date.copy()
+            date_expr.setParseAction(pyparsing_common.convertToDate())
+            print(date_expr.parseString("1999-12-31"))
+
+        prints::
+
+            [datetime.date(1999, 12, 31)]
+        """
+        def cvt_fn(s, l, t):
+            try:
+                return datetime.strptime(t[0], fmt).date()
+            except ValueError as ve:
+                raise ParseException(s, l, str(ve))
+        return cvt_fn
+
+    @staticmethod
+    def convertToDatetime(fmt="%Y-%m-%dT%H:%M:%S.%f"):
+        """Helper to create a parse action for converting parsed
+        datetime string to Python datetime.datetime
+
+        Params -
+         - fmt - format to be passed to datetime.strptime (default= ``"%Y-%m-%dT%H:%M:%S.%f"``)
+
+        Example::
+
+            dt_expr = pyparsing_common.iso8601_datetime.copy()
+            dt_expr.setParseAction(pyparsing_common.convertToDatetime())
+            print(dt_expr.parseString("1999-12-31T23:59:59.999"))
+
+        prints::
+
+            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]
+        """
+        def cvt_fn(s, l, t):
+            try:
+                return datetime.strptime(t[0], fmt)
+            except ValueError as ve:
+                raise ParseException(s, l, str(ve))
+        return cvt_fn
+
+    iso8601_date = Regex(r'(?P<year>\d{4})(?:-(?P<month>\d\d)(?:-(?P<day>\d\d))?)?').setName("ISO8601 date")
+    "ISO8601 date (``yyyy-mm-dd``)"
+
+    iso8601_datetime = Regex(r'(?P<year>\d{4})-(?P<month>\d\d)-(?P<day>\d\d)[T ](?P<hour>\d\d):(?P<minute>\d\d)(:(?P<second>\d\d(\.\d*)?)?)?(?P<tz>Z|[+-]\d\d:?\d\d)?').setName("ISO8601 datetime")
+    "ISO8601 datetime (``yyyy-mm-ddThh:mm:ss.s(Z|+-00:00)``) - trailing seconds, milliseconds, and timezone optional; accepts separating ``'T'`` or ``' '``"
+
+    uuid = Regex(r'[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}').setName("UUID")
+    "UUID (``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx``)"
+
+    _html_stripper = anyOpenTag.suppress() | anyCloseTag.suppress()
+    @staticmethod
+    def stripHTMLTags(s, l, tokens):
+        """Parse action to remove HTML tags from web page HTML source
+
+        Example::
+
+            # strip HTML links from normal text
+            text = '<td>More info at the <a href="https://github.com/pyparsing/pyparsing/wiki">pyparsing</a> wiki page</td>'
+            td, td_end = makeHTMLTags("TD")
+            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)("body") + td_end
+            print(table_text.parseString(text).body)
+
+        Prints::
+
+            More info at the pyparsing wiki page
+        """
+        return pyparsing_common._html_stripper.transformString(tokens[0])
+
+    _commasepitem = Combine(OneOrMore(~Literal(",")
+                                      + ~LineEnd()
+                                      + Word(printables, excludeChars=',')
+                                      + Optional(White(" \t")))).streamline().setName("commaItem")
+    comma_separated_list = delimitedList(Optional(quotedString.copy()
+                                                  | _commasepitem, default='')
+                                         ).setName("comma separated list")
+    """Predefined expression of 1 or more printable words or quoted strings, separated by commas."""
+
+    upcaseTokens = staticmethod(tokenMap(lambda t: _ustr(t).upper()))
+    """Parse action to convert tokens to upper case."""
+
+    downcaseTokens = staticmethod(tokenMap(lambda t: _ustr(t).lower()))
+    """Parse action to convert tokens to lower case."""
+
+
+class _lazyclassproperty(object):
+    def __init__(self, fn):
+        self.fn = fn
+        self.__doc__ = fn.__doc__
+        self.__name__ = fn.__name__
+
+    def __get__(self, obj, cls):
+        if cls is None:
+            cls = type(obj)
+        if not hasattr(cls, '_intern') or any(cls._intern is getattr(superclass, '_intern', [])
+                                              for superclass in cls.__mro__[1:]):
+            cls._intern = {}
+        attrname = self.fn.__name__
+        if attrname not in cls._intern:
+            cls._intern[attrname] = self.fn(cls)
+        return cls._intern[attrname]
+
+
+class unicode_set(object):
+    """
+    A set of Unicode characters, for language-specific strings for
+    ``alphas``, ``nums``, ``alphanums``, and ``printables``.
+    A unicode_set is defined by a list of ranges in the Unicode character
+    set, in a class attribute ``_ranges``, such as::
+
+        _ranges = [(0x0020, 0x007e), (0x00a0, 0x00ff),]
+
+    A unicode set can also be defined using multiple inheritance of other unicode sets::
+
+        class CJK(Chinese, Japanese, Korean):
+            pass
+    """
+    _ranges = []
+
+    @classmethod
+    def _get_chars_for_ranges(cls):
+        ret = []
+        for cc in cls.__mro__:
+            if cc is unicode_set:
+                break
+            for rr in cc._ranges:
+                ret.extend(range(rr[0], rr[-1] + 1))
+        return [unichr(c) for c in sorted(set(ret))]
+
+    @_lazyclassproperty
+    def printables(cls):
+        "all non-whitespace characters in this range"
+        return u''.join(filterfalse(unicode.isspace, cls._get_chars_for_ranges()))
+
+    @_lazyclassproperty
+    def alphas(cls):
+        "all alphabetic characters in this range"
+        return u''.join(filter(unicode.isalpha, cls._get_chars_for_ranges()))
+
+    @_lazyclassproperty
+    def nums(cls):
+        "all numeric digit characters in this range"
+        return u''.join(filter(unicode.isdigit, cls._get_chars_for_ranges()))
+
+    @_lazyclassproperty
+    def alphanums(cls):
+        "all alphanumeric characters in this range"
+        return cls.alphas + cls.nums
+
+
+class pyparsing_unicode(unicode_set):
+    """
+    A namespace class for defining common language unicode_sets.
+    """
+    _ranges = [(32, sys.maxunicode)]
+
+    class Latin1(unicode_set):
+        "Unicode set for Latin-1 Unicode Character Range"
+        _ranges = [(0x0020, 0x007e), (0x00a0, 0x00ff),]
+
+    class LatinA(unicode_set):
+        "Unicode set for Latin-A Unicode Character Range"
+        _ranges = [(0x0100, 0x017f),]
+
+    class LatinB(unicode_set):
+        "Unicode set for Latin-B Unicode Character Range"
+        _ranges = [(0x0180, 0x024f),]
+
+    class Greek(unicode_set):
+        "Unicode set for Greek Unicode Character Ranges"
+        _ranges = [
+            (0x0370, 0x03ff), (0x1f00, 0x1f15), (0x1f18, 0x1f1d), (0x1f20, 0x1f45), (0x1f48, 0x1f4d),
+            (0x1f50, 0x1f57), (0x1f59,), (0x1f5b,), (0x1f5d,), (0x1f5f, 0x1f7d), (0x1f80, 0x1fb4), (0x1fb6, 0x1fc4),
+            (0x1fc6, 0x1fd3), (0x1fd6, 0x1fdb), (0x1fdd, 0x1fef), (0x1ff2, 0x1ff4), (0x1ff6, 0x1ffe),
+        ]
+
+    class Cyrillic(unicode_set):
+        "Unicode set for Cyrillic Unicode Character Range"
+        _ranges = [(0x0400, 0x04ff)]
+
+    class Chinese(unicode_set):
+        "Unicode set for Chinese Unicode Character Range"
+        _ranges = [(0x4e00, 0x9fff), (0x3000, 0x303f),]
+
+    class Japanese(unicode_set):
+        "Unicode set for Japanese Unicode Character Range, combining Kanji, Hiragana, and Katakana ranges"
+        _ranges = []
+
+        class Kanji(unicode_set):
+            "Unicode set for Kanji Unicode Character Range"
+            _ranges = [(0x4E00, 0x9Fbf), (0x3000, 0x303f),]
+
+        class Hiragana(unicode_set):
+            "Unicode set for Hiragana Unicode Character Range"
+            _ranges = [(0x3040, 0x309f),]
+
+        class Katakana(unicode_set):
+            "Unicode set for Katakana  Unicode Character Range"
+            _ranges = [(0x30a0, 0x30ff),]
+
+    class Korean(unicode_set):
+        "Unicode set for Korean Unicode Character Range"
+        _ranges = [(0xac00, 0xd7af), (0x1100, 0x11ff), (0x3130, 0x318f), (0xa960, 0xa97f), (0xd7b0, 0xd7ff), (0x3000, 0x303f),]
+
+    class CJK(Chinese, Japanese, Korean):
+        "Unicode set for combined Chinese, Japanese, and Korean (CJK) Unicode Character Range"
+        pass
+
+    class Thai(unicode_set):
+        "Unicode set for Thai Unicode Character Range"
+        _ranges = [(0x0e01, 0x0e3a), (0x0e3f, 0x0e5b),]
+
+    class Arabic(unicode_set):
+        "Unicode set for Arabic Unicode Character Range"
+        _ranges = [(0x0600, 0x061b), (0x061e, 0x06ff), (0x0700, 0x077f),]
+
+    class Hebrew(unicode_set):
+        "Unicode set for Hebrew Unicode Character Range"
+        _ranges = [(0x0590, 0x05ff),]
+
+    class Devanagari(unicode_set):
+        "Unicode set for Devanagari Unicode Character Range"
+        _ranges = [(0x0900, 0x097f), (0xa8e0, 0xa8ff)]
+
+pyparsing_unicode.Japanese._ranges = (pyparsing_unicode.Japanese.Kanji._ranges
+                                      + pyparsing_unicode.Japanese.Hiragana._ranges
+                                      + pyparsing_unicode.Japanese.Katakana._ranges)
+
+# define ranges in language character sets
+if PY_3:
+    setattr(pyparsing_unicode, u"العربية", pyparsing_unicode.Arabic)
+    setattr(pyparsing_unicode, u"中文", pyparsing_unicode.Chinese)
+    setattr(pyparsing_unicode, u"кириллица", pyparsing_unicode.Cyrillic)
+    setattr(pyparsing_unicode, u"Ελληνικά", pyparsing_unicode.Greek)
+    setattr(pyparsing_unicode, u"עִברִית", pyparsing_unicode.Hebrew)
+    setattr(pyparsing_unicode, u"日本語", pyparsing_unicode.Japanese)
+    setattr(pyparsing_unicode.Japanese, u"漢字", pyparsing_unicode.Japanese.Kanji)
+    setattr(pyparsing_unicode.Japanese, u"カタカナ", pyparsing_unicode.Japanese.Katakana)
+    setattr(pyparsing_unicode.Japanese, u"ひらがな", pyparsing_unicode.Japanese.Hiragana)
+    setattr(pyparsing_unicode, u"한국어", pyparsing_unicode.Korean)
+    setattr(pyparsing_unicode, u"ไทย", pyparsing_unicode.Thai)
+    setattr(pyparsing_unicode, u"देवनागरी", pyparsing_unicode.Devanagari)
+
+
+class pyparsing_test:
+    """
+    namespace class for classes useful in writing unit tests
+    """
+
+    class reset_pyparsing_context:
+        """
+        Context manager to be used when writing unit tests that modify pyparsing config values:
+         - packrat parsing
+         - default whitespace characters.
+         - default keyword characters
+         - literal string auto-conversion class
+         - __diag__ settings
+
+        Example:
+            with reset_pyparsing_context():
+                # test that literals used to construct a grammar are automatically suppressed
+                ParserElement.inlineLiteralsUsing(Suppress)
+
+                term = Word(alphas) | Word(nums)
+                group = Group('(' + term[...] + ')')
+
+                # assert that the '()' characters are not included in the parsed tokens
+                self.assertParseAndCheckLisst(group, "(abc 123 def)", ['abc', '123', 'def'])
+
+            # after exiting context manager, literals are converted to Literal expressions again
+        """
+
+        def __init__(self):
+            self._save_context = {}
+
+        def save(self):
+            self._save_context["default_whitespace"] = ParserElement.DEFAULT_WHITE_CHARS
+            self._save_context["default_keyword_chars"] = Keyword.DEFAULT_KEYWORD_CHARS
+            self._save_context[
+                "literal_string_class"
+            ] = ParserElement._literalStringClass
+            self._save_context["packrat_enabled"] = ParserElement._packratEnabled
+            self._save_context["packrat_parse"] = ParserElement._parse
+            self._save_context["__diag__"] = {
+                name: getattr(__diag__, name) for name in __diag__._all_names
+            }
+            self._save_context["__compat__"] = {
+                "collect_all_And_tokens": __compat__.collect_all_And_tokens
+            }
+            return self
+
+        def restore(self):
+            # reset pyparsing global state
+            if (
+                ParserElement.DEFAULT_WHITE_CHARS
+                != self._save_context["default_whitespace"]
+            ):
+                ParserElement.setDefaultWhitespaceChars(
+                    self._save_context["default_whitespace"]
+                )
+            Keyword.DEFAULT_KEYWORD_CHARS = self._save_context["default_keyword_chars"]
+            ParserElement.inlineLiteralsUsing(
+                self._save_context["literal_string_class"]
+            )
+            for name, value in self._save_context["__diag__"].items():
+                setattr(__diag__, name, value)
+            ParserElement._packratEnabled = self._save_context["packrat_enabled"]
+            ParserElement._parse = self._save_context["packrat_parse"]
+            __compat__.collect_all_And_tokens = self._save_context["__compat__"]
+
+        def __enter__(self):
+            return self.save()
+
+        def __exit__(self, *args):
+            return self.restore()
+
+    class TestParseResultsAsserts:
+        """
+        A mixin class to add parse results assertion methods to normal unittest.TestCase classes.
+        """
+        def assertParseResultsEquals(
+            self, result, expected_list=None, expected_dict=None, msg=None
+        ):
+            """
+            Unit test assertion to compare a ParseResults object with an optional expected_list,
+            and compare any defined results names with an optional expected_dict.
+            """
+            if expected_list is not None:
+                self.assertEqual(expected_list, result.asList(), msg=msg)
+            if expected_dict is not None:
+                self.assertEqual(expected_dict, result.asDict(), msg=msg)
+
+        def assertParseAndCheckList(
+            self, expr, test_string, expected_list, msg=None, verbose=True
+        ):
+            """
+            Convenience wrapper assert to test a parser element and input string, and assert that
+            the resulting ParseResults.asList() is equal to the expected_list.
+            """
+            result = expr.parseString(test_string, parseAll=True)
+            if verbose:
+                print(result.dump())
+            self.assertParseResultsEquals(result, expected_list=expected_list, msg=msg)
+
+        def assertParseAndCheckDict(
+            self, expr, test_string, expected_dict, msg=None, verbose=True
+        ):
+            """
+            Convenience wrapper assert to test a parser element and input string, and assert that
+            the resulting ParseResults.asDict() is equal to the expected_dict.
+            """
+            result = expr.parseString(test_string, parseAll=True)
+            if verbose:
+                print(result.dump())
+            self.assertParseResultsEquals(result, expected_dict=expected_dict, msg=msg)
+
+        def assertRunTestResults(
+            self, run_tests_report, expected_parse_results=None, msg=None
+        ):
+            """
+            Unit test assertion to evaluate output of ParserElement.runTests(). If a list of
+            list-dict tuples is given as the expected_parse_results argument, then these are zipped
+            with the report tuples returned by runTests and evaluated using assertParseResultsEquals.
+            Finally, asserts that the overall runTests() success value is True.
+
+            :param run_tests_report: tuple(bool, [tuple(str, ParseResults or Exception)]) returned from runTests
+            :param expected_parse_results (optional): [tuple(str, list, dict, Exception)]
+            """
+            run_test_success, run_test_results = run_tests_report
+
+            if expected_parse_results is not None:
+                merged = [
+                    (rpt[0], rpt[1], expected)
+                    for rpt, expected in zip(run_test_results, expected_parse_results)
+                ]
+                for test_string, result, expected in merged:
+                    # expected should be a tuple containing a list and/or a dict or an exception,
+                    # and optional failure message string
+                    # an empty tuple will skip any result validation
+                    fail_msg = next(
+                        (exp for exp in expected if isinstance(exp, str)), None
+                    )
+                    expected_exception = next(
+                        (
+                            exp
+                            for exp in expected
+                            if isinstance(exp, type) and issubclass(exp, Exception)
+                        ),
+                        None,
+                    )
+                    if expected_exception is not None:
+                        with self.assertRaises(
+                            expected_exception=expected_exception, msg=fail_msg or msg
+                        ):
+                            if isinstance(result, Exception):
+                                raise result
+                    else:
+                        expected_list = next(
+                            (exp for exp in expected if isinstance(exp, list)), None
+                        )
+                        expected_dict = next(
+                            (exp for exp in expected if isinstance(exp, dict)), None
+                        )
+                        if (expected_list, expected_dict) != (None, None):
+                            self.assertParseResultsEquals(
+                                result,
+                                expected_list=expected_list,
+                                expected_dict=expected_dict,
+                                msg=fail_msg or msg,
+                            )
+                        else:
+                            # warning here maybe?
+                            print("no validation for {!r}".format(test_string))
+
+            # do this last, in case some specific test results can be reported instead
+            self.assertTrue(
+                run_test_success, msg=msg if msg is not None else "failed runTests"
+            )
+
+        @contextmanager
+        def assertRaisesParseException(self, exc_type=ParseException, msg=None):
+            with self.assertRaises(exc_type, msg=msg):
+                yield
+
+
+if __name__ == "__main__":
+
+    selectToken    = CaselessLiteral("select")
+    fromToken      = CaselessLiteral("from")
+
+    ident          = Word(alphas, alphanums + "_$")
+
+    columnName     = delimitedList(ident, ".", combine=True).setParseAction(upcaseTokens)
+    columnNameList = Group(delimitedList(columnName)).setName("columns")
+    columnSpec     = ('*' | columnNameList)
+
+    tableName      = delimitedList(ident, ".", combine=True).setParseAction(upcaseTokens)
+    tableNameList  = Group(delimitedList(tableName)).setName("tables")
+
+    simpleSQL      = selectToken("command") + columnSpec("columns") + fromToken + tableNameList("tables")
+
+    # demo runTests method, including embedded comments in test string
+    simpleSQL.runTests("""
+        # '*' as column list and dotted table name
+        select * from SYS.XYZZY
+
+        # caseless match on "SELECT", and casts back to "select"
+        SELECT * from XYZZY, ABC
+
+        # list of column names, and mixed case SELECT keyword
+        Select AA,BB,CC from Sys.dual
+
+        # multiple tables
+        Select A, B, C from Sys.dual, Table2
+
+        # invalid SELECT keyword - should fail
+        Xelect A, B, C from Sys.dual
+
+        # incomplete command - should fail
+        Select
+
+        # invalid column name - should fail
+        Select ^^^ frox Sys.dual
+
+        """)
+
+    pyparsing_common.number.runTests("""
+        100
+        -100
+        +100
+        3.14159
+        6.02e23
+        1e-12
+        """)
+
+    # any int or real number, returned as float
+    pyparsing_common.fnumber.runTests("""
+        100
+        -100
+        +100
+        3.14159
+        6.02e23
+        1e-12
+        """)
+
+    pyparsing_common.hex_integer.runTests("""
+        100
+        FF
+        """)
+
+    import uuid
+    pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
+    pyparsing_common.uuid.runTests("""
+        12345678-1234-5678-1234-567812345678
+        """)
Index: venv/lib/python3.8/site-packages/pylab.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pylab.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/pylab.py	(date 1589417755512)
@@ -0,0 +1,3 @@
+from matplotlib.pylab import *
+import matplotlib.pylab
+__doc__ = matplotlib.pylab.__doc__
Index: venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/RECORD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/RECORD	(date 1589417757118)
+++ venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/RECORD	(date 1589417757118)
@@ -0,0 +1,6 @@
+kiwisolver-1.2.0.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+kiwisolver-1.2.0.dist-info/METADATA,sha256=GJrhSqJ37gKKWd9lqPultG3mcP013xKeHLD7QyF5z4M,1718
+kiwisolver-1.2.0.dist-info/RECORD,,
+kiwisolver-1.2.0.dist-info/WHEEL,sha256=VEyGcIFAmk_1KbI6gaZGw_mMiT-pdGweASQLX-DzYaY,108
+kiwisolver-1.2.0.dist-info/top_level.txt,sha256=xqwWj7oSHlpIjcw2QMJb8puTFPdjDBO78AZp9gjTh9c,11
+kiwisolver.cpython-38-x86_64-linux-gnu.so,sha256=M6rlCMjCLuAQQkwvZn0yHSInz15TxuUvZwzjN9Oscr4,254056
Index: venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/top_level.txt	(date 1589417755942)
+++ venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/top_level.txt	(date 1589417755942)
@@ -0,0 +1,1 @@
+kiwisolver
Index: venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/WHEEL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/WHEEL	(date 1589417755942)
+++ venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/WHEEL	(date 1589417755942)
@@ -0,0 +1,5 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.31.1)
+Root-Is-Purelib: false
+Tag: cp38-cp38-manylinux1_x86_64
+
Index: venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/INSTALLER
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/INSTALLER	(date 1589417757118)
+++ venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/INSTALLER	(date 1589417757118)
@@ -0,0 +1,1 @@
+pip
Index: venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/METADATA
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/METADATA	(date 1589417755942)
+++ venv/lib/python3.8/site-packages/kiwisolver-1.2.0.dist-info/METADATA	(date 1589417755942)
@@ -0,0 +1,41 @@
+Metadata-Version: 2.1
+Name: kiwisolver
+Version: 1.2.0
+Summary: A fast implementation of the Cassowary constraint solver
+Home-page: https://github.com/nucleic/kiwi
+Author: The Nucleic Development Team
+Author-email: sccolbert@gmail.com
+License: BSD
+Platform: UNKNOWN
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Classifier: Programming Language :: Python :: Implementation :: CPython
+Requires-Python: >=3.6
+
+Welcome to Kiwi
+===============
+
+.. image:: https://travis-ci.org/nucleic/kiwi.svg?branch=master
+    :target: https://travis-ci.org/nucleic/kiwi
+.. image:: https://codecov.io/gh/nucleic/kiwi/branch/master/graph/badge.svg
+  :target: https://codecov.io/gh/nucleic/kiwi
+.. image:: https://readthedocs.org/projects/kiwisolver/badge/?version=latest
+    :target: https://kiwisolver.readthedocs.io/en/latest/?badge=latest
+    :alt: Documentation Status
+
+Kiwi is an efficient C++ implementation of the Cassowary constraint solving
+algorithm. Kiwi is an implementation of the algorithm based on the seminal
+Cassowary paper. It is *not* a refactoring of the original C++ solver. Kiwi
+has been designed from the ground up to be lightweight and fast. Kiwi ranges
+from 10x to 500x faster than the original Cassowary solver with typical use
+cases gaining a 40x improvement. Memory savings are consistently > 5x.
+
+In addition to the C++ solver, Kiwi ships with hand-rolled Python bindings.
+
+The version 1.1.0 of the Python bindings will be the last one to support
+Python 2, moving forward support will be limited to Python 3.5+.
+
+
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/RECORD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/RECORD	(date 1589417759958)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/RECORD	(date 1589417759958)
@@ -0,0 +1,892 @@
+__pycache__/pylab.cpython-38.pyc,,
+matplotlib-3.2.1-py3.8-nspkg.pth,sha256=FgO_3ug071EXEKT8mgOPBUhyrswPtPCYjOpUCyau7UU,569
+matplotlib-3.2.1.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+matplotlib-3.2.1.dist-info/METADATA,sha256=F1oGQTHWb-ltDWNhlYUpDR9UvF5wAQ7l9pyVaRKk_1M,5170
+matplotlib-3.2.1.dist-info/RECORD,,
+matplotlib-3.2.1.dist-info/WHEEL,sha256=VEyGcIFAmk_1KbI6gaZGw_mMiT-pdGweASQLX-DzYaY,108
+matplotlib-3.2.1.dist-info/namespace_packages.txt,sha256=A2PHFg9NKYOU4pEQ1h97U0Qd-rB-65W34XqC-56ZN9g,13
+matplotlib-3.2.1.dist-info/top_level.txt,sha256=9tEw2ni8DdgX8CceoYHqSH1s50vrJ9SDfgtLIG8e3Y4,30
+matplotlib/.libs/libpng16-cfdb1654.so.16.21.0,sha256=Fo8LBDWTuCclLkpSng_KP5pI7wcQtuXA9opT1FFkXl0,275648
+matplotlib/.libs/libz-a147dcb0.so.1.2.3,sha256=VwXH3AM7bnoa793tKDw_H0pW-VZos08-FEtM_g_VWVM,87848
+matplotlib/__init__.py,sha256=FLEIOOmlbJDBzqg4aq8W6w0wSpQF9tVwGu0VW8EwqsA,54615
+matplotlib/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/__pycache__/_animation_data.cpython-38.pyc,,
+matplotlib/__pycache__/_cm.cpython-38.pyc,,
+matplotlib/__pycache__/_cm_listed.cpython-38.pyc,,
+matplotlib/__pycache__/_color_data.cpython-38.pyc,,
+matplotlib/__pycache__/_constrained_layout.cpython-38.pyc,,
+matplotlib/__pycache__/_layoutbox.cpython-38.pyc,,
+matplotlib/__pycache__/_mathtext_data.cpython-38.pyc,,
+matplotlib/__pycache__/_pylab_helpers.cpython-38.pyc,,
+matplotlib/__pycache__/_text_layout.cpython-38.pyc,,
+matplotlib/__pycache__/_version.cpython-38.pyc,,
+matplotlib/__pycache__/afm.cpython-38.pyc,,
+matplotlib/__pycache__/animation.cpython-38.pyc,,
+matplotlib/__pycache__/artist.cpython-38.pyc,,
+matplotlib/__pycache__/axis.cpython-38.pyc,,
+matplotlib/__pycache__/backend_bases.cpython-38.pyc,,
+matplotlib/__pycache__/backend_managers.cpython-38.pyc,,
+matplotlib/__pycache__/backend_tools.cpython-38.pyc,,
+matplotlib/__pycache__/bezier.cpython-38.pyc,,
+matplotlib/__pycache__/blocking_input.cpython-38.pyc,,
+matplotlib/__pycache__/category.cpython-38.pyc,,
+matplotlib/__pycache__/cm.cpython-38.pyc,,
+matplotlib/__pycache__/collections.cpython-38.pyc,,
+matplotlib/__pycache__/colorbar.cpython-38.pyc,,
+matplotlib/__pycache__/colors.cpython-38.pyc,,
+matplotlib/__pycache__/container.cpython-38.pyc,,
+matplotlib/__pycache__/contour.cpython-38.pyc,,
+matplotlib/__pycache__/dates.cpython-38.pyc,,
+matplotlib/__pycache__/docstring.cpython-38.pyc,,
+matplotlib/__pycache__/dviread.cpython-38.pyc,,
+matplotlib/__pycache__/figure.cpython-38.pyc,,
+matplotlib/__pycache__/font_manager.cpython-38.pyc,,
+matplotlib/__pycache__/fontconfig_pattern.cpython-38.pyc,,
+matplotlib/__pycache__/gridspec.cpython-38.pyc,,
+matplotlib/__pycache__/hatch.cpython-38.pyc,,
+matplotlib/__pycache__/image.cpython-38.pyc,,
+matplotlib/__pycache__/legend.cpython-38.pyc,,
+matplotlib/__pycache__/legend_handler.cpython-38.pyc,,
+matplotlib/__pycache__/lines.cpython-38.pyc,,
+matplotlib/__pycache__/markers.cpython-38.pyc,,
+matplotlib/__pycache__/mathtext.cpython-38.pyc,,
+matplotlib/__pycache__/mlab.cpython-38.pyc,,
+matplotlib/__pycache__/offsetbox.cpython-38.pyc,,
+matplotlib/__pycache__/patches.cpython-38.pyc,,
+matplotlib/__pycache__/path.cpython-38.pyc,,
+matplotlib/__pycache__/patheffects.cpython-38.pyc,,
+matplotlib/__pycache__/pylab.cpython-38.pyc,,
+matplotlib/__pycache__/pyplot.cpython-38.pyc,,
+matplotlib/__pycache__/quiver.cpython-38.pyc,,
+matplotlib/__pycache__/rcsetup.cpython-38.pyc,,
+matplotlib/__pycache__/sankey.cpython-38.pyc,,
+matplotlib/__pycache__/scale.cpython-38.pyc,,
+matplotlib/__pycache__/spines.cpython-38.pyc,,
+matplotlib/__pycache__/stackplot.cpython-38.pyc,,
+matplotlib/__pycache__/streamplot.cpython-38.pyc,,
+matplotlib/__pycache__/table.cpython-38.pyc,,
+matplotlib/__pycache__/texmanager.cpython-38.pyc,,
+matplotlib/__pycache__/text.cpython-38.pyc,,
+matplotlib/__pycache__/textpath.cpython-38.pyc,,
+matplotlib/__pycache__/ticker.cpython-38.pyc,,
+matplotlib/__pycache__/tight_bbox.cpython-38.pyc,,
+matplotlib/__pycache__/tight_layout.cpython-38.pyc,,
+matplotlib/__pycache__/transforms.cpython-38.pyc,,
+matplotlib/__pycache__/type1font.cpython-38.pyc,,
+matplotlib/__pycache__/units.cpython-38.pyc,,
+matplotlib/__pycache__/widgets.cpython-38.pyc,,
+matplotlib/_animation_data.py,sha256=yClmMx6K-y6pjG3FdHancRyRhyneFuBEbQZ_lhezVys,7499
+matplotlib/_cm.py,sha256=nZCQdTWsPc5aJ-n08l2g293Wwg0kSWIgcfStzv9Dtxg,66643
+matplotlib/_cm_listed.py,sha256=9aMZ1uoTkxeDKlXfUNmY99HEtAXsW_JcSpwYaBs0kHs,98165
+matplotlib/_color_data.py,sha256=K2HSKblmuh-X_1ZZ9TcXcP7iKHaGC4mC_ScWqX_tdXE,34947
+matplotlib/_constrained_layout.py,sha256=eafuhM2rw5SL_ilqf0ImxQwtmFX_pR_boeKUrjTHvB0,29678
+matplotlib/_contour.cpython-38-x86_64-linux-gnu.so,sha256=J8lraYcOxIbZ6hAIyK0zvSYKyRunSzUdFyZSmcqF004,95144
+matplotlib/_image.cpython-38-x86_64-linux-gnu.so,sha256=jiNef3vzvaDg8wpvmd-fASybETFlxpgOlQiSYzofU_Q,239232
+matplotlib/_layoutbox.py,sha256=LG5KEmNm5apZa1putqzafEpX9w4lLwkoOPxg4owiO2Y,23872
+matplotlib/_mathtext_data.py,sha256=CmKFRW6mXCJqgZSQaiNOSG_VUn9WiSx5Hrg-4qKIn14,89371
+matplotlib/_path.cpython-38-x86_64-linux-gnu.so,sha256=Eb0DMGN_CF3SuY27zCnwjyranrGxg60lR8UYHuj6nSQ,190216
+matplotlib/_png.cpython-38-x86_64-linux-gnu.so,sha256=wL4br11noZizM-qrCC6H39HHmIFJkNibGmttbjh7Jdo,35552
+matplotlib/_pylab_helpers.py,sha256=RscVbvWEk6QyznzVvX-lSHkWCUOo9Lik7D7j4xelQJ4,3445
+matplotlib/_qhull.cpython-38-x86_64-linux-gnu.so,sha256=byRIOIOe-V5tqwnMCI7i-3lhqlNAC6VC6MP78x-7EpM,382672
+matplotlib/_text_layout.py,sha256=88DxzfAOPzpRjpu0OwLaRl6eOVJ5Var8ZxrDyhAQ7C8,1036
+matplotlib/_tri.cpython-38-x86_64-linux-gnu.so,sha256=7wzrMnAFHdKA3-9Eg3A-3x8E-_jDdkm4bJRZdHxiFBk,125960
+matplotlib/_version.py,sha256=etxeX_ByADCJBN53WhU2IEezakT1gixcO41qmDlMwfY,471
+matplotlib/afm.py,sha256=Y2FmLqutIXI__QiAbMNpFclleQrpGf1xsqBgjyCZir0,16642
+matplotlib/animation.py,sha256=N0HzAqLF1fscM2OIkER3gv4zsqUXWpxA8BmE_3Jqi5k,68066
+matplotlib/artist.py,sha256=2Qd4EUb9n4FAizD1fdb48diR7yRivgwvY8JESg4r4mE,53229
+matplotlib/axes/__init__.py,sha256=npQuBvs_xEBEGUP2-BBZzCrelsAQYgB1U96kSZTSWIs,46
+matplotlib/axes/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/axes/__pycache__/_axes.cpython-38.pyc,,
+matplotlib/axes/__pycache__/_base.cpython-38.pyc,,
+matplotlib/axes/__pycache__/_secondary_axes.cpython-38.pyc,,
+matplotlib/axes/__pycache__/_subplots.cpython-38.pyc,,
+matplotlib/axes/_axes.py,sha256=dSaGhVBB00lKf1AF9mCsaFcleTU8qKlSkVNP2ET_CPU,312519
+matplotlib/axes/_base.py,sha256=x89D4ElapqkI9lQ0oTAwTGcKPm-m-J26Fg-A0R3Ys1M,159726
+matplotlib/axes/_secondary_axes.py,sha256=plMlrvrznuuBSRakuznyCyr_ZNnSiuc_3J-YD3Hg8e8,14352
+matplotlib/axes/_subplots.py,sha256=rkT6vCCbCTItY_oAmlT-1rSPOoIerjScJC91I2YLTp0,10203
+matplotlib/axis.py,sha256=50zN9IvoaYGqq8t8zUiaaTtcUJeNjxdAnmXioRlfNWc,90049
+matplotlib/backend_bases.py,sha256=vNzjru0RDGIlzyeT9vjmWv8ktEFaax0C7W1tXz1qR_w,117888
+matplotlib/backend_managers.py,sha256=HuHOXPFjVF1R6ttBLxlucsLcEsWlRXtbm_wr1OJer2Q,12819
+matplotlib/backend_tools.py,sha256=zVBxfyPoQx0_lQe1Su0o-zTycOQt-zKWTp3HEY-jTxI,36252
+matplotlib/backends/__init__.py,sha256=cKAeiC5g0Up9svoxT24paOcnKc4tb5cbfbF-AWxXLUE,1722
+matplotlib/backends/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/backends/__pycache__/_backend_pdf_ps.cpython-38.pyc,,
+matplotlib/backends/__pycache__/_backend_tk.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_agg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_cairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_gtk3.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_gtk3agg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_gtk3cairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_macosx.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_mixed.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_nbagg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_pdf.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_pgf.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_ps.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt4.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt4agg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt4cairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt5.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt5agg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_qt5cairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_svg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_template.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_tkagg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_tkcairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_webagg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_webagg_core.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_wx.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_wxagg.cpython-38.pyc,,
+matplotlib/backends/__pycache__/backend_wxcairo.cpython-38.pyc,,
+matplotlib/backends/__pycache__/qt_compat.cpython-38.pyc,,
+matplotlib/backends/_backend_agg.cpython-38-x86_64-linux-gnu.so,sha256=UvDwI9RPPoFGH_PODmYP6DqcgeGCiqEoloxbDWaY51Y,358224
+matplotlib/backends/_backend_pdf_ps.py,sha256=T8x_NWAo9_Wvnpw6HnsneRI9AyAxcp80TDe-z2eosbM,2709
+matplotlib/backends/_backend_tk.py,sha256=k1eZjNeVC0rDMEKlOqevga-PFTERv9mcwUn_d_LZUyo,32021
+matplotlib/backends/_tkagg.cpython-38-x86_64-linux-gnu.so,sha256=r_YnlqbmC6XT7-Mm6AdmjNWa0mBoQLJd9xmbZow6HI0,27192
+matplotlib/backends/backend_agg.py,sha256=bjt43QEsQ-AeEeWXSBwRcbJsuDU7Dex-JsdbApekXzA,22347
+matplotlib/backends/backend_cairo.py,sha256=zJAQ5_OkKchNrItE8jN9CriAw4aQ0PP3qKqfINu3CSc,16562
+matplotlib/backends/backend_gtk3.py,sha256=ED_iXiCIXQlMJmh8YlJJcPkCxnm9Wly7kSod0UogtRc,33832
+matplotlib/backends/backend_gtk3agg.py,sha256=iKLBQ48c9Vh4krSxYeSDbHZ4G9wXoezk2VTIgNR4BWw,3072
+matplotlib/backends/backend_gtk3cairo.py,sha256=TDQUuYq5KCPvAU-MY2wBxpx2zAn9vOO_ieeE_7fdtS4,1591
+matplotlib/backends/backend_macosx.py,sha256=fALNUVEkZrqRrMHe5G_wy5i7FODvXXIum7RU2PXOiG4,5829
+matplotlib/backends/backend_mixed.py,sha256=R3-Z5AW7anq31csMjylsY4pSehsAsBLrxFD5YhZkZ6w,5280
+matplotlib/backends/backend_nbagg.py,sha256=xAv_OZfz6NtMrbAXWqwX9GCgTEsb5e5FpyAMHSIE-j4,8902
+matplotlib/backends/backend_pdf.py,sha256=sq_dTpmyOkYrtWdHQGKanZxRezXFmfeZNCMcObJR95A,96197
+matplotlib/backends/backend_pgf.py,sha256=R34xfvJyVm0k4IgjCHPU0bKeP02zJ0_Pr0hV6yaCVv8,43431
+matplotlib/backends/backend_ps.py,sha256=MWZmgx9nrlp9_u50gp_JZE2bEt2E3ixZxPqT9Wk5BqY,50575
+matplotlib/backends/backend_qt4.py,sha256=H9AsG4NAF27LdGUJDi1n5RwJhK1lI43sa9VXtUgW3K8,397
+matplotlib/backends/backend_qt4agg.py,sha256=BXMTBYmqyT_uvEpgSMWts5m2q1YK0vhPeybt0ZMVd0I,292
+matplotlib/backends/backend_qt4cairo.py,sha256=cvXKhk8CZvceDiEl9OXmumjJ6dZ3k0u93xy8w8i24gQ,229
+matplotlib/backends/backend_qt5.py,sha256=BjGTvVXytXhqRPpYNzoWaO03ULCfKdF3xG78e9nr0Sc,39256
+matplotlib/backends/backend_qt5agg.py,sha256=sF1oFyKNmOAdCGUChUbrKfmFmNo8QuD2SzuQQl4U0Mg,3560
+matplotlib/backends/backend_qt5cairo.py,sha256=YzXN1Ckr6JLS2r50LPxeypajdWccXaHoXC5QZ4VWrEY,1892
+matplotlib/backends/backend_svg.py,sha256=KGdJMf-cXIW82s0MC9-wOsmtEeo8P3np_uK06z2FGkI,43552
+matplotlib/backends/backend_template.py,sha256=SVPx4bl2n0eKgEolfJH7ljJnqlak0XhFE6Zr3yr6GU4,8407
+matplotlib/backends/backend_tkagg.py,sha256=WMslLWYmtxlmAaBH4tx4HjmRDWMKiSV91KHF9yeMRng,676
+matplotlib/backends/backend_tkcairo.py,sha256=dVCh7ZD_2OR0DBQ0N3icD8cDV1SeEzCsRja446wWhPw,1069
+matplotlib/backends/backend_webagg.py,sha256=NtP1VSSXQNvB_EBQi14No7flt1C64VwekiTG58tt7LU,10794
+matplotlib/backends/backend_webagg_core.py,sha256=u026hAuD_dwL0a2D7g--jzBr_KFS5UqJdFZDvIdlmII,17558
+matplotlib/backends/backend_wx.py,sha256=O606ybHYiOFCxpnhpZ_TYaHdULG53YuAZQDq70xjoms,66672
+matplotlib/backends/backend_wxagg.py,sha256=Jhb24f2W6e5yCqSi4F971hor_I8Epf_WMfutq3VoTYI,3027
+matplotlib/backends/backend_wxcairo.py,sha256=VC5TyJaX8TPLSgHv5ckAreoGrY_KiNRMQjVInMLlcFk,1843
+matplotlib/backends/qt_compat.py,sha256=Me6QS6xk4ASjOdBhr7RxvIp4Frzbdmu7mIXRO5uJlwU,6551
+matplotlib/backends/qt_editor/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+matplotlib/backends/qt_editor/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/backends/qt_editor/__pycache__/_formlayout.cpython-38.pyc,,
+matplotlib/backends/qt_editor/__pycache__/figureoptions.cpython-38.pyc,,
+matplotlib/backends/qt_editor/__pycache__/formlayout.cpython-38.pyc,,
+matplotlib/backends/qt_editor/__pycache__/formsubplottool.cpython-38.pyc,,
+matplotlib/backends/qt_editor/_formlayout.py,sha256=aHC33AfwtVjly7sPjLTFrVABZqAD2RAloR6KCEAUv5A,20592
+matplotlib/backends/qt_editor/figureoptions.py,sha256=YySx6A_wZSACMEHbXYkoQ6wR0_6PPwON2c6YwejUeVs,9481
+matplotlib/backends/qt_editor/formlayout.py,sha256=ERfmFwpvhl168PWNTJ0SFhQmPuSrmjzFNOe_puUCoSE,177
+matplotlib/backends/qt_editor/formsubplottool.py,sha256=HiiXkwCotra_hI9JU208KOs8Q9JuGH1uAW3mV5l3Evg,1934
+matplotlib/backends/web_backend/all_figures.html,sha256=m20aQIhuI4GBdrgZg_j02zSVjAcTRUufPOMSe4i7ayc,1525
+matplotlib/backends/web_backend/css/boilerplate.css,sha256=qui16QXRnQFNJDbcMasfH6KtN9hLjv8883U9cJmsVCE,2310
+matplotlib/backends/web_backend/css/fbm.css,sha256=Us0osu_rK8EUAdp_GXrh89tN_hUNCN-r7N1T1NvmmwI,1473
+matplotlib/backends/web_backend/css/page.css,sha256=Djf6ZNMFaM6_hVaizSkDFoqk-jn81qgduwles4AroGk,1599
+matplotlib/backends/web_backend/ipython_inline_figure.html,sha256=mzi-yWg4fcO6PdtTBCfiNuvcv04T53lcRQi-8hphwuE,1305
+matplotlib/backends/web_backend/jquery-ui-1.12.1/AUTHORS.txt,sha256=W2Lh1mbGo3Owc0oXX9U1-TFVSZYaC72KvSRrrRp3UII,12660
+matplotlib/backends/web_backend/jquery-ui-1.12.1/LICENSE.txt,sha256=3jP7aViA0LB2FdS4b3jNQ3lpBpWa3l_f73CWiCeg23g,1817
+matplotlib/backends/web_backend/jquery-ui-1.12.1/external/jquery/jquery.js,sha256=Qw82-bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU,293430
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_444444_256x240.png,sha256=6vfH7idHJ13abFPnMaENsaexX0-7RuG2nWuyBWvJ_YE,7006
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_555555_256x240.png,sha256=XQQFHf2dLXQDVUBPmKaD0ewP6y_KfXblM8Gm5c6S3S4,7074
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_777620_256x240.png,sha256=nb5KDQP-7W9l6yVgoKi0ukJkVF7o_THBdjo7IZ0DKNY,4676
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_777777_256x240.png,sha256=51snIR4W_PlHFRaAAbtwVco3bUb5KBELo9CCUjJFLlo,7013
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_cc0000_256x240.png,sha256=AokVddQ1jp7d4-QtlAV_jp-CqdZDdvce6GzvFJ0wU34,4632
+matplotlib/backends/web_backend/jquery-ui-1.12.1/images/ui-icons_ffffff_256x240.png,sha256=trBt7vK5JMw4NdY_SIPUeIJzSjPnGyEtkXpozt47jp0,6313
+matplotlib/backends/web_backend/jquery-ui-1.12.1/index.html,sha256=5g7_MLZlkh92FXWOR0q02My8knssXq20DXz-BkiYiP4,32588
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.css,sha256=p6xU9YulB7E2Ic62_PX-h59ayb3PBJ0WFTEQxq0EjHw,37326
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.js,sha256=T0Vest3yCU7pafRw9r-settMBX6JkKN06dqBnpQ8d30,520714
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.min.css,sha256=rByPlHULObEjJ6XQxW_flG2r-22R5dKiAoef-aXWfik,32076
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.min.js,sha256=KM512VNnjElC30ehFwehXjx1YCHPiQkOPmqnrWtpccM,253669
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.structure.css,sha256=E1uqV-d412nbSI-oqDMIQsTSttP-FS7Bxwc7mQdQYOo,18705
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.structure.min.css,sha256=rxais37anKUnpL5QzSYte-JnIsmkGmLG-ZhKSkZkwVM,15548
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.theme.css,sha256=mEMD30TTg-vIEGUmHHgcgSOgm0FBfLipyQ97Jr0TTH8,18671
+matplotlib/backends/web_backend/jquery-ui-1.12.1/jquery-ui.theme.min.css,sha256=AjyoyaRtnGVTywKH_Isxxu5PXI0s4CcE0BzPAX83Ppc,13849
+matplotlib/backends/web_backend/jquery-ui-1.12.1/package.json,sha256=kjEW8xMYuqRSwEE58KqTDNLgkx_6YL7tb1M9vlMK98w,1847
+matplotlib/backends/web_backend/js/mpl.js,sha256=xrBOaet7K2P2iq7wgIexceDdc9T_WFb4TPJXDX55JuU,16991
+matplotlib/backends/web_backend/js/mpl_tornado.js,sha256=lSxC7-yqF1GYY-6SheaHanx6SujMdcG7Vx2_3qbi-9Q,272
+matplotlib/backends/web_backend/js/nbagg_mpl.js,sha256=nqIF0zFBQGpOo5Tmq2uRkyFJDeali66PWQDSYySgpnQ,7428
+matplotlib/backends/web_backend/nbagg_uat.ipynb,sha256=y1N8hQzBJ05rJ2hZla2_Mw6tOUfNP1UHKo636W1e098,15933
+matplotlib/backends/web_backend/single_figure.html,sha256=-iFrlIsaY1rOK9bNiDxcX8fdc0WP7DXXq-MEuLYfOvM,1216
+matplotlib/bezier.py,sha256=Fqb2gqRnmS2wYjEZVFcdSngRxh5g_hFnxX82RFpimec,17271
+matplotlib/blocking_input.py,sha256=soMcLeXT2mKxkH5fyQqYEOP_Dd-TUjoA1_L7imb2B2Q,11105
+matplotlib/category.py,sha256=_iJbNlZzi3kqPtz_bhEBCj8q6RsBp5Urd3yNS81dOQg,7131
+matplotlib/cbook/__init__.py,sha256=k7_Gdpbg26mrQlfQJr3eTnRGvXInhfuEjWeBrY5-IlY,70426
+matplotlib/cbook/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/cbook/__pycache__/deprecation.cpython-38.pyc,,
+matplotlib/cbook/deprecation.py,sha256=E8xSJYv-br0VswU-LNQFTU0VlurdH6v2rNOMCvOfs2I,15080
+matplotlib/cm.py,sha256=qo1ZhJvKa7dCfALcj1X6rsy7R60pbJht7zK6pi_9EcA,12623
+matplotlib/collections.py,sha256=n_Mru2nfEhqvAGHAD3g_JhWAoxvtK5MjYFLfztvSK3s,74328
+matplotlib/colorbar.py,sha256=gaI17iRKX4NntEaLROYsg4q1fXUboda2L0w7PUaWSKg,63074
+matplotlib/colors.py,sha256=auWiOGPMdI5twHSoVVI0AyEe7O9LJfn3fKetp_8yMzA,75537
+matplotlib/compat/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+matplotlib/compat/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/container.py,sha256=yAq9s8ylaQxkt2N-qTSnBdF7zQZ5_-g96XgKzlySaLI,4302
+matplotlib/contour.py,sha256=p8PJvj7N7wd-yA94NP7cz230VHmYG3rkSsdYSoTP4hE,68387
+matplotlib/dates.py,sha256=hGrXqJ-O1ahP2yCYK0HjFWJu0jt-EDke1S33VZ2uOe0,66867
+matplotlib/docstring.py,sha256=TuDl6xhQwCISvIV5_rPKvT85V1k1IA5HVSyK-JMY9k4,3970
+matplotlib/dviread.py,sha256=sO5Mq6CkNYqgu5S3oMcDc6Gqh1YhD36VoRWH9PbbIJw,39009
+matplotlib/figure.py,sha256=yQsOCdFl3HHez8H3Y6xylSKAAEZzy-Hl-b1-BSJ3r8k,100886
+matplotlib/font_manager.py,sha256=OZ2BAmPgFrO4VjeBA-DKGM0H0I5T4ev5gtAdirbXwR0,45282
+matplotlib/fontconfig_pattern.py,sha256=El7xTXT3EnEESVONX9bKz_Yvaq4lLQp3KIYBgNbAguI,6719
+matplotlib/ft2font.cpython-38-x86_64-linux-gnu.so,sha256=8ZalFUIbDG4e1r_hh9jOu1kktn6flWEH2TZHa4Xol_A,919008
+matplotlib/gridspec.py,sha256=k_YO0Enho4Ztxi9-rv-ZgSXs-rrqKq1TdeOGwOzJwQI,25046
+matplotlib/hatch.py,sha256=6AcnVeBs4d_Uv_FWQoU48v28iW5F7oKI_RKkv68L_WM,6971
+matplotlib/image.py,sha256=0FR_I8bEV0XfM6kYyAS8j965LCbtapgnpxDWLrEV390,62787
+matplotlib/legend.py,sha256=QBSq0VyGWFsTB7QFGx8bpmUR-MLw9xJPrhMcJSlpVtU,48268
+matplotlib/legend_handler.py,sha256=hDMDvDJepK6UUyTJCkGQcAMVgLYW7eD16hQoQNVGQFY,26428
+matplotlib/lines.py,sha256=8u3vEQXb_ceOivl4zyL5MIDuVDlxgZwOsH9xf37OIYo,51362
+matplotlib/markers.py,sha256=Xpuq9O1t7OB3DBK2nZa4IbPjqV0ROGY9mxXW_NUKDKk,32533
+matplotlib/mathtext.py,sha256=udfWXa-87xV1Mhve65rO0jf5On3DAQwJ-FgD6BSojhM,120491
+matplotlib/mlab.py,sha256=1V0nvAkZF5RJbsIAp3AfTgzim2wRQCql0FCq7HvLknI,49040
+matplotlib/mpl-data/fonts/afm/cmex10.afm,sha256=blR3ERmrVBV5XKkAnDCj4NMeYVgzH7cXtJ3u59u9GuE,12070
+matplotlib/mpl-data/fonts/afm/cmmi10.afm,sha256=5qwEOpedEo76bDUahyuuF1q0cD84tRrX-VQ4p3MlfBo,10416
+matplotlib/mpl-data/fonts/afm/cmr10.afm,sha256=WDvgC_D3UkGJg9u-J0U6RaT02lF4oz3lQxHtg1r3lYw,10101
+matplotlib/mpl-data/fonts/afm/cmsy10.afm,sha256=AbmzvCVWBceHRfmRfeJ9E6xzOQTFLk0U1zDfpf3_MaM,8295
+matplotlib/mpl-data/fonts/afm/cmtt10.afm,sha256=4ji7_mTpeWMa93o_UHBWPKCnqsBfhJJNllat1lJArP4,6501
+matplotlib/mpl-data/fonts/afm/pagd8a.afm,sha256=jjFrigwkTpYLqa26cpzZvKQNBo-PuF4bmDVqaM4pMWw,17183
+matplotlib/mpl-data/fonts/afm/pagdo8a.afm,sha256=sgNQdeYyx8J-itGw9h31y95aMBiTCRvmNSPTXwwS7xg,17255
+matplotlib/mpl-data/fonts/afm/pagk8a.afm,sha256=ZUtfHPloNqcvGMHMxaKDSlshhOcjwheUx143RwpGdIU,17241
+matplotlib/mpl-data/fonts/afm/pagko8a.afm,sha256=Yj1wBg6Jsqqz1KBfhRoJ3ACR-CMQol8Fj_ZM5NZ1gDk,17346
+matplotlib/mpl-data/fonts/afm/pbkd8a.afm,sha256=Zl5o6J_di9Y5j2EpHtjew-_sfg7-WoeVmO9PzOYSTUc,15157
+matplotlib/mpl-data/fonts/afm/pbkdi8a.afm,sha256=JAOno930iTyfZILMf11vWtiaTgrJcPpP6FRTRhEMMD4,15278
+matplotlib/mpl-data/fonts/afm/pbkl8a.afm,sha256=UJqJjOJ6xQDgDBLX157mKpohIJFVmHM-N6x2-DiGv14,15000
+matplotlib/mpl-data/fonts/afm/pbkli8a.afm,sha256=AWislZ2hDbs0ox_qOWREugsbS8_8lpL48LPMR40qpi0,15181
+matplotlib/mpl-data/fonts/afm/pcrb8a.afm,sha256=6j1TS2Uc7DWSc-8l42TGDc1u0Fg8JspeWfxFayjUwi8,15352
+matplotlib/mpl-data/fonts/afm/pcrbo8a.afm,sha256=smg3mjl9QaBDtQIt06ko5GvaxLsO9QtTvYANuE5hfG0,15422
+matplotlib/mpl-data/fonts/afm/pcrr8a.afm,sha256=7nxFr0Ehz4E5KG_zSE5SZOhxRH8MyfnCbw-7x5wu7tw,15339
+matplotlib/mpl-data/fonts/afm/pcrro8a.afm,sha256=NKEz7XtdFkh9cA8MvY-S3UOZlV2Y_J3tMEWFFxj7QSg,15443
+matplotlib/mpl-data/fonts/afm/phvb8a.afm,sha256=NAx4M4HjL7vANCJbc-tk04Vkol-T0oaXeQ3T2h-XUvM,17155
+matplotlib/mpl-data/fonts/afm/phvb8an.afm,sha256=8e_myD-AQkNF7q9XNLb2m76_lX2TUr3a5wog_LIE1sk,17086
+matplotlib/mpl-data/fonts/afm/phvbo8a.afm,sha256=8fkBRmJ-SWY2YrBg8fFyjJyrJp8daQ6JPO6LvhM8xPI,17230
+matplotlib/mpl-data/fonts/afm/phvbo8an.afm,sha256=aeVRvV4r15BBvxuRJ0MG8ZHuH2HViuIiCYkvuapmkmM,17195
+matplotlib/mpl-data/fonts/afm/phvl8a.afm,sha256=IyMYM-bgl-gI6rG0EuZZ2OLzlxJfGeSh8xqsh0t-eJQ,15627
+matplotlib/mpl-data/fonts/afm/phvlo8a.afm,sha256=s12C-eNnIDHJ_UVbuiprjxBjCiHIbS3Y8ORTC-qTpuI,15729
+matplotlib/mpl-data/fonts/afm/phvr8a.afm,sha256=Kt8KaRidts89EBIK29X2JomDUEDxvroeaJz_RNTi6r4,17839
+matplotlib/mpl-data/fonts/afm/phvr8an.afm,sha256=lL5fAHTRwODl-sB5mH7IfsD1tnnea4yRUK-_Ca2bQHM,17781
+matplotlib/mpl-data/fonts/afm/phvro8a.afm,sha256=3KqK3eejiR4hIFBUynuSX_4lMdE2V2T58xOF8lX-fwc,17919
+matplotlib/mpl-data/fonts/afm/phvro8an.afm,sha256=Vx9rRf3YfasMY7tz-njSxz67xHKk-fNkN7yBi0X2IP0,17877
+matplotlib/mpl-data/fonts/afm/pncb8a.afm,sha256=aoXepTcDQtQa_mspflMJkEFKefzXHoyjz6ioJVI0YNc,16028
+matplotlib/mpl-data/fonts/afm/pncbi8a.afm,sha256=pCWW1MYgy0EmvwaYsaYJaAI_LfrsKmDANHu7Pk0RaiU,17496
+matplotlib/mpl-data/fonts/afm/pncr8a.afm,sha256=0CIB2BLe9r-6_Wl5ObRTTf98UOrezmGQ8ZOuBX5kLks,16665
+matplotlib/mpl-data/fonts/afm/pncri8a.afm,sha256=5R-pLZOnaHNG8pjV6MP3Ai-d2OTQYR_cYCb5zQhzfSU,16920
+matplotlib/mpl-data/fonts/afm/pplb8a.afm,sha256=3EzUbNnXr5Ft5eFLY00W9oWu59rHORgDXUuJaOoKN58,15662
+matplotlib/mpl-data/fonts/afm/pplbi8a.afm,sha256=X_9tVspvrcMer3OS8qvdwjFFqpAXYZneyCL2NHA902g,15810
+matplotlib/mpl-data/fonts/afm/pplr8a.afm,sha256=ijMb497FDJ9nVdVMb21F7W3-cu9sb_9nF0oriFpSn8k,15752
+matplotlib/mpl-data/fonts/afm/pplri8a.afm,sha256=8KITbarcUUMi_hdoRLLmNHtlqs0TtOSKqtPFft7X5nY,15733
+matplotlib/mpl-data/fonts/afm/psyr.afm,sha256=Iyt8ajE4B2Tm34oBj2pKtctIf9kPfq05suQefq8p3Ro,9644
+matplotlib/mpl-data/fonts/afm/ptmb8a.afm,sha256=bL1fA1NC4_nW14Zrnxz4nHlXJb4dzELJPvodqKnYeMg,17983
+matplotlib/mpl-data/fonts/afm/ptmbi8a.afm,sha256=-_Ui6XlKaFTHEnkoS_-1GtIr5VtGa3gFQ2ezLOYHs08,18070
+matplotlib/mpl-data/fonts/afm/ptmr8a.afm,sha256=IEcsWcmzJyjCwkgsw4o6hIMmzlyXUglJat9s1PZNnEU,17942
+matplotlib/mpl-data/fonts/afm/ptmri8a.afm,sha256=49fQMg5fIGguZ7rgc_2styMK55Pv5bPTs7wCzqpcGpk,18068
+matplotlib/mpl-data/fonts/afm/putb8a.afm,sha256=qMaHTdpkrNL-m4DWhjpxJCSmgYkCv1qIzLlFfM0rl40,21532
+matplotlib/mpl-data/fonts/afm/putbi8a.afm,sha256=g7AVJyiTxeMpNk_1cSfmYgM09uNUfPlZyWGv3D1vcAk,21931
+matplotlib/mpl-data/fonts/afm/putr8a.afm,sha256=XYmNC5GQgSVAZKTIYdYeNksE6znNm9GF_0SmQlriqx0,22148
+matplotlib/mpl-data/fonts/afm/putri8a.afm,sha256=i7fVe-iLyLtQxCfAa4IxdxH-ufcHmMk7hbCGG5TxAY4,21891
+matplotlib/mpl-data/fonts/afm/pzcmi8a.afm,sha256=wyuoIWEZOcoXrSl1tPzLkEahik7kGi91JJj-tkFRG4A,16250
+matplotlib/mpl-data/fonts/afm/pzdr.afm,sha256=MyjLAnzKYRdQBfof1W3k_hf30MvqOkqL__G22mQ5xww,9467
+matplotlib/mpl-data/fonts/pdfcorefonts/Courier-Bold.afm,sha256=sIDDI-B82VZ3C0mI_mHFITCZ7PVn37AIYMv1CrHX4sE,15333
+matplotlib/mpl-data/fonts/pdfcorefonts/Courier-BoldOblique.afm,sha256=zg61QobD3YU9UBfCXmvmhBNaFKno-xj8sY0b2RpgfLw,15399
+matplotlib/mpl-data/fonts/pdfcorefonts/Courier-Oblique.afm,sha256=vRQm5j1sTUN4hicT1PcVZ9P9DTTUHhEzfPXqUUzVZhE,15441
+matplotlib/mpl-data/fonts/pdfcorefonts/Courier.afm,sha256=Mdcq2teZEBJrIqVXnsnhee7oZnTs6-P8_292kWGTrw4,15335
+matplotlib/mpl-data/fonts/pdfcorefonts/Helvetica-Bold.afm,sha256=i2l4gcjuYXoXf28uK7yIVwuf0rnw6J7PwPVQeHj5iPw,69269
+matplotlib/mpl-data/fonts/pdfcorefonts/Helvetica-BoldOblique.afm,sha256=Um5O6qK11DXLt8uj_0IoWkc84TKqHK3bObSKUswQqvY,69365
+matplotlib/mpl-data/fonts/pdfcorefonts/Helvetica-Oblique.afm,sha256=hVYDg2b52kqtbVeCzmiv25bW1yYdpkZS-LXlGREN2Rs,74392
+matplotlib/mpl-data/fonts/pdfcorefonts/Helvetica.afm,sha256=23cvKDD7bQAJB3kdjSahJSTZaUOppznlIO6FXGslyW8,74292
+matplotlib/mpl-data/fonts/pdfcorefonts/Symbol.afm,sha256=P5UaoXr4y0qh4SiMa5uqijDT6ZDr2-jPmj1ayry593E,9740
+matplotlib/mpl-data/fonts/pdfcorefonts/Times-Bold.afm,sha256=cQTmr2LFPwKQE_sGQageMcmFicjye16mKJslsJLHQyE,64251
+matplotlib/mpl-data/fonts/pdfcorefonts/Times-BoldItalic.afm,sha256=pzWOdycm6RqocBWgAVY5Jq0z3Fp7LuqWgLNMx4q6OFw,59642
+matplotlib/mpl-data/fonts/pdfcorefonts/Times-Italic.afm,sha256=bK5puSMpGT_YUILwyJrXoxjfj7XJOdfv5TQ_iKsJRzw,66328
+matplotlib/mpl-data/fonts/pdfcorefonts/Times-Roman.afm,sha256=hhNrUnpazuDDKD1WpraPxqPWCYLrO7D7bMVOg-zI13o,60460
+matplotlib/mpl-data/fonts/pdfcorefonts/ZapfDingbats.afm,sha256=ZuOmt9GcKofjdOq8kqhPhtAIhOwkL2rTJTmZxAjFakA,9527
+matplotlib/mpl-data/fonts/pdfcorefonts/readme.txt,sha256=MRv8ppSITYYAb7lt5EOw9DWWNZIblfxsFhu5TQE7cpI,828
+matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf,sha256=sYS4njwQdfIva3FXW2_CDUlys8_TsjMiym_Vltyu8Wc,704128
+matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf,sha256=bt8CgxYBhq9FHL7nHnuEXy5Mq_Jku5ks5mjIPCVGXm8,641720
+matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf,sha256=zN90s1DxH9PdV3TeUOXmNGoaXaH1t9X7g1kGZel6UhM,633840
+matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf,sha256=P99pyr8GBJ6nCgC1kZNA4s4ebQKwzDxLRPtoAb0eDSI,756072
+matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf,sha256=ggmdz7paqGjN_CdFGYlSX-MpL3N_s8ngMozpzvWWUvY,25712
+matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf,sha256=uq2ppRcv4giGJRr_BDP8OEYZEtXa8HKH577lZiCo2pY,331536
+matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf,sha256=ppCBwVx2yCfgonpaf1x0thNchDSZlVSV_6jCDTqYKIs,253116
+matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf,sha256=KAUoE_enCfyJ9S0ZLcmV708P3Fw9e3OknWhJsZFtDNA,251472
+matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf,sha256=YC7Ia4lIz82VZIL-ZPlMNshndwFJ7y95HUYT9EO87LM,340240
+matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf,sha256=w3U_Lta8Zz8VhG3EWt2-s7nIcvMvsY_VOiHxvvHtdnY,355692
+matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf,sha256=2T7-x6nS6CZ2jRou6VuVhw4V4pWZqE80hK8d4c7C4YE,347064
+matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf,sha256=PnmU-8VPoQzjNSpC1Uj63X2crbacsRCbydlg9trFfwQ,345612
+matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf,sha256=EHJElW6ZYrnpb6zNxVGCXgrgiYrhNzcTPhuSGi_TX_o,379740
+matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf,sha256=KRTzLkfHd8J75Wd6-ufbTeefnkXeb8kJfZlJwjwU99U,14300
+matplotlib/mpl-data/fonts/ttf/LICENSE_DEJAVU,sha256=11k43sCY8G8Kw8AIUwZdlPAgvhw8Yu8dwpdboVtNmw4,4816
+matplotlib/mpl-data/fonts/ttf/LICENSE_STIX,sha256=cxFOZdp1AxNhXR6XxCzf5iJpNcu-APm-geOHhD-s0h8,5475
+matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf,sha256=FnN4Ax4t3cYhbWeBnJJg6aBv_ExHjk4jy5im_USxg8I,448228
+matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf,sha256=6FM9xwg_o0a9oZM9YOpKg7Z9CUW86vGzVB-CtKDixqA,237360
+matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf,sha256=mHiP1LpI37sr0CbA4gokeosGxzcoeWKLemuw1bsJc2w,181152
+matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf,sha256=bPyzM9IrfDxiO9_UAXTxTIXD1nMcphZsHtyAFA6uhSc,175040
+matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf,sha256=Ulb34CEzWsSFTRgPDovxmJZOwvyCAXYnbhaqvGU3u1c,59108
+matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf,sha256=XRBqW3jR_8MBdFU0ObhiV7-kXwiBIMs7QVClHcT5tgs,30512
+matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf,sha256=pb22DnbDf2yQqizotc3wBDqFGC_g27YcCGJivH9-Le8,41272
+matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf,sha256=BMr9pWiBv2YIZdq04X4c3CgL6NPLUPrl64aV1N4w9Ug,46752
+matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf,sha256=wYuH1gYUpCuusqItRH5kf9p_s6mUD-9X3L5RvRtKSxs,13656
+matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf,sha256=yNdvjUoSmsZCULmD7SVq9HabndG9P4dPhboL1JpAf0s,12228
+matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf,sha256=-9xVMYL4_1rcO8FiCKrCfR4PaSmKtA42ddLGqwtei1w,15972
+matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf,sha256=cYexyo8rZcdqMlpa9fNF5a2IoXLUTZuIvh0JD1Qp0i4,12556
+matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf,sha256=0lbHzpndzJmO8S42mlkhsz5NbvJLQCaH5Mcc7QZRDzc,19760
+matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf,sha256=3eBc-VtYbhQU3BnxiypfO6eAzEu8BdDvtIJSFbkS2oY,12192
+matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf,sha256=XFSKCptbESM8uxHtUFSAV2cybwxhSjd8dWVByq6f3w0,15836
+matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf,sha256=MUCYHrA0ZqFiSE_PjIGlJZgMuv79aUgQqE7Dtu3kuo0,12116
+matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf,sha256=_sdxDuEwBDtADpu9CyIXQxV7sIqA2TZVBCUiUjq5UCk,15704
+matplotlib/mpl-data/fonts/ttf/cmb10.ttf,sha256=B0SXtQxD6ldZcYFZH5iT04_BKofpUQT1ZX_CSB9hojo,25680
+matplotlib/mpl-data/fonts/ttf/cmex10.ttf,sha256=ryjwwXByOsd2pxv6WVrKCemNFa5cPVTOGa_VYZyWqQU,21092
+matplotlib/mpl-data/fonts/ttf/cmmi10.ttf,sha256=MJKWW4gR_WpnZXmWZIRRgfwd0TMLk3-RWAjEhdMWI00,32560
+matplotlib/mpl-data/fonts/ttf/cmr10.ttf,sha256=Tdl2GwWMAJ25shRfVe5mF9CTwnPdPWxbPkP_YRD6m_Y,26348
+matplotlib/mpl-data/fonts/ttf/cmss10.ttf,sha256=ffkag9BbLkcexjjLC0NaNgo8eSsJ_EKn2mfpHy55EVo,20376
+matplotlib/mpl-data/fonts/ttf/cmsy10.ttf,sha256=uyJu2TLz8QDNDlL15JEu5VO0G2nnv9uNOFTbDrZgUjI,29396
+matplotlib/mpl-data/fonts/ttf/cmtt10.ttf,sha256=YhHwmuk1mZka_alwwkZp2tGnfiU9kVYk-_IS9wLwcdc,28136
+matplotlib/mpl-data/images/back.gif,sha256=sdkxFRAh-Mgs44DTvruO5OxcI3Av9CS1g5MqMA_DDkQ,608
+matplotlib/mpl-data/images/back.pdf,sha256=ZR7CJo_dAeCM-KlaGvskgtHQyRtrPIolc8REOmcoqJk,1623
+matplotlib/mpl-data/images/back.png,sha256=E4dGf4Gnz1xJ1v2tMygHV0YNQgShreDeVApaMb-74mU,380
+matplotlib/mpl-data/images/back.svg,sha256=yRdMiKsa-awUm2x_JE_rEV20rNTa7FInbFBEoMo-6ik,1512
+matplotlib/mpl-data/images/back_large.gif,sha256=tqCtecrxNrPuDCUj7FGs8UXWftljKcwgp5cSBBhXwiQ,799
+matplotlib/mpl-data/images/back_large.png,sha256=9A6hUSQeszhYONE4ZuH3kvOItM0JfDVu6tkfromCbsQ,620
+matplotlib/mpl-data/images/filesave.gif,sha256=wAyNwOPd9c-EIPwcUAlqHSfLmxq167nhDVppOWPy9UA,723
+matplotlib/mpl-data/images/filesave.pdf,sha256=P1EPPV2g50WTt8UaX-6kFoTZM1xVqo6S2H6FJ6Zd1ec,1734
+matplotlib/mpl-data/images/filesave.png,sha256=b7ctucrM_F2mG-DycTedG_a_y4pHkx3F-zM7l18GLhk,458
+matplotlib/mpl-data/images/filesave.svg,sha256=oxPVbLS9Pzelz71C1GCJWB34DZ0sx_pUVPRHBrCZrGs,2029
+matplotlib/mpl-data/images/filesave_large.gif,sha256=IXrenlwu3wwO8WTRvxHt_q62NF6ZWyqk3jZhm6GE-G8,1498
+matplotlib/mpl-data/images/filesave_large.png,sha256=LNbRD5KZ3Kf7nbp-stx_a1_6XfGBSWUfDdpgmnzoRvk,720
+matplotlib/mpl-data/images/forward.gif,sha256=VNL9R-dECOX7wUAYPtU_DWn5hwi3SwLR17DhmBvUIxE,590
+matplotlib/mpl-data/images/forward.pdf,sha256=KIqIL4YId43LkcOxV_TT5uvz1SP8k5iUNUeJmAElMV8,1630
+matplotlib/mpl-data/images/forward.png,sha256=pKbLepgGiGeyY2TCBl8svjvm7Z4CS3iysFxcq4GR-wk,357
+matplotlib/mpl-data/images/forward.svg,sha256=NnQDOenfjsn-o0aJMUfErrP320Zcx9XHZkLh0cjMHsk,1531
+matplotlib/mpl-data/images/forward_large.gif,sha256=H6Jbcc7qJwHJAE294YqI5Bm-5irofX40cKRvYdrG_Ig,786
+matplotlib/mpl-data/images/forward_large.png,sha256=36h7m7DZDHql6kkdpNPckyi2LKCe_xhhyavWARz_2kQ,593
+matplotlib/mpl-data/images/hand.gif,sha256=3lRfmAqQU7A2t1YXXsB9IbwzK7FaRh-IZO84D5-xCrw,1267
+matplotlib/mpl-data/images/hand.pdf,sha256=hspwkNY915KPD7AMWnVQs7LFPOtlcj0VUiLu76dMabQ,4172
+matplotlib/mpl-data/images/hand.png,sha256=2cchRETGKa0hYNKUxnJABwkyYXEBPqJy_VqSPlT0W2Q,979
+matplotlib/mpl-data/images/hand.svg,sha256=tsVIES_nINrAbH4FqdsCGOx0SVE37vcofSYBhnnaOP0,4888
+matplotlib/mpl-data/images/hand_large.gif,sha256=H5IHmVTvOqHQb9FZ_7g7AlPt9gv-zRq0L5_Q9B7OuvU,973
+matplotlib/mpl-data/images/help.pdf,sha256=CeE978IMi0YWznWKjIT1R8IrP4KhZ0S7usPUvreSgcA,1813
+matplotlib/mpl-data/images/help.png,sha256=s4pQrqaQ0py8I7vc9hv3BI3DO_tky-7YBMpaHuBDCBY,472
+matplotlib/mpl-data/images/help.ppm,sha256=mVPvgwcddzCM-nGZd8Lnl_CorzDkRIXQE17b7qo8vlU,1741
+matplotlib/mpl-data/images/help.svg,sha256=KXabvQhqIWen_t2SvZuddFYa3S0iI3W8cAKm3s1fI8Q,1870
+matplotlib/mpl-data/images/help_large.png,sha256=1IwEyWfGRgnoCWM-r9CJHEogTJVD5n1c8LXTK4AJ4RE,747
+matplotlib/mpl-data/images/help_large.ppm,sha256=MiCSKp1Su88FXOi9MTtkQDA2srwbX3w5navi6cneAi4,6925
+matplotlib/mpl-data/images/home.gif,sha256=NKuFM7tTtFngdfsOpJ4AxYTL8PYS5GWKAoiJjBMwLlU,666
+matplotlib/mpl-data/images/home.pdf,sha256=e0e0pI-XRtPmvUCW2VTKL1DeYu1pvPmUUeRSgEbWmik,1737
+matplotlib/mpl-data/images/home.png,sha256=IcFdAAUa6_A0qt8IO3I8p4rpXpQgAlJ8ndBECCh7C1w,468
+matplotlib/mpl-data/images/home.svg,sha256=n_AosjJVXET3McymFuHgXbUr5vMLdXK2PDgghX8Cch4,1891
+matplotlib/mpl-data/images/home_large.gif,sha256=k86PJCgED46sCFkOlUYHA0s5U7OjRsc517bpAtU2JSw,1422
+matplotlib/mpl-data/images/home_large.png,sha256=uxS2O3tWOHh1iau7CaVV4ermIJaZ007ibm5Z3i8kXYg,790
+matplotlib/mpl-data/images/matplotlib.pdf,sha256=BkSUf-2xoij-eXfpV2t7y1JFKG1zD1gtV6aAg3Xi_wE,22852
+matplotlib/mpl-data/images/matplotlib.png,sha256=w8KLRYVa-voUZXa41hgJauQuoois23f3NFfdc72pUYY,1283
+matplotlib/mpl-data/images/matplotlib.svg,sha256=QiTIcqlQwGaVPtHsEk-vtmJk1wxwZSvijhqBe_b9VCI,62087
+matplotlib/mpl-data/images/matplotlib_128.ppm,sha256=IHPRWXpLFRq3Vb7UjiCkFrN_N86lSPcfrEGunST08d8,49167
+matplotlib/mpl-data/images/matplotlib_large.png,sha256=ElRoue9grUqkZXJngk-nvh4GKfpvJ4gE69WryjCbX5U,3088
+matplotlib/mpl-data/images/move.gif,sha256=FN52MptH4FZiwmV2rQgYCO2FvO3m5LtqYv8jk6Xbeyk,679
+matplotlib/mpl-data/images/move.pdf,sha256=CXk3PGK9WL5t-5J-G2X5Tl-nb6lcErTBS5oUj2St6aU,1867
+matplotlib/mpl-data/images/move.png,sha256=TmjR41IzSzxGbhiUcV64X0zx2BjrxbWH3cSKvnG2vzc,481
+matplotlib/mpl-data/images/move.svg,sha256=_ZKpcwGD6DMTkZlbyj0nQbT8Ygt5vslEZ0OqXaXGd4E,2509
+matplotlib/mpl-data/images/move_large.gif,sha256=RMIAr-G9OOY7vWC04oN6qv5TAHJxhQGhLsw_bNsvWbg,951
+matplotlib/mpl-data/images/move_large.png,sha256=Skjz2nW_RTA5s_0g88gdq2hrVbm6DOcfYW4Fu42Fn9U,767
+matplotlib/mpl-data/images/qt4_editor_options.pdf,sha256=2qu6GVyBrJvVHxychQoJUiXPYxBylbH2j90QnytXs_w,1568
+matplotlib/mpl-data/images/qt4_editor_options.png,sha256=EryQjQ5hh2dwmIxtzCFiMN1U6Tnd11p1CDfgH5ZHjNM,380
+matplotlib/mpl-data/images/qt4_editor_options.svg,sha256=E00YoX7u4NrxMHm_L1TM8PDJ88bX5qRdCrO-Uj59CEA,1244
+matplotlib/mpl-data/images/qt4_editor_options_large.png,sha256=-Pd-9Vh5aIr3PZa8O6Ge_BLo41kiEnpmkdDj8a11JkY,619
+matplotlib/mpl-data/images/subplots.gif,sha256=QfhmUdcrko08-WtrzCJUjrVFDTvUZCJEXpARNtzEwkg,691
+matplotlib/mpl-data/images/subplots.pdf,sha256=Q0syPMI5EvtgM-CE-YXKOkL9eFUAZnj_X2Ihoj6R4p4,1714
+matplotlib/mpl-data/images/subplots.png,sha256=MUfCItq3_yzb9yRieGOglpn0Y74h8IA7m5i70B63iRc,445
+matplotlib/mpl-data/images/subplots.svg,sha256=8acBogXIr9OWGn1iD6mUkgahdFZgDybww385zLCLoIs,2130
+matplotlib/mpl-data/images/subplots_large.gif,sha256=Ff3ERmtVAaGP9i1QGUNnIIKac6LGuSW2Qf4DrockZSI,1350
+matplotlib/mpl-data/images/subplots_large.png,sha256=Edu9SwVMQEXJZ5ogU5cyW7VLcwXJdhdf-EtxxmxdkIs,662
+matplotlib/mpl-data/images/zoom_to_rect.gif,sha256=mTX6h9fh2W9zmvUYqeibK0TZ7qIMKOB1nAXMpD_jDys,696
+matplotlib/mpl-data/images/zoom_to_rect.pdf,sha256=SEvPc24gfZRpl-dHv7nx8KkxPyU66Kq4zgQTvGFm9KA,1609
+matplotlib/mpl-data/images/zoom_to_rect.png,sha256=aNz3QZBrIgxu9E-fFfaQweCVNitGuDUFoC27e5NU2L4,530
+matplotlib/mpl-data/images/zoom_to_rect.svg,sha256=1vRxr3cl8QTwTuRlQzD1jxu0fXZofTJ2PMgG97E7Bco,1479
+matplotlib/mpl-data/images/zoom_to_rect_large.gif,sha256=nx5LUpTAH6ZynM3ZfZDS-wR87jbMUsUnyQ27NGkV0_c,1456
+matplotlib/mpl-data/images/zoom_to_rect_large.png,sha256=V6pkxmm6VwFExdg_PEJWdK37HB7k3cE_corLa7RbUMk,1016
+matplotlib/mpl-data/matplotlibrc,sha256=ZDuS3NjqmSy4_oIXNk9mMNcD74ExJ9clpz6fbgSVMCk,40282
+matplotlib/mpl-data/sample_data/Minduka_Present_Blue_Pack.png,sha256=XnKGiCanpDKalQ5anvo5NZSAeDP7fyflzQAaivuc0IE,13634
+matplotlib/mpl-data/sample_data/None_vs_nearest-pdf.png,sha256=5CPvcG3SDNfOXx39CMKHCNS9JKZ-fmOUwIfpppNXsQ0,106228
+matplotlib/mpl-data/sample_data/README.txt,sha256=ABz19VBKfGewdY39QInG9Qccgn1MTYV3bT5Ph7TCy2Y,128
+matplotlib/mpl-data/sample_data/aapl.npz,sha256=GssVYka_EccteiXbNRJJ5GsuqU7G8F597qX7srYXZsw,107503
+matplotlib/mpl-data/sample_data/ada.png,sha256=X1hjJK1_1Nc8DN-EEhey3G7Sq8jBwQDKNSl4cCAE0uY,308313
+matplotlib/mpl-data/sample_data/axes_grid/bivariate_normal.npy,sha256=DpWZ9udAh6ospYqneEa27D6EkRgORFwHosacZXVu98U,1880
+matplotlib/mpl-data/sample_data/ct.raw.gz,sha256=LDvvgH-mycRQF2D29-w5MW94ZI0opvwKUoFI8euNpMk,256159
+matplotlib/mpl-data/sample_data/data_x_x2_x3.csv,sha256=A0SU3buOUGhT-NI_6LQ6p70fFSIU3iLFdgzvzrKR6SE,132
+matplotlib/mpl-data/sample_data/demodata.csv,sha256=MRybziqnyrqMCH9qG7Mr6BwcohIhftVG5dejXV2AX2M,659
+matplotlib/mpl-data/sample_data/eeg.dat,sha256=KGVjFt8ABKz7p6XZirNfcxSTOpGGNuyA8JYErRKLRBc,25600
+matplotlib/mpl-data/sample_data/embedding_in_wx3.xrc,sha256=cUqVw5vDHNSZoaO4J0ebZUf5SrJP36775abs7R9Bclg,2186
+matplotlib/mpl-data/sample_data/goog.npz,sha256=QAkXzzDmtmT3sNqT18dFhg06qQCNqLfxYNLdEuajGLE,22845
+matplotlib/mpl-data/sample_data/grace_hopper.jpg,sha256=qMptc0dlcDsJcoq0f-WfRz2Trjln_CTHwCiMPHrbcTA,61306
+matplotlib/mpl-data/sample_data/grace_hopper.png,sha256=MCf0ju2kpC40srQ0xw4HEyOoKhLL4khP3jHfU9_dR7s,628280
+matplotlib/mpl-data/sample_data/jacksboro_fault_dem.npz,sha256=1JP1CjPoKkQgSUxU0fyhU50Xe9wnqxkLxf5ukvYvtjc,174061
+matplotlib/mpl-data/sample_data/logo2.png,sha256=ITxkJUsan2oqXgJDy6DJvwJ4aHviKeWGnxPkTjXUt7A,33541
+matplotlib/mpl-data/sample_data/membrane.dat,sha256=q3lbQpIBpbtXXGNw1eFwkN_PwxdDGqk4L46IE2b0M1c,48000
+matplotlib/mpl-data/sample_data/msft.csv,sha256=GArKb0O3DgKZRsKdJf6lX3rMSf-PCekIiBoLNdgF7Mk,3211
+matplotlib/mpl-data/sample_data/percent_bachelors_degrees_women_usa.csv,sha256=TzoqamsV_N3d3lW7SKmj14zZVX4FOOg9jJcsC5U9pbA,5681
+matplotlib/mpl-data/sample_data/s1045.ima.gz,sha256=MrQk1k9it-ccsk0p_VOTitVmTWCAVaZ6srKvQ2n4uJ4,33229
+matplotlib/mpl-data/sample_data/topobathy.npz,sha256=AkTgMpFwLfRQJNy1ysvE89TLMNct-n_TccSsYcQrT78,45224
+matplotlib/mpl-data/stylelib/Solarize_Light2.mplstyle,sha256=PECeO60wwJe2sSDvxapBJRuKGek0qLcoaN8qOX6tgNQ,1255
+matplotlib/mpl-data/stylelib/_classic_test_patch.mplstyle,sha256=iopHpMaM3im_AK2aiHGuM2DKM5i9Kc84v6NQEoSb10Q,167
+matplotlib/mpl-data/stylelib/bmh.mplstyle,sha256=-KbhaI859BITHIoyUZIfpQDjfckgLAlDAS_ydKsm6mc,712
+matplotlib/mpl-data/stylelib/classic.mplstyle,sha256=0RjtrDi0vZOzWGnt9cme_At_9GqMwHzwEBCAH9OQZ7I,24511
+matplotlib/mpl-data/stylelib/dark_background.mplstyle,sha256=-EGmoFm_35Zk7oRp29UalT56HsOSuJbYMeQGdAATnz4,477
+matplotlib/mpl-data/stylelib/fast.mplstyle,sha256=yTa2YEIIP9xi5V_G0p2vSlxghuhNwjRi9gPECMxyRiM,288
+matplotlib/mpl-data/stylelib/fivethirtyeight.mplstyle,sha256=WNUmAFuBPcqQPVgt6AS1ldy8Be2XO01N-1YQL__Q6ZY,832
+matplotlib/mpl-data/stylelib/ggplot.mplstyle,sha256=xhjLwr8hiikEXKy8APMy0Bmvtz1g0WnG84gX7e9lArs,957
+matplotlib/mpl-data/stylelib/grayscale.mplstyle,sha256=KCLg-pXpns9cnKDXKN2WH6mV41OH-6cbT-5zKQotSdw,526
+matplotlib/mpl-data/stylelib/seaborn-bright.mplstyle,sha256=pDqn3-NUyVLvlfkYs8n8HzNZvmslVMChkeH-HtZuJIc,144
+matplotlib/mpl-data/stylelib/seaborn-colorblind.mplstyle,sha256=eCSzFj5_2vR6n5qu1rHE46wvSVGZcdVqz85ov40ZsH8,148
+matplotlib/mpl-data/stylelib/seaborn-dark-palette.mplstyle,sha256=p5ABKNQHRG7bk4HXqMQrRBjDlxGAo3RCXHdQmP7g-Ng,142
+matplotlib/mpl-data/stylelib/seaborn-dark.mplstyle,sha256=I4xQ75vE5_9X4k0cNDiqhhnF3OcrZ2xlPX8Ll7OCkoE,667
+matplotlib/mpl-data/stylelib/seaborn-darkgrid.mplstyle,sha256=2bXOSzS5gmPzRBrRmzVWyhg_7ZaBRQ6t_-O-cRuyZoA,670
+matplotlib/mpl-data/stylelib/seaborn-deep.mplstyle,sha256=44dLcXjjRgR-6yaopgGRInaVgz3jk8VJVQTbBIcxRB0,142
+matplotlib/mpl-data/stylelib/seaborn-muted.mplstyle,sha256=T4o3jvqKD_ImXDkp66XFOV_xrBVFUolJU34JDFk1Xkk,143
+matplotlib/mpl-data/stylelib/seaborn-notebook.mplstyle,sha256=PcvZQbYrDdducrNlavBPmQ1g2minio_9GkUUFRdgtoM,382
+matplotlib/mpl-data/stylelib/seaborn-paper.mplstyle,sha256=n0mboUp2C4Usq2j6tNWcu4TZ_YT4-kKgrYO0t-rz1yw,393
+matplotlib/mpl-data/stylelib/seaborn-pastel.mplstyle,sha256=8nV8qRpbUrnFZeyE6VcQ1oRuZPLil2W74M2U37DNMOE,144
+matplotlib/mpl-data/stylelib/seaborn-poster.mplstyle,sha256=dUaKqTE4MRfUq2rWVXbbou7kzD7Z9PE9Ko8aXLza8JA,403
+matplotlib/mpl-data/stylelib/seaborn-talk.mplstyle,sha256=7FnBaBEdWBbncTm6_ER-EQVa_bZgU7dncgez-ez8R74,403
+matplotlib/mpl-data/stylelib/seaborn-ticks.mplstyle,sha256=CITZmZFUFp40MK2Oz8tI8a7WRoCizQU9Z4J172YWfWw,665
+matplotlib/mpl-data/stylelib/seaborn-white.mplstyle,sha256=WjJ6LEU6rlCwUugToawciAbKP9oERFHr9rfFlUrdTx0,665
+matplotlib/mpl-data/stylelib/seaborn-whitegrid.mplstyle,sha256=ec4BjsNzmOvHptcJ3mdPxULF3S1_U1EUocuqfIpw-Nk,664
+matplotlib/mpl-data/stylelib/seaborn.mplstyle,sha256=_Xu6qXKzi4b3GymCOB1b1-ykKTQ8xhDliZ8ezHGTiAs,1130
+matplotlib/mpl-data/stylelib/tableau-colorblind10.mplstyle,sha256=BsirZVd1LmPWT4tBIz6loZPjZcInoQrIGfC7rvzqmJw,190
+matplotlib/offsetbox.py,sha256=1oReQSHV50aRsHqHIa3Km234FXx8sUZRLdiGbdGu2zU,58812
+matplotlib/patches.py,sha256=4JTt8OKfTg_BzSQVXYjsQLAFbZvvzR9T-1zsajaPpx8,151886
+matplotlib/path.py,sha256=ov2ghbmWhCV-PhxUPGEfsG409Nrkf9HP4u7oQSpGFtc,37640
+matplotlib/patheffects.py,sha256=ERzaWP5RZTnaEVWx77c8oB-JQeMpVJtY-hBdRqkQ4ZM,13235
+matplotlib/projections/__init__.py,sha256=4b447LtxkDz1nC1B9tb_J7cCpq1fjxwaEvzkHy-Y3KA,1816
+matplotlib/projections/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/projections/__pycache__/geo.cpython-38.pyc,,
+matplotlib/projections/__pycache__/polar.cpython-38.pyc,,
+matplotlib/projections/geo.py,sha256=OrTW_dk4QqrTv9lYBean9uz24MBIWyWcnkADyTOdNuc,17690
+matplotlib/projections/polar.py,sha256=1aHOdhpaJKpu5BNS2eRoeIgej-QUunRpIGcxXkv1s28,52508
+matplotlib/pylab.py,sha256=VOs5onux2-yPGn0exAPsR75U9ty2hOzvg8Nz1K7TWBg,9595
+matplotlib/pyplot.py,sha256=vM3sVw0yIb0EbehwlLAOWHfGnMSN4W9OfTDmcsBELvs,111042
+matplotlib/quiver.py,sha256=B3CGGxSNVLwOPx2IgyG2DCSPQHs1MAS0o9sL_4Mm7rY,48018
+matplotlib/rcsetup.py,sha256=BhPaDqHrifbncC47epnKBtvlkk-MzhNp1HlVYgcgvF8,58589
+matplotlib/sankey.py,sha256=3PygeZ3h19RFICw1hL6qt5TwRoBrP1AKSznWvKHc6Z4,36986
+matplotlib/scale.py,sha256=_G5Aq3ta2vc2WOLuL3_UlnZ8XsXbGRrwBuqAG_OxCxU,25209
+matplotlib/sphinxext/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+matplotlib/sphinxext/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/sphinxext/__pycache__/mathmpl.cpython-38.pyc,,
+matplotlib/sphinxext/__pycache__/plot_directive.cpython-38.pyc,,
+matplotlib/sphinxext/mathmpl.py,sha256=jTqwBfxLLGjx-4TwEzwYvi2WdCoJpqHfDcbLKrgcKss,4276
+matplotlib/sphinxext/plot_directive.py,sha256=dAECzhJ1qVCq3nN3poGjKK2AAaAIwGikEHQIz_V0U0Y,26574
+matplotlib/spines.py,sha256=Xl9hIsBHzYaGq79UQb3Amfwfrq1-ZNsiS4wpPwstbp8,21227
+matplotlib/stackplot.py,sha256=fj4oqFbYA1G3RaTnV_Jic5mn5K3rza-JYp6jGR7e0yk,3917
+matplotlib/streamplot.py,sha256=9zniqozPg42NfXk4bx_Ro2RlkYYuR2CEJwJfJkt7jtI,22641
+matplotlib/style/__init__.py,sha256=EExOAUAq3u_rscUwkfKtZoEgLA5npmltCrYZOP9ftjw,67
+matplotlib/style/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/style/__pycache__/core.cpython-38.pyc,,
+matplotlib/style/core.py,sha256=EAubJQ90H__1bljwNfjpT8kxHp30r6KtXoveLvnfs4Q,8222
+matplotlib/table.py,sha256=FXhhFOy_-ZkHwyphkjFBQku1WgDjR3iYlmV4Wvls0cY,26674
+matplotlib/testing/__init__.py,sha256=MVV0ao_RHOKgDhpSN7QJBnyunje7tDeco-No_HtvvcQ,1428
+matplotlib/testing/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/testing/__pycache__/compare.cpython-38.pyc,,
+matplotlib/testing/__pycache__/conftest.cpython-38.pyc,,
+matplotlib/testing/__pycache__/decorators.cpython-38.pyc,,
+matplotlib/testing/__pycache__/disable_internet.cpython-38.pyc,,
+matplotlib/testing/__pycache__/exceptions.cpython-38.pyc,,
+matplotlib/testing/compare.py,sha256=67rAW447H4AUnGoT-AUP7s6CB2Q1N4oqhetFdvBdKZk,16969
+matplotlib/testing/conftest.py,sha256=juolFb13qZ_jwO6DsOxkfCKuPmPsQwbY6Oznx76tLYo,4317
+matplotlib/testing/decorators.py,sha256=t9XYPto5sIm4OObU5dyF6z5FjdhuNE2saBr-dnZ45wU,17704
+matplotlib/testing/disable_internet.py,sha256=ovCho7Nu6w-uoJeUPjJS7XGKJN0ktSNyF6NODaEyjb4,4925
+matplotlib/testing/exceptions.py,sha256=72QmjiHG7DwxSvlJf8mei-hRit5AH3NKh0-osBo4YbY,138
+matplotlib/testing/jpl_units/Duration.py,sha256=Leomw6a4XHddFgqMoYj63HfxV_-u6_MuQ3iaQ26TJcg,4946
+matplotlib/testing/jpl_units/Epoch.py,sha256=XpQMTIOs6VIVzuFYxRcv6JUuz4kqVCb1nGfBpYYbeJA,6305
+matplotlib/testing/jpl_units/EpochConverter.py,sha256=TAhtAyDHvvxDJL036DWEXrkZl_CwpVl2y5FNXloAoxo,4067
+matplotlib/testing/jpl_units/StrConverter.py,sha256=36hFTYbCM3Dh9_QR82dBbHh_7DSpsEthpnJYRICLlIc,4107
+matplotlib/testing/jpl_units/UnitDbl.py,sha256=sL0U984sJmka_0gzp6uhxSJuxnuh77aDAjtfCYdYJZ0,7793
+matplotlib/testing/jpl_units/UnitDblConverter.py,sha256=M5h3lOB4IEysqnR7VbkjUnMPS7wBtrZYWKvU3JUaJtI,4145
+matplotlib/testing/jpl_units/UnitDblFormatter.py,sha256=CRcbPtE3K0FlFJ4hkhi-SgQl1MUV-VlmIeOPIEPNwuI,681
+matplotlib/testing/jpl_units/__init__.py,sha256=Bp4Lz_eqRuxNWO_l3VvhuurFZaUmZIlvcF3N0UBmzHc,2692
+matplotlib/testing/jpl_units/__pycache__/Duration.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/Epoch.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/EpochConverter.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/StrConverter.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/UnitDbl.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/UnitDblConverter.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/UnitDblFormatter.cpython-38.pyc,,
+matplotlib/testing/jpl_units/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/tests/__init__.py,sha256=ns6SIKdszYNXD5h5PqKRCR06Z45H-sXrUX2VwujSRIM,366
+matplotlib/tests/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/tests/__pycache__/conftest.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_afm.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_agg.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_agg_filter.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_animation.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_arrow_patches.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_artist.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_axes.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_bases.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_cairo.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_nbagg.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_pdf.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_pgf.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_ps.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_qt.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_svg.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_tk.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_tools.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backend_webagg.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_backends_interactive.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_basic.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_bbox_tight.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_category.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_cbook.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_collections.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_colorbar.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_colors.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_compare_images.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_constrainedlayout.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_container.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_contour.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_cycles.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_dates.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_determinism.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_dviread.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_figure.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_font_manager.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_fontconfig_pattern.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_gridspec.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_image.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_legend.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_lines.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_marker.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_mathtext.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_matplotlib.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_mlab.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_offsetbox.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_patches.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_path.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_patheffects.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_pickle.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_png.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_preprocess_data.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_pyplot.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_quiver.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_rcparams.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_sankey.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_scale.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_simplification.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_skew.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_sphinxext.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_spines.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_streamplot.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_style.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_subplots.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_table.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_testing.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_texmanager.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_text.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_ticker.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_tightlayout.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_transforms.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_triangulation.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_ttconv.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_type1font.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_units.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_usetex.cpython-38.pyc,,
+matplotlib/tests/__pycache__/test_widgets.cpython-38.pyc,,
+matplotlib/tests/cmr10.pfb,sha256=_c7eh5QBjfXytY8JBfsgorQY7Y9ntz7hJEWFXfvlsb4,35752
+matplotlib/tests/conftest.py,sha256=QtpdWPUoXL_9F8WIytDc3--h0nPjbo8PToig7svIT1Y,258
+matplotlib/tests/mpltest.ttf,sha256=Jwb2O5KRVk_2CMqnhL0igeI3iGQCY3eChyS16N589zE,2264
+matplotlib/tests/test_afm.py,sha256=DGVfvABg6FRmbAq2ldRhM2wlqNfVrmRtSz12MCyqDXk,3710
+matplotlib/tests/test_agg.py,sha256=SC6WsFbq9Hs4dokpEqGqGPaFGS7zJpNxKRIRLUzD3Qk,7558
+matplotlib/tests/test_agg_filter.py,sha256=sfntvGVUuCaGqU3DdOnTRXqq0P1afVqWuaV_ZEYh8kQ,969
+matplotlib/tests/test_animation.py,sha256=WZ2kU7tjlDXL5Ryf89irQok884cWGtkVOJpNSjVyj3o,8916
+matplotlib/tests/test_arrow_patches.py,sha256=3EB9HIfdLCg_Nvq8zxEH9LJAV5OUbo6yndbZ-lIVcnQ,5593
+matplotlib/tests/test_artist.py,sha256=hMSfbg8Le0Li-vLEk2N9tZQtC1cUUE5Xn0O4CgYLugs,9418
+matplotlib/tests/test_axes.py,sha256=nRp8gbewUffIIfUBFlBxkq5E6FnH75wrCFY4Xp4GpG8,216153
+matplotlib/tests/test_backend_bases.py,sha256=I3Oiqk6Fm-fctj-aOxq5Av8Kqe3QLjlY-oTwTbdO6dw,3811
+matplotlib/tests/test_backend_cairo.py,sha256=gIjbQesBuvIBdpzoXXSdRmq3E2axCVX4h1Qfv6PNeKM,1936
+matplotlib/tests/test_backend_nbagg.py,sha256=dp9pYxWXN8ZBBjJcVE-1tJ61K7oeWtzcqIsAd7ABnfk,948
+matplotlib/tests/test_backend_pdf.py,sha256=GUqvImL8-HgpZGG0Zb41AE3KqVwtt8i00xcPutzGM1w,6696
+matplotlib/tests/test_backend_pgf.py,sha256=GAArsyhcLvWIHDtKgdv2kscRlgpNQ_oqyOXVGdVTw3Q,8636
+matplotlib/tests/test_backend_ps.py,sha256=E3eheQhOHcUhub4IzcWcDVvvnnVC6bHn6tv1NAF_KA4,3633
+matplotlib/tests/test_backend_qt.py,sha256=Oqtl2ZuS8Ly_ouDGkwndSheCs8U9OSiwBwJnnMmVGXI,9798
+matplotlib/tests/test_backend_svg.py,sha256=rPppxppM-G4mm4ISP4hq7pIVGTfS6Zyydt1jUoY2QqY,5863
+matplotlib/tests/test_backend_tk.py,sha256=sLqemf0mAFMIpv2414wKSVInLekL8bvzzaeREhE2UBU,934
+matplotlib/tests/test_backend_tools.py,sha256=C-B7NCkyWsQ5KzQEnI5Be16DsAHHZJU9P5v9--wsF-o,501
+matplotlib/tests/test_backend_webagg.py,sha256=u-UvO04iqxZbFlUrNIfyD0KIAxEhSOyqlrOqxO4DnDw,702
+matplotlib/tests/test_backends_interactive.py,sha256=QsdZhWATJPh3ZYM2F90MRQCyoW3ROUOGXYgrM0XUxsc,5018
+matplotlib/tests/test_basic.py,sha256=KRMwLx3J53urIx689lWHzkWkaWGTf0ZwhTyGrFDUfao,1268
+matplotlib/tests/test_bbox_tight.py,sha256=3nrCNbVtd-0K3LvndlPQBG9raTLdbXuDmoMWt5oVMSY,3902
+matplotlib/tests/test_category.py,sha256=SKBDW4R4q_7A0K1H-q801mTivxBgcLXigw4E6-tb1P4,10011
+matplotlib/tests/test_cbook.py,sha256=Z2Hp8UkeebK-BglQXm9WhiTpZC8CbSsSKUNy6hJoJbU,18684
+matplotlib/tests/test_collections.py,sha256=9Lyyydi1Ykk0BKXXWDPSYUQ1M9F-uJdVwqaZE1ZMKxI,23520
+matplotlib/tests/test_colorbar.py,sha256=OW2F_D6Vs7jEV8HOBh2kv_iV21u7sdyIqJcRakwEkTg,22065
+matplotlib/tests/test_colors.py,sha256=KYXZa1yFlkEGriaLMm-v2WnhROS2lvOUgseSHV2xC7w,33376
+matplotlib/tests/test_compare_images.py,sha256=n3Uoukid0GcjyQpd6ZrqIY9u3RLNE2XAPWwtcHIsqto,3155
+matplotlib/tests/test_constrainedlayout.py,sha256=9689kXb21xPGT3rqgZMxVT8HT4HXlzjO_aS6wq7b8kM,12981
+matplotlib/tests/test_container.py,sha256=75Di6cic-JY7JbOnsaz7N6Hcm3KUAJKaKbCoVSDPAuU,576
+matplotlib/tests/test_contour.py,sha256=G4dN6t8yrbpKp0aEI1VTrb-woyBKidGUqdDJ3b5D55U,12018
+matplotlib/tests/test_cycles.py,sha256=mgYXt63ov7th7IwGpLEoCh-ImubEp6wltzTbDchfQYI,7112
+matplotlib/tests/test_dates.py,sha256=1oDBr8xj2v_5tLHP_1rMkKA2nikoXSxK5u44ekL_NLA,32805
+matplotlib/tests/test_determinism.py,sha256=bu8E_NMdeN0X2KRMStjAgK3tklL5SG_IqYu4hov6Z-4,4586
+matplotlib/tests/test_dviread.py,sha256=kTk9Qv6q9Kk3fJcDAEWm35HF-sKsP6Ybec6N8jEHasE,2342
+matplotlib/tests/test_figure.py,sha256=EKv9PCtr5KU30dZ_tBjxfgrQryxYjf1u0YIS83mFfe8,15244
+matplotlib/tests/test_font_manager.py,sha256=OrOm9CD4FnUnSzoQEpRNcsDktw7gNBz3h7YMPGkudjI,7217
+matplotlib/tests/test_fontconfig_pattern.py,sha256=1MhBrF914MKxjbpdxKDqkfVyCZGnFBA06D2I6rqHRHo,2012
+matplotlib/tests/test_gridspec.py,sha256=zahj5Rd4pB0xtAc_3KX7fQWyBys0P-IQk-Cq0cs8VgY,626
+matplotlib/tests/test_image.py,sha256=RMReqvIC2celG9NhUkJzv7Cl2us5Pc3f8I4uhxAzGQs,36254
+matplotlib/tests/test_legend.py,sha256=oXMRtvzQgYMqNC0vPR8mhqQQl5n-IZRBSIZbr_N4hVk,20051
+matplotlib/tests/test_lines.py,sha256=zbpM3DO0F-aclKrTE2JliUZpBR1UV5coR6I5OXOvJbg,5970
+matplotlib/tests/test_marker.py,sha256=yGEoHoMji04-BPN-mmddO60pcpGwvL6FMO101xz70dg,4768
+matplotlib/tests/test_mathtext.py,sha256=xqmDclBoB-7253xFBgf_yI9JxdkYZfuYgJ66HFcyqQA,13331
+matplotlib/tests/test_matplotlib.py,sha256=DIBqISzUIYanSxNWJL9n2oob1dRLOOAr6TIz2BTWK1I,706
+matplotlib/tests/test_mlab.py,sha256=ZpoL_7s2ARzt3uhq1InSVEWahB-svI0siIutKqyyUpM,89334
+matplotlib/tests/test_offsetbox.py,sha256=f_I8sNuPmN4TXQAKGp5w3XQvnpWVSrHgEZr_0ZR7siE,6633
+matplotlib/tests/test_patches.py,sha256=NaNojcVYpt6Lw3xr4bcI1c6Tc0fjBlz5OkQMhZlLApg,16948
+matplotlib/tests/test_path.py,sha256=X6kEMiXLHVdRaZ9w2JF2ID2_DtIVonQDByvXpLbKXSo,12736
+matplotlib/tests/test_patheffects.py,sha256=I1C81Cms_QBK6cPg_xxKZBXKykZuGI5H2wwFtwnALZk,5207
+matplotlib/tests/test_pickle.py,sha256=BahI72bPhtSEylUvRwKgksK4N5i2vjsQ1APvEw3Om-0,5653
+matplotlib/tests/test_png.py,sha256=-ik0JJOAuZCED13VshP5RZsBOQpXu_Kv9I1oaZ_grxs,1705
+matplotlib/tests/test_preprocess_data.py,sha256=vVnEzVU-jd1hAQwh-b9IbWo-S_pIg4I9NCpSQ1lLChI,10034
+matplotlib/tests/test_pyplot.py,sha256=9KEPaGTyHduk7vi40kbva03HFk7bm8KrGlWjkBGMoQ0,1662
+matplotlib/tests/test_quiver.py,sha256=_dGa3bJmvNqcnBvFhGntvhBKRipROZUNOrSm-lMtc7Y,8087
+matplotlib/tests/test_rcparams.py,sha256=HnXA81intnBhogrXbCuaAfOV2nyvbGvOCESYElue6C4,20896
+matplotlib/tests/test_sankey.py,sha256=KdWhgZpEiCJ8o7yuFjnCgqFeodwKSCuuhV_mhIc04dM,310
+matplotlib/tests/test_scale.py,sha256=kolkvXNDsSm7P44yrVDNuz25lve4iGGreaG-JC8-VIA,5895
+matplotlib/tests/test_simplification.py,sha256=_dIImjiA0VHBEbOrGQluQKCS6SQFwEVvfL9pqIn_SHI,11048
+matplotlib/tests/test_skew.py,sha256=hngaWfqV6zqZSnRmVadBvtMIrg1snTZvu3fsqv5YddU,6310
+matplotlib/tests/test_sphinxext.py,sha256=VfFfCq5T3jaVN0Ut67SHpilUOzl-_zaJDnGxfGEtrgA,2022
+matplotlib/tests/test_spines.py,sha256=5jGy42khH7ndaHRCgJONXBOvM5ZnrzOhPSR42IAUAA0,3132
+matplotlib/tests/test_streamplot.py,sha256=_9iDNwQ0M1djl0eEX94QJtPYqCKFN5ncU_cIKJlm39w,3909
+matplotlib/tests/test_style.py,sha256=FKsTSWx43sls_PqZzOEJ-ZRaiBmSmVQCgCxfGTlyiNc,5677
+matplotlib/tests/test_subplots.py,sha256=RIk5cOGJmZwQz4UzZ_IEe1rzx4riAjO3bdltY5p1F6k,5992
+matplotlib/tests/test_table.py,sha256=UEvwlff7Jdx7ezPMc8nAdaCO0u11PzNpCZqYGLDS3O4,5685
+matplotlib/tests/test_testing.py,sha256=6pJ-SCQP1Bj4Qw5m5CEz2aWV4Bl7ovXE2uUpttiIu3Y,449
+matplotlib/tests/test_texmanager.py,sha256=zCtJ3JnZNfP2AQNy7q2LQAgaflSe7S5htJkJNylQSGE,459
+matplotlib/tests/test_text.py,sha256=49TKkDPy_tFRyxPLSp8-GgeS8TdU87JW24IUvA13NVM,20461
+matplotlib/tests/test_ticker.py,sha256=niDdQLrvTIUa4x0jWchca_LJJFQc7EQVfBopnF-DjEM,49453
+matplotlib/tests/test_tightlayout.py,sha256=Rg-Vw7VJSFxonhO5qnb2StPkMK7R4jpohMdFQbtPVSc,9685
+matplotlib/tests/test_transforms.py,sha256=1CO_STcfUU4yo4bJZLdTpJ7dF3E285LVbG-OBpFUchA,24892
+matplotlib/tests/test_triangulation.py,sha256=KWSRvg-_xE5Wz-_LAqB-EvI_5uy9isc9GTmhmi189Kw,45372
+matplotlib/tests/test_ttconv.py,sha256=w6U4-5OiEuXsOskvMz4E-f9iqPoxCt8dIC2TNB7PwXo,655
+matplotlib/tests/test_type1font.py,sha256=C0pCPBGOv49SR2xxDOq6LSXAEH_ZNvIWvr_jG-23Gmc,2097
+matplotlib/tests/test_units.py,sha256=DhE6O7PZhMUf4FMoc1ByTcMgpS9-gMmjqsiQnqBBTKc,5710
+matplotlib/tests/test_usetex.py,sha256=OrkN0Alth9lTFBWJbiQDsszhW70oO6TagLaD9XsCFmo,1245
+matplotlib/tests/test_widgets.py,sha256=ijPT0E0-nS1J3kBpxoWSok1GbqlZf22J5Csbto3nl4U,17654
+matplotlib/tests/tinypages/.gitignore,sha256=re9gqsLda7alFAVabOwnvrzS8ChI0uTxX1FxzsvqyEE,8
+matplotlib/tests/tinypages/README.md,sha256=l-sVwF8k46XxCZdwprn5wSibt6S03ICVLlMqJJN7EDo,124
+matplotlib/tests/tinypages/__pycache__/conf.cpython-38.pyc,,
+matplotlib/tests/tinypages/__pycache__/range4.cpython-38.pyc,,
+matplotlib/tests/tinypages/__pycache__/range6.cpython-38.pyc,,
+matplotlib/tests/tinypages/_static/.gitignore,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+matplotlib/tests/tinypages/_static/README.txt,sha256=1nnoizmUuHn5GKx8RL6MwJPlkyGmu_KHhYIMTDSWUNM,303
+matplotlib/tests/tinypages/conf.py,sha256=0_a4wyqPA9oaOFpLLpSEzkZI-hwtyRbqLWBx9nf0sLA,8432
+matplotlib/tests/tinypages/index.rst,sha256=kLSy7c3SoIAVsKOFkbzB4zFVzk3HW3d_rJHlHcNGBAg,446
+matplotlib/tests/tinypages/range4.py,sha256=fs2krzi9sY9ysmJRQCdGs_Jh1L9vDXDrNse7c0aX_Rw,81
+matplotlib/tests/tinypages/range6.py,sha256=a2EaHrNwXz4GJqhRuc7luqRpt7sqLKhTKeid9Drt2QQ,281
+matplotlib/tests/tinypages/some_plots.rst,sha256=C9rwV9UVlhFvxm8VqV6PoAP1AQ8Kk0LGZI9va4joif0,2156
+matplotlib/texmanager.py,sha256=kiFNpjY5S8OJ2Q6WPZ2h6YueL_zrXZQyIdrFgP_XRnI,17097
+matplotlib/text.py,sha256=bt04zgIbjJUOqdZ8gomc_zWF3UOYL5mHWaHb9OxxYHM,81090
+matplotlib/textpath.py,sha256=dEZ1Vg4ZUI5M4iTHn-7I45KeR1FTit78jQ-3EyK6orc,17010
+matplotlib/ticker.py,sha256=Dp_BzFOaTG0Qy7W1H4-yo5JlNNLMJS2L8BiXYjCC4Xk,101242
+matplotlib/tight_bbox.py,sha256=bQAOXPKfVWoBkGZbC0ckRcldgLJ8eBUe2IsT8UQpgaY,2590
+matplotlib/tight_layout.py,sha256=BrNob3eytUkmtXtwgfD3jdRgNh_tIjDE89AZjAnhFdY,14586
+matplotlib/transforms.py,sha256=cynqPdAO9gtYxmDBr_zr1VTSlIlbtOAwfNzGqsVV208,97572
+matplotlib/tri/__init__.py,sha256=XMaejh88uov7Neu7MuYMyaNQqaxg49nXaiJfvjifrRM,256
+matplotlib/tri/__pycache__/__init__.cpython-38.pyc,,
+matplotlib/tri/__pycache__/triangulation.cpython-38.pyc,,
+matplotlib/tri/__pycache__/tricontour.cpython-38.pyc,,
+matplotlib/tri/__pycache__/trifinder.cpython-38.pyc,,
+matplotlib/tri/__pycache__/triinterpolate.cpython-38.pyc,,
+matplotlib/tri/__pycache__/tripcolor.cpython-38.pyc,,
+matplotlib/tri/__pycache__/triplot.cpython-38.pyc,,
+matplotlib/tri/__pycache__/trirefine.cpython-38.pyc,,
+matplotlib/tri/__pycache__/tritools.cpython-38.pyc,,
+matplotlib/tri/triangulation.py,sha256=NCY1Fx66H3MHrMA1-NW6G_shopBtFu1Ehm1f6XyRDBE,8315
+matplotlib/tri/tricontour.py,sha256=4gKIAi1CFKWK8BCqAXMD6PlUKxnrC9GvzeQz0Yknvik,9794
+matplotlib/tri/trifinder.py,sha256=umsDJX2kach9MVDvEirLdN9q31QQ9tdP67U71eFyGj8,3497
+matplotlib/tri/triinterpolate.py,sha256=EP-ZwNC3HlOGB4jNaHGUCncXeO7LocvT2QhTr-jKCrk,64886
+matplotlib/tri/tripcolor.py,sha256=H6DEToUjfU12hDkfekshYyuQoZc7Fa4r4W6MOR5d6Jw,5169
+matplotlib/tri/triplot.py,sha256=aZ9O_VVLH0AOne31u11ltLlyVyhqKtyzec7WH3b3pkk,2857
+matplotlib/tri/trirefine.py,sha256=uwAminHKuxgE0ZuwwllIpqK2Ww_q--VKzMicWUslA0s,13765
+matplotlib/tri/tritools.py,sha256=BggcSXDVoc2mSyJp7wQ51qaw8WhdL7ianZ-D7ezkuC8,12398
+matplotlib/ttconv.cpython-38-x86_64-linux-gnu.so,sha256=1jdaSZnni-N5-Ec75mfmTXKMD54BQfFW0F_kdcL7ifE,83952
+matplotlib/type1font.py,sha256=-D1P81hhDUVNAHZ55-Df4cPc-3R8ycY_judVBZphgsk,12168
+matplotlib/units.py,sha256=dgSbQsrJPRiKf5IJv-PM0xYMcvT3kle3gdPJsdjbRZk,7332
+matplotlib/widgets.py,sha256=lMHpWCFdFTwSCEO5uL4fjcsoDQMzkzlWyVXnx80FVn4,94615
+mpl_toolkits/axes_grid/__init__.py,sha256=VLlc0DaOkr9JumPa8W4zt9lGHp180ie8_WLPZVNSJMw,537
+mpl_toolkits/axes_grid/__pycache__/__init__.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/anchored_artists.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/angle_helper.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axes_divider.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axes_grid.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axes_rgb.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axes_size.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axis_artist.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axisline_style.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/axislines.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/clip_path.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/colorbar.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/floating_axes.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/grid_finder.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/grid_helper_curvelinear.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/inset_locator.cpython-38.pyc,,
+mpl_toolkits/axes_grid/__pycache__/parasite_axes.cpython-38.pyc,,
+mpl_toolkits/axes_grid/anchored_artists.py,sha256=_F6-9iacZidb5JpJ8jCOZ9PdiZaR5qpfBjf-3VjTzNc,291
+mpl_toolkits/axes_grid/angle_helper.py,sha256=Tb4Mb_NGkUdkisebe2dqfBdFmUZiSmGyUnftiSeSIls,51
+mpl_toolkits/axes_grid/axes_divider.py,sha256=tJlPia3Z8xLq6uXehBwAlD_4ywMvRTTkM73qNnCpo7Q,178
+mpl_toolkits/axes_grid/axes_grid.py,sha256=UPlVDwsze_w2aZeLaMg4WZVK3q2EvWePXTFZFvjCQz4,89
+mpl_toolkits/axes_grid/axes_rgb.py,sha256=d3h2tImoPxvVtl8i4IBA_i1vBQykZDYizcNDGdjRltE,201
+mpl_toolkits/axes_grid/axes_size.py,sha256=v4Nhxe7DVp1FkKX03DqJJ1aevDanDvgKT9r0ouDzTxw,48
+mpl_toolkits/axes_grid/axis_artist.py,sha256=zUlJFUHueDsMtzLi_mK2_Wf-nSBQgiTsMOFpo_SngZ0,50
+mpl_toolkits/axes_grid/axisline_style.py,sha256=lNVHXkFWhSWPXOOfF-wlVkDPzmzuStJyJzF-NS5Wf_g,53
+mpl_toolkits/axes_grid/axislines.py,sha256=kVyhb6laiImmuNE53QTQh3kgxz0sO1mcSMpnqIdjylA,48
+mpl_toolkits/axes_grid/clip_path.py,sha256=s-d36hUiy9I9BSr9wpxjgoAACCQrczHjw072JvArNvE,48
+mpl_toolkits/axes_grid/colorbar.py,sha256=DckRf6tadLeTNjx-Zk1u3agnSGZgizDjd0Dxw1-GRdw,171
+mpl_toolkits/axes_grid/floating_axes.py,sha256=i35OfV1ZMF-DkLo4bKmzFZP6LgCwXfdDKxYlGqjyKOM,52
+mpl_toolkits/axes_grid/grid_finder.py,sha256=Y221c-Jh_AFd3Oolzvr0B1Zrz9MoXPatUABQdLsFdpw,50
+mpl_toolkits/axes_grid/grid_helper_curvelinear.py,sha256=nRl_B-755X7UpVqqdwkqc_IwiTmM48z3eOMHuvJT5HI,62
+mpl_toolkits/axes_grid/inset_locator.py,sha256=qqXlT8JWokP0kV-8NHknZDINtK-jbXfkutH_1tcRe_o,216
+mpl_toolkits/axes_grid/parasite_axes.py,sha256=kCFtaRTd0O8ePL78GOYvhEKqn8rE9bk61v0kVgMb6UE,469
+mpl_toolkits/axes_grid1/__init__.py,sha256=-lw0ZfG4XUpuAolCpXKFwtS3w1LJ1ZToSEC9OSmB-4Q,204
+mpl_toolkits/axes_grid1/__pycache__/__init__.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/anchored_artists.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/axes_divider.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/axes_grid.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/axes_rgb.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/axes_size.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/colorbar.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/inset_locator.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/mpl_axes.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/__pycache__/parasite_axes.cpython-38.pyc,,
+mpl_toolkits/axes_grid1/anchored_artists.py,sha256=F9396ifiWLedXEsivC3-rJjhYOxZ84dHYFhlRMVt4wE,21031
+mpl_toolkits/axes_grid1/axes_divider.py,sha256=rZOhnowUzJ3mXb6LKkLPjDyxkz-EPJmA3MCafFa8VN8,29175
+mpl_toolkits/axes_grid1/axes_grid.py,sha256=2ThJGeKXb9avu0KN3ujBliY2HV26IHC1daxy74t8ITk,27888
+mpl_toolkits/axes_grid1/axes_rgb.py,sha256=NsMKkaMEeXd6N1AYVP1Pz-ulwNeof1pU4qkReoQ8xFc,6652
+mpl_toolkits/axes_grid1/axes_size.py,sha256=YBC1PUmUK1-0c7cuqgJQBpDwVrbZQaWXyWadvuOO5bs,8602
+mpl_toolkits/axes_grid1/colorbar.py,sha256=Y0-Uf9osbz31YBOTxxs_UFXbp6Xyc9Rais47tBMjTXI,27123
+mpl_toolkits/axes_grid1/inset_locator.py,sha256=0BA8z3BiT78sS2-ksVe8iKS6KLxVv_NTV38NTLmRuu4,23675
+mpl_toolkits/axes_grid1/mpl_axes.py,sha256=MJVYUN4YRtTWrq1wmyv_y61O002tiyFESmBSaJ8xkG4,4380
+mpl_toolkits/axes_grid1/parasite_axes.py,sha256=ug0YRJiTtA3YVikdKMGj-qjoeOFnqNw2QnRab0Qp7wI,13570
+mpl_toolkits/axisartist/__init__.py,sha256=2zsgjqTtP_NXv78MEaKabmfmkjA7yhy77pIcaR57YWs,748
+mpl_toolkits/axisartist/__pycache__/__init__.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/angle_helper.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axes_divider.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axes_grid.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axes_rgb.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axis_artist.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axisline_style.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/axislines.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/clip_path.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/floating_axes.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/grid_finder.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/grid_helper_curvelinear.cpython-38.pyc,,
+mpl_toolkits/axisartist/__pycache__/parasite_axes.cpython-38.pyc,,
+mpl_toolkits/axisartist/angle_helper.py,sha256=KZiXfi0IPcGp6JFXewj0VLrUycSfI93ezoimkti3wpY,12632
+mpl_toolkits/axisartist/axes_divider.py,sha256=baPCBjM20SvAUeMjhvlS_cccRSM1y7ZKybtoW8upo2k,127
+mpl_toolkits/axisartist/axes_grid.py,sha256=vfd_EXHuYQ7iIVK2FOm6inLhb7huZxtOSvFyOVW2GmU,610
+mpl_toolkits/axisartist/axes_rgb.py,sha256=TpJCB8eA0wHZVXOxxfFoy1Tk_KFj68sZvo74doDeHYE,179
+mpl_toolkits/axisartist/axis_artist.py,sha256=gScMYbfAyxT5IgyEZRVto2NyZVLGpDQeJ1t9tk1d3OM,43453
+mpl_toolkits/axisartist/axisline_style.py,sha256=bQ3M5gAxS7HbCC3oOQgrSyNWdk_FbvXfX24Eatge0UE,5098
+mpl_toolkits/axisartist/axislines.py,sha256=mrQIihqbfBi2F-QgLRjZvHGM6rEojStBzojYpVNkjg0,20852
+mpl_toolkits/axisartist/clip_path.py,sha256=LE_IIP0byNr5ELJlD8_8fsAh215MUDoK19-BISuFB80,3777
+mpl_toolkits/axisartist/floating_axes.py,sha256=xSAJ5Myaa5Xm9DkOhJcdaPwzdPyvJnw5K9YPmDwB5ME,13122
+mpl_toolkits/axisartist/grid_finder.py,sha256=K1Gae38Jt2OFfScZaKbxkLLcWrHDm-2bAVsl56SC1F0,10388
+mpl_toolkits/axisartist/grid_helper_curvelinear.py,sha256=6QT9nTQ2dJ_NPsazS0Q0hC8W5IV7yzqYd_Fa8_gJXmI,14384
+mpl_toolkits/axisartist/parasite_axes.py,sha256=1sQwBEYuXHpaEeObb7cXh0I1xWroYtcvFiEmwrzqK3w,447
+mpl_toolkits/mplot3d/__init__.py,sha256=V2iPIP9VyRhoJsFWnQf5AkfyI1GSSP9H6hICEe9edJo,27
+mpl_toolkits/mplot3d/__pycache__/__init__.cpython-38.pyc,,
+mpl_toolkits/mplot3d/__pycache__/art3d.cpython-38.pyc,,
+mpl_toolkits/mplot3d/__pycache__/axes3d.cpython-38.pyc,,
+mpl_toolkits/mplot3d/__pycache__/axis3d.cpython-38.pyc,,
+mpl_toolkits/mplot3d/__pycache__/proj3d.cpython-38.pyc,,
+mpl_toolkits/mplot3d/art3d.py,sha256=MAR_fFyBwe3VkwlOeWMccwDWo8RR1VqhUjuipLPuIFU,27647
+mpl_toolkits/mplot3d/axes3d.py,sha256=iJ7LN-UKY7xMaGjYbeu-J1IuC54QX3irx7Kkh5gInzY,98609
+mpl_toolkits/mplot3d/axis3d.py,sha256=UdxPxUW7GDoOpBy4uByLmLZJfle2wu0oYGenDHjjcLA,16737
+mpl_toolkits/mplot3d/proj3d.py,sha256=5xwjogevdUCBaV9sx1RlNqO6fMCSIBi_1_uVZniy2pU,5499
+mpl_toolkits/tests/__init__.py,sha256=iPdasxJf0vpIi11tQ98OVSQgS0UaPUyOEGGfAryAhIA,381
+mpl_toolkits/tests/__pycache__/__init__.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/conftest.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axes_grid.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axes_grid1.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_angle_helper.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_axis_artist.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_axislines.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_clip_path.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_floating_axes.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_grid_finder.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_axisartist_grid_helper_curvelinear.cpython-38.pyc,,
+mpl_toolkits/tests/__pycache__/test_mplot3d.cpython-38.pyc,,
+mpl_toolkits/tests/baseline_images/test_axes_grid/imagegrid_cbar_mode.png,sha256=yvo6erXXc3Z9aO0rrEezBooCc6KhAw7wKv4WngOQmFA,87393
+mpl_toolkits/tests/baseline_images/test_axes_grid1/anchored_direction_arrows.png,sha256=XMZGgG7_9k96bKhI2G--XBVKpct5O5psbGH2Wvj5YA0,10784
+mpl_toolkits/tests/baseline_images/test_axes_grid1/anchored_direction_arrows_many_args.png,sha256=fkPsdmhd4S1g-QxMb55M63iAgWmC2G4ytcLOT9tMAD0,11039
+mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.pdf,sha256=eW2CuM_T4d95dC-DU0PmmQD7gqRQIO0rcQpvp-zu1i4,25446
+mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.png,sha256=VfRfs6p4akgjGxxNm6Bu83Pg0v1KmU7WPu97_-kzNFc,48825
+mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.svg,sha256=usfsa3y-s-N2KMOzsOZHTq-PZXgAPXsSM-lkxJ3ZUi0,172812
+mpl_toolkits/tests/baseline_images/test_axes_grid1/fill_facecolor.png,sha256=Tkrylxebxm8SuWZjQK0qXSX8m9QsQU6kYm7L2dgt4yg,14845
+mpl_toolkits/tests/baseline_images/test_axes_grid1/image_grid.png,sha256=HIg43mbdOUyEWY-jQ1DEpG7DMqCcWbX1Xf2itmW1YL4,3786
+mpl_toolkits/tests/baseline_images/test_axes_grid1/inset_axes.png,sha256=RQmR39E6Vskvl7G4LInHibW9E1VK0QgCvI-hBlb-E2E,9928
+mpl_toolkits/tests/baseline_images/test_axes_grid1/inset_locator.png,sha256=bQKKKUuoU_EZwZT_9FzzeVKsKwUUBOZV55g4vVUbnCU,9490
+mpl_toolkits/tests/baseline_images/test_axes_grid1/inverted_zoomed_axes.png,sha256=rvglsLg8Kl9jE_JukTJ5B3EHozsIYJsaYA0JIOicZL8,25997
+mpl_toolkits/tests/baseline_images/test_axes_grid1/twin_axes_empty_and_removed.png,sha256=0YzkFhxs4SBG_FEmnWB10bXIxl9aq7WJveQAqHm0JrQ,37701
+mpl_toolkits/tests/baseline_images/test_axes_grid1/zoomed_axes.png,sha256=mUu8zJtz8FMb7h5l4Cfp3oBi9jaNR5OoyaDgwqpAZp4,25893
+mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist/axis_artist.png,sha256=qdlk9UPScCAN9RBOhoNqLmJvmkXt8pCuwuQtrz5E8Bs,10151
+mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist/axis_artist_labelbase.png,sha256=An5lovtvAiNA1NZI-E8kOj6eYTruQMqwf3J7pXwdk4A,10598
+mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist/axis_artist_ticklabels.png,sha256=7vuAKkIqcpgJrc2AF7oslf-E_sDfSlCoymyc87u4AWs,5696
+mpl_toolkits/tests/baseline_images/test_axisartist_axis_artist/axis_artist_ticks.png,sha256=CkVtCWG13ViW0w2DsbzfXSvoFWHYaaqQYeEYpbKbOg8,5695
+mpl_toolkits/tests/baseline_images/test_axisartist_axislines/ParasiteAxesAuxTrans_meshplot.png,sha256=FOgl-Glmzhdp6V8mz4StofTsFXGysFkEcUeaWtmJDZs,34354
+mpl_toolkits/tests/baseline_images/test_axisartist_axislines/Subplot.png,sha256=tRpYCjR5zUkafA85DVmY3duTEouwCZq6jDwSF4UsBS8,26919
+mpl_toolkits/tests/baseline_images/test_axisartist_axislines/SubplotZero.png,sha256=3kCrz7HQMYrK3iDgYgf8kyigxRtIGFBbcUzJPtiXh_E,28682
+mpl_toolkits/tests/baseline_images/test_axisartist_clip_path/clip_path.png,sha256=BtMyb7ZawcgId9jl1_qW72lU_ZyxLN780uQ9bCLjbHA,25701
+mpl_toolkits/tests/baseline_images/test_axisartist_floating_axes/curvelinear3.png,sha256=4th7Y74_9YV6X25RqJW0Op9WDzGRCcxF1kfNogkgozE,52835
+mpl_toolkits/tests/baseline_images/test_axisartist_floating_axes/curvelinear4.png,sha256=cYjrSiH6Mvor-VhmwNUgX7Le3_k1rurpd8L5vhTf16s,29374
+mpl_toolkits/tests/baseline_images/test_axisartist_grid_helper_curvelinear/axis_direction.png,sha256=3fue92dg-ntYI0XX0nB31IFpgRT2V3izqjrmLvEdYN4,40536
+mpl_toolkits/tests/baseline_images/test_axisartist_grid_helper_curvelinear/custom_transform.png,sha256=4cQhIFK1z8oPUVyvkHNZ_m-GCbikmUbTvkvYVGy6U4o,15118
+mpl_toolkits/tests/baseline_images/test_axisartist_grid_helper_curvelinear/polar_box.png,sha256=wWaPM3I7_435SkVQqIggb8BHrWBMWrsSVyMZQQJ6fE4,62526
+mpl_toolkits/tests/baseline_images/test_mplot3d/axes3d_cla.png,sha256=htnP1CA8dd85KqdnOsHVlsehT90MUoQD8kFTyra0AuE,51409
+mpl_toolkits/tests/baseline_images/test_mplot3d/axes3d_labelpad.png,sha256=zrLsk8t7s970yaY3cqj6SOMbI6UY8Loe0Zbp0WqFtwQ,66817
+mpl_toolkits/tests/baseline_images/test_mplot3d/axes3d_ortho.png,sha256=SoyN30SsuvEECZyB_ReGP3ZKGZJazOp05dXa3YUn7Jc,47796
+mpl_toolkits/tests/baseline_images/test_mplot3d/bar3d.png,sha256=Qw909B4nDmV9DlMuo1DKk7y5ndjtvni5d_DcysmG9VA,100466
+mpl_toolkits/tests/baseline_images/test_mplot3d/bar3d_notshaded.png,sha256=soaHKytaVZHmPvHIEcPFQDJDqhEEuNO_JIVCZyjacxM,66294
+mpl_toolkits/tests/baseline_images/test_mplot3d/bar3d_shaded.png,sha256=laBssZyuviouRe3seffJWOz45OLunXC0dFHi-lYge1w,115939
+mpl_toolkits/tests/baseline_images/test_mplot3d/contour3d.png,sha256=tii1IakS8MC_Vuwd95HhcyM0iq4zGN5DxgRFfB9mKu8,83161
+mpl_toolkits/tests/baseline_images/test_mplot3d/contourf3d.png,sha256=Jb-fhAcgogE8jn9DSsaqInUfWC7D_5Pf3QRf7XWAX2Q,42575
+mpl_toolkits/tests/baseline_images/test_mplot3d/contourf3d_fill.png,sha256=dE8eHoj43eePB44F1nLM2RLj8iqw8rCYI3D0VD3gUg0,39694
+mpl_toolkits/tests/baseline_images/test_mplot3d/lines3d.png,sha256=DQT-NruHCeG5LKpjG-dlLln3aCoPKhua5PQnHTafBGU,60217
+mpl_toolkits/tests/baseline_images/test_mplot3d/mixedsubplot.png,sha256=iHxYbxRflxIpjoAtWo9KAvgK4CS-k4N03p0SX_xF4DA,39674
+mpl_toolkits/tests/baseline_images/test_mplot3d/plot_3d_from_2d.png,sha256=AWos5EJWMerD0tgVZyvBofz-5hnCq6fhGHKmQi-izAg,56593
+mpl_toolkits/tests/baseline_images/test_mplot3d/poly3dcollection_alpha.png,sha256=AnZJbnnBnF_fny5FBTlSWblkNMlPI1dcQRlCfGPIjWI,52046
+mpl_toolkits/tests/baseline_images/test_mplot3d/poly3dcollection_closed.png,sha256=ePzSA-iFaQbmH603vw1jhs9vyIt45xXnbpIuUF3a1l8,52065
+mpl_toolkits/tests/baseline_images/test_mplot3d/proj3d_axes_cube.png,sha256=AJ0EoayvdBoywpOUWcxbMQ0oB7cTzcoWGgGyx2qgQMU,23182
+mpl_toolkits/tests/baseline_images/test_mplot3d/proj3d_axes_cube_ortho.png,sha256=5Phz7BclSciZpg4SDu-eUQ-v_ikHbEqReQWCdeHywQk,16210
+mpl_toolkits/tests/baseline_images/test_mplot3d/proj3d_lines_dists.png,sha256=XCd4hX2ckc5GCxcgenkRJ8MT7pX-3iMLylD2rCjNl-4,18898
+mpl_toolkits/tests/baseline_images/test_mplot3d/quiver3d.png,sha256=PBllNI1kHf1rz-oPK507OwsPNE9DPwivXAVJM9DemBI,104755
+mpl_toolkits/tests/baseline_images/test_mplot3d/quiver3d_empty.png,sha256=98D3k5QIL7KugUwzqJhdLtp9dgDGgx8hGa9_u8cvX6o,37954
+mpl_toolkits/tests/baseline_images/test_mplot3d/quiver3d_masked.png,sha256=67yp7-6f-vDiYTmCqMFfuIEGly5UHCCUOV84YJtLsX8,80392
+mpl_toolkits/tests/baseline_images/test_mplot3d/quiver3d_pivot_middle.png,sha256=N4o26wMzfnyxndPbZ2VnsjIAiNYrFN9Aa40ficwO9AM,104735
+mpl_toolkits/tests/baseline_images/test_mplot3d/quiver3d_pivot_tail.png,sha256=Ff_UrWxD-VIMQLN1uXy5u_Yd5e1P427YfGM05nvU2kE,104951
+mpl_toolkits/tests/baseline_images/test_mplot3d/scatter3d.png,sha256=MDaocusHz6Itinjm2j6fnDh-rl1fqVjnqM89nP8bwZs,43155
+mpl_toolkits/tests/baseline_images/test_mplot3d/scatter3d_color.png,sha256=Y7De9BIFLp0Ova4fk9IcXloNjiwmifTrFA1IfVJA3aE,41598
+mpl_toolkits/tests/baseline_images/test_mplot3d/surface3d.png,sha256=Ok0UmO2DELze2yK8mRx0CifmRAgvjyS1IvERsBRvFlU,54712
+mpl_toolkits/tests/baseline_images/test_mplot3d/surface3d_shaded.png,sha256=kWYGPWgG1ZrQVgd389xmIZ1cc59tAkKKiikKaJzHKkw,43474
+mpl_toolkits/tests/baseline_images/test_mplot3d/text3d.png,sha256=sO68K3cti2YsPkkjEIAvc7_pd8JaHpc_a78UVx4Htu4,78758
+mpl_toolkits/tests/baseline_images/test_mplot3d/tricontour.png,sha256=8IjYmJP6cBhnPGLz-WDyn7UUMYZ10Kz2MpjOFwDUVow,71328
+mpl_toolkits/tests/baseline_images/test_mplot3d/trisurf3d.png,sha256=nO0gJBIluLEX3mlxXY3C6bx-9Jf_xJyXAnTXKnqrIkQ,99103
+mpl_toolkits/tests/baseline_images/test_mplot3d/trisurf3d_shaded.png,sha256=LSVF3lI7JnYXmCBAcn410k3JRE-3ssp84Dmgg3zr0FA,94328
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-alpha.png,sha256=LELjsQnfvfzLF8rNSh5azv9BdwF8TlCMn2wbBJNTtyQ,178141
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-edge-style.png,sha256=UJXpFMSWIFgUH2rLEv1nxDvHrnshlSz4d5ZB34upa3g,65759
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-named-colors.png,sha256=J8m66Bc5NoeZxGRwbBThV06_aybNvMeTtwUnmCRzNak,93580
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-rgb-data.png,sha256=5s02No0RWv8NYV_ccFUnDdBaUHQ8DTO90qddKBnN6mw,131458
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-simple.png,sha256=7VCcyzKKKz8E7txQV4wi-jEbtftaFW_ekWmA9E1qx3Y,60304
+mpl_toolkits/tests/baseline_images/test_mplot3d/voxels-xyz.png,sha256=KwDmkuK7FMtl0Q2ank7wcph9uTncUr7UdTh2hUYdZP8,121446
+mpl_toolkits/tests/baseline_images/test_mplot3d/wireframe3d.png,sha256=epmsR4rWGzh7prW3RL_t8ZcUEsphM5bc0t5j__iauOY,108371
+mpl_toolkits/tests/baseline_images/test_mplot3d/wireframe3dzerocstride.png,sha256=WaO_3NcaZPFzlui5SQYJ-TbUylHkSbieneCYPffNgAA,81117
+mpl_toolkits/tests/baseline_images/test_mplot3d/wireframe3dzerorstride.png,sha256=y1JvfuVOBiNhJoJ2HdOXyBYBBkQm-oaPcoekfT-cMso,84284
+mpl_toolkits/tests/conftest.py,sha256=Ph6QZKdfAnkPwU52StddC-uwtCHfANKX1dDXgtX122g,213
+mpl_toolkits/tests/test_axes_grid.py,sha256=SUnj9aImCEI-Q3_cM8e5BlizoNle9E1joKkE_q57OAg,2694
+mpl_toolkits/tests/test_axes_grid1.py,sha256=pUw19PTds6WRlLON5U9ZWmt6HxV56Q6DKDPVGM34ysk,17113
+mpl_toolkits/tests/test_axisartist_angle_helper.py,sha256=PwhJwBm2kk4uMyhdO5arQs8IlqSX2vN0hvUzI7YHqrw,5670
+mpl_toolkits/tests/test_axisartist_axis_artist.py,sha256=N4Khx8jSxkoiMz3KvumodmFKHZUtdwtjkzxLWPSdyuw,3008
+mpl_toolkits/tests/test_axisartist_axislines.py,sha256=4ujhndnDq-6albE4WwVFTVURfjG1xK1597smUGMxfFg,2331
+mpl_toolkits/tests/test_axisartist_clip_path.py,sha256=afS3nvNqCgvDpJdg_MvbwydtSWv5b6ciP-Iq2aNcNFQ,1004
+mpl_toolkits/tests/test_axisartist_floating_axes.py,sha256=xENnUpFU8EHPgnON6W1xqMVWIq8qxIzuGf1oMmSMFJo,4127
+mpl_toolkits/tests/test_axisartist_grid_finder.py,sha256=e65sLudWFIXeU08Sis3_SI1JEI6eq8YqKj-80F_Nohk,325
+mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py,sha256=0AT6TdbxHGHlircgjNZyK2u1dw05YLXdOhLqXmsKyw4,7572
+mpl_toolkits/tests/test_mplot3d.py,sha256=TojtKh1gbRWl-kCWQcYaFMOS89txDRd02O0NBJuu-vE,31991
+pylab.py,sha256=u_By3CHla-rBMg57egFXIxZ3P_J6zEkSu_dNpBcH5pw,90
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/top_level.txt	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/top_level.txt	(date 1589417755512)
@@ -0,0 +1,3 @@
+matplotlib
+mpl_toolkits
+pylab
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/namespace_packages.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/namespace_packages.txt	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/namespace_packages.txt	(date 1589417755512)
@@ -0,0 +1,1 @@
+mpl_toolkits
Index: modules/data_frame.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from modules.adt import SeriesArray\n\n\nclass DataFrame:\n    def __init__(self):\n        \"\"\"\n        initial method\n        \"\"\"\n        self.columns = SeriesArray()\n        self.rows = SeriesArray()\n        self.num_cols = 0\n        self.num_rows = 0\n        self.column_names = SeriesArray()\n\n    def add_column(self, arr):\n        \"\"\"\n        adds a column to a DataFrame\n        :param arr: SeriesArray\n        :return: None\n        \"\"\"\n        arr_copy = arr.copy_arr()\n        self.columns.append(arr_copy)\n        self.num_cols += 1\n        if len(arr_copy) > self.num_rows:\n            for i in range(len(arr_copy) - self.num_rows):\n                self.add_row(SeriesArray())\n\n        for k in range(len(arr_copy)):\n            self.rows[k].append(arr_copy[k])\n\n    def add_row(self, arr):\n        \"\"\"\n        adds a row to a DataFrame\n        :param arr: SeriesArray\n        :return: None\n        \"\"\"\n        arr_copy = arr.copy_arr()\n        self.rows.append(arr_copy)\n        self.num_rows += 1\n        if len(arr_copy) > self.num_cols:\n            for i in range(len(arr_copy) - self.num_cols):\n                self.add_column(SeriesArray())\n\n        for k in range(len(arr_copy)):\n            self.columns[k].append(arr_copy[k])\n\n    def reverse_rows(self):\n        \"\"\"\n        :returns reversed DataFrame\n        :return: DataFrame\n        \"\"\"\n        reversed_df = DataFrame()\n        reversed_df.column_names = self.column_names\n        for i in range(self.num_rows - 1, -1, -1):\n            reversed_df.add_row(self.rows[i])\n        return reversed_df\n\n    def map_column(self, index, func):\n        self.columns[index].map(func)\n        for row in self.rows:\n            row[index] = func(row[index])\n\n    def map_row(self, index, func):\n        self.rows[index].map(func)\n        for column in self.columns:\n            column[index] = func(column[index])\n\n    def avarage_ratio_of_growth_rates(self, clmn_indx1, clmn_indx2):\n        clmn1 = self.columns[clmn_indx1]\n        clmn2 = self.columns[clmn_indx2]\n        avg_ratio = 0\n        count = 1\n        for i in range(1, self.num_rows):\n            if clmn1[i] != 0 and clmn1[i - 1] != 0 \\\n                    and clmn2[i] != 0 and clmn2[i - 1] != 0 \\\n                    and clmn1[i] != clmn2[i]:\n                growth1 = clmn1[i] / clmn1[i - 1]\n                growth2 = clmn2[i] / clmn2[i - 1]\n                ratio = growth1 / growth2\n                # arr_ratio.append(ratio)\n                avg_ratio += ratio\n                count += 1\n            else:\n                pass\n        return avg_ratio / count\n\n    def __str__(self):\n        \"\"\"\n        string representation of DataFrame\n        :return: str\n        \"\"\"\n        s = \"DataFrame\\n\"\n        s += str(self.column_names) + '\\n'\n        for i in range(self.num_rows):\n            row = \"\"\n            for k in range(len(self.rows[i])):\n                row += str(self.rows[i][k]) + \" \" * 9  # + \" \"*(len(str(self.rows[i][k])) + 1)\n            s += row + \"\\n\"\n        return s\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/data_frame.py	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ modules/data_frame.py	(date 1589412515818)
@@ -80,8 +80,6 @@
                 # arr_ratio.append(ratio)
                 avg_ratio += ratio
                 count += 1
-            else:
-                pass
         return avg_ratio / count
 
     def __str__(self):
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/WHEEL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/WHEEL	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/WHEEL	(date 1589417755512)
@@ -0,0 +1,5 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.31.1)
+Root-Is-Purelib: false
+Tag: cp38-cp38-manylinux1_x86_64
+
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/INSTALLER
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/INSTALLER	(date 1589417759948)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/INSTALLER	(date 1589417759948)
@@ -0,0 +1,1 @@
+pip
Index: venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/METADATA
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/METADATA	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/matplotlib-3.2.1.dist-info/METADATA	(date 1589417755512)
@@ -0,0 +1,127 @@
+Metadata-Version: 2.1
+Name: matplotlib
+Version: 3.2.1
+Summary: Python plotting package
+Home-page: https://matplotlib.org
+Author: John D. Hunter, Michael Droettboom
+Author-email: matplotlib-users@python.org
+License: PSF
+Download-URL: https://matplotlib.org/users/installing.html
+Project-URL: Documentation, https://matplotlib.org
+Project-URL: Source Code, https://github.com/matplotlib/matplotlib
+Project-URL: Bug Tracker, https://github.com/matplotlib/matplotlib/issues
+Project-URL: Forum, https://discourse.matplotlib.org/
+Project-URL: Donate, https://numfocus.org/donate-to-matplotlib
+Platform: any
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Framework :: Matplotlib
+Classifier: Intended Audience :: Science/Research
+Classifier: Intended Audience :: Education
+Classifier: License :: OSI Approved :: Python Software Foundation License
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Classifier: Topic :: Scientific/Engineering :: Visualization
+Requires-Python: >=3.6
+Description-Content-Type: text/x-rst
+Requires-Dist: cycler (>=0.10)
+Requires-Dist: kiwisolver (>=1.0.1)
+Requires-Dist: numpy (>=1.11)
+Requires-Dist: pyparsing (!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1)
+Requires-Dist: python-dateutil (>=2.1)
+
+|Travis|_ |AzurePipelines|_ |AppVeyor|_ |Codecov|_ |LGTM|_ |PyPi|_ |Gitter|_ |NUMFocus|_ |GitTutorial|_
+
+
+.. |Travis| image:: https://travis-ci.org/matplotlib/matplotlib.svg?branch=master
+.. _Travis: https://travis-ci.org/matplotlib/matplotlib
+
+.. |AzurePipelines| image:: https://dev.azure.com/matplotlib/matplotlib/_apis/build/status/matplotlib.matplotlib?branchName=master
+.. _AzurePipelines: https://dev.azure.com/matplotlib/matplotlib/_build/latest?definitionId=1&branchName=master
+
+.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/github/matplotlib/matplotlib?branch=master&svg=true
+.. _AppVeyor: https://ci.appveyor.com/project/matplotlib/matplotlib
+
+.. |Codecov| image:: https://codecov.io/github/matplotlib/matplotlib/badge.svg?branch=master&service=github
+.. _Codecov: https://codecov.io/github/matplotlib/matplotlib?branch=master
+
+.. |LGTM| image:: https://img.shields.io/lgtm/grade/python/g/matplotlib/matplotlib.svg?logo=lgtm&logoWidth=18
+.. _LGTM: https://lgtm.com/projects/g/matplotlib/matplotlib
+
+.. |PyPi| image:: https://badge.fury.io/py/matplotlib.svg
+.. _PyPi: https://badge.fury.io/py/matplotlib
+
+.. |Gitter| image:: https://badges.gitter.im/matplotlib/matplotlib.png
+.. _Gitter: https://gitter.im/matplotlib/matplotlib
+
+.. |NUMFocus| image:: https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A
+.. _NUMFocus: https://www.numfocus.org
+
+.. |GitTutorial| image:: https://img.shields.io/badge/PR-Welcome-%23FF8300.svg?
+.. _GitTutorial: https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project
+
+.. image:: https://matplotlib.org/_static/logo2.svg
+
+
+Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.
+
+Check out our `home page <https://matplotlib.org/>`_ for more information.
+
+.. image:: https://matplotlib.org/_static/readme_preview.png
+
+Matplotlib produces publication-quality figures in a variety of hardcopy formats
+and interactive environments across platforms. Matplotlib can be used in Python scripts,
+the Python and IPython shell, web application servers, and various
+graphical user interface toolkits.
+
+
+Install
+=======
+
+For installation instructions and requirements, see `INSTALL.rst <INSTALL.rst>`_  or the
+`install <https://matplotlib.org/users/installing.html>`_ documentation.
+
+Test
+====
+
+After installation, launch the test suite::
+
+  python -m pytest
+
+Read the `testing guide <https://matplotlib.org/devel/testing.html>`_ for more information and alternatives.
+
+Contribute
+==========
+You've discovered a bug or something else you want to change - excellent!
+
+You've worked out a way to fix it – even better!
+
+You want to tell us about it – best of all!
+
+Start at the `contributing guide <https://matplotlib.org/devdocs/devel/contributing.html>`_!
+
+Contact
+=======
+
+`Discourse <https://discourse.matplotlib.org/>`_ is the discussion forum for general questions and discussions and our recommended starting point.
+
+Our active mailing lists (which are mirrored on Discourse) are:
+
+* `Users <https://mail.python.org/mailman/listinfo/matplotlib-users>`_ mailing list: matplotlib-users@python.org
+* `Announcement  <https://mail.python.org/mailman/listinfo/matplotlib-announce>`_ mailing list: matplotlib-announce@python.org
+* `Development <https://mail.python.org/mailman/listinfo/matplotlib-devel>`_ mailing list: matplotlib-devel@python.org
+
+Gitter_ is for coordinating development and asking questions directly related
+to contributing to matplotlib.
+
+
+Citing Matplotlib
+=================
+If Matplotlib contributes to a project that leads to publication, please
+acknowledge this by citing Matplotlib.
+
+`A ready-made citation entry <https://matplotlib.org/citing.html>`_ is available.
+
+
Index: modules/us_states_covid19_daily.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/us_states_covid19_daily.csv	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ modules/us_states_covid19_daily.csv	(date 1589417972047)
@@ -1,9 +1,121 @@
 date,state,positive,negative,pending,hospitalizedCurrently,hospitalizedCumulative,inIcuCurrently,inIcuCumulative,onVentilatorCurrently,onVentilatorCumulative,recovered,dataQualityGrade,lastUpdateEt,hash,dateChecked,death,hospitalized,total,totalTestResults,posNeg,fips,deathIncrease,hospitalizedIncrease,negativeIncrease,positiveIncrease,totalTestResultsIncrease
+20200512,AK,383,29578,,10,,,,,,334,B,5/12/2020 00:00,ad64932142ec53f8eee1158369c6db3eb643ceed,2020-05-12T20:00:00Z,10,,29961,29961,29961,02,0,0,1279,2,1281
+20200512,AL,10310,122908,,,1287,,468,,280,,B,5/12/2020 00:00,dc0d90e43e92b36fb107e2ec174f64c4e91412e9,2020-05-12T20:00:00Z,429,1287,133218,133218,133218,01,28,31,3473,301,3774
+20200512,AR,4164,66280,,59,485,,,12,98,3220,A,5/11/2020 18:55,c6b2b29faaf304a3e36270f55c766b0fc9773bc2,2020-05-12T20:00:00Z,95,485,70444,70444,70444,05,1,5,1284,130,1414
+20200512,AS,0,105,,,,,,,,,C,5/10/2020 00:00,92e4d4fafe1a2e9955e7a0bac38789993d7da480,2020-05-12T20:00:00Z,0,,105,105,105,60,0,0,0,0,0
+20200512,AZ,11736,111106,,765,1564,318,,204,,2909,A+,5/12/2020 00:00,e1f3e3aa6e1b798039369c830077e7267e4a6cde,2020-05-12T20:00:00Z,562,1564,122842,122842,122842,04,20,27,6022,356,6378
+20200512,CA,69382,963988,,4544,,1349,,,,,B,5/12/2020 00:00,1c3c812803c41f5b0c75e07b15a8a4428e7d662f,2020-05-12T20:00:00Z,2847,,1033370,1033370,1033370,06,77,0,40030,1443,41473
+20200512,CO,19879,88778,,738,3663,,,,,3114,A,5/11/2020 00:00,be4d64bed3daa1a877ec46a117750a6be309aaca,2020-05-12T20:00:00Z,987,3663,108657,108657,108657,08,6,-26,-113,-20,-133
+20200512,CT,34333,104091,,1189,9389,,,,,5413,B,5/12/2020 14:00,94125cc6367af615dfdf3201a4acadd5160e7787,2020-05-12T20:00:00Z,3041,9389,138424,138424,138424,09,33,0,5348,568,5916
+20200512,DC,6485,24565,,416,,,,82,,886,A,5/11/2020 00:00,9437f63c6fb36500cb3681a8b3667804ea58935d,2020-05-12T20:00:00Z,336,,31050,31050,31050,11,8,0,693,96,789
+20200512,DE,6741,26550,,276,,467,,263,,2802,B,5/11/2020 18:00,f9a07cf2bc409487b6aac94345eba84c3af2c3a6,2020-05-12T20:00:00Z,237,,33291,33291,33291,10,12,0,1187,176,1363
+20200512,FL,41923,537681,1064,,7654,,,,,,A+,5/12/2020 09:28,c095dad326b6e29d6cdc568a6f8b53a910be8121,2020-05-12T20:00:00Z,1849,7654,580668,579604,579604,12,44,196,17606,941,18547
+20200512,GA,34635,227544,,,6130,,1443,,,,A+,5/11/2020 13:00,b0656969e39a973d0cb2d4fdbf46bac5ffc9f638,2020-05-12T20:00:00Z,1461,6130,262179,262179,262179,13,20,115,10183,708,10891
+20200512,GU,152,3939,,,,,,,,124,C,5/11/2020 18:00,b07de06424b91c7563ec1fd794d01ec27c2988d9,2020-05-12T20:00:00Z,5,,4091,4091,4091,66,0,0,101,1,102
+20200512,HI,634,37305,,,81,,,,,561,B,5/11/2020 18:00,4c15f93f1f310f449317b691c7504e27d4b0a992,2020-05-12T20:00:00Z,17,81,37939,37939,37939,15,0,0,254,2,256
+20200512,IA,12912,68376,,385,,143,,101,,5618,A+,5/12/2020 00:00,851003bc001f9d3c6070b7a0744f75232b70cfef,2020-05-12T20:00:00Z,289,,81288,81288,81288,19,18,0,2957,539,3496
+20200512,ID,2260,30445,,,210,,87,,,1508,B,5/11/2020 19:00,cdfbbe6e13eb9a49d4af2261bc1c8e26d78e13a9,2020-05-12T20:00:00Z,70,210,32705,32705,32705,16,3,3,533,30,563
+20200512,IL,83021,388670,,4626,,1215,,730,,,A,5/12/2020 00:00,7eeee0fea9bfea9b5d442150defcb14e725265a0,2020-05-12T20:00:00Z,3601,,471691,471691,471691,17,142,0,25252,4014,29266
+20200512,IN,25127,125383,,1283,,472,,212,,,A+,5/11/2020 23:59,070d23433b10418a1f1e8924d73c6edaf55446a3,2020-05-12T20:00:00Z,1578,,150510,150510,150510,18,38,0,3322,500,3822
+20200512,KS,7116,46993,,,660,,233,,101,376,A,5/11/2020 10:00,e4e4b08f70f7483e20e2d1ab1e8a88a904c403de,2020-05-12T20:00:00Z,158,660,54109,54109,54109,20,0,0,0,0,0
+20200512,KY,6677,97347,,383,1767,220,768,,,2335,A+,5/11/2020 17:00,49f080fd95b649d6f35a2acacf5d6189f063f556,2020-05-12T20:00:00Z,311,1767,104024,104024,104024,21,7,10,16864,237,17101
+20200512,LA,32050,195962,,1320,,,,146,,22608,B,5/12/2020 13:00,725798364fbd1d9d469c7f8d7a9f48c9d6dc5826,2020-05-12T20:00:00Z,2347,,228012,228012,228012,22,39,0,6947,235,7182
+20200512,MA,79332,322164,,3127,7842,818,,,,,A+,5/12/2020 10:00,c0ec660677afe7ab283ad8476d692eac9ab0c5c5,2020-05-12T20:00:00Z,5141,7842,401496,401496,401496,25,33,110,5898,870,6768
+20200512,MD,34061,135442,,1563,6287,590,,,,2394,,5/12/2020 10:00,1b2bdc997453e056cd3567e9331675dee5759225,2020-05-12T20:00:00Z,1756,6287,169503,169503,169503,24,73,104,4035,688,4723
+20200512,ME,1477,22092,,34,202,17,,8,,913,B,5/12/2020 12:30,8d555f344de837c9297183826a631604f9095d84,2020-05-12T20:00:00Z,65,202,23569,23569,23569,23,0,2,0,15,15
+20200512,MI,48021,259869,,1384,,693,,525,,22686,A+,5/12/2020 11:00,f89a13701a2f7ee5383d462bde185e0e48ce1c94,2020-05-12T20:00:00Z,4674,,307890,307890,307890,26,90,0,8473,469,8942
+20200512,MN,12494,108340,,496,1799,199,625,,,,A,5/11/2020 17:00,b7f43bbd409a8641550236b0176e1b3f08de3720,2020-05-12T20:00:00Z,614,1799,120834,120834,120834,27,23,83,4358,695,5053
+20200512,MO,10006,111290,,787,,,,140,,,B,5/12/2020 15:00,a0b380a66f7e018682c96854e0dc4ebd6529dba4,2020-05-12T20:00:00Z,524,,121296,121296,121296,29,36,0,5588,88,5676
+20200512,MP,19,2854,,,,,,,,12,D,5/12/2020 00:00,de6e7a04c4dcd1ab903b996dfb4990a2a9981bba,2020-05-12T20:00:00Z,2,,2873,2873,2873,69,0,0,178,0,178
+20200512,MS,9908,87784,,604,1582,146,,75,,6268,A,5/11/2020 19:00,c2ad322a2ca23780c0423744f1c8d342b86e2cde,2020-05-12T20:00:00Z,457,1582,97692,97692,97692,28,22,36,1573,234,1807
+20200512,MT,461,22574,,4,63,,,,,425,B,5/12/2020 00:00,2b3dc441154f5955223ec8be3d6b25315ae87038,2020-05-12T20:00:00Z,16,63,23035,23035,23035,30,0,1,461,2,463
+20200512,NC,15346,186898,,475,,,,,,9115,A,5/12/2020 11:00,99811235d4384d8dc44fb9b020be9a445fca0410,2020-05-12T20:00:00Z,577,,202244,202244,202244,37,27,0,6078,301,6379
+20200512,ND,1571,46261,,38,122,,,,,877,C,5/12/2020 12:10,6439186903c6409dca9c56820e62dc85e6ab838e,2020-05-12T20:00:00Z,38,122,47832,47832,47832,38,2,7,765,53,818
+20200512,NE,8572,39371,,192,,81,,56,,,B,5/11/2020 20:05,82de0819c060549c93f72549b792b5de897151e2,2020-05-12T20:00:00Z,100,,47943,47943,47943,31,2,0,1447,257,1704
+20200512,NH,3160,32401,54,117,318,,97,,,1231,B,5/11/2020 09:00,4ea2337b6353839aa3392a0949b5de5037f18200,2020-05-12T20:00:00Z,133,318,35615,35561,35561,33,0,0,678,0,678
+20200512,NJ,140743,292317,,4328,,1306,,982,,15642,A+,5/12/2020 13:00,a551c9bb3078185c8537e653e9855a75e1844e2f,2020-05-12T20:00:00Z,9508,,433060,433060,433060,34,198,0,6329,798,7127
+20200512,NM,5069,101652,,207,886,,,,,1300,C,5/11/2020 22:33,6d7039f5d1bc3661cde6775cc8c8f54088ec2a2b,2020-05-12T20:00:00Z,208,886,106721,106721,106721,35,8,97,4017,206,4223
+20200512,NV,6311,57764,,522,,121,,64,,185,C,5/12/2020 12:30,a1ac2e2156586d3396c44f016461670c4d570e8e,2020-05-12T20:00:00Z,312,,64075,64075,64075,32,6,0,3832,159,3991
+20200512,NY,338485,886628,,7063,73143,2375,,1964,,58679,A,5/12/2020 00:00,557195b2b5a5899f0b86cf3d014ed6a5b11dd26a,2020-05-12T20:00:00Z,21845,73143,1225113,1225113,1225113,36,205,0,19032,1430,20462
+20200512,OH,25250,192481,,1032,4539,401,1232,270,,,B,5/12/2020 14:00,de8d2b78e3adb0f6a856466164f7abbfe651e297,2020-05-12T20:00:00Z,1436,4539,217731,217731,217731,39,79,126,6728,473,7201
+20200512,OK,4732,91379,,190,828,83,,,,3423,A+,5/12/2020 00:00,ab5d94f248233e426e55e603e11be5d53cb0fc1d,2020-05-12T20:00:00Z,278,828,96111,96111,96111,40,4,0,0,119,119
+20200512,OR,3286,74320,,165,673,39,,25,,1125,A+,5/12/2020 11:52,2d615f054ea8e40981ad1c1119401e4cfae83193,2020-05-12T20:00:00Z,130,673,77606,77606,77606,41,0,0,0,0,0
+20200512,PA,57991,237989,,2187,,,,497,,,C,5/12/2020 12:00,fa3ba6d4689c14fb4158f6072afa997b7d6078e3,2020-05-12T20:00:00Z,3806,,295980,295980,295980,42,75,0,6285,837,7122
+20200512,PR,2299,,,,,,,,,,C,5/12/2020 06:30,dd849b252fa9866c8bba2f82baae46c6f552e95d,2020-05-12T20:00:00Z,114,,2299,2299,2299,72,1,0,0,43,43
+20200512,RI,11614,83625,,277,1307,72,,53,,863,A+,5/12/2020 12:00,0b3efb331e4b384182d3a043259392a9b43e03e5,2020-05-12T20:00:00Z,444,1307,95239,95239,95239,44,14,27,1743,164,1907
+20200512,SC,7927,85213,,,1338,,,,,6817,A,5/12/2020 16:14,d9ad2effd29087d5acdaddd770ddf5116ff02f21,2020-05-12T20:00:00Z,355,1338,93140,93140,93140,45,24,86,8409,274,8683
+20200512,SD,3663,21534,,74,271,,,,,2309,B,5/12/2020 11:30,398b44ebe956f8b3706040627f7a9fbc550424f1,2020-05-12T20:00:00Z,39,271,25197,25197,25197,46,5,8,570,49,619
+20200512,TN,16111,267713,,,1363,,,,,8336,A,5/12/2020 16:00,b54071de6f6bdd53a83161c3100769996827243e,2020-05-12T20:00:00Z,265,1363,283824,283824,283824,47,14,19,9980,567,10547
+20200512,TX,39869,485828,,1725,,,,,,21713,A,5/11/2020 16:25,c2be51d8e637f5f56c233abd72c96b7e10cc1cbf,2020-05-12T20:00:00Z,1100,,525697,525697,525697,48,0,0,0,0,0
+20200512,UT,6432,147053,,166,535,,178,,80,3267,B,5/12/2020 15:00,529a080f15d8f439a8f5d45ba54214b08fd1cdbc,2020-05-12T20:00:00Z,73,535,153485,153485,153485,49,5,18,2830,70,2900
+20200512,VA,25800,129529,447,1529,4929,364,,201,,3400,A+,5/12/2020 09:00,45d4f6b36abd4c2c07613461218de47ff5c0c389,2020-05-12T20:00:00Z,891,4929,155776,155329,155329,51,41,152,3982,730,4712
+20200512,VI,69,1115,58,,,,,,,61,C,5/12/2020 14:19,866582e0254dc6dd9d7793bd722ba6661a15affc,2020-05-12T20:00:00Z,6,,1242,1184,1184,78,1,0,5,0,5
+20200512,VT,927,20335,,18,,,,,,787,B,5/12/2020 00:00,753bba5966252600f220802d111cf2b2235eb5e0,2020-05-12T20:00:00Z,53,,21262,21262,21262,50,0,0,390,1,391
+20200512,WA,17122,234986,,321,,94,,,,,A,5/11/2020 02:59,b72b86f14cbadf67317ae856d016fbfc5eb67ebd,2020-05-12T20:00:00Z,945,,252108,252108,252108,53,14,0,3002,231,3233
+20200512,WI,10611,112748,180,520,1877,116,464,,,5371,A+,5/12/2020 12:23,0f63f7dde4112e772bcdfc22930c6a3f586ed906,2020-05-12T20:00:00Z,418,1877,123539,123359,123359,55,9,31,4715,193,4908
+20200512,WV,1371,63698,,50,,9,,5,,803,C,5/12/2020 10:00,f37078141cf9d5c1e30b4386d7cb47825c2621bd,2020-05-12T20:00:00Z,57,,65069,65069,65069,54,3,0,1595,5,1600
+20200512,WY,675,14384,,10,67,,,,,477,B,5/12/2020 15:50,edb8d27bf5882660de5e5b0543f7624c2b51f9d2,2020-05-12T20:00:00Z,7,67,15059,15059,15059,56,0,1,2981,13,2994
+20200511,AK,381,28299,,7,,,,,,328,C,5/11/2020 00:00,a7223546ea51f5c1f4befbca92cbba972c4254a3,2020-05-11T20:00:00Z,10,,28680,28680,28680,02,0,0,1314,2,1316
+20200511,AL,10009,119435,,,1256,,463,,276,,B,5/11/2020 00:00,7a458a485ba87dec00819901d27fc50e4fbfdb01,2020-05-11T20:00:00Z,401,1256,129444,129444,129444,01,8,16,1791,232,2023
+20200511,AR,4034,64996,,61,480,,,11,98,3149,A,5/10/2020 19:05,dbe584b0f033faf71ab1255e32755841c0161597,2020-05-11T20:00:00Z,94,480,69030,69030,69030,05,6,9,3215,287,3502
+20200511,AS,0,105,,,,,,,,,D,5/10/2020 00:00,9b5ed3d398c7403c615f2cb9e18aff10510c6d39,2020-05-11T20:00:00Z,0,,105,105,105,60,0,0,22,0,22
+20200511,AZ,11380,105084,,717,1537,297,,201,,2852,A+,5/11/2020 00:00,afa17a1ea8cc6e6a5c171643105c247148ac1517,2020-05-11T20:00:00Z,542,1537,116464,116464,116464,04,6,9,5826,261,6087
+20200511,CA,67939,923958,,4549,,1329,,,,,B,5/11/2020 00:00,53613cacac307d4a734c079025735a0eec798c35,2020-05-11T20:00:00Z,2770,,991897,991897,991897,06,25,0,34974,1259,36233
+20200511,CO,19899,88891,,573,3689,,,,,3076,B,5/10/2020 00:00,4228d219947f9f2ce5463646f15dca0f339d5c51,2020-05-11T20:00:00Z,981,3689,108790,108790,108790,08,14,66,7656,524,8180
+20200511,CT,33765,98743,,1212,9389,,,,,5413,B,5/11/2020 14:00,725f98630b953261d0e361ea3ce240eb58dd87a5,2020-05-11T20:00:00Z,3008,9389,132508,132508,132508,09,41,0,2105,211,2316
+20200511,DC,6389,23872,,416,,,,82,,881,A,5/10/2020 00:00,96823a86d077b838aa718a491d8ad8e667579778,2020-05-11T20:00:00Z,328,,30261,30261,30261,11,5,0,574,117,691
+20200511,DE,6565,25363,,275,,,,,,2619,B,5/10/2020 18:00,b495a3c92d603717fcb0e0353a8b46934f687d7a,2020-05-11T20:00:00Z,225,,31928,31928,31928,10,1,0,771,118,889
+20200511,FL,40982,520075,1080,,7458,,,,,,B,5/11/2020 09:31,41a0c5448dd172e1de13ee660933da7aca6920e0,2020-05-11T20:00:00Z,1805,7458,562137,561057,561057,12,14,54,21723,386,22109
+20200511,GA,33927,217361,,,6015,,1414,,,,A,5/11/2020 13:00,36622751034808e79ec4a2f2a0e717a7238d62c4,2020-05-11T20:00:00Z,1441,6015,251288,251288,251288,13,36,18,7255,486,7741
+20200511,GU,151,3838,,,,,,,,124,C,5/11/2020 06:45,344915c252ec72e2897d08cedf0096c076238394,2020-05-11T20:00:00Z,5,,3989,3989,3989,66,0,0,195,0,195
+20200511,HI,632,37051,,,81,,,,,561,B,5/10/2020 18:00,c1a3fdf904f506a49beb3904919cfb214d1056b1,2020-05-11T20:00:00Z,17,81,37683,37683,37683,15,0,0,412,1,413
+20200511,IA,12373,65419,,394,,152,,107,,5249,A+,5/11/2020 00:00,6dc1fea55734472dff46f44afd605f1af78a08de,2020-05-11T20:00:00Z,271,,77792,77792,77792,19,6,0,3204,414,3618
+20200511,ID,2230,29912,,,207,,87,,,1473,B,5/9/2020 19:00,320a48fe6833d123bb557c59e853aa6f0948fc96,2020-05-11T20:00:00Z,67,207,32142,32142,32142,16,0,0,0,0,0
+20200511,IL,79007,363418,,4319,,1248,,730,,,A,5/11/2020 00:00,f44cdbee224288e9756f9c879b4330cf1a40125a,2020-05-11T20:00:00Z,3459,,442425,442425,442425,17,53,0,11175,1266,12441
+20200511,IN,24627,122061,,1346,4389,452,990,213,,,A+,5/10/2020 23:59,a57c95bf26ced24d8dba4841fca0b3ed92f8ddfd,2020-05-11T20:00:00Z,1540,4389,146688,146688,146688,18,32,0,6158,501,6659
+20200511,KS,7116,46993,,,660,,233,,101,376,A,5/11/2020 10:00,37cb8fd29d5e89ecc06556f7e2c38e2870d68a69,2020-05-11T20:00:00Z,158,660,54109,54109,54109,20,1,3,1436,168,1604
+20200511,KY,6440,80483,,394,1757,226,758,,,2308,A,5/9/2020 17:00,65bd44bbae0cf8f21518a61a2cf25ccc1bd682fc,2020-05-11T20:00:00Z,304,1757,86923,86923,86923,21,0,0,0,0,0
+20200511,LA,31815,189015,,1310,,,,157,,22608,B,5/11/2020 13:00,882c80ef83db3a2040f72edd1c0b65c14bcf63be,2020-05-11T20:00:00Z,2308,,220830,220830,220830,22,22,0,4743,215,4958
+20200511,MA,78462,316266,,3102,7732,813,,,,,A,5/11/2020 10:00,6e951327a5d89abb820241523b201fdd432bb5e9,2020-05-11T20:00:00Z,5108,7732,394728,394728,394728,25,129,115,5670,669,6339
+20200511,MD,33373,131407,,1544,6183,585,,,,2298,,5/11/2020 10:00,18b34eceb38d5a6ff1b85aebb7018b36d8ef661a,2020-05-11T20:00:00Z,1683,6183,164780,164780,164780,24,39,228,4063,786,4849
+20200511,ME,1462,22092,,37,200,17,,9,,872,B,5/11/2020 12:00,c25684830089eb770ad7aedc26e6565286ebfbab,2020-05-11T20:00:00Z,65,200,23554,23554,23554,23,1,1,0,26,26
+20200511,MI,47552,251396,,1424,,685,,557,,22686,A+,5/11/2020 11:00,a5d0f888a8b221813babc8a27f5015b598c9a9c2,2020-05-11T20:00:00Z,4584,,298948,298948,298948,26,33,0,12856,414,13270
+20200511,MN,11799,103982,,452,1716,194,600,,,7536,A,5/10/2020 17:00,f6a5865209748cf8637acf820d4467b408af499d,2020-05-11T20:00:00Z,591,1716,115781,115781,115781,27,13,59,4165,528,4693
+20200511,MO,9918,105702,,824,,,,137,,,B,5/11/2020 15:00,0a40716dc1fc6b5028e3a0b211783ea46f043cd9,2020-05-11T20:00:00Z,488,,115620,115620,115620,29,6,0,0,74,74
+20200511,MP,19,2676,,,,,,,,12,D,5/11/2020 00:00,5083b9724765025f257e7b96c00732bf25063219,2020-05-11T20:00:00Z,2,,2695,2695,2695,69,0,0,355,3,358
+20200511,MS,9674,86211,,507,1546,132,,68,,6268,A,5/10/2020 19:00,7b98e0ac888e25cb18aced67458df0e038dbf2cb,2020-05-11T20:00:00Z,435,1546,95885,95885,95885,28,5,15,14110,173,14283
+20200511,MT,459,22113,,4,62,,,,,423,C,5/10/2020 00:00,8bbba487e4da82581b0cf57a838d1c0a9b85971f,2020-05-11T20:00:00Z,16,62,22572,22572,22572,30,0,0,867,1,868
+20200511,NC,15045,180820,,464,,,,,,9115,B,5/11/2020 14:00,df1be569ae745bfd298a930e35362f09b2dad0c9,2020-05-11T20:00:00Z,550,,195865,195865,195865,37,3,0,3449,281,3730
+20200511,ND,1518,45496,,34,115,,,,,846,C,5/11/2020 12:10,0d5f52057ed67028f24db06f823d35bd8a25a4fa,2020-05-11T20:00:00Z,36,115,47014,47014,47014,38,1,5,2118,27,2145
+20200511,NE,8315,37924,,,,,,,,,D,5/10/2020 19:45,e58065fd1954d908292eee28a9f7fa0147c1658f,2020-05-11T20:00:00Z,98,,46239,46239,46239,31,2,0,589,81,670
+20200511,NH,3160,31723,261,113,318,,97,,,1229,B,5/10/2020 09:00,1e4d21c6c7cb4723f7c568bff5bb5287f0176a6c,2020-05-11T20:00:00Z,133,318,35144,34883,34883,33,2,5,1281,149,1430
+20200511,NJ,139945,285988,,4195,,1255,,970,,15642,A+,5/11/2020 13:00,94fa78b2e3195af312b3de2382d6da9df5a34c2d,2020-05-11T20:00:00Z,9310,,425933,425933,425933,34,55,0,112073,1413,113486
+20200511,NM,4863,97635,,194,789,,,,,1285,C,5/10/2020 17:50,431ea4a184bf3daa6990f2048eadb3bbffd4e3a3,2020-05-11T20:00:00Z,200,789,102498,102498,102498,35,9,0,5360,85,5445
+20200511,NV,6152,53932,,482,,117,,60,,183,C,5/11/2020 13:30,835d3bc0c7cb54e6e40f6e63266d5675959a69a6,2020-05-11T20:00:00Z,306,,60084,60084,60084,32,0,0,1221,54,1275
+20200511,NY,337055,867596,,7226,73143,2450,,2020,,58363,A,5/10/2020 00:00,c605cd69fc6d8af2586f5f00c31106bff9a1edd9,2020-05-11T20:00:00Z,21640,73143,1204651,1204651,1204651,36,162,428,19993,1660,21653
+20200511,OH,24777,185753,,1011,4413,391,1217,256,,,B,5/11/2020 14:00,cdf49b3d1bbbb6ee921c935e2760c07c4064d760,2020-05-11T20:00:00Z,1357,4413,210530,210530,210530,39,16,62,4972,696,5668
+20200511,OK,4613,91379,,177,828,93,,,,3241,A+,5/11/2020 00:00,04935b380656454e2afe3546d5ca7532a81d5efa,2020-05-11T20:00:00Z,274,828,95992,95992,95992,40,2,2,0,24,24
+20200511,OR,3286,74320,,164,673,40,,23,,1125,A+,5/11/2020 11:00,04658e44200d2f00f1f31ece71de204266d1e870,2020-05-11T20:00:00Z,130,673,77606,77606,77606,41,3,3,2041,58,2099
+20200511,PA,57154,231704,,2176,,,,497,,,C,5/11/2020 00:00,76cf6b30b46ddf22c8cd3d091eea7ae6fde2279b,2020-05-11T20:00:00Z,3731,,288858,288858,288858,42,24,0,3932,543,4475
+20200511,PR,2256,,,,,,,,,,D,5/11/2020 05:57,c241a9b6b383c2725aa95666ccfb34e74c9bf690,2020-05-11T20:00:00Z,113,,2256,2256,2256,72,2,0,0,58,58
+20200511,RI,11450,81882,,276,1280,73,,52,,841,A+,5/11/2020 12:00,5d97783cd28918685ef4cd8e2b2a4452ced74fc9,2020-05-11T20:00:00Z,430,1280,93332,93332,93332,44,8,29,1943,176,2119
+20200511,SC,7653,76804,,,1252,,,,,4120,B,5/10/2020 16:30,5f9e0d3a2ec058ef8d95dd9bf20de96334069a78,2020-05-11T20:00:00Z,331,1252,84457,84457,84457,45,0,0,0,0,0
+20200511,SD,3614,20964,,78,263,,,,,2187,C,5/10/2020 18:00,ad203958ee06caa056610e78ffd6ed44dbf5bdea,2020-05-11T20:00:00Z,34,263,24578,24578,24578,46,0,2,587,97,684
+20200511,TN,15544,257733,,,1344,,,,,8038,B,5/11/2020 15:00,c4c07a966a9529ae7ebf4274e5f2f04c52e4cfd7,2020-05-11T20:00:00Z,251,1344,273277,273277,273277,47,8,19,10849,559,11408
+20200511,TX,39869,485828,,1525,,,,,,21713,B,5/10/2020 16:35,14400b4f7e9ed0cdc8479e35757aa0364baa0578,2020-05-11T20:00:00Z,1100,,525697,525697,525697,48,12,0,22921,1000,23921
+20200511,UT,6362,144223,,160,517,,169,,76,3181,B,5/11/2020 15:00,fd0ee60a58a8dba6346a766037e5c849819ee5c8,2020-05-11T20:00:00Z,68,517,150585,150585,150585,49,1,5,3964,111,4075
+20200511,VA,25070,125547,432,1504,4777,362,,194,,3273,A+,5/10/2020 17:00,8959bbe05f63848e746dc5bf369ff728539bb0e5,2020-05-11T20:00:00Z,850,4777,151049,150617,150617,51,11,21,6573,989,7562
+20200511,VI,69,1110,36,,,,,,,60,C,5/11/2020 09:30,bdb309ceed93be561945a50c86d6472695a67e4b,2020-05-11T20:00:00Z,5,,1215,1179,1179,78,1,0,8,0,8
+20200511,VT,926,19945,,14,,,,,,785,B,5/11/2020 00:00,27e58b21612cac37070adf11719309579c80e62a,2020-05-11T20:00:00Z,53,,20871,20871,20871,50,0,0,824,-1,823
+20200511,WA,16891,231984,,350,,110,,,,,B,5/10/2020 02:59,9019ba4d270df51d6551423c39c5d455a5d51c66,2020-05-11T20:00:00Z,931,,248875,248875,248875,53,10,0,5669,217,5886
+20200511,WI,10418,108033,180,520,1846,116,460,,,5176,A+,5/11/2020 00:00,633ecbf7b293489344a345f2d9e75dd82a7ed049,2020-05-11T20:00:00Z,409,1846,118631,118451,118451,55,9,26,2870,199,3069
+20200511,WV,1366,62103,,49,,10,,6,,775,C,5/11/2020 10:00,bed0929e916b8748d922f830ff1fb1496a4d66d3,2020-05-11T20:00:00Z,54,,63469,63469,63469,54,0,0,819,6,825
+20200511,WY,662,11403,,12,66,,,,,443,C,5/10/2020 17:38,c83025544ba417d05dd8af280986c4f1014532fd,2020-05-11T20:00:00Z,7,66,12065,12065,12065,56,0,1,0,1,1
 20200510,AK,379,26985,,8,,,,,,324,C,5/10/2020 14:00,c326467537b8aa4035125d086454fe043009b85a,2020-05-10T20:00:00Z,10,,27364,27364,27364,02,0,0,914,1,915
 20200510,AL,9777,117644,,,1240,,460,,274,,B,5/10/2020 00:00,b784245157e15325dbb3d93142f0dd3e69664809,2020-05-10T20:00:00Z,393,1240,127421,127421,127421,01,5,12,1717,210,1927
 20200510,AR,3747,61781,,64,471,,,14,96,2968,B,5/10/2020 10:15,38a9c539abfb2c4f9d79d7cf330d67eada846df5,2020-05-10T20:00:00Z,88,471,65528,65528,65528,05,0,0,0,0,0
 20200510,AS,0,83,,,,,,,,,D,5/3/2020 00:00,d66ec1502bd760d9b7e029ada9baca3d2c30db82,2020-05-10T20:00:00Z,0,,83,83,83,60,0,0,0,0,0
-20200510,AZ,11119,126620,,713,1528,300,,195,,2775,A+,5/10/2020 00:00,74a1a39b696dae2b812416173663517bf861901e,2020-05-10T20:00:00Z,536,1528,137739,137739,137739,04,4,14,8640,159,8799
+20200510,AZ,11119,99258,,713,1528,300,,195,,2775,A+,5/10/2020 00:00,287b2d1ba3cf9773d4cee612cbc898f28a3468cc,2020-05-10T20:00:00Z,536,1528,110377,110377,110377,04,4,14,4408,159,4567
 20200510,CA,66680,888984,,4555,,1328,,,,,B,5/10/2020 00:00,b618e4b193ed0312e703672e19ebad8c2eb045b9,2020-05-10T20:00:00Z,2745,,955664,955664,955664,06,67,0,40975,2119,43094
 20200510,CO,19375,81235,,790,3623,,,,,3023,B,5/9/2020 00:00,fc76add18cdd5ef564799b7557c9564271223a0e,2020-05-10T20:00:00Z,967,3623,100610,100610,100610,08,7,23,3290,548,3838
 20200510,CT,33554,96638,,1242,9389,,,,,5413,B,5/10/2020 14:00,a4c7c8644339c7b4965da9d6c0785d7457fe871b,2020-05-10T20:00:00Z,2967,9389,130192,130192,130192,09,35,0,6053,570,6623
@@ -59,7 +171,7 @@
 20200509,AL,9567,115927,,,1228,,459,,272,,B,5/9/2020 00:00,7c1a5067467c6ce495a787917ddccae550e81335,2020-05-09T20:00:00Z,388,1228,125494,125494,125494,01,13,21,5034,346,5380
 20200509,AR,3747,61781,,64,471,,,14,96,2968,B,5/9/2020 10:15,64db20aa3b59b76ce6735254a2bb4e60fe5ecede,2020-05-09T20:00:00Z,88,471,65528,65528,65528,05,0,5,1481,53,1534
 20200509,AS,0,83,,,,,,,,,D,5/3/2020 00:00,b6693293693460b7260be24906ab0d08dd930dfc,2020-05-09T20:00:00Z,0,,83,83,83,60,0,0,0,0,0
-20200509,AZ,10960,117980,,739,1514,296,,186,,2684,A+,5/9/2020 00:00,e83f3a1b741065e7de9a2cc289d06e77bbc2c72f,2020-05-09T20:00:00Z,532,1514,128940,128940,128940,04,15,32,8599,434,9033
+20200509,AZ,10960,94850,,739,1514,296,,186,,2684,A+,5/9/2020 00:00,0c51b40014e66205aabbe047828c065095d91e60,2020-05-09T20:00:00Z,532,1514,105810,105810,105810,04,15,32,4251,434,4685
 20200509,CA,64561,848009,,4538,,1349,,,,,B,5/9/2020 14:00,47564b4be2325468b20b81c3212689a291e88901,2020-05-09T20:00:00Z,2678,,912570,912570,912570,06,93,0,35249,2049,37298
 20200509,CO,18827,77945,,790,3600,,,,,2974,B,5/8/2020 00:00,0528afc784e81b6e666b8859455767d443eb2347,2020-05-09T20:00:00Z,960,3600,96772,96772,96772,08,-1,43,2210,26,2236
 20200509,CT,32984,90585,,1301,9389,,,,,5413,B,5/9/2020 14:00,01199bbcde2fe21240fdfa5e5b06eec4fc2bf14f,2020-05-09T20:00:00Z,2932,9389,123569,123569,123569,09,58,0,2455,573,3028
@@ -115,7 +227,7 @@
 20200508,AL,9221,110893,,,1207,,454,,266,,B,5/8/2020 00:00,7aa497df30566f92a1e2edef1fc0ea0aa8bb2120,2020-05-08T20:00:00Z,375,1207,120114,120114,120114,01,26,29,4618,323,4941
 20200508,AR,3694,60300,,70,466,,,14,93,2159,B,5/8/2020 08:15,a4ca6c4d1efac4b48f7e80e29bbc2be13f132133,2020-05-08T20:00:00Z,88,466,63994,63994,63994,05,1,4,3916,83,3999
 20200508,AS,0,83,,,,,,,,,F,5/3/2020 00:00,aee242eef36c48dcf1bf337be214b3af34e8e755,2020-05-08T20:00:00Z,0,,83,83,83,60,0,0,0,0,0
-20200508,AZ,10526,109381,,730,1482,295,,197,,1747,A+,5/8/2020 00:00,f90cd0eb502865124ca024e8cd4dd3173109c8a9,2020-05-08T20:00:00Z,517,1482,119907,119907,119907,04,67,33,8240,581,8821
+20200508,AZ,10526,90599,,730,1482,295,,197,,1747,A+,5/8/2020 00:00,dd11a957bd4e0ac80faff29dc87e8cd6c07f254c,2020-05-08T20:00:00Z,517,1482,101125,101125,101125,04,67,33,4110,581,4691
 20200508,CA,62512,812760,,4514,,1342,,,,,B,5/8/2020 14:00,d5ef05ed6769ba774cc29375bd1e4f0a66958120,2020-05-08T20:00:00Z,2585,,875272,875272,875272,06,81,0,30500,1898,32398
 20200508,CO,18801,75735,,821,3557,,,,,2869,B,5/7/2020 00:00,4b1fe904ebb1648caab2aed0b2c8d39bf25541f1,2020-05-08T20:00:00Z,961,3557,94536,94536,94536,08,40,571,2218,971,3189
 20200508,CT,32411,88130,,1327,9389,,,,,5413,B,5/7/2020 20:30,f9d580ec47d3a4fe510f0433aba0d74adc57f755,2020-05-08T20:00:00Z,2874,9389,120541,120541,120541,09,77,0,3740,627,4367
@@ -171,7 +283,7 @@
 20200507,AL,8898,106275,,,1178,,448,,266,,B,5/7/2020 00:00,16d0fc1c8d0756fc29a6ae42c8c46a5c457b6c35,2020-05-07T20:00:00Z,349,1178,115173,115173,115173,01,9,20,5340,317,5657
 20200507,AR,3611,56384,,69,462,,,14,93,2123,B,5/7/2020 09:43,b3e21ebbb872bb53477dc05f144a563b65c54954,2020-05-07T20:00:00Z,87,462,59995,59995,59995,05,2,9,949,43,992
 20200507,AS,0,83,,,,,,,,,F,5/3/2020 00:00,83b5c4028fb671362a616856cb1be2ce7436e639,2020-05-07T20:00:00Z,0,,83,83,83,60,0,0,0,0,0
-20200507,AZ,9945,101141,,766,1449,288,,196,,1722,A+,5/7/2020 00:00,a33ab94287832e072b9ebe51f664bd905ba2c7cc,2020-05-07T20:00:00Z,450,1449,111086,111086,111086,04,24,19,19111,238,19349
+20200507,AZ,9945,86489,,766,1449,288,,196,,1722,A+,5/7/2020 00:00,a6e10332a1d2f226a90bffe22d6997ece386f650,2020-05-07T20:00:00Z,450,1449,96434,96434,96434,04,24,19,4459,238,4697
 20200507,CA,60614,782260,,4560,,1374,,,,,B,5/7/2020 14:00,b0530540a08b211f4f0c5342ff4c7562ff42c505,2020-05-07T20:00:00Z,2504,,842874,842874,842874,06,92,0,32039,1799,33838
 20200507,CO,17830,73517,,798,2986,,,,,2869,B,5/6/2020 00:00,f05afc121ba2b954948d649804d48017b7932209,2020-05-07T20:00:00Z,921,2986,91347,91347,91347,08,18,67,4905,466,5371
 20200507,CT,31784,84390,,1385,9389,,,,,5413,B,5/6/2020 20:30,ee451791fbc93bb64c87c4490666a15fb30d6f59,2020-05-07T20:00:00Z,2797,9389,116174,116174,116174,09,79,1631,3938,789,4727
@@ -895,1854 +1007,1854 @@
 20200425,WI,5687,57138,241,337,1376,136,353,,,,A,4/25/2020 16:00,f6c5215d36c5be4a09ab6149951c30bc7b81e948,2020-04-25T20:00:00Z,266,1376,63066,62825,62825,55,4,23,2565,331,2896
 20200425,WV,1020,31946,,97,,36,,19,,439,B,4/25/2020 10:00,6c9b9c748a317cff5ebe473f437f35265a06bbeb,2020-04-25T20:00:00Z,32,,32966,32966,32966,54,0,0,3123,32,3155
 20200425,WY,349,7797,,16,54,,,,,321,C,4/24/2020 16:02,1982bff02e7c5ff3fe7494a750b2904b79d96bd3,2020-04-25T20:00:00Z,7,54,8146,8146,8146,56,0,0,101,0,101
-20200424,AK,339,11942,,36,,,,,,208,,4/24/2020 15:00,41cb5f86268d18b17cd6f268ad3e0777cc610274,2020-04-24T20:00:00Z,9,,12281,12281,12281,02,0,0,118,2,120
-20200424,AL,5832,46863,,,768,,288,,170,,,4/24/2020 00:00,2d4542176918c5fa685c0db48c848b2af5e35f06,2020-04-24T20:00:00Z,197,768,52695,52695,52695,01,0,0,0,54,54
-20200424,AR,2741,32837,,101,291,,,24,57,929,,4/24/2020 10:47,91ca330816ef1a9b49970e400f7745141a67709f,2020-04-24T20:00:00Z,45,291,35578,35578,35578,05,0,0,3712,276,3988
+20200424,AK,339,11942,,36,,,,,,208,A,4/24/2020 15:00,51edc21bea12880f24b5e8ebe30a60da5735a1f4,2020-04-24T20:00:00Z,9,,12281,12281,12281,02,0,0,118,2,120
+20200424,AL,5832,46863,,,768,,288,,170,,B,4/24/2020 00:00,46d122fe5572e0c5a7dc5c4827493441be92ccc1,2020-04-24T20:00:00Z,197,768,52695,52695,52695,01,0,0,0,54,54
+20200424,AR,2741,32837,,101,291,,,24,57,929,A,4/24/2020 10:47,84ab202b87bb4e4d793bf81068f41eb14fcfdbf2,2020-04-24T20:00:00Z,45,291,35578,35578,35578,05,0,0,3712,276,3988
 20200424,AS,0,3,17,,,,,,,,,4/19/2020 00:00,1eb7a7f0f9beb8cba417471c20acec923682dd7b,2020-04-24T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200424,AZ,6045,54669,,639,984,332,,186,,1313,,4/24/2020 00:00,f3f7d26330c1fd1c2331f37e48761618b5b352e2,2020-04-24T20:00:00Z,266,984,60714,60714,60714,04,17,984,1741,276,2017
-20200424,CA,39254,454919,,4880,,1521,,,,,,4/23/2020 00:00,32b39a6d80fa100cc939a1c9e0cf985bdcc5456d,2020-04-24T20:00:00Z,1562,,494173,494173,494173,06,93,0,10191,1885,12076
-20200424,CO,11262,41062,,1084,2237,,,,,,,4/24/2020 00:00,1c599e6083c5106436f419555cd62a8527523174,2020-04-24T20:00:00Z,552,2237,52324,52324,52324,08,44,114,1295,384,1679
-20200424,CT,23921,50117,,1877,,,,,,,,4/24/2020 16:00,86b2e429e33ec0d9c0d0b18aed73c27a2532bd65,2020-04-24T20:00:00Z,1764,,74038,74038,74038,09,125,0,1720,821,2541
-20200424,DC,3528,13005,,402,,120,,69,,651,,4/23/2020 00:00,81dffde38c53c67bf0548dea0673b26d27983950,2020-04-24T20:00:00Z,153,,16533,16533,16533,11,14,0,436,167,603
-20200424,DE,3442,13937,,277,,,,,,703,,4/23/2020 18:00,83b381d734c280cab3225c8c7a62fc571524c980,2020-04-24T20:00:00Z,100,,17379,17379,17379,10,8,0,333,134,467
-20200424,FL,30174,286785,1287,,4888,,,,,,,4/24/2020 16:39,20f414b9092be87dd549bb595081c66ace116acb,2020-04-24T20:00:00Z,1031,4888,318246,316959,316959,12,52,195,18909,1342,20251
-20200424,GA,22147,85029,,,4221,,,,,,,4/24/2020 18:28,d81fbf973ee075cf2c8060102c06b852868fa5b2,2020-04-24T20:00:00Z,892,4221,107176,107176,107176,13,20,152,5479,635,6114
+20200424,AZ,6045,54669,,639,984,332,,186,,1313,B,4/24/2020 00:00,430dcec1d3c925eac7989af58b2bde4705f2df76,2020-04-24T20:00:00Z,266,984,60714,60714,60714,04,17,984,1741,276,2017
+20200424,CA,39254,454919,,4880,,1521,,,,,B,4/23/2020 00:00,51dad047074e4b5f3986c734c4b42ccf8e6cc95c,2020-04-24T20:00:00Z,1562,,494173,494173,494173,06,93,0,10191,1885,12076
+20200424,CO,11262,41062,,1084,2237,,,,,,A,4/24/2020 00:00,107641c06855477ed857d54a549dca883d907c20,2020-04-24T20:00:00Z,552,2237,52324,52324,52324,08,44,114,1295,384,1679
+20200424,CT,23921,50117,,1877,,,,,,,A,4/24/2020 16:00,a3f7c322eb0ef5ae771256a53efd9dc35078a825,2020-04-24T20:00:00Z,1764,,74038,74038,74038,09,125,0,1720,821,2541
+20200424,DC,3528,13005,,402,,120,,69,,651,A,4/23/2020 00:00,2752115dc5abb5a0a228b65bdbdb2f0336912c29,2020-04-24T20:00:00Z,153,,16533,16533,16533,11,14,0,436,167,603
+20200424,DE,3442,13937,,277,,,,,,703,A,4/23/2020 18:00,20f20bbe9b68306b6857af6bdd0212d8be45aaa1,2020-04-24T20:00:00Z,100,,17379,17379,17379,10,8,0,333,134,467
+20200424,FL,30174,286785,1287,,4888,,,,,,A,4/24/2020 16:39,10cf9bad112657e5025495aa9ad30feb665248b3,2020-04-24T20:00:00Z,1031,4888,318246,316959,316959,12,52,195,18909,1342,20251
+20200424,GA,22147,85029,,,4221,,,,,,A,4/24/2020 18:28,4a6768849a7ea2f6d44407477a77f7791e6e33ed,2020-04-24T20:00:00Z,892,4221,107176,107176,107176,13,20,152,5479,635,6114
 20200424,GU,141,1233,,2,,,,,,126,,4/24/2020 07:40,a955776efdefa9cfbb7377e8495555d03ba227c5,2020-04-24T20:00:00Z,5,,1374,1374,1374,66,0,0,53,6,59
-20200424,HI,596,26291,,,63,,,,,455,,4/24/2020 18:00,2ce35c6b6019de6bb259f4e547d9cf550cdce46a,2020-04-24T20:00:00Z,12,63,26887,26887,26887,15,0,0,755,4,759
-20200424,IA,4445,27528,,278,,104,,60,,1604,,4/23/2020 12:00,809dbe3ab4ce80eb75d83575979183cd127ebe93,2020-04-24T20:00:00Z,107,,31973,31973,31973,19,11,0,2190,521,2711
-20200424,ID,1836,17255,,,166,,63,,,822,,4/24/2020 19:00,6e3b48e7c0a4ff8e5df48fbe042df560c416524c,2020-04-24T20:00:00Z,54,166,19091,19091,19091,16,0,4,965,34,999
-20200424,IL,39658,149974,,4828,,1225,,709,,,,4/24/2020 00:00,01e0d72ce5788576c76f340d342b87047b373168,2020-04-24T20:00:00Z,1795,,189632,189632,189632,17,107,0,13592,2724,16316
-20200424,IN,13680,61873,,,,621,,325,,,,4/23/2020 23:59,f785d1e4d06c098b29b029ac390cb11acce6b4da,2020-04-24T20:00:00Z,741,,75553,75553,75553,18,35,0,2872,641,3513
-20200424,KS,2777,20811,,,457,,,,,,,4/24/2020 10:00,53921f24d490e47c4378877050f641a25f63491e,2020-04-24T20:00:00Z,111,457,23588,23588,23588,20,-1,15,1975,295,2270
-20200424,KY,3481,39363,,302,1115,163,570,,,1335,,4/24/2020 17:00,8118ab1d460db8dca9aa1c27b5bde5c03d8c4229,2020-04-24T20:00:00Z,191,1115,42844,42844,42844,21,6,10,6661,108,6769
-20200424,LA,26140,111972,,1697,,,,286,,14927,,4/24/2020 13:00,03841ae260385e49e67962299b21df76a8981036,2020-04-24T20:00:00Z,1601,,138112,138112,138112,22,61,0,198,401,599
-20200424,MA,50969,164244,,3847,4752,1034,,,,,,4/24/2020 12:00,f333b643c9784f34261fa3d703c736dab9d85f40,2020-04-24T20:00:00Z,2877,4752,215213,215213,215213,25,108,259,7920,2977,10897
-20200424,MD,16616,68100,,1425,3618,547,,,,1108,,4/24/2020 10:00,3125dce12cb8426d0f0b4a364b8e5c4733e689a5,2020-04-24T20:00:00Z,798,3618,84716,84716,84716,24,50,141,3737,879,4616
-20200424,ME,965,16784,,39,152,17,,7,,499,,4/24/2020 12:00,bb90ce10080914bf040e981c96a17e3ab37dcc1c,2020-04-24T20:00:00Z,47,152,17749,17749,17749,23,3,2,0,28,28
-20200424,MI,36641,99655,,3022,,1176,,965,,3237,,4/24/2020 11:00,853733d3f66b4588d8ebe86ac930f2e1b6453cdc,2020-04-24T20:00:00Z,3085,,136296,136296,136296,26,108,0,6625,1350,7975
-20200424,MN,3185,50602,,278,756,111,281,,,1594,,4/23/2020 17:00,410ea5f1c9b33f3b3533d7b09c49e4731352e4c8,2020-04-24T20:00:00Z,221,756,53787,53787,53787,27,21,44,1996,243,2239
-20200424,MO,6625,58582,,877,,,,,,,,4/24/2020 00:00,05fc683948fd5ea51260d58baf30246d67353cc4,2020-04-24T20:00:00Z,262,,65207,65207,65207,29,44,0,5453,304,5757
+20200424,HI,596,26291,,,63,,,,,455,A,4/24/2020 18:00,260d612cdcab2293bbbde13c7eccabeea80269fc,2020-04-24T20:00:00Z,12,63,26887,26887,26887,15,0,0,755,4,759
+20200424,IA,4445,27528,,278,,104,,60,,1604,A,4/23/2020 12:00,2416bb6ac33b65171d664e43e6c27e36483e80b4,2020-04-24T20:00:00Z,107,,31973,31973,31973,19,11,0,2190,521,2711
+20200424,ID,1836,17255,,,166,,63,,,822,A,4/24/2020 19:00,f83c361c4169b8e038051d0171751c6d112180b1,2020-04-24T20:00:00Z,54,166,19091,19091,19091,16,0,4,965,34,999
+20200424,IL,39658,149974,,4828,,1225,,709,,,A,4/24/2020 00:00,450b2c8cec73886a10c5af8e20cef93f1d1aaf7c,2020-04-24T20:00:00Z,1795,,189632,189632,189632,17,107,0,13592,2724,16316
+20200424,IN,13680,61873,,,,621,,325,,,B,4/23/2020 23:59,82db7e0b77148236e60f15915caf238597ca48d0,2020-04-24T20:00:00Z,741,,75553,75553,75553,18,35,0,2872,641,3513
+20200424,KS,2777,20811,,,457,,,,,,B,4/24/2020 10:00,b5d41c46f1adc26776bb44875802e8b7cba23c36,2020-04-24T20:00:00Z,111,457,23588,23588,23588,20,-1,15,1975,295,2270
+20200424,KY,3481,39363,,302,1115,163,570,,,1335,A,4/24/2020 17:00,5575526767b02839b26689b98c2648024c8a12fe,2020-04-24T20:00:00Z,191,1115,42844,42844,42844,21,6,10,6661,108,6769
+20200424,LA,26140,111972,,1697,,,,286,,14927,A,4/24/2020 13:00,b3f2d2af35a4820068aedfc9150b4547437d7d2a,2020-04-24T20:00:00Z,1601,,138112,138112,138112,22,61,0,198,401,599
+20200424,MA,50969,164244,,3847,4752,1034,,,,,B,4/24/2020 12:00,8e1f31feed42d831c493c743a7f6c89283468373,2020-04-24T20:00:00Z,2877,4752,215213,215213,215213,25,108,259,7920,2977,10897
+20200424,MD,16616,68100,,1425,3618,547,,,,1108,A,4/24/2020 10:00,968879e8fb197066eb97203a0dab89ef84532217,2020-04-24T20:00:00Z,798,3618,84716,84716,84716,24,50,141,3737,879,4616
+20200424,ME,965,16784,,39,152,17,,7,,499,A,4/24/2020 12:00,fdc863695510b65dceb83215cd27654150d86ef6,2020-04-24T20:00:00Z,47,152,17749,17749,17749,23,3,2,0,28,28
+20200424,MI,36641,99655,,3022,,1176,,965,,3237,B,4/24/2020 11:00,d676f31a2582055ccdff24b4107bb1c72802d63b,2020-04-24T20:00:00Z,3085,,136296,136296,136296,26,108,0,6625,1350,7975
+20200424,MN,3185,50602,,278,756,111,281,,,1594,A,4/23/2020 17:00,b29dac10351c922b27b130900c905c5a11bd4de1,2020-04-24T20:00:00Z,221,756,53787,53787,53787,27,21,44,1996,243,2239
+20200424,MO,6625,58582,,877,,,,,,,A,4/24/2020 00:00,e607f056b5209622e3757fbb0148db1a6076abc6,2020-04-24T20:00:00Z,262,,65207,65207,65207,29,44,0,5453,304,5757
 20200424,MP,14,51,,,,,,,,11,,4/24/2020 00:00,faec6e446507afc43917cd52b2dd9065d2f150ad,2020-04-24T20:00:00Z,2,,65,65,65,69,0,0,0,0,0
-20200424,MS,5434,50236,,586,970,148,,74,,,,4/23/2020 19:00,fa34c8a75c48d63b26a8fb555016f7fea11475f2,2020-04-24T20:00:00Z,209,970,55670,55670,55670,28,8,24,0,281,281
-20200424,MT,444,11683,,12,59,,,,,325,,4/24/2020 00:00,9d202775fbf8e0395916bbe74dcbe0039e97b417,2020-04-24T20:00:00Z,14,59,12127,12127,12127,30,0,0,250,2,252
-20200424,NC,8052,92532,,477,,,,,,,,4/24/2020 11:00,557c94e8c3cafae2294ea1689250c8542c1832ae,2020-04-24T20:00:00Z,269,,100584,100584,100584,37,16,0,3955,444,4399
-20200424,ND,748,16701,,17,67,,,,,285,,4/24/2020 13:00,9552425cb779f019be7d44b2dd1ba867644b7e47,2020-04-24T20:00:00Z,15,67,17449,17449,17449,38,0,2,1080,39,1119
-20200424,NE,2124,16488,,,,,,,,,,4/24/2020 19:45,f8ac6bb175bb7201b237bfa72a2a944bfdb6f987,2020-04-24T20:00:00Z,47,,18612,18612,18612,31,2,0,941,311,1252
-20200424,NH,1670,15139,424,92,218,,,,,551,,4/23/2020 09:00,3088e267739b4d075d9e26f6ff5dc67860024f5e,2020-04-24T20:00:00Z,51,218,17233,16809,16809,33,3,5,715,82,797
-20200424,NJ,102196,103766,,6847,,1933,,1487,,,,4/24/2020 13:00,1ef2c1c44d3d71e02424cdb2fcbd830bf54da87e,2020-04-24T20:00:00Z,5617,,205962,205962,205962,34,249,0,3607,2207,5814
-20200424,NM,2379,44184,,123,367,,,,,573,,4/24/2020 20:17,57f7925d211d61adf5ca1f95e9566904d823ad6f,2020-04-24T20:00:00Z,78,367,46563,46563,46563,35,7,36,5162,169,5331
-20200424,NV,4398,31794,,,,,,,,,,4/24/2020 10:00,78b9f073363d6675b194d3c7c3beca75fffbb7a6,2020-04-24T20:00:00Z,197,,36192,36192,36192,32,8,0,1253,190,1443
-20200424,NY,271590,459066,,14258,60414,5016,,,,46156,,4/24/2020 00:00,a997e29902e3b2ca2ac085eb62438631f419386a,2020-04-24T20:00:00Z,16162,60414,730656,730656,730656,36,422,1149,26606,8130,34736
-20200424,OH,15169,92528,,,3053,,920,,,,,4/24/2020 14:00,8b3e1c9322714456217e3587f574891b90251d66,2020-04-24T20:00:00Z,690,3053,107697,107697,107697,39,34,93,4345,475,4820
-20200424,OK,3121,43019,,310,637,155,,,,1961,,4/24/2020 00:00,30b89a9645fc457a0badfe93030ebaa9e80b5d0a,2020-04-24T20:00:00Z,188,637,46140,46140,46140,40,9,15,0,104,104
-20200424,OR,2177,43315,,258,520,56,,29,,,,4/24/2020 11:00,5c9eb0ed023cf9314dcf4d85da2cf27abb4e9296,2020-04-24T20:00:00Z,86,520,45492,45492,45492,41,3,8,1466,50,1516
-20200424,PA,38652,147491,,2746,,,,679,,,,4/24/2020 00:00,d7bf6254927cd2f040b4661e4389d83e90fc55b5,2020-04-24T20:00:00Z,1492,,186143,186143,186143,42,71,0,5430,1599,7029
-20200424,PR,1276,9313,1940,,,,,,,,,4/24/2020 06:30,28590c5251afb68c9bc2698c1db9e515bc4b3ac2,2020-04-24T20:00:00Z,77,,12529,10589,10589,72,8,0,0,361,361
-20200424,RI,6699,40558,,267,576,77,,48,,377,,4/24/2020 00:00,0011dc8c61ad86ce844c181c7fe291ab4fee5d91,2020-04-24T20:00:00Z,202,576,47257,47257,47257,44,-11,-181,2395,437,2832
-20200424,SC,4917,39546,,,837,,,,,3317,,4/24/2020 17:24,03827d09c75f6948f549b57048e108195712bde6,2020-04-24T20:00:00Z,150,837,44463,44463,44463,45,0,0,0,0,0
-20200424,SD,2040,12784,,61,124,,,,,1190,,4/23/2020 18:00,addcf4b65feeb8e9d466c22f76d1b227d3df8590,2020-04-24T20:00:00Z,10,124,14824,14824,14824,46,1,5,675,84,759
-20200424,TN,8726,122602,,,808,,,,,4370,,4/23/2020 15:00,26a103a995b3761b4503f83d5d75eceb22d99545,2020-04-24T20:00:00Z,168,808,131328,131328,131328,47,-2,15,7768,460,8228
-20200424,TX,22806,219741,,1674,,,,,,9156,,4/24/2020 12:30,a0dd2c8a9f2eba3a0dbd6240bef53961786cad8a,2020-04-24T20:00:00Z,593,,242547,242547,242547,48,32,0,16607,862,17469
-20200424,UT,3782,80915,,,315,,,,,1252,,4/24/2020 15:00,13e420d7ca50bf2cae34294b5d25d857f4a92193,2020-04-24T20:00:00Z,39,315,84697,84697,84697,49,4,14,3900,170,4070
-20200424,VA,11594,57846,487,1399,1837,379,,220,,1672,,4/24/2020 00:00,bf52c1d74d9500086c643d8280f6f71f3fb6cdbe,2020-04-24T20:00:00Z,410,1837,69927,69440,69440,51,38,84,3955,596,4551
+20200424,MS,5434,50236,,586,970,148,,74,,,A,4/23/2020 19:00,bff6b5663bc794f79a1969d64edcb5cbd639181f,2020-04-24T20:00:00Z,209,970,55670,55670,55670,28,8,24,0,281,281
+20200424,MT,444,11683,,12,59,,,,,325,A,4/24/2020 00:00,c749ab04061eb7b5477cf1c33811038e4146e99c,2020-04-24T20:00:00Z,14,59,12127,12127,12127,30,0,0,250,2,252
+20200424,NC,8052,92532,,477,,,,,,,A,4/24/2020 11:00,9400d89043eeed758e17a48dd99586e61681c11f,2020-04-24T20:00:00Z,269,,100584,100584,100584,37,16,0,3955,444,4399
+20200424,ND,748,16701,,17,67,,,,,285,B,4/24/2020 13:00,1b5c86957d68cb55c7141d4181de11c268c121b0,2020-04-24T20:00:00Z,15,67,17449,17449,17449,38,0,2,1080,39,1119
+20200424,NE,2124,16488,,,,,,,,,A,4/24/2020 19:45,000007641434292a415d60540bdbf88e872c5a39,2020-04-24T20:00:00Z,47,,18612,18612,18612,31,2,0,941,311,1252
+20200424,NH,1670,15139,424,92,218,,,,,551,B,4/23/2020 09:00,4c3bcda332bf87dd3982c864e3bc1ffbe2b4fb02,2020-04-24T20:00:00Z,51,218,17233,16809,16809,33,3,5,715,82,797
+20200424,NJ,102196,103766,,6847,,1933,,1487,,,A,4/24/2020 13:00,5cf816a5d9c737ac77f520ebd1133b3d38426760,2020-04-24T20:00:00Z,5617,,205962,205962,205962,34,249,0,3607,2207,5814
+20200424,NM,2379,44184,,123,367,,,,,573,A,4/24/2020 20:17,12a464d81eaba556c65b981789026c5ddc87b2e4,2020-04-24T20:00:00Z,78,367,46563,46563,46563,35,7,36,5162,169,5331
+20200424,NV,4398,31794,,,,,,,,,A,4/24/2020 10:00,153e765411bb9992138322fc9d226346dd3799d4,2020-04-24T20:00:00Z,197,,36192,36192,36192,32,8,0,1253,190,1443
+20200424,NY,271590,459066,,14258,60414,5016,,,,46156,A,4/24/2020 00:00,ccbdc9d54c4ec5d1d6b847426d095f360e225264,2020-04-24T20:00:00Z,16162,60414,730656,730656,730656,36,422,1149,26606,8130,34736
+20200424,OH,15169,92528,,,3053,,920,,,,B,4/24/2020 14:00,32bc746d39ad3cd593345b14b1286c87c045b961,2020-04-24T20:00:00Z,690,3053,107697,107697,107697,39,34,93,4345,475,4820
+20200424,OK,3121,43019,,310,637,155,,,,1961,B,4/24/2020 00:00,04eb551388304cea8e415cef28f660730f528314,2020-04-24T20:00:00Z,188,637,46140,46140,46140,40,9,15,0,104,104
+20200424,OR,2177,43315,,258,520,56,,29,,,A,4/24/2020 11:00,2ac367e229acbca535ffab87a77d3008fef0ed2c,2020-04-24T20:00:00Z,86,520,45492,45492,45492,41,3,8,1466,50,1516
+20200424,PA,38652,147491,,2746,,,,679,,,A,4/24/2020 00:00,d050fbd9057a3bb529c8c4d46cbcb49618f8acff,2020-04-24T20:00:00Z,1492,,186143,186143,186143,42,71,0,5430,1599,7029
+20200424,PR,1276,9313,1940,,,,,,,,A,4/24/2020 06:30,a6a36ba696e70f9fd38adf09eccc920903a0e606,2020-04-24T20:00:00Z,77,,12529,10589,10589,72,8,0,0,361,361
+20200424,RI,6699,40558,,267,576,77,,48,,377,B,4/24/2020 00:00,bd3337acf4a889e3c4efb4446c96a293a018638c,2020-04-24T20:00:00Z,202,576,47257,47257,47257,44,-11,-181,2395,437,2832
+20200424,SC,4917,39546,,,837,,,,,3317,B,4/24/2020 17:24,ffc7eb3f2953d7797f0da89cdea1ba557b03fe62,2020-04-24T20:00:00Z,150,837,44463,44463,44463,45,0,0,0,0,0
+20200424,SD,2040,12784,,61,124,,,,,1190,A,4/23/2020 18:00,8017644df532a8557bf58c0bba7705d7ee597d1e,2020-04-24T20:00:00Z,10,124,14824,14824,14824,46,1,5,675,84,759
+20200424,TN,8726,122602,,,808,,,,,4370,A,4/23/2020 15:00,8e7c6ddc91fa77b61e5c110b8eaf53be03261038,2020-04-24T20:00:00Z,168,808,131328,131328,131328,47,-2,15,7768,460,8228
+20200424,TX,22806,219741,,1674,,,,,,9156,A,4/24/2020 12:30,cfc7d7d8d8e5e4e2f63cafe53fd7f575cba8085e,2020-04-24T20:00:00Z,593,,242547,242547,242547,48,32,0,16607,862,17469
+20200424,UT,3782,80915,,,315,,,,,1252,A,4/24/2020 15:00,b377f8c1c48095221db88d2610ac997c82c46ce3,2020-04-24T20:00:00Z,39,315,84697,84697,84697,49,4,14,3900,170,4070
+20200424,VA,11594,57846,487,1399,1837,379,,220,,1672,A,4/24/2020 00:00,76dc187f1e12f6c8c4d0aeb8540e17e8486a378f,2020-04-24T20:00:00Z,410,1837,69927,69440,69440,51,38,84,3955,596,4551
 20200424,VI,54,642,35,,,,,,,50,,4/23/2020 00:00,5c3826593dabfb149f6256331a6b98283837e5ce,2020-04-24T20:00:00Z,3,,731,696,696,78,0,0,59,0,59
-20200424,VT,827,13483,,32,,,,,,,,4/24/2020 09:46,2611e946034c82fa3a34c34d1bd3b163d1da7b4b,2020-04-24T20:00:00Z,44,,14310,14310,14310,50,1,0,456,2,458
-20200424,WA,13297,161533,,551,,164,,,,,,4/24/2020 02:59,ddbfdfde0b88931dcd33c2b0e325003c1284ca89,2020-04-24T20:00:00Z,659,,174830,174830,174830,53,5,0,2897,302,3199
-20200424,WI,5356,54573,206,361,1353,143,346,,,,,4/24/2020 16:00,04829572aaff3008fbf422130b06dbaa8a64b77f,2020-04-24T20:00:00Z,262,1353,60135,59929,59929,55,5,35,3117,304,3421
-20200424,WV,988,28823,,97,,36,,19,,439,,4/24/2020 10:00,4bbdf2edecf866b8f93355dadb89496c2a43e740,2020-04-24T20:00:00Z,32,,29811,29811,29811,54,3,0,1885,21,1906
-20200424,WY,349,7696,,16,54,,,,,321,,4/24/2020 00:00,8d5bdc91ad114b37fc823db4cc824e8e68b223a2,2020-04-24T20:00:00Z,7,54,8045,8045,8045,56,0,2,455,23,478
-20200423,AK,337,11824,,42,,,,,,209,,4/23/2020 14:00,245a74ffc31b20faf37c4c50c38f79a474a0dedf,2020-04-23T20:00:00Z,9,,12161,12161,12161,02,0,0,0,2,2
-20200423,AL,5778,46863,,,768,,288,,170,,,4/23/2020 00:00,e023a368c1386b7f40abdee9f4d620a74f936aba,2020-04-23T20:00:00Z,197,768,52641,52641,52641,01,3,38,3568,313,3881
-20200423,AR,2465,29125,,101,291,,,24,57,902,,4/23/2020 14:48,4abc12263315899113b7245e08204c85af53f4b9,2020-04-23T20:00:00Z,45,291,31590,31590,31590,05,3,0,1688,189,1877
+20200424,VT,827,13483,,32,,,,,,,A,4/24/2020 09:46,05f232502e82f40edb61059975dd95fea1ba6a7b,2020-04-24T20:00:00Z,44,,14310,14310,14310,50,1,0,456,2,458
+20200424,WA,13297,161533,,551,,164,,,,,C,4/24/2020 02:59,b967cf56e4d9cbb15f99ccef2d38304a1a813ffb,2020-04-24T20:00:00Z,659,,174830,174830,174830,53,5,0,2897,302,3199
+20200424,WI,5356,54573,206,361,1353,143,346,,,,A,4/24/2020 16:00,7bb8290ed489dc69afa083551bf14d0fc8baf153,2020-04-24T20:00:00Z,262,1353,60135,59929,59929,55,5,35,3117,304,3421
+20200424,WV,988,28823,,97,,36,,19,,439,B,4/24/2020 10:00,0026ab521a6b6986dafe1f84cc3bae516117b888,2020-04-24T20:00:00Z,32,,29811,29811,29811,54,3,0,1885,21,1906
+20200424,WY,349,7696,,16,54,,,,,321,A,4/24/2020 00:00,96619f8ccfb25668bba95e68c1f3f4850d19ae9e,2020-04-24T20:00:00Z,7,54,8045,8045,8045,56,0,2,455,23,478
+20200423,AK,337,11824,,42,,,,,,209,A,4/23/2020 14:00,1a1256af32724ea2e6f8a0a631d24b9c749cce34,2020-04-23T20:00:00Z,9,,12161,12161,12161,02,0,0,0,2,2
+20200423,AL,5778,46863,,,768,,288,,170,,B,4/23/2020 00:00,8e33f70da48298e973ea72dc3e2a8b2eb1862528,2020-04-23T20:00:00Z,197,768,52641,52641,52641,01,3,38,3568,313,3881
+20200423,AR,2465,29125,,101,291,,,24,57,902,A,4/23/2020 14:48,0c3ac1c09b51363b70e7573474076f176261f8af,2020-04-23T20:00:00Z,45,291,31590,31590,31590,05,3,0,1688,189,1877
 20200423,AS,0,3,17,,,,,,,,,4/6/2020 00:00,dc9f0ced554665a45d589beead20486a644533e9,2020-04-23T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200423,AZ,5769,52928,,699,,305,,201,,1282,,4/23/2020 00:00,38643d926c744ee8f3c851e69f13fd1fabede0cb,2020-04-23T20:00:00Z,249,,58697,58697,58697,04,20,0,1786,310,2096
-20200423,CA,37369,444728,,4929,,1531,,,,,,4/22/2020 00:00,faecccdb69d4498f306c09fa0e9544b207b10bca,2020-04-23T20:00:00Z,1469,,482097,482097,482097,06,115,0,14797,1973,16770
-20200423,CO,10878,39767,,859,2123,,,,,,,4/23/2020 00:00,751f080043fd4cfd9eea09c5d14d165f11f996ac,2020-04-23T20:00:00Z,508,2123,50645,50645,50645,08,22,120,1510,431,1941
-20200423,CT,23100,48397,,1947,,,,,,,,4/23/2020 16:00,537cd28ee8a8df4e29d881c98c8e9b00908a324a,2020-04-23T20:00:00Z,1639,,71497,71497,71497,09,95,0,948,631,1579
-20200423,DC,3361,12569,,402,,120,,200,,648,,4/22/2020 00:00,61ab7f92b086931d09a3ba83ebedd67f37aa76af,2020-04-23T20:00:00Z,139,,15930,15930,15930,11,12,0,273,155,428
-20200423,DE,3308,13604,,290,,,,,,643,,4/22/2020 18:00,aaf3e4de20f5e318b52a60cfea73fd1f1d66138d,2020-04-23T20:00:00Z,92,,16912,16912,16912,10,3,0,251,108,359
-20200423,FL,28832,267876,1301,,4693,,,,,,,4/23/2020 18:27,35666a396621b06d22405ee3980aa96b780a1999,2020-04-23T20:00:00Z,979,4693,298009,296708,296708,12,69,224,7558,523,8081
-20200423,GA,21512,79550,,,4069,,,,,,,4/23/2020 18:28,915afc2af9d9a3eeeb697370480a4fc95892cade,2020-04-23T20:00:00Z,872,4069,101062,101062,101062,13,36,110,6218,772,6990
+20200423,AZ,5769,52928,,699,,305,,201,,1282,B,4/23/2020 00:00,5c4a77b96e92b706e24bc501b726e96566e8d5a0,2020-04-23T20:00:00Z,249,,58697,58697,58697,04,20,0,1786,310,2096
+20200423,CA,37369,444728,,4929,,1531,,,,,B,4/22/2020 00:00,847e6eab7b528f13600da1fd142b1ba64dd72517,2020-04-23T20:00:00Z,1469,,482097,482097,482097,06,115,0,14797,1973,16770
+20200423,CO,10878,39767,,859,2123,,,,,,A,4/23/2020 00:00,9057c3fde2a701bfe697d1153ff140446734cba3,2020-04-23T20:00:00Z,508,2123,50645,50645,50645,08,22,120,1510,431,1941
+20200423,CT,23100,48397,,1947,,,,,,,A,4/23/2020 16:00,0cbd8c9b8e8886c47e363790d3f456ea904e41cd,2020-04-23T20:00:00Z,1639,,71497,71497,71497,09,95,0,948,631,1579
+20200423,DC,3361,12569,,402,,120,,200,,648,A,4/22/2020 00:00,b4e665c7ecb4e4e75f936fc7645958b2c7fc7647,2020-04-23T20:00:00Z,139,,15930,15930,15930,11,12,0,273,155,428
+20200423,DE,3308,13604,,290,,,,,,643,A,4/22/2020 18:00,b50ac5c82a9e542f95353927711c84ab27e8ee44,2020-04-23T20:00:00Z,92,,16912,16912,16912,10,3,0,251,108,359
+20200423,FL,28832,267876,1301,,4693,,,,,,A,4/23/2020 18:27,5aa42f6202932d2b6ad685a71e40b6d4d16f8f01,2020-04-23T20:00:00Z,979,4693,298009,296708,296708,12,69,224,7558,523,8081
+20200423,GA,21512,79550,,,4069,,,,,,A,4/23/2020 18:28,7f209ef285db02d8a7f183770e3a6767bb21690f,2020-04-23T20:00:00Z,872,4069,101062,101062,101062,13,36,110,6218,772,6990
 20200423,GU,135,1180,,2,,,,,,126,,4/23/2020 07:45,62736dc6cd3a658b183a75bd58f56ef735546a23,2020-04-23T20:00:00Z,5,,1315,1315,1315,66,0,0,94,1,95
-20200423,HI,592,25536,,,63,,,,,444,,4/22/2020 18:00,2c64644c0f86ea38a13b7bd2d1ddef9a5bd7cf28,2020-04-23T20:00:00Z,12,63,26128,26128,26128,15,0,7,776,10,786
-20200423,IA,3924,25338,,282,,102,,55,,1492,,4/22/2020 12:00,8476c9959d4aa63090400187f98a30e69fc3a70d,2020-04-23T20:00:00Z,96,,29262,29262,29262,19,6,0,842,176,1018
-20200423,ID,1802,16290,,,162,,60,,,767,,4/23/2020 19:00,d48d881be2196245f1eba14a985c29f1e3faa206,2020-04-23T20:00:00Z,54,162,18092,18092,18092,16,3,4,326,36,362
-20200423,IL,36934,136382,,4877,,1268,,766,,,,4/23/2020 00:00,5af36d44b521eeeca05dfa894804109be822b74c,2020-04-23T20:00:00Z,1688,,173316,173316,173316,17,123,0,7144,1826,8970
-20200423,IN,13039,59001,,,,652,,333,,,,4/22/2020 23:59,36fffea94ee60548c3d3b3cc9a8c7d5f3e380bc0,2020-04-23T20:00:00Z,706,,72040,72040,72040,18,45,0,1969,601,2570
-20200423,KS,2482,18836,,,442,,,,,,,4/23/2020 10:45,cadd432201726706c819f5f3d825fb58c6426dad,2020-04-23T20:00:00Z,112,442,21318,21318,21318,20,2,10,844,271,1115
-20200423,KY,3373,32702,,301,1105,161,564,,,1311,,4/23/2020 17:00,ed6bbdc8e70a84dbb69be1cbd8ce28e51ff10a08,2020-04-23T20:00:00Z,185,1105,36075,36075,36075,21,14,29,2566,181,2747
-20200423,LA,25739,111774,,1727,,,,274,,14927,,4/23/2020 13:00,9103d71e1cbfed1915b7fe00e01f3b3b192c3ee3,2020-04-23T20:00:00Z,1540,,137513,137513,137513,22,67,0,186,481,667
-20200423,MA,47992,156324,,3851,4493,1034,,,,,,4/22/2020 16:00,2761b8acc1884e474b6cd3dd220668fc9440319f,2020-04-23T20:00:00Z,2769,4493,204316,204316,204316,25,172,237,11535,3079,14614
-20200423,MD,15737,64363,,1405,3477,515,,,,1040,,4/23/2020 10:00,bc3166040282112528e6e600b935b1b794bdba40,2020-04-23T20:00:00Z,748,3477,80100,80100,80100,24,50,152,2609,962,3571
-20200423,ME,937,16784,,42,150,18,,11,,485,,4/23/2020 11:45,28d6dcc3f1d8256ba6fd67be4f58b5a914f506bb,2020-04-23T20:00:00Z,44,150,17721,17721,17721,23,5,6,0,30,30
-20200423,MI,35291,93030,,3611,,1148,,1027,,3237,,4/23/2020 16:00,87857ec45aef19f4cc56cb9fec8343756dfb5c8f,2020-04-23T20:00:00Z,2977,,128321,128321,128321,26,164,0,8771,1325,10096
-20200423,MN,2942,48606,,268,712,104,274,,,1536,,4/22/2020 17:00,251395b1f706f1aa14e668f253d77072290d6eac,2020-04-23T20:00:00Z,200,712,51548,51548,51548,27,21,52,1983,221,2204
-20200423,MO,6321,53129,,884,,,,,,,,4/23/2020 15:00,9ecda7ecf28f1a0d9708bb02066ad6629b3e6730,2020-04-23T20:00:00Z,218,,59450,59450,59450,29,10,0,1110,184,1294
+20200423,HI,592,25536,,,63,,,,,444,A,4/22/2020 18:00,41ec8818871d1252014476fa40bc75845c0d6673,2020-04-23T20:00:00Z,12,63,26128,26128,26128,15,0,7,776,10,786
+20200423,IA,3924,25338,,282,,102,,55,,1492,A,4/22/2020 12:00,630510f7a0fb9467748755fee8d89d10a3e45e98,2020-04-23T20:00:00Z,96,,29262,29262,29262,19,6,0,842,176,1018
+20200423,ID,1802,16290,,,162,,60,,,767,A,4/23/2020 19:00,c9934264526d696cdd9f273548adcecc6f8f9001,2020-04-23T20:00:00Z,54,162,18092,18092,18092,16,3,4,326,36,362
+20200423,IL,36934,136382,,4877,,1268,,766,,,A,4/23/2020 00:00,e9a897ea84d5fb1a1b9a03d1b3cdeb9e66e5b87b,2020-04-23T20:00:00Z,1688,,173316,173316,173316,17,123,0,7144,1826,8970
+20200423,IN,13039,59001,,,,652,,333,,,B,4/22/2020 23:59,4446a9a6fc8d3c961861184bd9bca6b26c35f6af,2020-04-23T20:00:00Z,706,,72040,72040,72040,18,45,0,1969,601,2570
+20200423,KS,2482,18836,,,442,,,,,,B,4/23/2020 10:45,2be7cfde5cb523c2c5566ba9d801b95005108fb9,2020-04-23T20:00:00Z,112,442,21318,21318,21318,20,2,10,844,271,1115
+20200423,KY,3373,32702,,301,1105,161,564,,,1311,A,4/23/2020 17:00,9f9dacb74550305e5cf0c5500334d52ca7a115d0,2020-04-23T20:00:00Z,185,1105,36075,36075,36075,21,14,29,2566,181,2747
+20200423,LA,25739,111774,,1727,,,,274,,14927,A,4/23/2020 13:00,cebcffc50b11dcedea770f9b1587f04f0d009fe8,2020-04-23T20:00:00Z,1540,,137513,137513,137513,22,67,0,186,481,667
+20200423,MA,47992,156324,,3851,4493,1034,,,,,B,4/22/2020 16:00,f695f30270629b80947a6f60087073793a9f7780,2020-04-23T20:00:00Z,2769,4493,204316,204316,204316,25,172,237,11535,3079,14614
+20200423,MD,15737,64363,,1405,3477,515,,,,1040,A,4/23/2020 10:00,b41928e5b2d705bb1e1a807b7de587b5d3de392a,2020-04-23T20:00:00Z,748,3477,80100,80100,80100,24,50,152,2609,962,3571
+20200423,ME,937,16784,,42,150,18,,11,,485,A,4/23/2020 11:45,9423261924fb50b198f5853faacc4899d8df0256,2020-04-23T20:00:00Z,44,150,17721,17721,17721,23,5,6,0,30,30
+20200423,MI,35291,93030,,3611,,1148,,1027,,3237,B,4/23/2020 16:00,fdff33877e7c61ed5cbaa758f023da6141fe6215,2020-04-23T20:00:00Z,2977,,128321,128321,128321,26,164,0,8771,1325,10096
+20200423,MN,2942,48606,,268,712,104,274,,,1536,A,4/22/2020 17:00,31e10dac468587bd4ec8e32fa276869f844bb931,2020-04-23T20:00:00Z,200,712,51548,51548,51548,27,21,52,1983,221,2204
+20200423,MO,6321,53129,,884,,,,,,,A,4/23/2020 15:00,8694f4ae5f918a4aca5bf24015172fe6c9b2287e,2020-04-23T20:00:00Z,218,,59450,59450,59450,29,10,0,1110,184,1294
 20200423,MP,14,51,,,,,,,,11,,4/23/2020 22:35,f83c51fa2871673226747964e99b18944d2b26f3,2020-04-23T20:00:00Z,2,,65,65,65,69,0,0,0,0,0
-20200423,MS,5153,50236,,595,946,156,,78,,,,4/22/2020 19:00,999297d1f49189e60d75af919f077e90aa7568f0,2020-04-23T20:00:00Z,201,946,55389,55389,55389,28,8,36,1295,259,1554
-20200423,MT,442,11433,,13,59,,,,,306,,4/23/2020 00:00,affe1ccf27a523e35306d59f20a6431cd7f7508b,2020-04-23T20:00:00Z,14,59,11875,11875,11875,30,0,0,289,3,292
-20200423,NC,7608,88577,,486,,,,,,,,4/23/2020 11:00,ef9ff0d88351ac883284103a483cb41d3682c7c0,2020-04-23T20:00:00Z,253,,96185,96185,96185,37,11,0,5461,388,5849
-20200423,ND,709,15621,,18,65,,,,,269,,4/23/2020 13:02,0a97bebb854037bb9e5afe39b2696255b9740994,2020-04-23T20:00:00Z,15,65,16330,16330,16330,38,1,3,711,30,741
-20200423,NE,1813,15547,,,,,,,,,,4/23/2020 19:45,c450d1c5a35ab3226068a74be91cc07303c62dff,2020-04-23T20:00:00Z,45,,17360,17360,17360,31,7,0,590,91,681
-20200423,NH,1588,14424,265,91,213,,,,,550,,4/23/2020 09:00,96e2f32e61f91706916899733f515336e1f5698e,2020-04-23T20:00:00Z,48,213,16277,16012,16012,33,6,7,874,97,971
-20200423,NJ,99989,100159,,7240,,1990,,1462,,,,4/23/2020 13:00,53a6b6beabc36f5e4d76d441931fd82566b864b5,2020-04-23T20:00:00Z,5368,,200148,200148,200148,34,305,0,4365,4124,8489
-20200423,NM,2210,39022,,121,331,,,,,547,,4/23/2020 09:11,821158f39b3cea662c5883960c599e9e4cb691d0,2020-04-23T20:00:00Z,71,331,41232,41232,41232,35,6,25,217,138,355
-20200423,NV,4208,30541,,,,,,,,,,4/23/2020 20:00,35c5a2676c95b64959fe644a7a73d5abffe5f460,2020-04-23T20:00:00Z,189,,34749,34749,34749,32,17,0,734,127,861
-20200423,NY,263460,432460,,15021,59265,5016,,,,44244,,4/23/2020 00:00,c2baeac2839ea014410efd3e6a76b721c234c279,2020-04-23T20:00:00Z,15740,59265,695920,695920,695920,36,438,1358,19694,6244,25938
-20200423,OH,14694,88183,,,2960,,900,,,,,4/23/2020 14:00,ef0dc0f7535ea6c4329b35fc656bed45f360debe,2020-04-23T20:00:00Z,656,2960,102877,102877,102877,39,46,78,3794,577,4371
-20200423,OK,3017,43019,,284,622,156,,,,1884,,4/23/2020 00:00,3189dd4d530f9dcaef129e521fea6e24412a4236,2020-04-23T20:00:00Z,179,622,46036,46036,46036,40,9,34,0,123,123
-20200423,OR,2127,41849,,304,512,74,,36,,,,4/23/2020 11:00,401f4635b81cc20437bff8fcc589609346549ea7,2020-04-23T20:00:00Z,83,512,43976,43976,43976,41,5,24,2723,68,2791
-20200423,PA,37053,142061,,2750,,,,679,,,,4/23/2020 00:00,f963c8b663c198c5a65c9aac1f96314b6d562e0c,2020-04-23T20:00:00Z,1421,,179114,179114,179114,42,-201,0,5789,1369,7158
-20200423,PR,915,9313,1951,,,,,,,,,4/23/2020 06:20,4119a2a4ea74f71baf0bed10dd7f30fdceff0092,2020-04-23T20:00:00Z,69,,12179,10228,10228,72,2,0,471,0,471
-20200423,RI,6262,38163,,316,757,72,,45,,342,,4/23/2020 00:00,16108432b577e93ef6812d630e1037e7fb0bbd7a,2020-04-23T20:00:00Z,213,757,44425,44425,44425,44,12,40,2282,417,2699
-20200423,SC,4917,39546,,,837,,,,,3317,,4/22/2020 23:59,7c0b8ed80b3811488f1e984e6a25e4393cd5b86a,2020-04-23T20:00:00Z,150,837,44463,44463,44463,45,10,0,1196,156,1352
-20200423,SD,1956,12109,,58,119,,,,,1064,,4/22/2020 18:00,011b89fdabbc0b558340e69fa278574d2de26268,2020-04-23T20:00:00Z,9,119,14065,14065,14065,46,1,8,521,98,619
-20200423,TN,8266,114834,,,793,,,,,4193,,4/23/2020 15:00,ba63f92c6f1d3b9488c3d4fbe580f7f6a9a33c92,2020-04-23T20:00:00Z,170,793,123100,123100,123100,47,4,18,7696,424,8120
-20200423,TX,21944,203134,,1649,,,,,,8025,,4/23/2020 12:30,024279436e5c4bf67ab86b7b061f6506c41bce38,2020-04-23T20:00:00Z,561,,225078,225078,225078,48,18,0,7420,875,8295
-20200423,UT,3612,77015,,,301,,,,,1050,,4/23/2020 15:00,664ba97fa82510baf9e89be1153cba3defca9c8b,2020-04-23T20:00:00Z,35,301,80627,80627,80627,49,1,13,4000,167,4167
-20200423,VA,10998,53891,492,1379,1753,400,,249,,1567,,4/23/2020 00:00,df70c8b9749c09c510654d67a52b1acf8a2023f3,2020-04-23T20:00:00Z,372,1753,65381,64889,64889,51,23,94,3379,732,4111
+20200423,MS,5153,50236,,595,946,156,,78,,,A,4/22/2020 19:00,eda4ddcac66aa68b62388921f40f8330b956fc4a,2020-04-23T20:00:00Z,201,946,55389,55389,55389,28,8,36,1295,259,1554
+20200423,MT,442,11433,,13,59,,,,,306,A,4/23/2020 00:00,5704dfb8e374ed43db61d73db82e10b3f7ee833d,2020-04-23T20:00:00Z,14,59,11875,11875,11875,30,0,0,289,3,292
+20200423,NC,7608,88577,,486,,,,,,,A,4/23/2020 11:00,15a2b024cc3590458f36542a5060dc2aed7d8527,2020-04-23T20:00:00Z,253,,96185,96185,96185,37,11,0,5461,388,5849
+20200423,ND,709,15621,,18,65,,,,,269,B,4/23/2020 13:02,5cd3e6906dcc6b3a839bacfdc5c80a6ce9456b08,2020-04-23T20:00:00Z,15,65,16330,16330,16330,38,1,3,711,30,741
+20200423,NE,1813,15547,,,,,,,,,A,4/23/2020 19:45,3be5438766e2e262557b5b384fca69aac6028788,2020-04-23T20:00:00Z,45,,17360,17360,17360,31,7,0,590,91,681
+20200423,NH,1588,14424,265,91,213,,,,,550,B,4/23/2020 09:00,aef7984c10b1e8cc345667682b1cfdfdfff08e9c,2020-04-23T20:00:00Z,48,213,16277,16012,16012,33,6,7,874,97,971
+20200423,NJ,99989,100159,,7240,,1990,,1462,,,A,4/23/2020 13:00,4bef794eec6f925642ac74bb2fc249a4fae4c95a,2020-04-23T20:00:00Z,5368,,200148,200148,200148,34,305,0,4365,4124,8489
+20200423,NM,2210,39022,,121,331,,,,,547,A,4/23/2020 09:11,faeb4a71d2802bb42fa2a9719ebe3826081a26b0,2020-04-23T20:00:00Z,71,331,41232,41232,41232,35,6,25,217,138,355
+20200423,NV,4208,30541,,,,,,,,,A,4/23/2020 20:00,c64cc251daab1b4d1db2b97081807be4645a12fd,2020-04-23T20:00:00Z,189,,34749,34749,34749,32,17,0,734,127,861
+20200423,NY,263460,432460,,15021,59265,5016,,,,44244,A,4/23/2020 00:00,0501298aeed32d6f9ed8c5bb9ab37f54d9cb8982,2020-04-23T20:00:00Z,15740,59265,695920,695920,695920,36,438,1358,19694,6244,25938
+20200423,OH,14694,88183,,,2960,,900,,,,B,4/23/2020 14:00,ccf677cf4b26a3bcdcf9d8bf99c5692087bf92c2,2020-04-23T20:00:00Z,656,2960,102877,102877,102877,39,46,78,3794,577,4371
+20200423,OK,3017,43019,,284,622,156,,,,1884,B,4/23/2020 00:00,96d870d8df2b2203054dd3d9e9543d8c15b78b15,2020-04-23T20:00:00Z,179,622,46036,46036,46036,40,9,34,0,123,123
+20200423,OR,2127,41849,,304,512,74,,36,,,A,4/23/2020 11:00,6c2682a589104ad62c83d44e26c1bf6e828a5cb3,2020-04-23T20:00:00Z,83,512,43976,43976,43976,41,5,24,2723,68,2791
+20200423,PA,37053,142061,,2750,,,,679,,,A,4/23/2020 00:00,ef27b8dfb02f0f0adfaa30394ef1c27792c09815,2020-04-23T20:00:00Z,1421,,179114,179114,179114,42,-201,0,5789,1369,7158
+20200423,PR,915,9313,1951,,,,,,,,A,4/23/2020 06:20,3bd50d3b7c1f7add6297a53c91e30ac4db1491cc,2020-04-23T20:00:00Z,69,,12179,10228,10228,72,2,0,471,0,471
+20200423,RI,6262,38163,,316,757,72,,45,,342,B,4/23/2020 00:00,b87a08198811749440037af646ba09901c78ef21,2020-04-23T20:00:00Z,213,757,44425,44425,44425,44,12,40,2282,417,2699
+20200423,SC,4917,39546,,,837,,,,,3317,B,4/22/2020 23:59,503a4c9bde9974d355a2f7a0ec4c0d9649b28df2,2020-04-23T20:00:00Z,150,837,44463,44463,44463,45,10,0,1196,156,1352
+20200423,SD,1956,12109,,58,119,,,,,1064,A,4/22/2020 18:00,9edf89332cae1c884950623cf18f5754ad437b9b,2020-04-23T20:00:00Z,9,119,14065,14065,14065,46,1,8,521,98,619
+20200423,TN,8266,114834,,,793,,,,,4193,A,4/23/2020 15:00,e903a8158d9b3debcee9d9d0063c646b6dbd221b,2020-04-23T20:00:00Z,170,793,123100,123100,123100,47,4,18,7696,424,8120
+20200423,TX,21944,203134,,1649,,,,,,8025,A,4/23/2020 12:30,28e7069b8dd99bfb69bd325d2c342a078b38ecc1,2020-04-23T20:00:00Z,561,,225078,225078,225078,48,18,0,7420,875,8295
+20200423,UT,3612,77015,,,301,,,,,1050,A,4/23/2020 15:00,8e9d9a923ce56f6b4790ff7608da0288f0c3b4f4,2020-04-23T20:00:00Z,35,301,80627,80627,80627,49,1,13,4000,167,4167
+20200423,VA,10998,53891,492,1379,1753,400,,249,,1567,A,4/23/2020 00:00,168d95ec09ccd4cb232bf235d86f3f89df513f6c,2020-04-23T20:00:00Z,372,1753,65381,64889,64889,51,23,94,3379,732,4111
 20200423,VI,54,583,31,,,,,,,48,,4/23/2020 20:30,294beb467a024040615187fdfad7480cd65abddd,2020-04-23T20:00:00Z,3,,668,637,637,78,0,0,0,0,0
-20200423,VT,825,13027,,44,,,,,,,,4/23/2020 10:52,9ca235f72574252407d63cc8d9d7ce3e40db7479,2020-04-23T20:00:00Z,43,,13852,13852,13852,50,3,0,388,2,390
-20200423,WA,12995,158636,,544,,151,,,,,,4/23/2020 02:59,2d07ca402f57d49647d16e47a5d10afbf6710d33,2020-04-23T20:00:00Z,654,,171631,171631,171631,53,7,0,3457,210,3667
-20200423,WI,5052,51456,201,349,1318,146,342,,,,,4/23/2020 16:00,630be80ff3cb5f5c61fedecd05229bdbe2a3b1ee,2020-04-23T20:00:00Z,257,1318,56709,56508,56508,55,11,16,1954,207,2161
-20200423,WV,967,26938,,108,,44,,24,,380,,4/23/2020 17:00,088cb74692c007765b559a79485bb2f124e9cf66,2020-04-23T20:00:00Z,29,,27905,27905,27905,54,3,0,2041,28,2069
-20200423,WY,326,7241,,,52,,,,,275,,4/23/2020 16:27,a0f30c17aaf99c75f86c2cac2c17f85422b92321,2020-04-23T20:00:00Z,7,52,7567,7567,7567,56,1,0,-60,4,-56
-20200422,AK,335,11824,,39,36,,,,,196,,4/22/2020 14:00,d67e3f74ea888b22f61d4ff579edd097c872833f,2020-04-22T20:00:00Z,9,36,12159,12159,12159,02,0,0,1034,6,1040
-20200422,AL,5465,43295,,,730,,288,,170,,,4/22/2020 00:00,515103912c615ae7a3cdf2a4f05f142733a42ee4,2020-04-22T20:00:00Z,194,730,48760,48760,48760,01,17,31,0,234,234
-20200422,AR,2276,27437,,97,291,,,23,57,863,,4/22/2020 16:01,db009423db45621be63a29756ea4923c4d0c9c74,2020-04-22T20:00:00Z,42,291,29713,29713,29713,05,-1,0,2223,49,2272
+20200423,VT,825,13027,,44,,,,,,,A,4/23/2020 10:52,32846608ded4f67640747c83fff5684538e1a39a,2020-04-23T20:00:00Z,43,,13852,13852,13852,50,3,0,388,2,390
+20200423,WA,12995,158636,,544,,151,,,,,C,4/23/2020 02:59,886a27fe3ef63a3a0266f0cf25a9c2ef1f0485a3,2020-04-23T20:00:00Z,654,,171631,171631,171631,53,7,0,3457,210,3667
+20200423,WI,5052,51456,201,349,1318,146,342,,,,A,4/23/2020 16:00,ac6f4ff15cd40393ff20905594b73789cfd7777f,2020-04-23T20:00:00Z,257,1318,56709,56508,56508,55,11,16,1954,207,2161
+20200423,WV,967,26938,,108,,44,,24,,380,B,4/23/2020 17:00,2ed51d849688095eecc942322a3d9069be676cf2,2020-04-23T20:00:00Z,29,,27905,27905,27905,54,3,0,2041,28,2069
+20200423,WY,326,7241,,,52,,,,,275,A,4/23/2020 16:27,e370898018aecb5d52105fd56d79ce0c587806c6,2020-04-23T20:00:00Z,7,52,7567,7567,7567,56,1,0,-60,4,-56
+20200422,AK,335,11824,,39,36,,,,,196,A,4/22/2020 14:00,cd070a966b49a2f982188c2c3a0f923fb9aefc4c,2020-04-22T20:00:00Z,9,36,12159,12159,12159,02,0,0,1034,6,1040
+20200422,AL,5465,43295,,,730,,288,,170,,B,4/22/2020 00:00,56f2613ed87ad0c4313cbc75665617ca85836560,2020-04-22T20:00:00Z,194,730,48760,48760,48760,01,17,31,0,234,234
+20200422,AR,2276,27437,,97,291,,,23,57,863,A,4/22/2020 16:01,0eabe652e679eb099e9d27cfc2f1a1a35da9abaf,2020-04-22T20:00:00Z,42,291,29713,29713,29713,05,-1,0,2223,49,2272
 20200422,AS,0,3,17,,,,,,,,,4/6/2020 00:00,22496289c1cb05aa4f7843c3d968ec06f7bc0751,2020-04-22T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200422,AZ,5459,51142,,664,,300,,195,,1265,,4/22/2020 00:00,0850dd56e3c73fe2c71c9e3130bb9836cf3440aa,2020-04-22T20:00:00Z,229,,56601,56601,56601,04,21,0,1241,208,1449
-20200422,CA,35396,429931,,4984,,1551,,,,,,4/21/2020 00:00,b0504f0f81aa130bb6023dee9b6d6a44e5126225,2020-04-22T20:00:00Z,1354,,465327,465327,465327,06,86,0,163092,2135,165227
-20200422,CO,10447,38257,,851,2003,,,,,,,4/22/2020 00:00,fd5bfc3ede05359df158eb0608d586b2eacfa0b8,2020-04-22T20:00:00Z,486,2003,48704,48704,48704,08,37,123,897,341,1238
-20200422,CT,22469,47449,,1972,,,,,,,,4/22/2020 16:00,f1b0bd09eb5ce73d85bd38e377ad27ab174357b9,2020-04-22T20:00:00Z,1544,,69918,69918,69918,09,121,0,3617,2109,5726
-20200422,DC,3206,12296,,402,,120,,69,,645,,4/21/2020 00:00,a362018a86abbc8400dbdf49dd058315da817940,2020-04-22T20:00:00Z,127,,15502,15502,15502,11,15,0,455,108,563
-20200422,DE,3200,13353,,269,,,,,,599,,4/21/2020 18:00,d6ec6259c38a906f31c7b00a094aa7a3f202d7ad,2020-04-22T20:00:00Z,89,,16553,16553,16553,10,7,0,-372,269,-103
-20200422,FL,28309,260318,1258,,4469,,,,,,,4/22/2020 11:17,d2c420124ca369a62d319c61978b3b2f0637d5cb,2020-04-22T20:00:00Z,910,4469,289885,288627,288627,12,54,234,10754,814,11568
-20200422,GA,20740,73332,,,3959,,,,,,,4/22/2020 18:28,92ae3a93508e3a4b63e4e354d5d5dfce53b6d592,2020-04-22T20:00:00Z,836,3959,94072,94072,94072,13,37,180,5073,859,5932
+20200422,AZ,5459,51142,,664,,300,,195,,1265,B,4/22/2020 00:00,521e6faa60a58b06e2cf953537855225903a1b39,2020-04-22T20:00:00Z,229,,56601,56601,56601,04,21,0,1241,208,1449
+20200422,CA,35396,429931,,4984,,1551,,,,,B,4/21/2020 00:00,59c585124c114a6d62b9816a38cff2c78fed54b1,2020-04-22T20:00:00Z,1354,,465327,465327,465327,06,86,0,163092,2135,165227
+20200422,CO,10447,38257,,851,2003,,,,,,A,4/22/2020 00:00,c3237ee0a78f00aa91ec0542c1b40f2626ad45dd,2020-04-22T20:00:00Z,486,2003,48704,48704,48704,08,37,123,897,341,1238
+20200422,CT,22469,47449,,1972,,,,,,,A,4/22/2020 16:00,9af21292475900c329b8a360de6c63f494afd80a,2020-04-22T20:00:00Z,1544,,69918,69918,69918,09,121,0,3617,2109,5726
+20200422,DC,3206,12296,,402,,120,,69,,645,A,4/21/2020 00:00,9eab8d62a2ab9365bf4a8c4bea0d144f108c3fba,2020-04-22T20:00:00Z,127,,15502,15502,15502,11,15,0,455,108,563
+20200422,DE,3200,13353,,269,,,,,,599,A,4/21/2020 18:00,f85949252b10cff0a300c507ecfde6876420f966,2020-04-22T20:00:00Z,89,,16553,16553,16553,10,7,0,-372,269,-103
+20200422,FL,28309,260318,1258,,4469,,,,,,A,4/22/2020 11:17,aca97fe56e559e525635cc99736b88936f54a311,2020-04-22T20:00:00Z,910,4469,289885,288627,288627,12,54,234,10754,814,11568
+20200422,GA,20740,73332,,,3959,,,,,,A,4/22/2020 18:28,a3db43d11143724dd668a160ab613cbd32d6cbbe,2020-04-22T20:00:00Z,836,3959,94072,94072,94072,13,37,180,5073,859,5932
 20200422,GU,134,1086,,3,,2,,,,119,,4/22/2020 07:45,1b4604acf1f1ae26201714e62990ad3c07e0e82f,2020-04-22T20:00:00Z,5,,1220,1220,1220,66,0,0,53,1,54
-20200422,HI,582,24760,,,56,,,,,437,,4/22/2020 18:00,2baba933f01cd5e8492d5003464ac559af22288c,2020-04-22T20:00:00Z,12,56,25342,25342,25342,15,2,1,648,-2,646
-20200422,IA,3748,24496,,272,,92,,57,,1428,,4/21/2020 12:00,74884edbaadb451f07c98014327400e95c217bdb,2020-04-22T20:00:00Z,90,,28244,28244,28244,19,7,0,522,107,629
-20200422,ID,1766,15964,,,158,,58,,,710,,4/22/2020 19:00,e5244fad655cd9b8ee5b4e10e3a2fb511b30708e,2020-04-22T20:00:00Z,51,158,17730,17730,17730,16,3,1,40,30,70
-20200422,IL,35108,129238,,4665,,1220,,747,,,,4/22/2020 00:00,b9b152cc57b3cf32172813310fef7093b56e4055,2020-04-22T20:00:00Z,1565,,164346,164346,164346,17,97,0,7300,2049,9349
-20200422,IN,12438,57032,,,,633,,334,,,,4/21/2020 23:59,671716225e441b8f0446e75f589c7ec6090450e1,2020-04-22T20:00:00Z,661,,69470,69470,69470,18,31,0,1865,341,2206
-20200422,KS,2211,17992,,,432,,,,,,,4/22/2020 12:00,555552d4011d74f96a9bc684d9c2e66968d29ed7,2020-04-22T20:00:00Z,110,432,20203,20203,20203,20,3,13,916,186,1102
-20200422,KY,3192,30136,,286,1076,165,558,,,1266,,4/22/2020 17:00,93490076777d90e24426c8c6eb854354b0cc01bc,2020-04-22T20:00:00Z,171,1076,33328,33328,33328,21,17,17,366,142,508
-20200422,LA,25258,111588,,1747,,,,287,,14927,,4/22/2020 13:00,e1063c4b43be97fd1e9e43f0e1ff36a5058d709f,2020-04-22T20:00:00Z,1473,,136846,136846,136846,22,68,0,0,404,404
-20200422,MA,44913,144789,,3890,4256,1050,,,,,,4/22/2020 16:00,09d1f94ee7246efb597c1f9529ab7059c273d549,2020-04-22T20:00:00Z,2597,4256,189702,189702,189702,25,148,247,3345,1745,5090
-20200422,MD,14775,61754,,1432,3325,527,,,,981,,4/21/2020 10:00,0c5cef23c38c652978a3cfcfb17fa336dd8de1cb,2020-04-22T20:00:00Z,698,3325,76529,76529,76529,24,46,167,2312,582,2894
-20200422,ME,907,16784,,42,144,18,,10,,455,,4/22/2020 11:45,d4387cb5e81d2eed6b5f42d1256ebcd8d82f045d,2020-04-22T20:00:00Z,39,144,17691,17691,17691,23,3,5,2708,19,2727
-20200422,MI,33966,84259,,3305,,1350,,1065,,3237,,4/22/2020 11:00,5d32b2dd1b30c6e1691da11dc3c29293c5b93f26,2020-04-22T20:00:00Z,2813,,118225,118225,118225,26,113,0,0,999,999
-20200422,MN,2721,46623,,240,660,107,262,,,1317,,4/21/2020 17:00,00fcd21cb8cea118fbf264856fb4c533a7ec6d53,2020-04-22T20:00:00Z,179,660,49344,49344,49344,27,19,31,1493,154,1647
-20200422,MO,6137,52019,,1001,,,,,,,,4/22/2020 15:00,f4b51d526cf124034b91161243c75fc6e340347e,2020-04-22T20:00:00Z,208,,58156,58156,58156,29,19,0,840,196,1036
+20200422,HI,582,24760,,,56,,,,,437,A,4/22/2020 18:00,9d88a46c8c5fb6d38c133f9c450bd24c6f7a5f7f,2020-04-22T20:00:00Z,12,56,25342,25342,25342,15,2,1,648,-2,646
+20200422,IA,3748,24496,,272,,92,,57,,1428,A,4/21/2020 12:00,277e3a5b18a9b16d86a6b5b57ea693a1bf2c6b24,2020-04-22T20:00:00Z,90,,28244,28244,28244,19,7,0,522,107,629
+20200422,ID,1766,15964,,,158,,58,,,710,A,4/22/2020 19:00,f07389642cfd7bd97789554930b252e81dcbcf0c,2020-04-22T20:00:00Z,51,158,17730,17730,17730,16,3,1,40,30,70
+20200422,IL,35108,129238,,4665,,1220,,747,,,A,4/22/2020 00:00,8b338b8f6d042e417369a3edaaa1e938908d9c6c,2020-04-22T20:00:00Z,1565,,164346,164346,164346,17,97,0,7300,2049,9349
+20200422,IN,12438,57032,,,,633,,334,,,B,4/21/2020 23:59,289665de212272ea328e935fe8b7c8283d67b65b,2020-04-22T20:00:00Z,661,,69470,69470,69470,18,31,0,1865,341,2206
+20200422,KS,2211,17992,,,432,,,,,,B,4/22/2020 12:00,094121aa582cd63290480b4cbfb6361372deb7d7,2020-04-22T20:00:00Z,110,432,20203,20203,20203,20,3,13,916,186,1102
+20200422,KY,3192,30136,,286,1076,165,558,,,1266,A,4/22/2020 17:00,6614991b1cd55cdcb78f5c2aed3815683dc54fef,2020-04-22T20:00:00Z,171,1076,33328,33328,33328,21,17,17,366,142,508
+20200422,LA,25258,111588,,1747,,,,287,,14927,A,4/22/2020 13:00,f167fd75485e91fac92c15b9290f966e37b574ea,2020-04-22T20:00:00Z,1473,,136846,136846,136846,22,68,0,0,404,404
+20200422,MA,44913,144789,,3890,4256,1050,,,,,B,4/22/2020 16:00,f6e0182b548ceff26a49dbc5650a0551b819253f,2020-04-22T20:00:00Z,2597,4256,189702,189702,189702,25,148,247,3345,1745,5090
+20200422,MD,14775,61754,,1432,3325,527,,,,981,A,4/21/2020 10:00,a4c31581c81a87f7b42a665efeaaeba8ab880e53,2020-04-22T20:00:00Z,698,3325,76529,76529,76529,24,46,167,2312,582,2894
+20200422,ME,907,16784,,42,144,18,,10,,455,A,4/22/2020 11:45,fc7f482d7857e4d5239a231c762f0cd9920f40e5,2020-04-22T20:00:00Z,39,144,17691,17691,17691,23,3,5,2708,19,2727
+20200422,MI,33966,84259,,3305,,1350,,1065,,3237,B,4/22/2020 11:00,281540e98a97714fa2a2cf70ae026a7b537c648d,2020-04-22T20:00:00Z,2813,,118225,118225,118225,26,113,0,0,999,999
+20200422,MN,2721,46623,,240,660,107,262,,,1317,A,4/21/2020 17:00,c340dc55b2ac2a3406451ff19cdec9af4e6b93c3,2020-04-22T20:00:00Z,179,660,49344,49344,49344,27,19,31,1493,154,1647
+20200422,MO,6137,52019,,1001,,,,,,,A,4/22/2020 15:00,d6e088157b1f9bf0f33f7c73208da0d447908b13,2020-04-22T20:00:00Z,208,,58156,58156,58156,29,19,0,840,196,1036
 20200422,MP,14,51,,,,,,,,11,,4/23/2020 00:00,664a96538149b0d2bc51216597002166421ea872,2020-04-22T20:00:00Z,2,,65,65,65,69,0,0,0,0,0
-20200422,MS,4894,48941,,628,910,162,,86,,,,4/21/2020 19:00,02a71958eefc102a3f8bb413e5334da527ed7af5,2020-04-22T20:00:00Z,193,910,53835,53835,53835,28,10,52,1293,178,1471
-20200422,MT,439,11144,,13,59,,,,,296,,4/22/2020 00:00,e4d8050db50a4c23534828df440ff5b423d299cd,2020-04-22T20:00:00Z,14,59,11583,11583,11583,30,2,0,340,2,342
-20200422,NC,7220,83116,,434,,,,,,,,4/22/2020 11:00,6cbb42d1f9bcd1091e6368a180fc0ce6bc7a7f90,2020-04-22T20:00:00Z,242,,90336,90336,90336,37,29,0,6736,269,7005
-20200422,ND,679,14910,,23,62,,,,,229,,4/22/2020 13:10,0af1cb81ba75ce9d68099ec891d59a859ea43b62,2020-04-22T20:00:00Z,14,62,15589,15589,15589,38,1,8,567,35,602
-20200422,NE,1722,14957,,,,,,,,,,4/22/2020 19:45,30e65c7d08238fc618e577eb5c80fa42e5dbc238,2020-04-22T20:00:00Z,38,,16679,16679,16679,31,5,0,233,74,307
-20200422,NH,1491,13550,225,94,206,,,,,546,,4/22/2020 09:00,26a189fbd7b6fdba627fd6f832566b629ab93820,2020-04-22T20:00:00Z,42,206,15266,15041,15041,33,0,0,702,0,702
-20200422,NJ,95865,95794,,7210,,1983,,1570,,,,4/22/2020 13:00,1fdf503e40cc256e8dc16aa99c0363c6d6ed2156,2020-04-22T20:00:00Z,5063,,191659,191659,191659,34,310,0,3355,3478,6833
-20200422,NM,2072,38805,,119,306,,,,,529,,4/22/2020 19:11,26400cffda7a8e6300c474eac1b6a86636fa23fc,2020-04-22T20:00:00Z,65,306,40877,40877,40877,35,7,15,2021,101,2122
-20200422,NV,4081,29807,,,,,,,,,,4/22/2020 10:00,84445506af38a6ef6fff2ecb174e0a4a42b22eff,2020-04-22T20:00:00Z,172,,33888,33888,33888,32,9,0,689,144,833
-20200422,NY,257216,412766,,15599,57907,5016,,,,42308,,4/22/2020 00:00,448fa4979dbb705cd227750660bac3af6faaddaa,2020-04-22T20:00:00Z,15302,57907,669982,669982,669982,36,474,1381,15131,5526,20657
-20200422,OH,14117,84389,,,2882,,880,,,,,4/22/2020 14:00,e009a59cc60e856c9f79ccbe0d74c9baa84ef473,2020-04-22T20:00:00Z,610,2882,98506,98506,98506,39,53,103,3400,392,3792
-20200422,OK,2894,43019,,298,588,147,,,,1772,,4/22/2020 00:00,05b439bc7fe5601003978f18c2efce0f11fad88c,2020-04-22T20:00:00Z,170,588,45913,45913,45913,40,6,27,1482,87,1569
-20200422,OR,2059,39126,,302,488,67,,35,,,,4/22/2020 11:00,d55cfe0339deae1fd48d042c272e9c47e728d792,2020-04-22T20:00:00Z,78,488,41185,41185,41185,41,0,17,0,57,57
-20200422,PA,35684,136272,,2764,,,,685,,,,4/22/2020 00:00,44423077e0059daf4338f5e0f7bfd55a5f1ba02f,2020-04-22T20:00:00Z,1622,,171956,171956,171956,42,58,0,3949,1156,5105
-20200422,PR,915,8842,1954,,,,,,,,,4/22/2020 06:05,a020a2e8c113bf7b646bd3282fc99ebbc9b2e366,2020-04-22T20:00:00Z,67,,11711,9757,9757,72,3,0,53,-383,-330
-20200422,RI,5845,35881,,314,717,71,,44,,315,,4/22/2020 00:00,371763f7b96d5a16d85ef035362426aedf8653af,2020-04-22T20:00:00Z,201,717,41726,41726,41726,44,15,43,2048,378,2426
-20200422,SC,4761,38350,,,837,,,,,3317,,4/21/2020 23:59,ea43b028b30252fed06d760df921a0ab380c2899,2020-04-22T20:00:00Z,140,837,43111,43111,43111,45,16,61,1512,322,1834
-20200422,SD,1858,11588,,62,111,,,,,937,,4/22/2020 11:40,f9d45151a9777336d033080699e435dd5f3e2062,2020-04-22T20:00:00Z,8,111,13446,13446,13446,46,0,11,528,103,631
-20200422,TN,7842,107138,,,775,,,,,4012,,4/22/2020 15:00,ca4549a5ab8582433466c5902baa91cfcfa727dd,2020-04-22T20:00:00Z,166,775,114980,114980,114980,47,9,15,6350,448,6798
-20200422,TX,21069,195714,,1678,,,,,,7341,,4/22/2020 13:15,d4d71272270ef5eb9f44073373af49c380b1ae04,2020-04-22T20:00:00Z,543,,216783,216783,216783,48,26,0,10511,873,11384
-20200422,UT,3445,73015,,,288,,,,,970,,4/22/2020 15:00,94f3a2666b09f62d6a941538bff087611651eb80,2020-04-22T20:00:00Z,34,288,76460,76460,76460,49,2,11,3953,149,4102
-20200422,VA,10266,50512,477,1374,1659,419,,244,,1497,,4/22/2020 00:00,976af5300e615cb22a75d4efada51ff01411413a,2020-04-22T20:00:00Z,349,1659,61255,60778,60778,51,25,78,1788,636,2424
+20200422,MS,4894,48941,,628,910,162,,86,,,A,4/21/2020 19:00,99343c781907dacfb196bf1322311a55e5f63ae7,2020-04-22T20:00:00Z,193,910,53835,53835,53835,28,10,52,1293,178,1471
+20200422,MT,439,11144,,13,59,,,,,296,A,4/22/2020 00:00,10012d42402e7b692a7e006267c9b81eb06aa0e7,2020-04-22T20:00:00Z,14,59,11583,11583,11583,30,2,0,340,2,342
+20200422,NC,7220,83116,,434,,,,,,,A,4/22/2020 11:00,50b74d0c3e1c7d03123998034dd49994d8e8aa1d,2020-04-22T20:00:00Z,242,,90336,90336,90336,37,29,0,6736,269,7005
+20200422,ND,679,14910,,23,62,,,,,229,B,4/22/2020 13:10,5afe195020e0b0d9ca874af732d20550d1db32cc,2020-04-22T20:00:00Z,14,62,15589,15589,15589,38,1,8,567,35,602
+20200422,NE,1722,14957,,,,,,,,,A,4/22/2020 19:45,3e4a9a5437208d4fa764a6fc1affae3dd9bf535b,2020-04-22T20:00:00Z,38,,16679,16679,16679,31,5,0,233,74,307
+20200422,NH,1491,13550,225,94,206,,,,,546,B,4/22/2020 09:00,3c55c7dc42053e7e9e6574ec730b026b56bc4930,2020-04-22T20:00:00Z,42,206,15266,15041,15041,33,0,0,702,0,702
+20200422,NJ,95865,95794,,7210,,1983,,1570,,,A,4/22/2020 13:00,4b159435442726423eca078e6d5902d38965abd6,2020-04-22T20:00:00Z,5063,,191659,191659,191659,34,310,0,3355,3478,6833
+20200422,NM,2072,38805,,119,306,,,,,529,A,4/22/2020 19:11,976b4c8cfa4c42cab158ab455f07fcfe1bc6d2f0,2020-04-22T20:00:00Z,65,306,40877,40877,40877,35,7,15,2021,101,2122
+20200422,NV,4081,29807,,,,,,,,,A,4/22/2020 10:00,e356b30e1adac6e6ac6f1c90faf21558d07f4f23,2020-04-22T20:00:00Z,172,,33888,33888,33888,32,9,0,689,144,833
+20200422,NY,257216,412766,,15599,57907,5016,,,,42308,A,4/22/2020 00:00,5a991363a77735bfe5f67d504bf8ac0660b1065f,2020-04-22T20:00:00Z,15302,57907,669982,669982,669982,36,474,1381,15131,5526,20657
+20200422,OH,14117,84389,,,2882,,880,,,,B,4/22/2020 14:00,5811e1d3be6557281277e1d3d206b8dcac440b0a,2020-04-22T20:00:00Z,610,2882,98506,98506,98506,39,53,103,3400,392,3792
+20200422,OK,2894,43019,,298,588,147,,,,1772,B,4/22/2020 00:00,adc9a1ffae80e4b61cbe2b0ce5fef277259d8729,2020-04-22T20:00:00Z,170,588,45913,45913,45913,40,6,27,1482,87,1569
+20200422,OR,2059,39126,,302,488,67,,35,,,A,4/22/2020 11:00,9a70f256fc5123565d1f15931a2e037e966dee8c,2020-04-22T20:00:00Z,78,488,41185,41185,41185,41,0,17,0,57,57
+20200422,PA,35684,136272,,2764,,,,685,,,A,4/22/2020 00:00,5aadc0d7f00e885017930c2497e09428f5ea7555,2020-04-22T20:00:00Z,1622,,171956,171956,171956,42,58,0,3949,1156,5105
+20200422,PR,915,8842,1954,,,,,,,,A,4/22/2020 06:05,85edb40b4a16370467ca1f3558d3f6a4c8c4b299,2020-04-22T20:00:00Z,67,,11711,9757,9757,72,3,0,53,-383,-330
+20200422,RI,5845,35881,,314,717,71,,44,,315,B,4/22/2020 00:00,85626683521763aafbb5c36e31ee1bb6695659e8,2020-04-22T20:00:00Z,201,717,41726,41726,41726,44,15,43,2048,378,2426
+20200422,SC,4761,38350,,,837,,,,,3317,B,4/21/2020 23:59,13a54cb47238658d834fe9db94b38a2003f7301e,2020-04-22T20:00:00Z,140,837,43111,43111,43111,45,16,61,1512,322,1834
+20200422,SD,1858,11588,,62,111,,,,,937,A,4/22/2020 11:40,46fbf8f08971c032e5e15bc2b47affda9d03c4ba,2020-04-22T20:00:00Z,8,111,13446,13446,13446,46,0,11,528,103,631
+20200422,TN,7842,107138,,,775,,,,,4012,A,4/22/2020 15:00,163f6f1224a1fad158390ad2900c5aa5f4d7aaf7,2020-04-22T20:00:00Z,166,775,114980,114980,114980,47,9,15,6350,448,6798
+20200422,TX,21069,195714,,1678,,,,,,7341,A,4/22/2020 13:15,a0689bbda67a37abe8d2647b861e532de6a81dd3,2020-04-22T20:00:00Z,543,,216783,216783,216783,48,26,0,10511,873,11384
+20200422,UT,3445,73015,,,288,,,,,970,A,4/22/2020 15:00,bcb09903b8d187a91bb1cdea3114c9c3f2e781e7,2020-04-22T20:00:00Z,34,288,76460,76460,76460,49,2,11,3953,149,4102
+20200422,VA,10266,50512,477,1374,1659,419,,244,,1497,A,4/22/2020 00:00,c75ad10b79833dda982121a6f8c89cd4bb5e5d36,2020-04-22T20:00:00Z,349,1659,61255,60778,60778,51,25,78,1788,636,2424
 20200422,VI,54,583,31,,,,,,,48,,4/22/2020 20:30,87b9ec52ca98a143f336ffb431f244513e632d5f,2020-04-22T20:00:00Z,3,,668,637,637,78,0,0,9,0,9
-20200422,VT,823,12639,,37,,,,,,,,4/22/2020 10:35,af5142841cd01fc46440637efc3fe557b3d8c3d3,2020-04-22T20:00:00Z,40,,13462,13462,13462,50,0,0,346,5,351
-20200422,WA,12785,155179,,543,,161,,,,,,4/22/2020 02:59,8c59c3a9eab965300e13b6f6dc3ee479bfc64d98,2020-04-22T20:00:00Z,647,,167964,167964,167964,53,7,0,4162,235,4397
-20200422,WI,4845,49502,229,355,1302,139,324,,,,,4/22/2020 16:00,32ab0c39f233071f5841af2b19fadc838328467a,2020-04-22T20:00:00Z,246,1302,54576,54347,54347,55,4,50,1661,225,1886
-20200422,WV,939,24897,,103,,41,,23,,330,,4/22/2020 17:00,1bb525aab08099021b0f8613f0eda2ee9456533c,2020-04-22T20:00:00Z,26,,25836,25836,25836,54,0,0,3048,25,3073
-20200422,WY,322,7301,,19,52,,,,,254,,4/22/2020 23:00,97d069fb09c0719547596ea34d18c60fbb422068,2020-04-22T20:00:00Z,6,52,7623,7623,7623,56,0,0,0,2,2
-20200421,AK,329,10790,,42,36,,,,,168,,4/21/2020 15:15,bda1524766dcdfc8919495399caba6923b82f36d,2020-04-21T20:00:00Z,9,36,11119,11119,11119,02,0,0,987,8,995
-20200421,AL,5231,43295,,,699,,260,,157,,,4/21/2020 00:00,0199d47d76323fc6cab01b3886670151e042641e,2020-04-21T20:00:00Z,177,699,48526,48526,48526,01,10,58,2420,206,2626
-20200421,AR,2227,25214,,86,291,,,27,57,809,,4/21/2020 00:00,df6fc65ac68c7ed1bc2914069c5196c22a57d543,2020-04-21T20:00:00Z,43,291,27441,27441,27441,05,1,0,584,304,888
+20200422,VT,823,12639,,37,,,,,,,A,4/22/2020 10:35,97358e1b342bc99448dad1f6b01da4f26da09031,2020-04-22T20:00:00Z,40,,13462,13462,13462,50,0,0,346,5,351
+20200422,WA,12785,155179,,543,,161,,,,,C,4/22/2020 02:59,0bd9413c5022804aab4aad3137b39a32a893e923,2020-04-22T20:00:00Z,647,,167964,167964,167964,53,7,0,4162,235,4397
+20200422,WI,4845,49502,229,355,1302,139,324,,,,A,4/22/2020 16:00,b879b05ba07c03b950a6d811409ea46c6d657202,2020-04-22T20:00:00Z,246,1302,54576,54347,54347,55,4,50,1661,225,1886
+20200422,WV,939,24897,,103,,41,,23,,330,B,4/22/2020 17:00,c4240397946560da233242fd79c0a38a38f7255c,2020-04-22T20:00:00Z,26,,25836,25836,25836,54,0,0,3048,25,3073
+20200422,WY,322,7301,,19,52,,,,,254,A,4/22/2020 23:00,970877fd4ebe6208a3fea0682f0c2235145046db,2020-04-22T20:00:00Z,6,52,7623,7623,7623,56,0,0,0,2,2
+20200421,AK,329,10790,,42,36,,,,,168,A,4/21/2020 15:15,8dd6e5e1d79ec1aeef04e2c80bf24d9b34d2a4c9,2020-04-21T20:00:00Z,9,36,11119,11119,11119,02,0,0,987,8,995
+20200421,AL,5231,43295,,,699,,260,,157,,B,4/21/2020 00:00,e92b2cc1a8ed575ca1862fe6b7a963922958bbdf,2020-04-21T20:00:00Z,177,699,48526,48526,48526,01,10,58,2420,206,2626
+20200421,AR,2227,25214,,86,291,,,27,57,809,A,4/21/2020 00:00,c1c5d60936d5f43d8939a0ce28295b0518e7c6e2,2020-04-21T20:00:00Z,43,291,27441,27441,27441,05,1,0,584,304,888
 20200421,AS,0,3,17,,,,,,,,,4/6/2020 00:00,bb6eb1372cddf397eb8ba071ad5da598067d6951,2020-04-21T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200421,AZ,5251,49901,,637,,285,,181,,1155,,4/21/2020 00:00,fe53f6ea62ec38333801c80a8cb1e2f9d67cedf6,2020-04-21T20:00:00Z,208,,55152,55152,55152,04,21,0,465,187,652
-20200421,CA,33261,266839,,4886,,1502,,,,,,4/21/2020 00:00,d391802698f50c9baec9bef7bf57f04bb0de6f60,2020-04-21T20:00:00Z,1268,,300100,300100,300100,06,60,0,7317,2283,9600
-20200421,CO,10106,37360,,861,1880,,,,,,,4/20/2020 16:41,ce25a282a451ac53b8cb49887d5b648aeca3a012,2020-04-21T20:00:00Z,449,1880,47466,47466,47466,08,27,67,895,376,1271
-20200421,CT,20360,43832,,1949,,,,,,,,4/21/2020 00:00,8a46116fd2c44322f52ba2cf2a203f6c951c085a,2020-04-21T20:00:00Z,1423,,64192,64192,64192,09,92,0,841,545,1386
-20200421,DC,3098,11841,,402,,120,,69,,636,,4/20/2020 00:00,5da5cde8ec5bb778e51426947d3cee5c64ce70d8,2020-04-21T20:00:00Z,112,,14939,14939,14939,11,7,0,655,171,826
-20200421,DE,2931,13725,,263,,,,,,565,,4/20/2020 18:00,fcc82c054b58c88799a06b663e590c912351a8d8,2020-04-21T20:00:00Z,82,,16656,16656,16656,10,10,0,0,186,186
-20200421,FL,27495,249564,1203,,4235,,,,,,,4/21/2020 16:19,435c983e6e471a9c56af90a28403e09c99a5ec8e,2020-04-21T20:00:00Z,856,4235,278262,277059,277059,12,50,225,9999,835,10834
-20200421,GA,19881,68259,,,3779,,,,,,,4/21/2020 18:28,1258d0c4c454ff87e99e466f2802df23e0896e23,2020-04-21T20:00:00Z,799,3779,88140,88140,88140,13,66,229,2878,934,3812
+20200421,AZ,5251,49901,,637,,285,,181,,1155,B,4/21/2020 00:00,a8e31d7a0a9e98c7889c3b4526fce0ae50e1dc97,2020-04-21T20:00:00Z,208,,55152,55152,55152,04,21,0,465,187,652
+20200421,CA,33261,266839,,4886,,1502,,,,,B,4/21/2020 00:00,a068953fdb478e84a2ce8f95f3a37a6e0a7dd111,2020-04-21T20:00:00Z,1268,,300100,300100,300100,06,60,0,7317,2283,9600
+20200421,CO,10106,37360,,861,1880,,,,,,A,4/20/2020 16:41,62cef367a839ea10eaaed52010a54afe26cc18a2,2020-04-21T20:00:00Z,449,1880,47466,47466,47466,08,27,67,895,376,1271
+20200421,CT,20360,43832,,1949,,,,,,,A,4/21/2020 00:00,a03e2e85f2363ef5563f29b5658cc29be3666d8a,2020-04-21T20:00:00Z,1423,,64192,64192,64192,09,92,0,841,545,1386
+20200421,DC,3098,11841,,402,,120,,69,,636,A,4/20/2020 00:00,d3700846dd2d09f4c093d3fa36f6430f6e9bf31a,2020-04-21T20:00:00Z,112,,14939,14939,14939,11,7,0,655,171,826
+20200421,DE,2931,13725,,263,,,,,,565,A,4/20/2020 18:00,49a54adc437cc98e727e8475048fef22defc430c,2020-04-21T20:00:00Z,82,,16656,16656,16656,10,10,0,0,186,186
+20200421,FL,27495,249564,1203,,4235,,,,,,A,4/21/2020 16:19,dc949320c1322ed9266f95f2bfd173aa8b5495f5,2020-04-21T20:00:00Z,856,4235,278262,277059,277059,12,50,225,9999,835,10834
+20200421,GA,19881,68259,,,3779,,,,,,A,4/21/2020 18:28,653304f4cef14208590a361a0d7ece55361b9671,2020-04-21T20:00:00Z,799,3779,88140,88140,88140,13,66,229,2878,934,3812
 20200421,GU,133,1033,,3,,2,,,,114,,4/21/2020 08:05,6277952006d50b3283e2bd5140cbbc6a36cee19f,2020-04-21T20:00:00Z,5,,1166,1166,1166,66,0,0,42,0,42
-20200421,HI,584,24112,,,55,,,,,423,,4/21/2020 19:30,25de1ce989735cb5ace281d439ccc28f4dd62344,2020-04-21T20:00:00Z,10,55,24696,24696,24696,15,0,3,517,4,521
-20200421,IA,3641,23974,,214,,89,,60,,1293,,4/20/2020 12:00,46301fdb401af6cf7e6997add05bd440c2ff2273,2020-04-21T20:00:00Z,83,,27615,27615,27615,19,4,0,1313,482,1795
-20200421,ID,1736,15924,,,157,,58,,,660,,4/21/2020 19:00,bea08754afdc52d7e47252117e163690bee3224c,2020-04-21T20:00:00Z,48,157,17660,17660,17660,16,3,6,151,64,215
-20200421,IL,33059,121938,,4776,,1226,,781,,,,4/21/2020 00:00,35a03dd74b8d30b4eb9e6a89a923cb7c670304a7,2020-04-21T20:00:00Z,1468,,154997,154997,154997,17,119,0,5088,1551,6639
-20200421,IN,12097,55167,,,,676,,368,,,,4/20/2020 23:59,3080f14a310c411ad6e36ad0419d35609ee696d7,2020-04-21T20:00:00Z,630,,67264,67264,67264,18,61,0,2214,411,2625
-20200421,KS,2025,17076,,,419,,,,,,,4/21/2020 12:00,8d9f3fa48f22c996011b46344736fcbe4efbdc10,2020-04-21T20:00:00Z,107,419,19101,19101,19101,20,7,14,301,39,340
-20200421,KY,3050,29770,,263,1059,147,582,,,1174,,4/21/2020 17:00,2e4b6bce53ad49dac848537d691aa95b63f6f188,2020-04-21T20:00:00Z,154,1059,32820,32820,32820,21,6,0,158,90,248
-20200421,LA,24854,111588,,1798,,,,297,,,,4/21/2020 13:00,c5feb6d1d05387767d43f877e6d5f450cd659c89,2020-04-21T20:00:00Z,1405,,136442,136442,136442,22,77,0,0,331,331
-20200421,MA,43168,141444,,3977,4009,1040,,,,,,4/21/2020 16:00,85e008480e91148ba8386ab31a59831f4184af43,2020-04-21T20:00:00Z,2449,4009,184612,184612,184612,25,146,137,5398,1752,7150
-20200421,MD,14193,59442,,1433,3158,526,,,,930,,4/21/2020 10:00,1bc3f74973d4ebadf84f421fe30905b10140a29a,2020-04-21T20:00:00Z,652,3158,73635,73635,73635,24,70,144,1729,509,2238
-20200421,ME,888,14076,,40,139,16,,8,,443,,4/21/2020 11:45,f586da9665cdcbc83bf8b044ebb802d892527e1d,2020-04-21T20:00:00Z,36,139,14964,14964,14964,23,1,1,0,13,13
-20200421,MI,32967,84259,,3357,,1346,,1107,,3237,,4/21/2020 11:00,4c9595375964c23624ca8fc0da7c7e6b5b464f59,2020-04-21T20:00:00Z,2700,,117226,117226,117226,26,232,0,2461,967,3428
-20200421,MN,2567,45130,,237,629,117,253,,,1254,,4/20/2020 17:00,e1b04f303e0799f9d5a9a19f634d9472e2bf976b,2020-04-21T20:00:00Z,160,629,47697,47697,47697,27,17,27,750,97,847
-20200421,MO,5941,51179,,1001,,,,,,,,4/21/2020 15:00,f8ad03f3a6b589bc7b392239b6c49e9959d8c53e,2020-04-21T20:00:00Z,189,,57120,57120,57120,29,12,0,973,134,1107
+20200421,HI,584,24112,,,55,,,,,423,A,4/21/2020 19:30,86ca90775d4b9c3babb38f26a4ecb111e416fe36,2020-04-21T20:00:00Z,10,55,24696,24696,24696,15,0,3,517,4,521
+20200421,IA,3641,23974,,214,,89,,60,,1293,A,4/20/2020 12:00,1373d3fad6b56f6772ebfaec6de02682bc0fc692,2020-04-21T20:00:00Z,83,,27615,27615,27615,19,4,0,1313,482,1795
+20200421,ID,1736,15924,,,157,,58,,,660,A,4/21/2020 19:00,6fd7869dcf4eeb25b79e319cb49b98e3e2028c27,2020-04-21T20:00:00Z,48,157,17660,17660,17660,16,3,6,151,64,215
+20200421,IL,33059,121938,,4776,,1226,,781,,,A,4/21/2020 00:00,83141b4b6b9f48bb1e0dda4d5ed1dd41ed8f9232,2020-04-21T20:00:00Z,1468,,154997,154997,154997,17,119,0,5088,1551,6639
+20200421,IN,12097,55167,,,,676,,368,,,B,4/20/2020 23:59,0bf1cce3ba995abe1f75bc846e8e0669f1a7d7a1,2020-04-21T20:00:00Z,630,,67264,67264,67264,18,61,0,2214,411,2625
+20200421,KS,2025,17076,,,419,,,,,,B,4/21/2020 12:00,4c0020670a2df9e3c0a804abb5c70534d0bc6736,2020-04-21T20:00:00Z,107,419,19101,19101,19101,20,7,14,301,39,340
+20200421,KY,3050,29770,,263,1059,147,582,,,1174,A,4/21/2020 17:00,ea2e66655dba0e2712754719254bd1fbce22a3ec,2020-04-21T20:00:00Z,154,1059,32820,32820,32820,21,6,0,158,90,248
+20200421,LA,24854,111588,,1798,,,,297,,,A,4/21/2020 13:00,89077be9d0223c4afaa0f40c976eb5f4310adfba,2020-04-21T20:00:00Z,1405,,136442,136442,136442,22,77,0,0,331,331
+20200421,MA,43168,141444,,3977,4009,1040,,,,,B,4/21/2020 16:00,a8f32b361f0f591ed7a1661f78446f619fe376a2,2020-04-21T20:00:00Z,2449,4009,184612,184612,184612,25,146,137,5398,1752,7150
+20200421,MD,14193,59442,,1433,3158,526,,,,930,A,4/21/2020 10:00,8b970f31e5f547127490c3a8c75c0d4dfce9b752,2020-04-21T20:00:00Z,652,3158,73635,73635,73635,24,70,144,1729,509,2238
+20200421,ME,888,14076,,40,139,16,,8,,443,A,4/21/2020 11:45,58845e780c3adccba8524a27fdb3390f36b8c812,2020-04-21T20:00:00Z,36,139,14964,14964,14964,23,1,1,0,13,13
+20200421,MI,32967,84259,,3357,,1346,,1107,,3237,B,4/21/2020 11:00,95e2a1b08f9cd288c7e4fbb16b8934266cb39cdb,2020-04-21T20:00:00Z,2700,,117226,117226,117226,26,232,0,2461,967,3428
+20200421,MN,2567,45130,,237,629,117,253,,,1254,A,4/20/2020 17:00,2f851ef79107bb468703352476c53573c207a78f,2020-04-21T20:00:00Z,160,629,47697,47697,47697,27,17,27,750,97,847
+20200421,MO,5941,51179,,1001,,,,,,,A,4/21/2020 15:00,59baf56600a84d8356f665c9209bcde87df8c091,2020-04-21T20:00:00Z,189,,57120,57120,57120,29,12,0,973,134,1107
 20200421,MP,14,51,,,,,,,,11,,4/21/2020 19:25,ee7de9815bf3212896a1b8e1e17ea19b5dcc374b,2020-04-21T20:00:00Z,2,,65,65,65,69,0,0,0,0,0
-20200421,MS,4716,47648,,548,858,146,,89,,,,4/20/2020 19:00,eb0752ffc0d8709cbe4112ac7796933a36e91053,2020-04-21T20:00:00Z,183,858,52364,52364,52364,28,14,39,726,204,930
-20200421,MT,437,10804,,14,59,,,,,273,,4/21/2020 11:56,bf5125d2584aa2c1016889a6e4857b104c3a6f36,2020-04-21T20:00:00Z,12,59,11241,11241,11241,30,2,2,186,4,190
-20200421,NC,6951,76380,,427,,,,,,,,4/21/2020 10:35,5917fce9b4fc53195798bbe6739958f5057eb7fc,2020-04-21T20:00:00Z,213,,83331,83331,83331,37,34,0,3660,187,3847
-20200421,ND,644,14343,,17,54,,,,,214,,4/20/2020 13:17,6f2c99ac0dfde1634e75c65339c6e56c7bb10a70,2020-04-21T20:00:00Z,13,54,14987,14987,14987,38,0,1,223,17,240
-20200421,NE,1648,14724,,,,,,,,,,4/21/2020 19:45,01d5c9d8dea9af396b82a94125aa196a48495269,2020-04-21T20:00:00Z,33,,16372,16372,16372,31,5,0,518,174,692
-20200421,NH,1491,12848,244,78,206,,,,,521,,4/21/2020 09:00,bf8917f1ecebeb8a05060d07111b760a97e2e6f5,2020-04-21T20:00:00Z,42,206,14583,14339,14339,33,1,8,122,99,221
-20200421,NJ,92387,92439,,7594,,1930,,1501,,,,4/21/2020 13:00,805a6caa9e245cebbb6bb2f184414d085fbf42c5,2020-04-21T20:00:00Z,4753,,184826,184826,184826,34,376,0,3188,3581,6769
-20200421,NM,1971,36784,,116,291,,,,,501,,4/21/2020 10:22,128b09aad4e4b0a5ad8f8eaa2911ef8cd9c99e5b,2020-04-21T20:00:00Z,58,291,38755,38755,38755,35,3,17,1587,126,1713
-20200421,NV,3937,29118,,,,,,,,,,4/21/2020 10:00,fbc6e9c375755242f58bd960978f90ef6fb553f7,2020-04-21T20:00:00Z,163,,33055,33055,33055,32,5,0,601,107,708
-20200421,NY,251690,397635,,16044,56526,5016,,,,40482,,4/21/2020 00:00,0e831f8ae7ab06cada70a6c87be7b3a73234c933,2020-04-21T20:00:00Z,14828,56526,649325,649325,649325,36,481,1338,11286,4178,15464
-20200421,OH,13725,80989,,,2779,,838,,,,,4/21/2020 14:00,91ed1c98cb29d7c7f98d423b6b853f4571c4ee9d,2020-04-21T20:00:00Z,557,2779,94714,94714,94714,39,48,126,3069,806,3875
-20200421,OK,2807,41537,,346,561,164,,,,1702,,4/21/2020 00:00,a8a787b53dcfaf4f20e7aa63443d54521a11924e,2020-04-21T20:00:00Z,164,561,44344,44344,44344,40,21,20,8571,127,8698
-20200421,OR,2002,39126,,297,471,70,,35,,,,4/21/2020 11:00,274b527b012f212bd3fb2c3a436104a07ea61714,2020-04-21T20:00:00Z,78,471,41128,41128,41128,41,3,6,1037,46,1083
-20200421,PA,34528,132323,,2743,,,,673,,,,4/21/2020 14:00,64df6bc3b3da3fb78be0964032e31c503eb09f46,2020-04-21T20:00:00Z,1564,,166851,166851,166851,42,360,0,2603,1296,3899
-20200421,PR,1298,8789,1761,,,,,,,,,4/21/2020 06:30,2a571b64a14c7bb9468c87d38966aac8fe208672,2020-04-21T20:00:00Z,64,,11848,10087,10087,72,1,0,303,46,349
-20200421,RI,5467,33833,,309,674,67,,43,,315,,4/21/2020 00:00,c29a40f1edf82b9cc8409fbe71d3566f4b1cf6c7,2020-04-21T20:00:00Z,186,674,39300,39300,39300,44,11,45,1843,369,2212
-20200421,SC,4439,36838,,,776,,,,,2063,,4/21/2020 16:30,911e3fab62f9c6231f728722ccb1dd16e0e11fc7,2020-04-21T20:00:00Z,124,776,41277,41277,41277,45,4,0,735,62,797
-20200421,SD,1755,11060,,65,100,,,,,824,,4/20/2020 18:00,7c984a2fddfdb48aa20bfe0253a194c8b486b0b7,2020-04-21T20:00:00Z,8,100,12815,12815,12815,46,1,13,419,70,489
-20200421,TN,7394,100788,,,760,,,,,3828,,4/21/2020 15:00,6bef68873c2cd7baa3f4d24232205fe9de723fd6,2020-04-21T20:00:00Z,157,760,108182,108182,108182,47,5,30,7337,156,7493
-20200421,TX,20196,185203,,1419,,,,,,6486,,4/21/2020 13:00,dde1767eeb0c1bc111ee735c43f072f94e9d104e,2020-04-21T20:00:00Z,517,,205399,205399,205399,48,22,0,14267,738,15005
-20200421,UT,3296,69062,,,277,,,,,888,,4/21/2020 15:00,257f4f10559c1e3a4324a1691b5a05ae8dc80228,2020-04-21T20:00:00Z,32,277,72358,72358,72358,49,4,9,3964,83,4047
-20200421,VA,9630,48724,477,1331,1581,403,,251,,1418,,4/21/2020 00:00,640a2033687a8279387ca717f0079a1c09446f6e,2020-04-21T20:00:00Z,324,1581,58831,58354,58354,51,24,81,979,640,1619
+20200421,MS,4716,47648,,548,858,146,,89,,,A,4/20/2020 19:00,b954421ce8a9a46202b344f6091990546b8929bb,2020-04-21T20:00:00Z,183,858,52364,52364,52364,28,14,39,726,204,930
+20200421,MT,437,10804,,14,59,,,,,273,A,4/21/2020 11:56,1d54a1fedac1d2438b60f1798a16768f176c1404,2020-04-21T20:00:00Z,12,59,11241,11241,11241,30,2,2,186,4,190
+20200421,NC,6951,76380,,427,,,,,,,A,4/21/2020 10:35,a2fa33ef18fa59ade611b4cb369e9ce5866e60cd,2020-04-21T20:00:00Z,213,,83331,83331,83331,37,34,0,3660,187,3847
+20200421,ND,644,14343,,17,54,,,,,214,B,4/20/2020 13:17,f4fd190ba31aebbea5e92d63044c73eb2c9ecebb,2020-04-21T20:00:00Z,13,54,14987,14987,14987,38,0,1,223,17,240
+20200421,NE,1648,14724,,,,,,,,,A,4/21/2020 19:45,99ca56f1f829fb5725da2a81479d8553b3253b83,2020-04-21T20:00:00Z,33,,16372,16372,16372,31,5,0,518,174,692
+20200421,NH,1491,12848,244,78,206,,,,,521,B,4/21/2020 09:00,0170c95358bcfc81a718f08f637e50e04b23fd1f,2020-04-21T20:00:00Z,42,206,14583,14339,14339,33,1,8,122,99,221
+20200421,NJ,92387,92439,,7594,,1930,,1501,,,A,4/21/2020 13:00,0096a8c4edd1945c20682973c66e865127457567,2020-04-21T20:00:00Z,4753,,184826,184826,184826,34,376,0,3188,3581,6769
+20200421,NM,1971,36784,,116,291,,,,,501,A,4/21/2020 10:22,e236b5b6d1a15de92f2035784737ea592fda72a3,2020-04-21T20:00:00Z,58,291,38755,38755,38755,35,3,17,1587,126,1713
+20200421,NV,3937,29118,,,,,,,,,A,4/21/2020 10:00,30c4143fe24444a38285ba56f74c3970354e355e,2020-04-21T20:00:00Z,163,,33055,33055,33055,32,5,0,601,107,708
+20200421,NY,251690,397635,,16044,56526,5016,,,,40482,A,4/21/2020 00:00,bed8c86d7beba5d9610951b5cb6427e53a7eafe1,2020-04-21T20:00:00Z,14828,56526,649325,649325,649325,36,481,1338,11286,4178,15464
+20200421,OH,13725,80989,,,2779,,838,,,,B,4/21/2020 14:00,7d64a516c32fe76141c000784e92060f7bc1c5a9,2020-04-21T20:00:00Z,557,2779,94714,94714,94714,39,48,126,3069,806,3875
+20200421,OK,2807,41537,,346,561,164,,,,1702,B,4/21/2020 00:00,e38da84c5cfea87e609c23d816bc6bc6e496fcad,2020-04-21T20:00:00Z,164,561,44344,44344,44344,40,21,20,8571,127,8698
+20200421,OR,2002,39126,,297,471,70,,35,,,A,4/21/2020 11:00,b044711a64671fea90ad016293befb82cb7cbec9,2020-04-21T20:00:00Z,78,471,41128,41128,41128,41,3,6,1037,46,1083
+20200421,PA,34528,132323,,2743,,,,673,,,A,4/21/2020 14:00,8341da3db785621d30d1176d04fc0d62aee6d131,2020-04-21T20:00:00Z,1564,,166851,166851,166851,42,360,0,2603,1296,3899
+20200421,PR,1298,8789,1761,,,,,,,,A,4/21/2020 06:30,ab09d89b5cea0eb3ec47a16d5ff8ca1f84af3cc7,2020-04-21T20:00:00Z,64,,11848,10087,10087,72,1,0,303,46,349
+20200421,RI,5467,33833,,309,674,67,,43,,315,B,4/21/2020 00:00,e9595a4ad78cd950702d10d02c4336c2cf4f974b,2020-04-21T20:00:00Z,186,674,39300,39300,39300,44,11,45,1843,369,2212
+20200421,SC,4439,36838,,,776,,,,,2063,B,4/21/2020 16:30,d1fdcac8327cb0e5938df1117601ad9055c71397,2020-04-21T20:00:00Z,124,776,41277,41277,41277,45,4,0,735,62,797
+20200421,SD,1755,11060,,65,100,,,,,824,A,4/20/2020 18:00,24ab76274ea63c0a46b38407c1236e9f60f524e5,2020-04-21T20:00:00Z,8,100,12815,12815,12815,46,1,13,419,70,489
+20200421,TN,7394,100788,,,760,,,,,3828,A,4/21/2020 15:00,2448b245719583b4a0d004fbcb4845644478e260,2020-04-21T20:00:00Z,157,760,108182,108182,108182,47,5,30,7337,156,7493
+20200421,TX,20196,185203,,1419,,,,,,6486,A,4/21/2020 13:00,ec0c26abcb0e026a407bcd12c4fd79d73ec1acc9,2020-04-21T20:00:00Z,517,,205399,205399,205399,48,22,0,14267,738,15005
+20200421,UT,3296,69062,,,277,,,,,888,A,4/21/2020 15:00,675ebd883729986329d088ddaf60539674b255f5,2020-04-21T20:00:00Z,32,277,72358,72358,72358,49,4,9,3964,83,4047
+20200421,VA,9630,48724,477,1331,1581,403,,251,,1418,A,4/21/2020 00:00,629b4c12b59cd6e74a0debd0c638395bceb7eb6d,2020-04-21T20:00:00Z,324,1581,58831,58354,58354,51,24,81,979,640,1619
 20200421,VI,54,574,35,,,,,,,48,,4/21/2020 20:30,24084710924e935bf399a73dce9d7f101e8778e1,2020-04-21T20:00:00Z,3,,663,628,628,78,0,0,20,1,21
-20200421,VT,818,12293,,41,,,,,,,,4/21/2020 10:39,abbf0a897e5015f72f110a297791af6155f0cdd9,2020-04-21T20:00:00Z,40,,13111,13111,13111,50,2,0,128,2,130
-20200421,WA,12550,151017,,503,,161,,,,,,4/21/2020 02:59,b1d8fc50fa1ee4233e2e8100d3a9d1bd4cca54b1,2020-04-21T20:00:00Z,640,,163567,163567,163567,53,11,0,4598,204,4802
-20200421,WI,4620,47841,219,358,1252,137,324,,,,,4/21/2020 16:00,d9dc9071543a0170746e033d19c11f46c524432a,2020-04-21T20:00:00Z,242,1252,52680,52461,52461,55,12,41,1238,121,1359
-20200421,WV,914,21849,,85,,42,,24,,330,,4/21/2020 17:00,2446298f69cdd51ba91c144d4559c89ca12d6e1f,2020-04-21T20:00:00Z,26,,22763,22763,22763,54,2,0,596,12,608
-20200421,WY,320,7301,,19,52,,,,,237,,4/21/2020 16:20,b5708c62f4cd7dd4b447f0115060de91f0cd8596,2020-04-21T20:00:00Z,6,52,7621,7621,7621,56,4,1,228,7,235
-20200420,AK,321,9803,,46,36,,,,,161,,4/20/2020 14:00,5949c0992ce50a7b829f732a642f8f8dbeb89990,2020-04-20T20:00:00Z,9,36,10124,10124,10124,02,0,0,227,2,229
-20200420,AL,5025,40875,,,641,,260,,157,,,4/20/2020 00:00,968bca96bfa84a60c0a0c0c43ecac462f85d13f5,2020-04-20T20:00:00Z,167,641,45900,45900,45900,01,13,0,0,188,188
-20200420,AR,1923,24630,,93,291,,,24,57,749,,4/20/2020 14:30,30335df99aab219da0b3926452d021048759d3b8,2020-04-20T20:00:00Z,42,291,26553,26553,26553,05,2,0,2202,142,2344
+20200421,VT,818,12293,,41,,,,,,,A,4/21/2020 10:39,53b99af9d17285d742283ddafe2e89b1a1d127b7,2020-04-21T20:00:00Z,40,,13111,13111,13111,50,2,0,128,2,130
+20200421,WA,12550,151017,,503,,161,,,,,C,4/21/2020 02:59,72c5882dbb6372453785687f20d53d00bfb6e087,2020-04-21T20:00:00Z,640,,163567,163567,163567,53,11,0,4598,204,4802
+20200421,WI,4620,47841,219,358,1252,137,324,,,,A,4/21/2020 16:00,6cdefbfacc351b907e1ea1de684f852fdcecd4c7,2020-04-21T20:00:00Z,242,1252,52680,52461,52461,55,12,41,1238,121,1359
+20200421,WV,914,21849,,85,,42,,24,,330,B,4/21/2020 17:00,cb4c762bc70c394145d464a43173eb2615a00b50,2020-04-21T20:00:00Z,26,,22763,22763,22763,54,2,0,596,12,608
+20200421,WY,320,7301,,19,52,,,,,237,A,4/21/2020 16:20,1532019457f17b0c5b237147ba070dcde7a13747,2020-04-21T20:00:00Z,6,52,7621,7621,7621,56,4,1,228,7,235
+20200420,AK,321,9803,,46,36,,,,,161,A,4/20/2020 14:00,30dd3c48023b92f7b1983b7341941c5f7a3a0c70,2020-04-20T20:00:00Z,9,36,10124,10124,10124,02,0,0,227,2,229
+20200420,AL,5025,40875,,,641,,260,,157,,B,4/20/2020 00:00,f4f5f8be98d9e019afc9c29f5b47e5b2403c3f82,2020-04-20T20:00:00Z,167,641,45900,45900,45900,01,13,0,0,188,188
+20200420,AR,1923,24630,,93,291,,,24,57,749,A,4/20/2020 14:30,bb81f8dd15433a86866d3f7cf262a144eca45e58,2020-04-20T20:00:00Z,42,291,26553,26553,26553,05,2,0,2202,142,2344
 20200420,AS,0,3,17,,,,,,,,,4/6/2020 00:00,abbc5d7ad6f311a7bd3e4de2c62e46ff95264f53,2020-04-20T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200420,AZ,5064,49436,,637,,285,,181,,1155,,4/20/2020 00:00,411c36a044f30b6c67ad7e5fb5a782d9d7e424a5,2020-04-20T20:00:00Z,187,,54500,54500,54500,04,3,0,1375,135,1510
-20200420,CA,30978,259522,,4674,,1480,,,,,,4/19/2020 00:00,6f07c6c8362484f809358db5a249fe653b9b9eaf,2020-04-20T20:00:00Z,1208,,290500,290500,290500,06,42,0,8955,645,9600
-20200420,CO,9730,36465,,874,1813,,,,,,,4/19/2020 16:06,365df53672ba05101157f2f4b470f34c68a736e4,2020-04-20T20:00:00Z,422,1813,46195,46195,46195,08,11,16,1292,297,1589
-20200420,CT,19815,42991,,1919,,,,,,,,4/20/2020 16:00,7876a79152db0ac67f56fa9a7b66b70d35d7ae0e,2020-04-20T20:00:00Z,1331,,62806,62806,62806,09,245,0,2328,2265,4593
-20200420,DC,2927,11186,,402,,120,,69,,630,,4/19/2020 00:00,2fb2f581af92d81b083aad17ac9e2d4c5644ae0c,2020-04-20T20:00:00Z,105,,14113,14113,14113,11,9,0,280,134,414
-20200420,DE,2745,13725,,256,,,,,,495,,4/20/2020 12:00,1ebff752a308618a29e8a71d943c1f2631d608af,2020-04-20T20:00:00Z,72,,16470,16470,16470,10,5,0,1469,207,1676
-20200420,FL,26660,239565,1104,,4010,,,,,,,4/20/2020 09:28,d7c2a3eba5834daee3c4f893e004598a0d847cd5,2020-04-20T20:00:00Z,806,4010,267329,266225,266225,12,25,80,9482,664,10146
-20200420,GA,18947,65381,,,3550,,,,,,,4/20/2020 11:27,d5e93e44f71766cb299f41c81bbe00ca8b1cdacb,2020-04-20T20:00:00Z,733,3550,84328,84328,84328,13,46,86,3749,646,4395
+20200420,AZ,5064,49436,,637,,285,,181,,1155,B,4/20/2020 00:00,b5216bfdde34cf4504c3fb8c2ec20f16e07e1f0b,2020-04-20T20:00:00Z,187,,54500,54500,54500,04,3,0,1375,135,1510
+20200420,CA,30978,259522,,4674,,1480,,,,,B,4/19/2020 00:00,4d62a16f73d79a9551aea64d1b545e3f9ce29591,2020-04-20T20:00:00Z,1208,,290500,290500,290500,06,42,0,8955,645,9600
+20200420,CO,9730,36465,,874,1813,,,,,,A,4/19/2020 16:06,c33020dc18894e522006d672a95ba794217d515f,2020-04-20T20:00:00Z,422,1813,46195,46195,46195,08,11,16,1292,297,1589
+20200420,CT,19815,42991,,1919,,,,,,,A,4/20/2020 16:00,53c20b0beed446b253dc15b63b43dca1dae2a7c6,2020-04-20T20:00:00Z,1331,,62806,62806,62806,09,245,0,2328,2265,4593
+20200420,DC,2927,11186,,402,,120,,69,,630,A,4/19/2020 00:00,f5546fb0e438da62819d4c873da24defd055520b,2020-04-20T20:00:00Z,105,,14113,14113,14113,11,9,0,280,134,414
+20200420,DE,2745,13725,,256,,,,,,495,A,4/20/2020 12:00,8905237aedb46f4a5f55f28421d537726a3b2327,2020-04-20T20:00:00Z,72,,16470,16470,16470,10,5,0,1469,207,1676
+20200420,FL,26660,239565,1104,,4010,,,,,,A,4/20/2020 09:28,3656ac1db77419592df09ec362794e1f056c3c8f,2020-04-20T20:00:00Z,806,4010,267329,266225,266225,12,25,80,9482,664,10146
+20200420,GA,18947,65381,,,3550,,,,,,A,4/20/2020 11:27,0a13a48157b3cbad387a806aac1aebfd61079a4e,2020-04-20T20:00:00Z,733,3550,84328,84328,84328,13,46,86,3749,646,4395
 20200420,GU,133,991,,3,,2,,,,112,,4/20/2020 06:50,8db5d1e4f0ea3f4552cb79aad8d273dba76b7002,2020-04-20T20:00:00Z,5,,1124,1124,1124,66,0,0,48,0,48
-20200420,HI,580,23595,,,52,,,,,414,,4/19/2020 18:00,b28852937e7b3d876f6e59ac1ac95c38a0bda349,2020-04-20T20:00:00Z,10,52,24175,24175,24175,15,1,1,699,6,705
-20200420,IA,3159,22661,,214,,91,,58,,1235,,4/19/2020 12:00,46e06a67308165d073d94b5eb2b71f7716adeaf4,2020-04-20T20:00:00Z,79,,25820,25820,25820,19,4,0,1013,257,1270
-20200420,ID,1672,15773,,,151,,53,,,585,,4/19/2020 19:00,ae7b49ec2b0043e67c4097c49332eea3e547f098,2020-04-20T20:00:00Z,45,151,17445,17445,17445,16,1,0,572,4,576
-20200420,IL,31508,116850,,4599,,1239,,757,,,,4/20/2020 00:00,6c520fe5b563d6c56fd4b75f157e5296b425fd06,2020-04-20T20:00:00Z,1349,,148358,148358,148358,17,59,0,3889,1151,5040
-20200420,IN,11686,52953,,,,669,,353,,,,4/19/2020 23:59,85400371b20abe61fdfc09f836b22474c49f571c,2020-04-20T20:00:00Z,569,,64639,64639,64639,18,7,0,3021,476,3497
-20200420,KS,1986,16775,,,405,,,,,,,4/20/2020 12:00,8383de3227556f101a37d24eb25f0d81277ecb1a,2020-04-20T20:00:00Z,100,405,18761,18761,18761,20,8,15,494,137,631
-20200420,KY,2960,29612,,274,1059,155,534,,,1174,,4/19/2020 17:00,ba5c6185610097eb459abd7ab76ff71537f5ae01,2020-04-20T20:00:00Z,148,1059,32572,32572,32572,21,4,0,94,253,347
-20200420,LA,24523,111588,,1794,,,,332,,,,4/20/2020 13:00,ac7b9c46bcc1a2abd43605141e9ff1ed20d5fa6b,2020-04-20T20:00:00Z,1328,,136111,136111,136111,22,32,0,168,595,763
-20200420,MA,41416,136046,,3872,3872,987,,,,,,4/19/2020 16:00,3dfbf5e4b6b2a64b441711922cc587e3283e9752,2020-04-20T20:00:00Z,2303,3872,177462,177462,177462,25,157,83,6751,1596,8347
-20200420,MD,13684,57713,,,3014,,,,,917,,4/20/2020 10:00,3475a1ffe974706f7ae9e6c0f391bd3035dfaa24,2020-04-20T20:00:00Z,582,3014,71397,71397,71397,24,34,128,2652,854,3506
-20200420,ME,875,14076,,39,138,16,,9,,414,,4/20/2020 11:15,8588b91cc85a7063ff65d2447fc780be0f20b004,2020-04-20T20:00:00Z,35,138,14951,14951,14951,23,1,2,0,8,8
-20200420,MI,32000,81798,,3374,,1346,,1102,,3237,,4/20/2020 11:00,6248971313af6a24ce23b6b60602266031ce794c,2020-04-20T20:00:00Z,2468,,113798,113798,113798,26,77,0,3561,576,4137
-20200420,MN,2470,44380,,237,602,126,241,,,1202,,4/20/2020 12:00,b26b8cb444089911d325030689e5ded2e29e6c51,2020-04-20T20:00:00Z,143,602,46850,46850,46850,27,9,28,1020,114,1134
-20200420,MO,5807,50206,,873,,,,,,,,4/20/2020 15:00,2ec655a91685449b741cd911572cf802d2f50c37,2020-04-20T20:00:00Z,177,,56013,56013,56013,29,1,0,1964,140,2104
+20200420,HI,580,23595,,,52,,,,,414,A,4/19/2020 18:00,ed2c32504d71ba76bfa7d68d68aae0c95c0f50a4,2020-04-20T20:00:00Z,10,52,24175,24175,24175,15,1,1,699,6,705
+20200420,IA,3159,22661,,214,,91,,58,,1235,A,4/19/2020 12:00,efe158e52f181c09d278ba997c195e1c8495932a,2020-04-20T20:00:00Z,79,,25820,25820,25820,19,4,0,1013,257,1270
+20200420,ID,1672,15773,,,151,,53,,,585,A,4/19/2020 19:00,f8fe7e4f1a3a0b5ee1d0e1b2adb45c850c59f24f,2020-04-20T20:00:00Z,45,151,17445,17445,17445,16,1,0,572,4,576
+20200420,IL,31508,116850,,4599,,1239,,757,,,A,4/20/2020 00:00,583888fe4cde2d86f0ccd133a3f338a70ca2b7fe,2020-04-20T20:00:00Z,1349,,148358,148358,148358,17,59,0,3889,1151,5040
+20200420,IN,11686,52953,,,,669,,353,,,B,4/19/2020 23:59,a7044248ca8965900a72d61c0b451eadaee3e04c,2020-04-20T20:00:00Z,569,,64639,64639,64639,18,7,0,3021,476,3497
+20200420,KS,1986,16775,,,405,,,,,,B,4/20/2020 12:00,8a7676f0eb1b9233e0f2b1538dc2cd7d904414bb,2020-04-20T20:00:00Z,100,405,18761,18761,18761,20,8,15,494,137,631
+20200420,KY,2960,29612,,274,1059,155,534,,,1174,A,4/19/2020 17:00,3b8f16f73872913ae958b42672a3bedc64d0b540,2020-04-20T20:00:00Z,148,1059,32572,32572,32572,21,4,0,94,253,347
+20200420,LA,24523,111588,,1794,,,,332,,,A,4/20/2020 13:00,38abf630dad92ebdb931c40d3c1716294e651e24,2020-04-20T20:00:00Z,1328,,136111,136111,136111,22,32,0,168,595,763
+20200420,MA,41416,136046,,3872,3872,987,,,,,B,4/19/2020 16:00,b0b76a2bc89eab3190b9fdeaf955c35c1a52c82e,2020-04-20T20:00:00Z,2303,3872,177462,177462,177462,25,157,83,6751,1596,8347
+20200420,MD,13684,57713,,,3014,,,,,917,A,4/20/2020 10:00,eba3c9c49d453b7c1f6842ecee003e64cbeebd8e,2020-04-20T20:00:00Z,582,3014,71397,71397,71397,24,34,128,2652,854,3506
+20200420,ME,875,14076,,39,138,16,,9,,414,A,4/20/2020 11:15,beb8d967cbc0ff9345f35494afe2651d2c990a3d,2020-04-20T20:00:00Z,35,138,14951,14951,14951,23,1,2,0,8,8
+20200420,MI,32000,81798,,3374,,1346,,1102,,3237,B,4/20/2020 11:00,ac04a67cda8fbbc4db201cc16cc9e18cde447fcf,2020-04-20T20:00:00Z,2468,,113798,113798,113798,26,77,0,3561,576,4137
+20200420,MN,2470,44380,,237,602,126,241,,,1202,A,4/20/2020 12:00,a3cd468a3e4adc6d0abbf7c03923525f57bf4ace,2020-04-20T20:00:00Z,143,602,46850,46850,46850,27,9,28,1020,114,1134
+20200420,MO,5807,50206,,873,,,,,,,A,4/20/2020 15:00,540cce0f343724ac39beacb4724768faa22863a5,2020-04-20T20:00:00Z,177,,56013,56013,56013,29,1,0,1964,140,2104
 20200420,MP,14,51,,,,,,,,11,,4/20/2020 00:00,143a2d6edbe1f7695036432c74441ee6f2b96e8f,2020-04-20T20:00:00Z,2,,65,65,65,69,0,0,9,0,9
-20200420,MS,4512,46922,,548,819,146,,89,,,,4/19/2020 19:00,e567ecb7f268e5d8c7e9f556b7ae1e0712257ce6,2020-04-20T20:00:00Z,169,819,51434,51434,51434,28,10,11,12131,238,12369
-20200420,MT,433,10618,,19,57,,,,,243,,4/20/2020 11:00,ee0b7d8f3b3b3a1c8cdbcfafeea95227d716635f,2020-04-20T20:00:00Z,10,57,11051,11051,11051,30,0,2,153,0,153
-20200420,NC,6764,72720,,373,,,,,,,,4/20/2020 10:35,91ca0459d116eaf65c5f00c11b1648874f869338,2020-04-20T20:00:00Z,179,,79484,79484,79484,37,7,0,441,271,712
-20200420,ND,627,14120,,17,53,,,,,189,,4/20/2020 13:00,178302e1bc23570f1d704e1ab214b18789b0003e,2020-04-20T20:00:00Z,13,53,14747,14747,14747,38,3,2,1075,42,1117
-20200420,NE,1474,14206,,,,,,,,,,4/19/2020 19:45,4ad7a5cfa5ff44d4f1b4cb27e8a38371315daca3,2020-04-20T20:00:00Z,28,,15680,15680,15680,31,0,0,918,187,1105
-20200420,NH,1392,12726,298,79,198,,,,,521,,4/19/2020 09:00,9dd17730e7443ec6456e912f9c021617673eb87e,2020-04-20T20:00:00Z,41,198,14416,14118,14118,33,3,6,644,50,694
-20200420,NJ,88806,89251,,6986,,2018,,1594,,,,4/20/2020 13:00,a99100c920a34c1060d0966c464ff3c18cc3f9ea,2020-04-20T20:00:00Z,4377,,178057,178057,178057,34,175,0,3864,3505,7369
-20200420,NM,1845,35197,,103,274,,,,,487,,4/19/2020 18:46,7b929bf6e9cd1867820c5b91a697da801f9ac90b,2020-04-20T20:00:00Z,55,274,37042,37042,37042,35,2,16,363,47,410
-20200420,NV,3830,28517,,,,,,,,,,4/20/2020 10:00,200b7fcdbfb4136ccb949cccc63fc7650dbe484d,2020-04-20T20:00:00Z,158,,32347,32347,32347,32,3,0,647,102,749
-20200420,NY,247512,386349,,16103,55188,5016,,,,39085,,4/20/2020 00:00,798b9ffa09b1ede6a173169110f442f94553dc93,2020-04-20T20:00:00Z,14347,55188,633861,633861,633861,36,478,1379,11580,4726,16306
-20200420,OH,12919,77920,,,2653,,798,,,,,4/20/2020 14:00,8d6f68d13c67a217a5fc2bf3935ffdfc3dc6eec5,2020-04-20T20:00:00Z,509,2653,90839,90839,90839,39,38,88,2223,1317,3540
-20200420,OK,2680,32966,,307,541,136,,,,1614,,4/20/2020 00:00,28b043a264ebad6391d4f1652dd0d1fdc1725f1d,2020-04-20T20:00:00Z,143,541,35646,35646,35646,40,3,0,0,81,81
-20200420,OR,1956,38089,,303,465,74,,35,,,,4/20/2020 11:00,5b84e7c3371aebc81032c8a1f6f154dedb018949,2020-04-20T20:00:00Z,75,465,40045,40045,40045,41,1,9,961,46,1007
-20200420,PA,33232,129720,,2701,,,,659,,,,4/20/2020 12:00,63419f88b1ac343af3f5d79d94980872b049cabc,2020-04-20T20:00:00Z,1204,,162952,162952,162952,42,92,0,3150,948,4098
-20200420,PR,1252,8486,1895,,,,,,,,,4/20/2020 06:30,d23a593f3b2888182290c6b16c71dc2afb770a7d,2020-04-20T20:00:00Z,63,,11633,9738,9738,72,1,0,206,39,245
-20200420,RI,5098,31990,,297,629,62,,45,,267,,4/20/2020 00:00,a089ae309a546193ecc4b65e73d742badc42368a,2020-04-20T20:00:00Z,175,629,37088,37088,37088,44,11,24,1997,343,2340
-20200420,SC,4377,36103,,,776,,,,,2063,,4/19/2020 15:30,5f4aac3db280003a1e8593459894bb8708f2b402,2020-04-20T20:00:00Z,120,776,40480,40480,40480,45,0,0,0,0,0
-20200420,SD,1685,10641,0,,87,,,,,709,,4/19/2020 18:00,691bb877f707b2067104f8ccfba2184b8499e7e1,2020-04-20T20:00:00Z,7,87,12326,12326,12326,46,0,13,214,50,264
-20200420,TN,7238,93451,,,730,,,,,3575,,4/20/2020 15:00,ce6142a566bbb6a27c972bd3d9083b21cc02963d,2020-04-20T20:00:00Z,152,730,100689,100689,100689,47,4,6,3423,168,3591
-20200420,TX,19458,170936,,1411,,,,,,5706,,4/20/2020 12:45,dba2bb42ea8a25b8e70831b0330c85defe415249,2020-04-20T20:00:00Z,495,,190394,190394,190394,48,18,0,7149,535,7684
-20200420,UT,3213,65098,,,268,,,,,776,,4/20/2020 15:00,82ca91120eab8ee3ad01f888295cbb7589d8c4fb,2020-04-20T20:00:00Z,28,268,68311,68311,68311,49,1,9,4612,144,4756
-20200420,VA,8990,47745,468,1296,1500,396,,237,,1324,,4/20/2020 00:00,df767bc9297ca9756089d9eda25f8a80e585afc7,2020-04-20T20:00:00Z,300,1500,57203,56735,56735,51,23,78,1549,453,2002
+20200420,MS,4512,46922,,548,819,146,,89,,,A,4/19/2020 19:00,b734c4f702a37b03450b6d3d99b6bf29dbd21377,2020-04-20T20:00:00Z,169,819,51434,51434,51434,28,10,11,12131,238,12369
+20200420,MT,433,10618,,19,57,,,,,243,A,4/20/2020 11:00,f54d522c346625fb599af8de28975eac874c9f0a,2020-04-20T20:00:00Z,10,57,11051,11051,11051,30,0,2,153,0,153
+20200420,NC,6764,72720,,373,,,,,,,A,4/20/2020 10:35,cba31b0de262f1285f0e5e73075bc925d94d897c,2020-04-20T20:00:00Z,179,,79484,79484,79484,37,7,0,441,271,712
+20200420,ND,627,14120,,17,53,,,,,189,B,4/20/2020 13:00,908db4b086c4b63d6b9a9c88ab4bb4b3618073af,2020-04-20T20:00:00Z,13,53,14747,14747,14747,38,3,2,1075,42,1117
+20200420,NE,1474,14206,,,,,,,,,A,4/19/2020 19:45,c8a484879646349082118b52e561ca1c1d75c03c,2020-04-20T20:00:00Z,28,,15680,15680,15680,31,0,0,918,187,1105
+20200420,NH,1392,12726,298,79,198,,,,,521,B,4/19/2020 09:00,ad86cc0d4840ae00f043e959fd024d6e370fb666,2020-04-20T20:00:00Z,41,198,14416,14118,14118,33,3,6,644,50,694
+20200420,NJ,88806,89251,,6986,,2018,,1594,,,A,4/20/2020 13:00,ec5aa56b0d559cbb26683575718e12c6802c8d60,2020-04-20T20:00:00Z,4377,,178057,178057,178057,34,175,0,3864,3505,7369
+20200420,NM,1845,35197,,103,274,,,,,487,A,4/19/2020 18:46,3b8e585db8418dce8dfc9c53b4adb6408a199c4b,2020-04-20T20:00:00Z,55,274,37042,37042,37042,35,2,16,363,47,410
+20200420,NV,3830,28517,,,,,,,,,A,4/20/2020 10:00,f83e1119b54c8cb600d1538ea8709592bc664db7,2020-04-20T20:00:00Z,158,,32347,32347,32347,32,3,0,647,102,749
+20200420,NY,247512,386349,,16103,55188,5016,,,,39085,A,4/20/2020 00:00,e5769a5285400a82169840a149ddbb3f54394b58,2020-04-20T20:00:00Z,14347,55188,633861,633861,633861,36,478,1379,11580,4726,16306
+20200420,OH,12919,77920,,,2653,,798,,,,B,4/20/2020 14:00,c0768162cc123ef583fa656ba982394b0b837e80,2020-04-20T20:00:00Z,509,2653,90839,90839,90839,39,38,88,2223,1317,3540
+20200420,OK,2680,32966,,307,541,136,,,,1614,B,4/20/2020 00:00,d5c2f362df76480860a6ea7c9fae6ebb1c799b0f,2020-04-20T20:00:00Z,143,541,35646,35646,35646,40,3,0,0,81,81
+20200420,OR,1956,38089,,303,465,74,,35,,,A,4/20/2020 11:00,b04e183344652e70a88da9d35894b469dfe60993,2020-04-20T20:00:00Z,75,465,40045,40045,40045,41,1,9,961,46,1007
+20200420,PA,33232,129720,,2701,,,,659,,,A,4/20/2020 12:00,0fbe6948410331db5f1677132c2dd2e1b02e612f,2020-04-20T20:00:00Z,1204,,162952,162952,162952,42,92,0,3150,948,4098
+20200420,PR,1252,8486,1895,,,,,,,,A,4/20/2020 06:30,36eecf590ddf959b3d5bed3a9d59d77a180fe60c,2020-04-20T20:00:00Z,63,,11633,9738,9738,72,1,0,206,39,245
+20200420,RI,5098,31990,,297,629,62,,45,,267,B,4/20/2020 00:00,cca8525098c08ad59a3f580e9c5c0f49f834d197,2020-04-20T20:00:00Z,175,629,37088,37088,37088,44,11,24,1997,343,2340
+20200420,SC,4377,36103,,,776,,,,,2063,B,4/19/2020 15:30,4800dca459607cac7fc4378eb8a43661cb3f3e0c,2020-04-20T20:00:00Z,120,776,40480,40480,40480,45,0,0,0,0,0
+20200420,SD,1685,10641,0,,87,,,,,709,A,4/19/2020 18:00,3e8aec97e078213afdd902ff843d4e12b4076972,2020-04-20T20:00:00Z,7,87,12326,12326,12326,46,0,13,214,50,264
+20200420,TN,7238,93451,,,730,,,,,3575,A,4/20/2020 15:00,a4ee2552d990e0f9d543a9e015f399466e751f7d,2020-04-20T20:00:00Z,152,730,100689,100689,100689,47,4,6,3423,168,3591
+20200420,TX,19458,170936,,1411,,,,,,5706,A,4/20/2020 12:45,1832d8a3e16628cebf0685e1d7a88d96be6ad83a,2020-04-20T20:00:00Z,495,,190394,190394,190394,48,18,0,7149,535,7684
+20200420,UT,3213,65098,,,268,,,,,776,A,4/20/2020 15:00,dc22e4988a5fddebe2ebfe33ea6d37fe51d22d88,2020-04-20T20:00:00Z,28,268,68311,68311,68311,49,1,9,4612,144,4756
+20200420,VA,8990,47745,468,1296,1500,396,,237,,1324,A,4/20/2020 00:00,6d6994f7dd160ccfd3ff00ca1dcadfc51ab87c1a,2020-04-20T20:00:00Z,300,1500,57203,56735,56735,51,23,78,1549,453,2002
 20200420,VI,53,554,18,,,,,,,48,,4/19/2020 20:30,4f1c4886474a3975fd88ca3976b6a5e4acd0d712,2020-04-20T20:00:00Z,3,,625,607,607,78,0,0,6,0,6
-20200420,VT,816,12165,,49,,,,,,15,,4/20/2020 10:32,0a3ca3ff536f0d5904a7e8dbe96a2693f7f641d3,2020-04-20T20:00:00Z,38,,12981,12981,12981,50,0,0,251,4,255
-20200420,WA,12346,146419,,403,,122,,,,,,4/19/2020 02:59,b5d2d21559f0a66255a632ae1ee27ec5d9801599,2020-04-20T20:00:00Z,629,,158765,158765,158765,53,14,0,4211,200,4411
-20200420,WI,4499,46603,237,406,1211,168,307,,,,,4/20/2020 16:00,1de4f555b3b4f41b33eaeb7bf926e1fb77503a83,2020-04-20T20:00:00Z,230,1211,51339,51102,51102,55,10,21,1280,153,1433
-20200420,WV,902,21253,,77,,37,,23,,290,,4/20/2020 10:00,9163e8558dc9f4c153c116eb87061ca2fed5b99a,2020-04-20T20:00:00Z,24,,22155,22155,22155,54,6,0,2085,39,2124
-20200420,WY,313,7073,,19,51,,,,,233,,4/19/2020 00:00,4a9753124b4c36498d2bb28b3acc0e24ada14c41,2020-04-20T20:00:00Z,2,51,7386,7386,7386,56,0,1,101,4,105
-20200419,AK,319,9576,,37,36,,,,,153,,4/18/2020 17:45,7bc981fe21e2c12b4779c131934cea1573a4288e,2020-04-19T20:00:00Z,9,36,9895,9895,9895,02,0,0,235,5,240
-20200419,AL,4837,40875,,,641,,260,,157,,,4/19/2020 00:00,efa1058bdc95b1024f356bbb3fc01981341e1495,2020-04-19T20:00:00Z,154,641,45712,45712,45712,01,8,21,2992,182,3174
-20200419,AR,1781,22428,,88,291,,,25,57,721,,4/19/2020 18:47,508b628f15181b73da02f36198dcd67bf0fa0a34,2020-04-19T20:00:00Z,40,291,24209,24209,24209,05,2,0,26,42,68
+20200420,VT,816,12165,,49,,,,,,15,A,4/20/2020 10:32,94895a1cc7838c236c120a7690d31118ed1b2201,2020-04-20T20:00:00Z,38,,12981,12981,12981,50,0,0,251,4,255
+20200420,WA,12346,146419,,403,,122,,,,,C,4/19/2020 02:59,8f001f205377c7603cab3fac0e037b5167a5c3f7,2020-04-20T20:00:00Z,629,,158765,158765,158765,53,14,0,4211,200,4411
+20200420,WI,4499,46603,237,406,1211,168,307,,,,A,4/20/2020 16:00,8062dc2a846905a0d02f8cc7df651c0abdce4b88,2020-04-20T20:00:00Z,230,1211,51339,51102,51102,55,10,21,1280,153,1433
+20200420,WV,902,21253,,77,,37,,23,,290,B,4/20/2020 10:00,1357215516a198143770e3746905b8e1167d1d95,2020-04-20T20:00:00Z,24,,22155,22155,22155,54,6,0,2085,39,2124
+20200420,WY,313,7073,,19,51,,,,,233,A,4/19/2020 00:00,cac3bf9e707fcc0a1212f5a098b58025505bbaf0,2020-04-20T20:00:00Z,2,51,7386,7386,7386,56,0,1,101,4,105
+20200419,AK,319,9576,,37,36,,,,,153,A,4/18/2020 17:45,569fd3a647b33e4e1a5f9cbeaacd3c1775fac110,2020-04-19T20:00:00Z,9,36,9895,9895,9895,02,0,0,235,5,240
+20200419,AL,4837,40875,,,641,,260,,157,,B,4/19/2020 00:00,0edbbe83d5ad6d22588b9e1a606322130f9d92ed,2020-04-19T20:00:00Z,154,641,45712,45712,45712,01,8,21,2992,182,3174
+20200419,AR,1781,22428,,88,291,,,25,57,721,A,4/19/2020 18:47,ae84614fc686051815d722eb411e893386d868ed,2020-04-19T20:00:00Z,40,291,24209,24209,24209,05,2,0,26,42,68
 20200419,AS,0,3,17,,,,,,,,,4/6/2020 00:00,293d9cc32587d91ec0d9be031db70699327b0c1b,2020-04-19T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200419,AZ,4929,48061,,631,,283,,187,,994,,4/19/2020 00:00,976fae4450bf0fb7b47d081cc6ec6d38a3f599a8,2020-04-19T20:00:00Z,184,,52990,52990,52990,04,7,0,1735,210,1945
-20200419,CA,30333,250567,7200,4731,,1457,,,,,,4/18/2020 00:00,9758ace59544751062aa611528d49130edcbd7ba,2020-04-19T20:00:00Z,1166,,288100,280900,280900,06,94,0,19864,1370,21234
-20200419,CO,9433,35173,,874,1797,,,,,,,4/19/2020 16:06,c6c8436e168ff701a5b87d3401a9053c0ed41707,2020-04-19T20:00:00Z,411,1797,44606,44606,44606,08,20,42,913,386,1299
-20200419,CT,17550,40663,,1938,,,,,,,,4/19/2020 17:00,cd86ac542aa4ecbd7301fddedafb57ee99ace65e,2020-04-19T20:00:00Z,1086,,58213,58213,58213,09,50,0,2010,741,2751
-20200419,DC,2793,10906,,313,,105,,79,,622,,4/18/2020 00:00,ce5e57c91c2f911d87211f02e10efdfc7e929891,2020-04-19T20:00:00Z,96,,13699,13699,13699,11,5,0,304,127,431
-20200419,DE,2538,12256,,249,,,,,,466,,4/18/2020 17:00,31ad5e9f87e3f4afa4c4d78b7db82488ab3f81ae,2020-04-19T20:00:00Z,67,,14794,14794,14794,10,6,0,562,215,777
-20200419,FL,25996,230083,1179,,3930,,,,,,,4/19/2020 16:12,1727b357ded9da7ff4b378fd43d9eb32b82b77b4,2020-04-19T20:00:00Z,781,3930,257258,256079,256079,12,27,88,8825,727,9552
-20200419,GA,18301,61632,,,3464,,,,,,,4/19/2020 21:34,125ca3e4504ea0a106dc62069660ea0f59caddd3,2020-04-19T20:00:00Z,687,3464,79933,79933,79933,13,14,44,5093,632,5725
+20200419,AZ,4929,48061,,631,,283,,187,,994,B,4/19/2020 00:00,980ec0db678e80d55372a542aa6c35027830cea1,2020-04-19T20:00:00Z,184,,52990,52990,52990,04,7,0,1735,210,1945
+20200419,CA,30333,250567,7200,4731,,1457,,,,,B,4/18/2020 00:00,56222d3bdcb2144d6086d1c3c2e7954fa8b94032,2020-04-19T20:00:00Z,1166,,288100,280900,280900,06,94,0,19864,1370,21234
+20200419,CO,9433,35173,,874,1797,,,,,,A,4/19/2020 16:06,c1a518ca81863af3e255f6e2e9f930c0569e88c0,2020-04-19T20:00:00Z,411,1797,44606,44606,44606,08,20,42,913,386,1299
+20200419,CT,17550,40663,,1938,,,,,,,A,4/19/2020 17:00,74655c4ea8570c760f68d19303254c80a46986d8,2020-04-19T20:00:00Z,1086,,58213,58213,58213,09,50,0,2010,741,2751
+20200419,DC,2793,10906,,313,,105,,79,,622,A,4/18/2020 00:00,81e579a0aa9313dd9b1935e17d10ca1339b9438b,2020-04-19T20:00:00Z,96,,13699,13699,13699,11,5,0,304,127,431
+20200419,DE,2538,12256,,249,,,,,,466,A,4/18/2020 17:00,9087c4ec73a2ac89e38b02af7bbae9ae12ff1e09,2020-04-19T20:00:00Z,67,,14794,14794,14794,10,6,0,562,215,777
+20200419,FL,25996,230083,1179,,3930,,,,,,A,4/19/2020 16:12,3b2b9bc60a3ffd34783ba751b973d6a4e31149c7,2020-04-19T20:00:00Z,781,3930,257258,256079,256079,12,27,88,8825,727,9552
+20200419,GA,18301,61632,,,3464,,,,,,A,4/19/2020 21:34,c96acdbcb9627262fd925795a493aec842a8d01b,2020-04-19T20:00:00Z,687,3464,79933,79933,79933,13,14,44,5093,632,5725
 20200419,GU,133,943,,6,,2,,,,112,,4/19/2020 05:00,fa3ab863f1ebcc0d4f2aad919cb44ff15975acd6,2020-04-19T20:00:00Z,5,,1076,1076,1076,66,0,0,0,0,0
-20200419,HI,574,22896,,,51,,,,,410,,4/19/2020 18:00,38fd90607f95d5e33f5aa969077aea0b30895fd7,2020-04-19T20:00:00Z,9,51,23470,23470,23470,15,0,3,1106,21,1127
-20200419,IA,2902,21648,,198,,86,,54,,1171,,4/18/2020 12:00,574865eec9202b86e6fc2581b22b42a542b6891e,2020-04-19T20:00:00Z,75,,24550,24550,24550,19,1,0,1214,389,1603
-20200419,ID,1668,15201,,,151,,53,,,520,,4/19/2020 19:00,aed23fa577b6a76bf93bcfb6c2a7eb7a9f054ce3,2020-04-19T20:00:00Z,44,151,16869,16869,16869,16,1,0,247,13,260
-20200419,IL,30357,112961,,4314,,1196,,749,,,,4/19/2020 00:00,496a5c8870649ef6ae06f2a4116b3fa8f2d8ef3e,2020-04-19T20:00:00Z,1290,,143318,143318,143318,17,31,0,4717,1197,5914
-20200419,IN,11210,49932,,,,649,,342,,,,4/18/2020 23:59,f7353117dfb4766a240471de85432255c143af04,2020-04-19T20:00:00Z,562,,61142,61142,61142,18,17,0,3700,569,4269
-20200419,KS,1849,16281,,,390,,,,,,,4/19/2020 12:00,a905d8ce397966dd590fee48956e4d0f3b3ab01b,2020-04-19T20:00:00Z,92,390,18130,18130,18130,20,6,7,395,59,454
-20200419,KY,2707,29518,,274,1059,155,534,,,1174,,4/19/2020 17:00,8e922441e15a7a18fe8100afff1d584aff57a413,2020-04-19T20:00:00Z,144,1059,32225,32225,32225,21,7,51,1444,185,1629
-20200419,LA,23928,111420,,1748,,,,349,,,,4/19/2020 13:00,a24dc5cfa43f86a1d614346a2f8964aa76a6f573,2020-04-19T20:00:00Z,1296,,135348,135348,135348,22,29,0,-2999,348,-2651
-20200419,MA,39820,129295,,3789,3789,987,,,,,,4/19/2020 16:00,01e5576d9447b14f0fb106377a449affdf04dca0,2020-04-19T20:00:00Z,2146,3789,169115,169115,169115,25,163,61,4691,2293,6984
-20200419,MD,12830,55061,,,2886,,,,,914,,4/19/2020 10:00,22bae13fd3d3c953a61f1f52b6081aa75d893bc9,2020-04-19T20:00:00Z,548,2886,67891,67891,67891,24,14,129,1999,522,2521
-20200419,ME,867,14076,,46,136,18,,9,,393,,4/19/2020 11:15,a7f3c0e10052e8a3fe36d9a18d1be73a0588e106,2020-04-19T20:00:00Z,34,136,14943,14943,14943,23,2,0,0,20,20
-20200419,MI,31424,78237,,3403,,1344,,1115,,3237,,4/19/2020 11:00,510c00ae93064a610a3a065aa67d63621eeca8e9,2020-04-19T20:00:00Z,2391,,109661,109661,109661,26,83,0,9301,633,9934
-20200419,MN,2356,43360,,228,574,116,226,,,1160,,4/19/2020 12:00,aaaf37e19cc7f5a9f4ade2662f5b5441cb1d103f,2020-04-19T20:00:00Z,134,574,45716,45716,45716,27,13,13,1305,143,1448
-20200419,MO,5667,48242,,875,,,,,,,,4/19/2020 15:00,d1dd4c4e4f00203c61fcb57f7d3fa11674b80a04,2020-04-19T20:00:00Z,176,,53909,53909,53909,29,1,0,0,150,150
+20200419,HI,574,22896,,,51,,,,,410,A,4/19/2020 18:00,f5d5297282dadec007427f163e1837b6a764a20b,2020-04-19T20:00:00Z,9,51,23470,23470,23470,15,0,3,1106,21,1127
+20200419,IA,2902,21648,,198,,86,,54,,1171,A,4/18/2020 12:00,b91fd70519ab5c1bb7dc10929fa3a500d373d355,2020-04-19T20:00:00Z,75,,24550,24550,24550,19,1,0,1214,389,1603
+20200419,ID,1668,15201,,,151,,53,,,520,A,4/19/2020 19:00,a777da1f168e1780556459506726adf5792163af,2020-04-19T20:00:00Z,44,151,16869,16869,16869,16,1,0,247,13,260
+20200419,IL,30357,112961,,4314,,1196,,749,,,A,4/19/2020 00:00,0fb2cae0ff5350cbfbf4d0891c4a1cbb2ef14bcd,2020-04-19T20:00:00Z,1290,,143318,143318,143318,17,31,0,4717,1197,5914
+20200419,IN,11210,49932,,,,649,,342,,,B,4/18/2020 23:59,1c8eeb40c1b34cf76c155504ffb737c1d65348b6,2020-04-19T20:00:00Z,562,,61142,61142,61142,18,17,0,3700,569,4269
+20200419,KS,1849,16281,,,390,,,,,,B,4/19/2020 12:00,80a42449030ccb8ef418f40c3bcd50cf06128690,2020-04-19T20:00:00Z,92,390,18130,18130,18130,20,6,7,395,59,454
+20200419,KY,2707,29518,,274,1059,155,534,,,1174,A,4/19/2020 17:00,cbbc8c4eb54b8bed3c367848ada9004f9ba3cb15,2020-04-19T20:00:00Z,144,1059,32225,32225,32225,21,7,51,1444,185,1629
+20200419,LA,23928,111420,,1748,,,,349,,,A,4/19/2020 13:00,96e4ade27ef5b0a8bb7174ec21847d75de056d37,2020-04-19T20:00:00Z,1296,,135348,135348,135348,22,29,0,-2999,348,-2651
+20200419,MA,39820,129295,,3789,3789,987,,,,,B,4/19/2020 16:00,f9be253a4b7da67584fddf961235fd5a86322eb7,2020-04-19T20:00:00Z,2146,3789,169115,169115,169115,25,163,61,4691,2293,6984
+20200419,MD,12830,55061,,,2886,,,,,914,A,4/19/2020 10:00,a6c152d3e1948a3a284659500e93ee5326944581,2020-04-19T20:00:00Z,548,2886,67891,67891,67891,24,14,129,1999,522,2521
+20200419,ME,867,14076,,46,136,18,,9,,393,A,4/19/2020 11:15,ea3c8c6aefd4f7f46a18825ea19ee0c7516f836c,2020-04-19T20:00:00Z,34,136,14943,14943,14943,23,2,0,0,20,20
+20200419,MI,31424,78237,,3403,,1344,,1115,,3237,B,4/19/2020 11:00,6c66546727d250f45fc000b77be67c14ef3eb506,2020-04-19T20:00:00Z,2391,,109661,109661,109661,26,83,0,9301,633,9934
+20200419,MN,2356,43360,,228,574,116,226,,,1160,A,4/19/2020 12:00,a5256ae1241000dde865c199d68100f7265aa5f2,2020-04-19T20:00:00Z,134,574,45716,45716,45716,27,13,13,1305,143,1448
+20200419,MO,5667,48242,,875,,,,,,,A,4/19/2020 15:00,44ebbe4ce36927e83468750f4784b100689ab315,2020-04-19T20:00:00Z,176,,53909,53909,53909,29,1,0,0,150,150
 20200419,MP,14,42,4,,,,,,,9,,4/19/2020 00:00,e12786d33112c0e47c27d0260fc7e44b1dd56717,2020-04-19T20:00:00Z,2,,60,56,56,69,0,0,0,0,0
-20200419,MS,4274,34791,,,808,138,,79,,,,4/18/2020 19:00,7838d9b66333e179b058421508065bc40ee75146,2020-04-19T20:00:00Z,159,808,39065,39065,39065,28,7,26,0,300,300
-20200419,MT,433,10465,,18,55,,,,,243,,4/19/2020 11:40,e57d4d451478c94bc5fcfb0a414cf72193a40e3d,2020-04-19T20:00:00Z,10,55,10898,10898,10898,30,0,0,322,7,329
-20200419,NC,6493,72279,,465,,,,,,,,4/19/2020 11:00,e6c19b5e6bba776f9a49eef693f9ab3a93ef506b,2020-04-19T20:00:00Z,172,,78772,78772,78772,37,8,0,2208,353,2561
-20200419,ND,585,13045,,15,51,,,,,189,,4/19/2020 13:00,1fafb7c0397376694739bfd38f135fc861698c7d,2020-04-19T20:00:00Z,10,51,13630,13630,13630,38,1,4,610,57,667
-20200419,NE,1287,13288,,,,,,,,,,4/19/2020 19:45,f4c17d00d078d9628bf9afc165e19015694947a5,2020-04-19T20:00:00Z,28,,14575,14575,14575,31,4,0,749,149,898
-20200419,NH,1342,12082,316,85,192,,,,,513,,4/19/2020 09:00,4c07cb72157fe68fc60f87079548c53ac405bc68,2020-04-19T20:00:00Z,38,192,13740,13424,13424,33,1,2,517,55,572
-20200419,NJ,85301,85387,,7494,,1940,,1628,,,,4/19/2020 13:00,88eda00d2effccf3ae3dc08cb9d1e3427f6907ab,2020-04-19T20:00:00Z,4202,,170688,170688,170688,34,132,0,4271,3881,8152
-20200419,NM,1798,34834,,92,258,,,,,465,,4/19/2020 19:46,32c005231cbaba98e7a30ce9bd171bc1cd5fee60,2020-04-19T20:00:00Z,53,258,36632,36632,36632,35,2,16,932,87,1019
-20200419,NV,3728,27870,,,,,,,,,,4/19/2020 11:00,fc7cbf08b7d69710fabf439c6201d4fb7152c033,2020-04-19T20:00:00Z,155,,31598,31598,31598,32,4,0,745,102,847
-20200419,NY,242786,374769,,16213,53809,5016,,,,37596,,4/19/2020 00:00,bd6efecfa3db32b751d8d1068903e759f23c2672,2020-04-19T20:00:00Z,13869,53809,617555,617555,617555,36,507,1384,14969,6054,21023
-20200419,OH,11602,75697,,,2565,,765,,,,,4/19/2020 14:00,0850978e1a25c8b8b6c7d86b9fd6bf46968c817f,2020-04-19T20:00:00Z,471,2565,87299,87299,87299,39,20,46,6878,1380,8258
-20200419,OK,2599,32966,,307,541,136,,,,1575,,4/19/2020 00:00,f1917376d1d5d39f26e0540155bfc7824562ff8e,2020-04-19T20:00:00Z,140,541,35565,35565,35565,40,1,0,0,29,29
-20200419,OR,1910,37128,,290,456,74,,37,,,,4/19/2020 11:00,675a9fffa0032f8817f8103a55965cf59114cca7,2020-04-19T20:00:00Z,74,456,39038,39038,39038,41,2,7,1389,66,1455
-20200419,PA,32284,126570,,2634,,,,657,,,,4/19/2020 13:00,e10e7b83e8959cff0ad38f7bcdc1bdac9e10e407,2020-04-19T20:00:00Z,1112,,158854,158854,158854,42,276,0,3674,1215,4889
-20200419,PR,1213,8280,1839,,,,,,,,,4/19/2020 07:00,8e4c73fe3af8fca340890d34bf522c9cbc0effbc,2020-04-19T20:00:00Z,62,,11332,9493,9493,72,2,0,225,95,320
-20200419,RI,4755,29993,,298,605,66,,37,,244,,4/19/2020 00:00,a779e9e435cd18edc7e51a821e26ea205910077a,2020-04-19T20:00:00Z,164,605,34748,34748,34748,44,14,27,1658,276,1934
-20200419,SC,4377,36103,,,776,,,,,2633,,4/19/2020 15:30,be2bb01b3e798196a3f603562c119e6141d965dd,2020-04-19T20:00:00Z,120,776,40480,40480,40480,45,1,0,1516,131,1647
-20200419,SD,1635,10427,0,,74,,,,,646,,4/19/2020 12:30,f60e3a0e2ef9d98edcb288a307c35b2b7d3d5b86,2020-04-19T20:00:00Z,7,74,12062,12062,12062,46,0,6,309,93,402
-20200419,TN,7070,90028,,,724,,,,,3344,,4/19/2020 15:00,83aa1f40b8c6b1b8717ee52b80b7f71edbfe3293,2020-04-19T20:00:00Z,148,724,97098,97098,97098,47,3,5,6204,308,6512
-20200419,TX,18923,163787,,1471,,,,,,5334,,4/19/2020 13:00,81aec6e48412837de9ec8806e1a1298b49c022f5,2020-04-19T20:00:00Z,477,,182710,182710,182710,48,24,0,5808,663,6471
-20200419,UT,3069,60486,,,259,,,,,679,,4/19/2020 15:00,7750d83b2e7b8d3ea0fccee3dedeab4edcfc7eb1,2020-04-19T20:00:00Z,27,259,63555,63555,63555,49,2,8,3473,138,3611
-20200419,VA,8537,46196,499,1319,1422,388,,231,,1267,,4/19/2020 00:00,e5683b927e9bc67fb8b5dd6a49cff9b8547604fc,2020-04-19T20:00:00Z,277,1422,55232,54733,54733,51,19,126,2318,484,2802
+20200419,MS,4274,34791,,,808,138,,79,,,A,4/18/2020 19:00,01a63fe694b592c138ba4d52a94516e781e6c369,2020-04-19T20:00:00Z,159,808,39065,39065,39065,28,7,26,0,300,300
+20200419,MT,433,10465,,18,55,,,,,243,A,4/19/2020 11:40,62cfb766c33dfcdaaa482f39585e261c63f9e730,2020-04-19T20:00:00Z,10,55,10898,10898,10898,30,0,0,322,7,329
+20200419,NC,6493,72279,,465,,,,,,,A,4/19/2020 11:00,d3fca6428ed30931e642397804cf0a59e9b0ba76,2020-04-19T20:00:00Z,172,,78772,78772,78772,37,8,0,2208,353,2561
+20200419,ND,585,13045,,15,51,,,,,189,B,4/19/2020 13:00,030542b9e991bc5778f546d0408d280dad1ef1f5,2020-04-19T20:00:00Z,10,51,13630,13630,13630,38,1,4,610,57,667
+20200419,NE,1287,13288,,,,,,,,,A,4/19/2020 19:45,acc3eb557a9bcd0dc7e3c7b2a4a8db77d9de2a31,2020-04-19T20:00:00Z,28,,14575,14575,14575,31,4,0,749,149,898
+20200419,NH,1342,12082,316,85,192,,,,,513,B,4/19/2020 09:00,5a18c571738b1c56001c22ba7cbb29227a32bc94,2020-04-19T20:00:00Z,38,192,13740,13424,13424,33,1,2,517,55,572
+20200419,NJ,85301,85387,,7494,,1940,,1628,,,A,4/19/2020 13:00,8dc8cc4c3780834d9ecf0fef1795c4c343867daf,2020-04-19T20:00:00Z,4202,,170688,170688,170688,34,132,0,4271,3881,8152
+20200419,NM,1798,34834,,92,258,,,,,465,A,4/19/2020 19:46,30fe168033cce666159e8eaec31501b79b388c94,2020-04-19T20:00:00Z,53,258,36632,36632,36632,35,2,16,932,87,1019
+20200419,NV,3728,27870,,,,,,,,,A,4/19/2020 11:00,558d86313668a0014e841fff7759dcc0086998a8,2020-04-19T20:00:00Z,155,,31598,31598,31598,32,4,0,745,102,847
+20200419,NY,242786,374769,,16213,53809,5016,,,,37596,A,4/19/2020 00:00,c07d777fa2eb54c916a185604eea75744ac21d75,2020-04-19T20:00:00Z,13869,53809,617555,617555,617555,36,507,1384,14969,6054,21023
+20200419,OH,11602,75697,,,2565,,765,,,,B,4/19/2020 14:00,b2ffdfd36daec3b653ae537cfbd65384265fa651,2020-04-19T20:00:00Z,471,2565,87299,87299,87299,39,20,46,6878,1380,8258
+20200419,OK,2599,32966,,307,541,136,,,,1575,B,4/19/2020 00:00,e8cc99a80920f7764b89be62b51f4235cff97fea,2020-04-19T20:00:00Z,140,541,35565,35565,35565,40,1,0,0,29,29
+20200419,OR,1910,37128,,290,456,74,,37,,,A,4/19/2020 11:00,e67ba0a19b06b5c11ded8ee3c9de44f1ef407fa5,2020-04-19T20:00:00Z,74,456,39038,39038,39038,41,2,7,1389,66,1455
+20200419,PA,32284,126570,,2634,,,,657,,,A,4/19/2020 13:00,24719e130c3e8e24579a61df4c14e6a427f4b3c2,2020-04-19T20:00:00Z,1112,,158854,158854,158854,42,276,0,3674,1215,4889
+20200419,PR,1213,8280,1839,,,,,,,,A,4/19/2020 07:00,37f5a90bb6cafaa45f9a09c65db7a195479865e1,2020-04-19T20:00:00Z,62,,11332,9493,9493,72,2,0,225,95,320
+20200419,RI,4755,29993,,298,605,66,,37,,244,B,4/19/2020 00:00,bbcf2cbdf1e8c5b0ddf75e34852f8c97e949dfb0,2020-04-19T20:00:00Z,164,605,34748,34748,34748,44,14,27,1658,276,1934
+20200419,SC,4377,36103,,,776,,,,,2633,B,4/19/2020 15:30,29eb3a2ca7ecc4f977f091d02b1df24904a179a1,2020-04-19T20:00:00Z,120,776,40480,40480,40480,45,1,0,1516,131,1647
+20200419,SD,1635,10427,0,,74,,,,,646,A,4/19/2020 12:30,9124e5cae7642160658d01a62a52bd10eed076da,2020-04-19T20:00:00Z,7,74,12062,12062,12062,46,0,6,309,93,402
+20200419,TN,7070,90028,,,724,,,,,3344,A,4/19/2020 15:00,19d9b34c662abd6402b05fd05b914667b6722d0f,2020-04-19T20:00:00Z,148,724,97098,97098,97098,47,3,5,6204,308,6512
+20200419,TX,18923,163787,,1471,,,,,,5334,A,4/19/2020 13:00,30c45b94d19beabfcb1ed7e182b48fe7ea3d782e,2020-04-19T20:00:00Z,477,,182710,182710,182710,48,24,0,5808,663,6471
+20200419,UT,3069,60486,,,259,,,,,679,A,4/19/2020 15:00,9cd5bba336203ce021f5b08eca3f2a9099381efe,2020-04-19T20:00:00Z,27,259,63555,63555,63555,49,2,8,3473,138,3611
+20200419,VA,8537,46196,499,1319,1422,388,,231,,1267,A,4/19/2020 00:00,28c5a7800b440e3fb5029cdcbdcb375b435ddcae,2020-04-19T20:00:00Z,277,1422,55232,54733,54733,51,19,126,2318,484,2802
 20200419,VI,53,548,22,,,,,,,48,,4/19/2020 20:30,7e79b0e1bb08a64cfd5ed34be2e987c36e67a43b,2020-04-19T20:00:00Z,3,,623,601,601,78,0,0,158,0,158
-20200419,VT,812,11914,,53,,,,,,15,,4/19/2020 10:12,21aff909f3b2a5b8344aec84086466f258de83f9,2020-04-19T20:00:00Z,38,,12726,12726,12726,50,0,0,151,9,160
-20200419,WA,12146,142208,,586,,193,,,,,,4/18/2020 02:59,f11494da2405fec0dd85be3a225240d9b2ed4f55,2020-04-19T20:00:00Z,615,,154354,154354,154354,53,17,0,1399,259,1658
-20200419,WI,4346,45323,248,397,1190,162,307,,,,,4/19/2020 12:57,c63732ee01bc89f9b118bd06ec9954e8331f1e17,2020-04-19T20:00:00Z,220,1190,49917,49669,49669,55,9,14,1361,147,1508
-20200419,WV,863,19168,,72,,37,,25,,265,,4/19/2020 17:00,90b92de541a33e780aaba135bad43c6b7deb388d,2020-04-19T20:00:00Z,18,,20031,20031,20031,54,2,0,513,78,591
-20200419,WY,309,6972,,19,50,,,,,227,,4/19/2020 00:00,46786399cffcd1756263992deb87e62f8d1c05bc,2020-04-19T20:00:00Z,2,50,7281,7281,7281,56,0,0,755,4,759
-20200418,AK,314,9341,,39,36,,,,,147,,4/18/2020 14:15,34d69de12bed9a2feb700cb5c9b3fd361a6347e1,2020-04-18T20:00:00Z,9,36,9655,9655,9655,02,0,0,200,5,205
-20200418,AL,4655,37883,,,620,,247,,148,,,4/18/2020 00:00,f29e9ae64597d9aa1c8afe999c02ef51ba9fc0f8,2020-04-18T20:00:00Z,146,620,42538,42538,42538,01,2,26,4565,125,4690
-20200418,AR,1739,22402,,86,291,,,22,57,703,,4/17/2020 19:00,7f005ba40f83851655982e94bcfe6c422a97236d,2020-04-18T20:00:00Z,38,291,24141,24141,24141,05,1,291,603,44,647
+20200419,VT,812,11914,,53,,,,,,15,A,4/19/2020 10:12,fc5421f00124a0f5b163b2e910710a89066cfc7c,2020-04-19T20:00:00Z,38,,12726,12726,12726,50,0,0,151,9,160
+20200419,WA,12146,142208,,586,,193,,,,,C,4/18/2020 02:59,bcd66f9f1ee202cb5c2775c0e84c38d32e029fd5,2020-04-19T20:00:00Z,615,,154354,154354,154354,53,17,0,1399,259,1658
+20200419,WI,4346,45323,248,397,1190,162,307,,,,A,4/19/2020 12:57,ffac3fc7fa9a931bbcc45021b0bea59b70162aee,2020-04-19T20:00:00Z,220,1190,49917,49669,49669,55,9,14,1361,147,1508
+20200419,WV,863,19168,,72,,37,,25,,265,B,4/19/2020 17:00,efa1761aa288fd532175b06e5f54b8ee2cd9147e,2020-04-19T20:00:00Z,18,,20031,20031,20031,54,2,0,513,78,591
+20200419,WY,309,6972,,19,50,,,,,227,A,4/19/2020 00:00,0c6344538df4134f81456c15f1c0a684e071ab64,2020-04-19T20:00:00Z,2,50,7281,7281,7281,56,0,0,755,4,759
+20200418,AK,314,9341,,39,36,,,,,147,A,4/18/2020 14:15,4a258b3ac6ee52fadca070fecba2d54592793c39,2020-04-18T20:00:00Z,9,36,9655,9655,9655,02,0,0,200,5,205
+20200418,AL,4655,37883,,,620,,247,,148,,B,4/18/2020 00:00,74a97a90c6ecfd5abbc7915ca9c56de166464e15,2020-04-18T20:00:00Z,146,620,42538,42538,42538,01,2,26,4565,125,4690
+20200418,AR,1739,22402,,86,291,,,22,57,703,A,4/17/2020 19:00,8e816f3b3980de132cc494d4028d97e61e695fba,2020-04-18T20:00:00Z,38,291,24141,24141,24141,05,1,291,603,44,647
 20200418,AS,0,3,17,,,,,,,,,4/6/2020 00:00,a7da2407a6739e29661337636a116c54d611d596,2020-04-18T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200418,AZ,4719,46326,,566,,285,,178,,539,,4/18/2020 00:00,bcd2d5e8ff3833073dfca9be0eb40952968c5b65,2020-04-18T20:00:00Z,177,,51045,51045,51045,04,8,0,1603,212,1815
-20200418,CA,28963,230703,7200,4936,,1490,,,,,,4/17/2020 00:00,5f10142f1528e01443ff45e1c45b9e00311dc558,2020-04-18T20:00:00Z,1072,,266866,259666,259666,06,87,0,6617,1435,8052
-20200418,CO,9047,34260,,843,1755,,,,,,,4/17/2020 00:00,3276a187f460bd41cd3b26ef728e45e4e5bfcb58,2020-04-18T20:00:00Z,391,1755,43307,43307,43307,08,17,62,1105,372,1477
-20200418,CT,16809,38653,,1946,,,,,,,,4/17/2020 16:00,ba155f824582bcb110d7ac2ac88bfd1f59b74e02,2020-04-18T20:00:00Z,1036,,55462,55462,55462,09,0,0,0,0,0
-20200418,DC,2666,10602,,313,,105,,79,,608,,4/17/2020 00:00,d83c080dc82e6318cc6e9cd1f55e6db47b1e8dff,2020-04-18T20:00:00Z,91,,13268,13268,13268,11,5,0,435,190,625
-20200418,DE,2323,11694,,224,,,,,,423,,4/17/2020 17:00,925adef8017d942d477003cd963cfa7352472f17,2020-04-18T20:00:00Z,61,,14017,14017,14017,10,0,0,0,0,0
-20200418,FL,25269,221258,0,,3842,,,,,,,4/18/2020 09:24,124cc2a8c634186b59233240332c279234acee58,2020-04-18T20:00:00Z,754,3842,246527,246527,246527,12,55,177,10540,1150,11690
-20200418,GA,17669,56539,,,3420,,,,,,,4/18/2020 11:28,78fb10fefc3519ae986b94f870791982dc62c66a,2020-04-18T20:00:00Z,673,3420,74208,74208,74208,13,23,96,2049,475,2524
+20200418,AZ,4719,46326,,566,,285,,178,,539,B,4/18/2020 00:00,dbee78db9921dbf07871bdb40e3fde5d067f0dc4,2020-04-18T20:00:00Z,177,,51045,51045,51045,04,8,0,1603,212,1815
+20200418,CA,28963,230703,7200,4936,,1490,,,,,B,4/17/2020 00:00,179b1f24abbfd97bac31c73ba2a3faefb3769984,2020-04-18T20:00:00Z,1072,,266866,259666,259666,06,87,0,6617,1435,8052
+20200418,CO,9047,34260,,843,1755,,,,,,A,4/17/2020 00:00,a8b95f7799608410dbb3d2b5f1e6e23a6e051829,2020-04-18T20:00:00Z,391,1755,43307,43307,43307,08,17,62,1105,372,1477
+20200418,CT,16809,38653,,1946,,,,,,,A,4/17/2020 16:00,54c69bc8538e5e064c3fba576ab1acc385ad1890,2020-04-18T20:00:00Z,1036,,55462,55462,55462,09,0,0,0,0,0
+20200418,DC,2666,10602,,313,,105,,79,,608,A,4/17/2020 00:00,580f8c6bfa4d15c7ff5392c8ea46ecb89ff44be4,2020-04-18T20:00:00Z,91,,13268,13268,13268,11,5,0,435,190,625
+20200418,DE,2323,11694,,224,,,,,,423,A,4/17/2020 17:00,5275ad4c8ae9357ea8a1c01ea6ac5bc2c3957cce,2020-04-18T20:00:00Z,61,,14017,14017,14017,10,0,0,0,0,0
+20200418,FL,25269,221258,0,,3842,,,,,,A,4/18/2020 09:24,43767dfb9b986392a21de38aecb07811d38d5f9e,2020-04-18T20:00:00Z,754,3842,246527,246527,246527,12,55,177,10540,1150,11690
+20200418,GA,17669,56539,,,3420,,,,,,A,4/18/2020 11:28,ee2a3d6771be92cd6f1d1c991096183b559cc7fa,2020-04-18T20:00:00Z,673,3420,74208,74208,74208,13,23,96,2049,475,2524
 20200418,GU,133,943,,6,,2,,,,110,,4/18/2020 06:50,798b60a8253693867313519228b3aed6141abf67,2020-04-18T20:00:00Z,5,,1076,1076,1076,66,0,0,3,0,3
-20200418,HI,553,21790,,,48,,,,,390,,4/17/2020 18:30,d6c3576ee82768c037abb0a152a78b17739d58c9,2020-04-18T20:00:00Z,9,48,22343,22343,22343,15,0,3,474,12,486
-20200418,IA,2513,20434,,193,,84,,51,,1095,,4/17/2020 12:00,cf6eb233d960b20790008071f60d69e75f69ead9,2020-04-18T20:00:00Z,74,,22947,22947,22947,19,10,0,974,181,1155
-20200418,ID,1655,14954,,,151,,53,,,453,,4/17/2020 19:00,f626ada12c4074fef3ce12db89b25ada228aa518,2020-04-18T20:00:00Z,43,151,16609,16609,16609,16,2,3,380,46,426
-20200418,IL,29160,108244,,4340,,1192,,740,,,,4/18/2020 00:00,ec19e4c090e0516a9c6c0c89d1e2ba22d6cb698a,2020-04-18T20:00:00Z,1259,,137404,137404,137404,17,125,0,5656,1585,7241
-20200418,IN,10641,46232,,,,663,,360,,,,4/17/2020 23:59,2652024b57dc0681ffbce2c32863b92f4f2a91f3,2020-04-18T20:00:00Z,545,,56873,56873,56873,18,26,0,1601,487,2088
-20200418,KS,1790,15886,,,383,,,,,,,4/18/2020 12:00,aaec5a82a39308221dbde2b4e98307b20c156415,2020-04-18T20:00:00Z,86,383,17676,17676,17676,20,2,8,690,85,775
-20200418,KY,2522,28074,,360,1008,227,514,,,979,,4/17/2020 17:00,323a996cf27cbdde50389339f0b23b33342e85de,2020-04-18T20:00:00Z,137,1008,30596,30596,30596,21,8,37,756,93,849
-20200418,LA,23580,114419,,1761,,,,347,,,,4/18/2020 13:00,43993d395f2c4a0bc0f6c71455e2e10266fe9f47,2020-04-18T20:00:00Z,1267,,137999,137999,137999,22,54,0,5550,462,6012
-20200418,MA,37527,124604,,3728,3728,987,,,,,,4/17/2020 16:00,dbafa64f57ed124ec4ab716ed601856bc6c6f3bc,2020-04-18T20:00:00Z,1983,3728,162131,162131,162131,25,161,-28,7409,2402,9811
-20200418,MD,12308,53062,,,2757,,,,,771,,4/18/2020 10:00,506a32b792c575b2d15710288920a19eeedbe98f,2020-04-18T20:00:00Z,534,2757,65370,65370,65370,24,40,145,2625,736,3361
-20200418,ME,847,14076,,49,136,20,,12,,382,,4/18/2020 15:00,c02c6dd46d733302097109c0a22c5c6414037945,2020-04-18T20:00:00Z,32,136,14923,14923,14923,23,3,3,0,20,20
-20200418,MI,30791,68936,,3634,,1423,,1203,,3237,,4/18/2020 11:00,7b977c13ea1ceabe870bb74a727a0994f0f96842,2020-04-18T20:00:00Z,2308,,99727,99727,99727,26,81,0,0,768,768
-20200418,MN,2213,42055,,239,561,111,215,,,1118,,4/17/2020 17:00,74b49b2d7e17d628becc1fe1039693c00d9cc54d,2020-04-18T20:00:00Z,121,561,44268,44268,44268,27,10,43,1073,142,1215
-20200418,MO,5517,48242,,875,,,,,,,,4/18/2020 15:00,d42324cdc9ccab3b2a5a8c28d1d05ef087848754,2020-04-18T20:00:00Z,175,,53759,53759,53759,29,10,0,1808,234,2042
+20200418,HI,553,21790,,,48,,,,,390,A,4/17/2020 18:30,c85a27054126dab091333473c5df5761eeb47cb9,2020-04-18T20:00:00Z,9,48,22343,22343,22343,15,0,3,474,12,486
+20200418,IA,2513,20434,,193,,84,,51,,1095,A,4/17/2020 12:00,8585b7dd7907b7cf9b11817358170c6b7589fcaa,2020-04-18T20:00:00Z,74,,22947,22947,22947,19,10,0,974,181,1155
+20200418,ID,1655,14954,,,151,,53,,,453,A,4/17/2020 19:00,112e2119b1fd03fd0347962b1173df71e10fcb7c,2020-04-18T20:00:00Z,43,151,16609,16609,16609,16,2,3,380,46,426
+20200418,IL,29160,108244,,4340,,1192,,740,,,A,4/18/2020 00:00,7c4a6ebb3606dd6cdd2b6f6aed1f5249ee36e6f1,2020-04-18T20:00:00Z,1259,,137404,137404,137404,17,125,0,5656,1585,7241
+20200418,IN,10641,46232,,,,663,,360,,,B,4/17/2020 23:59,8f1f95dfb5ff34234faa39b370bca643bb61bb53,2020-04-18T20:00:00Z,545,,56873,56873,56873,18,26,0,1601,487,2088
+20200418,KS,1790,15886,,,383,,,,,,B,4/18/2020 12:00,b1f3b48a6d2a1a16a039933018943f497794aa03,2020-04-18T20:00:00Z,86,383,17676,17676,17676,20,2,8,690,85,775
+20200418,KY,2522,28074,,360,1008,227,514,,,979,A,4/17/2020 17:00,0999653bdf2eafbb13f74bfb2b9ebfde15057d6b,2020-04-18T20:00:00Z,137,1008,30596,30596,30596,21,8,37,756,93,849
+20200418,LA,23580,114419,,1761,,,,347,,,A,4/18/2020 13:00,f2cd00ecb108ee909dfccd014025dbfa1744f89f,2020-04-18T20:00:00Z,1267,,137999,137999,137999,22,54,0,5550,462,6012
+20200418,MA,37527,124604,,3728,3728,987,,,,,B,4/17/2020 16:00,01ab64cbbbeb5c55f9be6438aa6ed1efc4f97036,2020-04-18T20:00:00Z,1983,3728,162131,162131,162131,25,161,-28,7409,2402,9811
+20200418,MD,12308,53062,,,2757,,,,,771,A,4/18/2020 10:00,0794942510e72aeb5d4622be52e41d16d26dda60,2020-04-18T20:00:00Z,534,2757,65370,65370,65370,24,40,145,2625,736,3361
+20200418,ME,847,14076,,49,136,20,,12,,382,A,4/18/2020 15:00,e07a30dc6c6a44436345c8efc238e8d01d612e6c,2020-04-18T20:00:00Z,32,136,14923,14923,14923,23,3,3,0,20,20
+20200418,MI,30791,68936,,3634,,1423,,1203,,3237,B,4/18/2020 11:00,2d5b47d442e01c4a53cfcc76e5587f88ba2226bb,2020-04-18T20:00:00Z,2308,,99727,99727,99727,26,81,0,0,768,768
+20200418,MN,2213,42055,,239,561,111,215,,,1118,A,4/17/2020 17:00,c7d6dedf6c496136bf8b2a2f07677c8a91d7aeb7,2020-04-18T20:00:00Z,121,561,44268,44268,44268,27,10,43,1073,142,1215
+20200418,MO,5517,48242,,875,,,,,,,A,4/18/2020 15:00,d592b0c82c965fb0d7298d490d1d62f06a780074,2020-04-18T20:00:00Z,175,,53759,53759,53759,29,10,0,1808,234,2042
 20200418,MP,14,42,4,,,,,,,9,,4/17/2020 19:15,3bccd2f5aaeae2f7b657340e39577aa5ab0eebe8,2020-04-18T20:00:00Z,2,,60,56,56,69,0,0,0,1,1
-20200418,MS,3974,34791,,,782,154,,99,,,,4/17/2020 19:00,273cdd68e3f6e5536dd8104f5f3eac7b1f96e204,2020-04-18T20:00:00Z,152,782,38765,38765,38765,28,12,46,0,181,181
-20200418,MT,426,10143,,17,55,,,,,234,,4/18/2020 10:18,32ed53d21236de6afc4278d5fbda958113bf8d7a,2020-04-18T20:00:00Z,10,55,10569,10569,10569,30,2,1,321,4,325
-20200418,NC,6140,70071,,388,,,,,,,,4/18/2020 11:00,368dac0ae017009a0649169cd717e96521a55d9b,2020-04-18T20:00:00Z,164,,76211,76211,76211,37,12,0,2949,281,3230
-20200418,ND,528,12435,,13,47,,,,,183,,4/18/2020 13:08,65608e992d2e8f82e7b6799f526108076cb0be4a,2020-04-18T20:00:00Z,9,47,12963,12963,12963,38,0,0,532,89,621
-20200418,NE,1138,12539,,,,,,,,,,4/17/2020 19:42,3d9033152c73357904d2747d5b7f7b1c516325cc,2020-04-18T20:00:00Z,24,,13677,13677,13677,31,0,0,501,72,573
-20200418,NH,1287,11565,174,86,190,,,,,468,,4/17/2020 09:00,bd481d4a53c97aa99c7996d54f790bef08894b24,2020-04-18T20:00:00Z,37,190,13026,12852,12852,33,0,0,144,0,144
-20200418,NJ,81420,81116,,7718,,2024,,1641,,,,4/18/2020 12:49,a87aea42aee935ca8c4547b3c5fd54bd90e8b3a5,2020-04-18T20:00:00Z,4070,,162536,162536,162536,34,230,0,2134,2953,5087
-20200418,NM,1711,33902,,96,242,,,,,382,,4/17/2020 21:53,27d591d3931ed198628b19aa902c4dc52098104f,2020-04-18T20:00:00Z,51,242,35613,35613,35613,35,7,12,1011,114,1125
-20200418,NV,3626,27125,,,,,,,,,,4/18/2020 10:00,292c2ce9c2a5664d769786c0bd4ffa488813f033,2020-04-18T20:00:00Z,151,,30751,30751,30751,32,9,0,887,102,989
-20200418,NY,236732,359800,,16967,52425,5016,,,,35458,,4/18/2020 00:00,ddb9defe24fdab225f04c2221a17839d8e188f72,2020-04-18T20:00:00Z,13362,52425,596532,596532,596532,36,540,1917,16219,7090,23309
-20200418,OH,10222,68819,,,2519,,760,,,,,4/18/2020 14:00,d5b1cd5c1b85e69079626000736096ccfe2e0eda,2020-04-18T20:00:00Z,451,2519,79041,79041,79041,39,33,95,0,1115,1115
-20200418,OK,2570,32966,,307,541,136,,,,1515,,4/18/2020 00:00,5fa7fef531bc3bd10c23b4d8cd010390f255b0ea,2020-04-18T20:00:00Z,139,541,35536,35536,35536,40,3,13,1811,105,1916
-20200418,OR,1844,35739,,290,449,74,,37,,,,4/18/2020 11:00,5a1029fb33c1b5bc38e83f7cf1f4898d5b0a981f,2020-04-18T20:00:00Z,72,449,37583,37583,37583,41,2,22,1203,59,1262
-20200418,PA,31069,122896,,2613,,,,660,,,,4/18/2020 12:00,9a336c304c176818a038fd6ccdbc11d6cf01d102,2020-04-18T20:00:00Z,836,,153965,153965,153965,42,80,0,4964,1628,6592
-20200418,PR,1118,8055,1760,,,,,,,,,4/18/2020 07:00,ad8e335589de9d05b75381029fbcaaa1a4f9df8d,2020-04-18T20:00:00Z,60,,10933,9173,9173,72,2,0,191,50,241
-20200418,RI,4479,28335,,293,578,67,,43,,217,,4/18/2020 00:00,f23138d43a61fdcca57840955f3fd3d090115ec6,2020-04-18T20:00:00Z,150,578,32814,32814,32814,44,32,247,1751,302,2053
-20200418,SC,4246,34587,,,776,,,,,2633,,4/18/2020 15:25,b683e4b2cce8e19548caa221d8d50a60e75e4ce5,2020-04-18T20:00:00Z,119,776,38833,38833,38833,45,10,101,2234,315,2549
-20200418,SD,1542,10118,1,,68,,,,,552,,4/17/2020 18:00,14291ddd24fba51a846841e9c167f0e85042ba70,2020-04-18T20:00:00Z,7,68,11661,11660,11660,46,0,5,467,131,598
-20200418,TN,6762,83824,,,719,,,,,3234,,4/18/2020 15:00,fc41f9195baba4ed48a56ab6cf61ca62a515247d,2020-04-18T20:00:00Z,145,719,90586,90586,90586,47,3,8,3140,173,3313
-20200418,TX,18260,157979,,1321,,,,,,4806,,4/18/2020 13:45,89d9f19efd68ac25e2dc505dc0cb908e90c8aea2,2020-04-18T20:00:00Z,453,,176239,176239,176239,48,25,0,5814,889,6703
-20200418,UT,2931,57013,,,251,,,,,565,,4/18/2020 15:00,7c2ffae3100d213f6391f5679a9aa329ebf85593,2020-04-18T20:00:00Z,25,251,59944,59944,59944,49,2,7,4047,126,4173
-20200418,VA,8053,43878,486,1307,1296,398,,230,,1228,,4/17/2020 17:00,2378402f59e157fc9b258da5d765f2cc36d161fd,2020-04-18T20:00:00Z,258,1296,52417,51931,51931,51,27,75,2372,562,2934
+20200418,MS,3974,34791,,,782,154,,99,,,A,4/17/2020 19:00,7319b32e2ea30bdf4a39778ef6bebd4f3eeb5675,2020-04-18T20:00:00Z,152,782,38765,38765,38765,28,12,46,0,181,181
+20200418,MT,426,10143,,17,55,,,,,234,A,4/18/2020 10:18,2b2e75cdfaef2abfdcd2138da803f3b5e5b13638,2020-04-18T20:00:00Z,10,55,10569,10569,10569,30,2,1,321,4,325
+20200418,NC,6140,70071,,388,,,,,,,A,4/18/2020 11:00,58614346a958be19ebcbf51e6c389c1e869ac60a,2020-04-18T20:00:00Z,164,,76211,76211,76211,37,12,0,2949,281,3230
+20200418,ND,528,12435,,13,47,,,,,183,B,4/18/2020 13:08,82c0a51bf82259a8797027be36b950fb80a9d8fd,2020-04-18T20:00:00Z,9,47,12963,12963,12963,38,0,0,532,89,621
+20200418,NE,1138,12539,,,,,,,,,A,4/17/2020 19:42,ee26d743bc12af182a6cc73cdcc0bc8142e5ade6,2020-04-18T20:00:00Z,24,,13677,13677,13677,31,0,0,501,72,573
+20200418,NH,1287,11565,174,86,190,,,,,468,B,4/17/2020 09:00,66a513a6897b5f3915fd227379524d1d92e56393,2020-04-18T20:00:00Z,37,190,13026,12852,12852,33,0,0,144,0,144
+20200418,NJ,81420,81116,,7718,,2024,,1641,,,A,4/18/2020 12:49,ecbb6fd911b3c8ca8f96b11a85e6a202ca86e72c,2020-04-18T20:00:00Z,4070,,162536,162536,162536,34,230,0,2134,2953,5087
+20200418,NM,1711,33902,,96,242,,,,,382,A,4/17/2020 21:53,7a56c533581cffcb4bf5986d832643a4f7c2a21d,2020-04-18T20:00:00Z,51,242,35613,35613,35613,35,7,12,1011,114,1125
+20200418,NV,3626,27125,,,,,,,,,A,4/18/2020 10:00,e8c7fb57e96c878693bbcebbfadfe88b681e5941,2020-04-18T20:00:00Z,151,,30751,30751,30751,32,9,0,887,102,989
+20200418,NY,236732,359800,,16967,52425,5016,,,,35458,A,4/18/2020 00:00,4ad2fd5b599fc6179d536ede7719d0f24aaf5f56,2020-04-18T20:00:00Z,13362,52425,596532,596532,596532,36,540,1917,16219,7090,23309
+20200418,OH,10222,68819,,,2519,,760,,,,B,4/18/2020 14:00,05767ed7353d0c349beca07f91d124a9c37ef063,2020-04-18T20:00:00Z,451,2519,79041,79041,79041,39,33,95,0,1115,1115
+20200418,OK,2570,32966,,307,541,136,,,,1515,B,4/18/2020 00:00,2d655271f86a414ab0ebcadb03e12f74084970c0,2020-04-18T20:00:00Z,139,541,35536,35536,35536,40,3,13,1811,105,1916
+20200418,OR,1844,35739,,290,449,74,,37,,,A,4/18/2020 11:00,d4c89788320088f305600fccb94f38f619605e5c,2020-04-18T20:00:00Z,72,449,37583,37583,37583,41,2,22,1203,59,1262
+20200418,PA,31069,122896,,2613,,,,660,,,A,4/18/2020 12:00,beb544a82e8cab5b9b31022204795823d7fc68bd,2020-04-18T20:00:00Z,836,,153965,153965,153965,42,80,0,4964,1628,6592
+20200418,PR,1118,8055,1760,,,,,,,,A,4/18/2020 07:00,c1780e0c8e41c604bfcdf751ebd534291c02f7ed,2020-04-18T20:00:00Z,60,,10933,9173,9173,72,2,0,191,50,241
+20200418,RI,4479,28335,,293,578,67,,43,,217,B,4/18/2020 00:00,0f0643f55b03f4acd31357c9f54791da4079a700,2020-04-18T20:00:00Z,150,578,32814,32814,32814,44,32,247,1751,302,2053
+20200418,SC,4246,34587,,,776,,,,,2633,B,4/18/2020 15:25,41d3450cc79dd12485e8c195a044dae6f40c6296,2020-04-18T20:00:00Z,119,776,38833,38833,38833,45,10,101,2234,315,2549
+20200418,SD,1542,10118,1,,68,,,,,552,A,4/17/2020 18:00,52c9d623a9102bd8e28350d2e0cc18d6241f0b30,2020-04-18T20:00:00Z,7,68,11661,11660,11660,46,0,5,467,131,598
+20200418,TN,6762,83824,,,719,,,,,3234,A,4/18/2020 15:00,16a0444be654f213a3302b6325f6e4fb691176a8,2020-04-18T20:00:00Z,145,719,90586,90586,90586,47,3,8,3140,173,3313
+20200418,TX,18260,157979,,1321,,,,,,4806,A,4/18/2020 13:45,febc81e94b5eada27b04c4abaf0c2f76a2567afa,2020-04-18T20:00:00Z,453,,176239,176239,176239,48,25,0,5814,889,6703
+20200418,UT,2931,57013,,,251,,,,,565,A,4/18/2020 15:00,cb3b8c869adb1bf673a51068139034db38dba9ba,2020-04-18T20:00:00Z,25,251,59944,59944,59944,49,2,7,4047,126,4173
+20200418,VA,8053,43878,486,1307,1296,398,,230,,1228,A,4/17/2020 17:00,0f0d5ce8a839fee102533e679068cf0bb110d957,2020-04-18T20:00:00Z,258,1296,52417,51931,51931,51,27,75,2372,562,2934
 20200418,VI,53,390,35,,,,,,,46,,4/18/2020 08:30,42d43be945df2ca9a123ac3572cd1f3aca0abf18,2020-04-18T20:00:00Z,3,,478,443,443,78,1,0,17,2,19
-20200418,VT,803,11763,,56,,,,,,15,,4/18/2020 09:50,8402ad90b173229207d8ad3c3e7a0e06ae2f7cd8,2020-04-18T20:00:00Z,38,,12566,12566,12566,50,3,0,426,24,450
-20200418,WA,11887,140809,,518,,155,,,,,,4/17/2020 02:59,7592b97c28f385fa09bb76f91d48c4dd5a44146f,2020-04-18T20:00:00Z,598,,152696,152696,152696,53,13,0,2038,214,2252
-20200418,WI,4199,43962,229,361,1176,135,307,,,,,4/18/2020 12:45,40e46469c5ef0db7d1b40a1f1de92ef035c39114,2020-04-18T20:00:00Z,211,1176,48390,48161,48161,55,6,23,1597,154,1751
-20200418,WV,785,18655,,83,,40,,27,,255,,4/17/2020 17:00,36fe3fe15f393e50f2e5fa1350a0d3786207bd90,2020-04-18T20:00:00Z,16,,19440,19440,19440,54,3,0,728,31,759
-20200418,WY,305,6217,,19,50,,,,,206,,4/17/2020 16:02,ce7171284b66ef07964fe9d38c367acc119eafa4,2020-04-18T20:00:00Z,2,50,6522,6522,6522,56,0,7,86,9,95
-20200417,AK,309,9141,,,36,,,,,128,,4/16/2020 00:00,30f34c5994ec789638a2b9f488450b5aa5f9ea70,2020-04-17T20:00:00Z,9,36,9450,9450,9450,02,0,1,706,9,715
-20200417,AL,4530,33318,,,594,,247,,148,,,4/17/2020 00:00,83f46dea253dc13203bc8ccecef8b6f3a72c87f9,2020-04-17T20:00:00Z,144,594,37848,37848,37848,01,11,41,1272,185,1457
-20200417,AR,1695,21799,,83,,,,21,,593,,4/17/2020 19:00,72a8134fffea7cb251c2b6993d9ee4892e647c3e,2020-04-17T20:00:00Z,37,,23494,23494,23494,05,0,0,744,75,819
+20200418,VT,803,11763,,56,,,,,,15,A,4/18/2020 09:50,0f4b7585f62ec58fc23a63625ca6b50de57f4fe4,2020-04-18T20:00:00Z,38,,12566,12566,12566,50,3,0,426,24,450
+20200418,WA,11887,140809,,518,,155,,,,,C,4/17/2020 02:59,909d3da6f4902b24b4392b9f11c6cae8607bd637,2020-04-18T20:00:00Z,598,,152696,152696,152696,53,13,0,2038,214,2252
+20200418,WI,4199,43962,229,361,1176,135,307,,,,A,4/18/2020 12:45,d268170059db5bde5191aef9e784f5d0cc7b0bae,2020-04-18T20:00:00Z,211,1176,48390,48161,48161,55,6,23,1597,154,1751
+20200418,WV,785,18655,,83,,40,,27,,255,B,4/17/2020 17:00,52159d44548b3002a205ebb7ebfd6c44953ada85,2020-04-18T20:00:00Z,16,,19440,19440,19440,54,3,0,728,31,759
+20200418,WY,305,6217,,19,50,,,,,206,A,4/17/2020 16:02,f466b9fa5e8ecfa2cc5c3bbc7b12f214bcc15d97,2020-04-18T20:00:00Z,2,50,6522,6522,6522,56,0,7,86,9,95
+20200417,AK,309,9141,,,36,,,,,128,A,4/16/2020 00:00,5c059c1028bee5b5521901fb98c5f54790e003ae,2020-04-17T20:00:00Z,9,36,9450,9450,9450,02,0,1,706,9,715
+20200417,AL,4530,33318,,,594,,247,,148,,B,4/17/2020 00:00,45c04bd7016dc2f888d0ce9f60b42c70828dc5c5,2020-04-17T20:00:00Z,144,594,37848,37848,37848,01,11,41,1272,185,1457
+20200417,AR,1695,21799,,83,,,,21,,593,A,4/17/2020 19:00,a8da8ed523d7c6aa818ab7f8eb7bd3a8931e2a13,2020-04-17T20:00:00Z,37,,23494,23494,23494,05,0,0,744,75,819
 20200417,AS,0,3,17,,,,,,,,,4/6/2020 00:00,e1c20ffc53fef1c7f4c2be953785ddaf10b83586,2020-04-17T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200417,AZ,4507,44723,,566,,285,,178,,539,,4/17/2020 00:00,4df3826dfde766951698dd3aa8b4d55bd1d62555,2020-04-17T20:00:00Z,169,,49230,49230,49230,04,19,0,1559,273,1832
-20200417,CA,27528,224086,7200,4892,,1484,,,,,,4/17/2020 00:00,bba86b5b6e3f299889a0e60e18f6a5cca902ab61,2020-04-17T20:00:00Z,985,,258814,251614,251614,06,95,0,3868,1346,5214
-20200417,CO,8675,33155,,858,1693,,,,,,,4/17/2020 00:00,2f078bb33357d781736ccb2cc821d49954bee0d3,2020-04-17T20:00:00Z,374,1693,41830,41830,41830,08,17,57,902,395,1297
-20200417,CT,16809,38653,,1946,,,,,,,,4/17/2020 16:00,8521f1ff2abd5d7ab066503f3033e0e8dbfff025,2020-04-17T20:00:00Z,1036,,55462,55462,55462,09,65,0,1415,925,2340
-20200417,DC,2476,10167,,313,,105,,79,,573,,4/16/2020 00:00,24a8b6b873f22c9bd6f666873979f60f06c3fcef,2020-04-17T20:00:00Z,86,,12643,12643,12643,11,5,0,367,126,493
-20200417,DE,2323,11694,,224,,,,,,423,,4/17/2020 17:00,7447a924b43c25fbe147a893d24a267bea7d02ba,2020-04-17T20:00:00Z,61,,14017,14017,14017,10,9,0,419,248,667
-20200417,FL,24119,210718,1285,,3665,,,,,,,4/17/2020 16:21,2d03f1cf38cf9b6ddce9af288695f023170392c8,2020-04-17T20:00:00Z,699,3665,236122,234837,234837,12,53,205,14367,1222,15589
-20200417,GA,17194,54490,,,3324,,,,,,,4/17/2020 18:28,2b2db072b41821e7194912baa748f02fbfa5c175,2020-04-17T20:00:00Z,650,3324,71684,71684,71684,13,63,216,2220,1525,3745
+20200417,AZ,4507,44723,,566,,285,,178,,539,B,4/17/2020 00:00,ee032adef0019ff280abf8cfe4d11f47dd17a793,2020-04-17T20:00:00Z,169,,49230,49230,49230,04,19,0,1559,273,1832
+20200417,CA,27528,224086,7200,4892,,1484,,,,,B,4/17/2020 00:00,b0bbd7cb33e2be7c025375e18d150eae8dff1847,2020-04-17T20:00:00Z,985,,258814,251614,251614,06,95,0,3868,1346,5214
+20200417,CO,8675,33155,,858,1693,,,,,,A,4/17/2020 00:00,0c6c62ad82526edd2b0292781ebee5ceeebb7c8c,2020-04-17T20:00:00Z,374,1693,41830,41830,41830,08,17,57,902,395,1297
+20200417,CT,16809,38653,,1946,,,,,,,A,4/17/2020 16:00,0a8bd7e1017be83ff7f939d4a3ba71850015069e,2020-04-17T20:00:00Z,1036,,55462,55462,55462,09,65,0,1415,925,2340
+20200417,DC,2476,10167,,313,,105,,79,,573,A,4/16/2020 00:00,2582dc7527c0b34ac18d5a1e286d4e462c301c49,2020-04-17T20:00:00Z,86,,12643,12643,12643,11,5,0,367,126,493
+20200417,DE,2323,11694,,224,,,,,,423,A,4/17/2020 17:00,42b83bef35dded8d74d77f1654f6827f050e99ea,2020-04-17T20:00:00Z,61,,14017,14017,14017,10,9,0,419,248,667
+20200417,FL,24119,210718,1285,,3665,,,,,,A,4/17/2020 16:21,0eb8ae3e1bfbbb17f3879322747d12c5de777f0f,2020-04-17T20:00:00Z,699,3665,236122,234837,234837,12,53,205,14367,1222,15589
+20200417,GA,17194,54490,,,3324,,,,,,A,4/17/2020 18:28,0c0407c82beaa7db92355b6e6fc84e8d37efd42a,2020-04-17T20:00:00Z,650,3324,71684,71684,71684,13,63,216,2220,1525,3745
 20200417,GU,133,940,,6,,2,,,,97,,4/17/2020 07:00,ecc0e957c3c9ae8d8bd1cade00f7e70dce3a4580,2020-04-17T20:00:00Z,5,,1073,1073,1073,66,0,0,70,0,70
-20200417,HI,541,21316,,,45,,,,,374,,4/17/2020 18:30,6001b65b7473f954c47463a59a402577e2fc5ccb,2020-04-17T20:00:00Z,9,45,21857,21857,21857,15,0,0,1146,11,1157
-20200417,IA,2332,19460,,183,,88,,52,,1007,,4/16/2020 12:00,258a657ba3f9f3afb0a28b45cb0d9369a74f4240,2020-04-17T20:00:00Z,64,,21792,21792,21792,19,4,0,926,191,1117
-20200417,ID,1609,14574,,,148,,51,,,390,,4/17/2020 19:00,effb2a2889443a50265d6b6519da105f635cccad,2020-04-17T20:00:00Z,41,148,16183,16183,16183,16,0,5,330,22,352
-20200417,IL,27575,102588,,4454,,1196,,777,,,,4/17/2020 00:00,3022030f82bda12878ef4438fa91083ee011d018,2020-04-17T20:00:00Z,1134,,130163,130163,130163,17,62,0,5732,1842,7574
-20200417,IN,10154,44631,,,,638,,417,,,,4/16/2020 23:59,1cdc6d85ef1a3209089c50d71c5613498b200cc3,2020-04-17T20:00:00Z,519,,54785,54785,54785,18,42,0,3058,612,3670
-20200417,KS,1705,15196,,,375,,,,,,,4/17/2020 12:00,a6e4ffe3a772947fafee4852d178fb739275ca2f,2020-04-17T20:00:00Z,84,375,16901,16901,16901,20,4,16,662,117,779
-20200417,KY,2429,27318,,477,971,333,506,,,956,,4/17/2020 17:00,8c9f3897ce146dd23845cd1411038efb4cd90b15,2020-04-17T20:00:00Z,129,971,29747,29747,29747,21,7,164,1285,138,1423
-20200417,LA,23118,108869,,1868,,,,363,,,,4/17/2020 13:00,c4c9bc00feb912ef5e41e523e641a527f72b9526,2020-04-17T20:00:00Z,1213,,131987,131987,131987,22,57,0,4815,586,5401
-20200417,MA,35125,117195,,3756,3756,987,,,,,,4/16/2020 10:00,2a6274008773a3a40d0be23e33238e21c77f388d,2020-04-17T20:00:00Z,1822,3756,152320,152320,152320,25,155,30,7097,2633,9730
-20200417,MD,11572,50437,,,2612,,,,,736,,4/17/2020 10:00,e065ea3f4f3ecf63a815518a7eea66a54bad5275,2020-04-17T20:00:00Z,494,2612,62009,62009,62009,24,35,161,2378,788,3166
-20200417,ME,827,14076,,55,133,28,,8,,352,,4/17/2020 11:45,3eb5de59062c3b772067fe26a0df3abce89a4b53,2020-04-17T20:00:00Z,29,133,14903,14903,14903,23,2,3,0,31,31
-20200417,MI,30023,68936,,3674,,1428,,1167,,629,,4/17/2020 11:00,2524dea6beb7ab139d9f74168a5b5941e453d00b,2020-04-17T20:00:00Z,2227,,98959,98959,98959,26,134,0,3913,760,4673
-20200417,MN,2071,40982,,223,518,106,202,,,1066,,4/16/2020 17:00,9bc5a2e02532e7e325b3432785d914ffb37a0dd2,2020-04-17T20:00:00Z,111,518,43053,43053,43053,27,17,43,1219,159,1378
-20200417,MO,5283,46434,,1043,,,,,,,,4/17/2020 15:00,d63ddb526312efdfef97c4b397fc003061d597c4,2020-04-17T20:00:00Z,165,,51717,51717,51717,29,13,0,897,172,1069
+20200417,HI,541,21316,,,45,,,,,374,A,4/17/2020 18:30,4c179d96c337c05804b8861f21d720880be521e8,2020-04-17T20:00:00Z,9,45,21857,21857,21857,15,0,0,1146,11,1157
+20200417,IA,2332,19460,,183,,88,,52,,1007,A,4/16/2020 12:00,70ba334dd64ad5f32a3da35e4f8e2d0df7645a03,2020-04-17T20:00:00Z,64,,21792,21792,21792,19,4,0,926,191,1117
+20200417,ID,1609,14574,,,148,,51,,,390,A,4/17/2020 19:00,428a338d5ac983870217949c6f224703dfdf4f6c,2020-04-17T20:00:00Z,41,148,16183,16183,16183,16,0,5,330,22,352
+20200417,IL,27575,102588,,4454,,1196,,777,,,A,4/17/2020 00:00,d7e5479c4095b229b5c212d48baa225e62fbacb0,2020-04-17T20:00:00Z,1134,,130163,130163,130163,17,62,0,5732,1842,7574
+20200417,IN,10154,44631,,,,638,,417,,,B,4/16/2020 23:59,dabfe7c81b447677373a32bc0a8bd435aa953321,2020-04-17T20:00:00Z,519,,54785,54785,54785,18,42,0,3058,612,3670
+20200417,KS,1705,15196,,,375,,,,,,B,4/17/2020 12:00,9d932369c01ab2d77ba8402f7e3308568e767fbf,2020-04-17T20:00:00Z,84,375,16901,16901,16901,20,4,16,662,117,779
+20200417,KY,2429,27318,,477,971,333,506,,,956,A,4/17/2020 17:00,8ccd72890c0517078d0e044a5c4063c2de061f28,2020-04-17T20:00:00Z,129,971,29747,29747,29747,21,7,164,1285,138,1423
+20200417,LA,23118,108869,,1868,,,,363,,,A,4/17/2020 13:00,5cad43048c0ddf14b339eafeda3ff60a7ef3b80a,2020-04-17T20:00:00Z,1213,,131987,131987,131987,22,57,0,4815,586,5401
+20200417,MA,35125,117195,,3756,3756,987,,,,,B,4/16/2020 10:00,564dd41f10ca94fcf08cfc60ff43f8bc97741e63,2020-04-17T20:00:00Z,1822,3756,152320,152320,152320,25,155,30,7097,2633,9730
+20200417,MD,11572,50437,,,2612,,,,,736,A,4/17/2020 10:00,90e8f9f77bc769fc634e2ed4239e4e34835b85a5,2020-04-17T20:00:00Z,494,2612,62009,62009,62009,24,35,161,2378,788,3166
+20200417,ME,827,14076,,55,133,28,,8,,352,A,4/17/2020 11:45,3ec0b7a50af80a0eee4d4d2c7eafd639300891f2,2020-04-17T20:00:00Z,29,133,14903,14903,14903,23,2,3,0,31,31
+20200417,MI,30023,68936,,3674,,1428,,1167,,629,B,4/17/2020 11:00,4200c1c182e477d6a0d4fd5da182094be5024bf3,2020-04-17T20:00:00Z,2227,,98959,98959,98959,26,134,0,3913,760,4673
+20200417,MN,2071,40982,,223,518,106,202,,,1066,A,4/16/2020 17:00,6c41803c9f0e71beaf7190c49915a2ebc1e6e94d,2020-04-17T20:00:00Z,111,518,43053,43053,43053,27,17,43,1219,159,1378
+20200417,MO,5283,46434,,1043,,,,,,,A,4/17/2020 15:00,5ad1941f7522a506b668711ef44d1f6881ee8c12,2020-04-17T20:00:00Z,165,,51717,51717,51717,29,13,0,897,172,1069
 20200417,MP,13,42,4,,,,,,,,,4/17/2020 19:15,64bbbae9779f17663c65a143ae1f015230ebf17a,2020-04-17T20:00:00Z,2,,59,55,55,69,0,0,15,0,15
-20200417,MS,3793,34791,,,736,154,,99,,,,4/16/2020 19:00,118a2049282834160a92437dd896bcff94f7a96a,2020-04-17T20:00:00Z,140,736,38584,38584,38584,28,11,54,0,169,169
-20200417,MT,422,9822,,21,54,,,,,233,,4/17/2020 10:44,2dfff06df7dc207114474a5f23552137b1305bd3,2020-04-17T20:00:00Z,8,54,10244,10244,10244,30,1,2,301,7,308
-20200417,NC,5859,67122,,429,,,,,,,,4/17/2020 11:00,2de4eeede106813a695d0dd937fbc2e498be67fb,2020-04-17T20:00:00Z,152,,72981,72981,72981,37,21,0,1670,394,2064
-20200417,ND,439,11903,,16,47,,,,,172,,4/17/2020 13:00,55d972d970c0491d2c449f2429530e299031c77d,2020-04-17T20:00:00Z,9,47,12342,12342,12342,38,0,2,592,46,638
-20200417,NE,1066,12038,,,,,,,,,,4/17/2020 19:42,c759d3f732099a9ab68216c75ed088bc9956dc50,2020-04-17T20:00:00Z,24,,13104,13104,13104,31,3,0,696,114,810
-20200417,NH,1287,11421,174,74,190,,,,,455,,4/17/2020 09:00,3726bf96d64352a2baef6a11a8cc16022155e4f7,2020-04-17T20:00:00Z,37,190,12882,12708,12708,33,5,12,394,148,542
-20200417,NJ,78467,78982,,8011,,1961,,1594,,,,4/17/2020 13:00,66ed1cfdb92ee52ba8c55bce86e6105473a4ab89,2020-04-17T20:00:00Z,3840,,157449,157449,157449,34,322,0,2469,3150,5619
-20200417,NM,1597,32891,,90,230,,,,,353,,4/17/2020 20:53,4ec24ee383cd8c13a4da99d2882172f09f35da29,2020-04-17T20:00:00Z,44,230,34488,34488,34488,35,8,15,981,113,1094
-20200417,NV,3524,26238,,,,,,,,,,4/17/2020 10:00,5a47005ebacdbc7f8dbdf24c8c97c2da80872c5e,2020-04-17T20:00:00Z,142,,29762,29762,29762,32,5,0,1108,203,1311
-20200417,NY,229642,343581,,17116,50508,5059,,,,33392,,4/17/2020 14:00,242f0490f1a5e49aa7df95bee0ac2d912edb267a,2020-04-17T20:00:00Z,12822,50508,573223,573223,573223,36,630,1973,15286,7358,22644
-20200417,OH,9107,68819,,,2424,,740,,,,,4/17/2020 14:00,13cb8f058a15cfbfa11ab5e5be35c1154be8b9a5,2020-04-17T20:00:00Z,418,2424,77926,77926,77926,39,29,93,2393,693,3086
-20200417,OK,2465,31155,,325,528,155,,,,1331,,4/17/2020 11:35,8f9ccce1e0afc57dbd0bbf8b48af92be3839a357,2020-04-17T20:00:00Z,136,528,33620,33620,33620,40,5,0,2613,108,2721
-20200417,OR,1785,34536,,301,427,69,,41,,,,4/17/2020 11:00,21802eebd0537672dc866d44c91f959756ab5267,2020-04-17T20:00:00Z,70,427,36321,36321,36321,41,6,13,1334,49,1383
-20200417,PA,29441,117932,,2603,,,,661,,,,4/17/2020 12:00,90afeb3a2b7351077d594729ed37b39657ce2794,2020-04-17T20:00:00Z,756,,147373,147373,147373,42,49,0,4197,1706,5903
-20200417,PR,1068,7864,1478,,,,,,,,,4/17/2020 06:00,840e55da0c84d1e51800b1ea51b3c20878e27c02,2020-04-17T20:00:00Z,58,,10410,8932,8932,72,2,0,549,25,574
-20200417,RI,4177,26584,,252,331,62,,43,,196,,4/17/2020 00:00,6c75094074306078bdb19372a0172b3a5b93056e,2020-04-17T20:00:00Z,118,331,30761,30761,30761,44,13,0,2358,339,2697
-20200417,SC,3931,32353,,,675,,,,,,,4/17/2020 16:48,dc43662622614d743ee07c07a728e3af5200d766,2020-04-17T20:00:00Z,109,675,36284,36284,36284,45,2,0,1276,275,1551
-20200417,SD,1411,9651,0,,63,,,,,457,,4/16/2020 18:00,4b5c2b26efa79d1538f7ddf4fa77c8efefd06c79,2020-04-17T20:00:00Z,7,63,11062,11062,11062,46,0,8,412,100,512
-20200417,TN,6589,80684,,,711,,,,,3017,,4/17/2020 15:00,8c362cfde58403c380f81e1e3f887265653b9390,2020-04-17T20:00:00Z,142,711,87273,87273,87273,47,1,20,1897,327,2224
-20200417,TX,17371,152165,,1522,,,,,,4190,,4/17/2020 12:45,638ed8aa821916697cbc3a3c9d92d6cae20e9c3b,2020-04-17T20:00:00Z,428,,169536,169536,169536,48,35,0,10073,916,10989
-20200417,UT,2805,52966,,,244,,,,,443,,4/17/2020 15:00,c601be2b8fb5d03593c890c7166d53bbcd63e523,2020-04-17T20:00:00Z,23,244,55771,55771,55771,49,2,6,5971,122,6093
-20200417,VA,7491,41506,499,1308,1221,400,,224,,1110,,4/16/2020 17:00,2aeb4bf2885f45030532dd3d9a8782a11d727125,2020-04-17T20:00:00Z,231,1221,49496,48997,48997,51,23,107,1951,602,2553
+20200417,MS,3793,34791,,,736,154,,99,,,A,4/16/2020 19:00,e1156807e44cefa80cb641bc3bc33515577428db,2020-04-17T20:00:00Z,140,736,38584,38584,38584,28,11,54,0,169,169
+20200417,MT,422,9822,,21,54,,,,,233,A,4/17/2020 10:44,b6a8fbb8b8c81156279f7ecf1ff7d3f02b357e37,2020-04-17T20:00:00Z,8,54,10244,10244,10244,30,1,2,301,7,308
+20200417,NC,5859,67122,,429,,,,,,,A,4/17/2020 11:00,58f85b57bf4eb57217d82c015703d3da6c5ff98d,2020-04-17T20:00:00Z,152,,72981,72981,72981,37,21,0,1670,394,2064
+20200417,ND,439,11903,,16,47,,,,,172,B,4/17/2020 13:00,85f8dd4556f552641a60eae0086a5dedb740ec93,2020-04-17T20:00:00Z,9,47,12342,12342,12342,38,0,2,592,46,638
+20200417,NE,1066,12038,,,,,,,,,A,4/17/2020 19:42,8e0911fefd129a6050b599528237defa0ea002f7,2020-04-17T20:00:00Z,24,,13104,13104,13104,31,3,0,696,114,810
+20200417,NH,1287,11421,174,74,190,,,,,455,B,4/17/2020 09:00,a3c21f8a273cdddc10db8976b98eb9b47c4274f5,2020-04-17T20:00:00Z,37,190,12882,12708,12708,33,5,12,394,148,542
+20200417,NJ,78467,78982,,8011,,1961,,1594,,,A,4/17/2020 13:00,6018784bd37a06f5221980b7d6e83811ad5bf999,2020-04-17T20:00:00Z,3840,,157449,157449,157449,34,322,0,2469,3150,5619
+20200417,NM,1597,32891,,90,230,,,,,353,A,4/17/2020 20:53,957fa97175d9e10dff82d3517d322b68c5535da3,2020-04-17T20:00:00Z,44,230,34488,34488,34488,35,8,15,981,113,1094
+20200417,NV,3524,26238,,,,,,,,,A,4/17/2020 10:00,28939cd4a2d03fc9f2921bedd7c5c353b1855ba1,2020-04-17T20:00:00Z,142,,29762,29762,29762,32,5,0,1108,203,1311
+20200417,NY,229642,343581,,17116,50508,5059,,,,33392,A,4/17/2020 14:00,44021a2894f3a0659b419269ff6cad05ea63c571,2020-04-17T20:00:00Z,12822,50508,573223,573223,573223,36,630,1973,15286,7358,22644
+20200417,OH,9107,68819,,,2424,,740,,,,B,4/17/2020 14:00,c1ee174cb597ef6f608faa92578b5408dd41664b,2020-04-17T20:00:00Z,418,2424,77926,77926,77926,39,29,93,2393,693,3086
+20200417,OK,2465,31155,,325,528,155,,,,1331,B,4/17/2020 11:35,0e33368e3433311b79a910eb1dcdbe7dc274e917,2020-04-17T20:00:00Z,136,528,33620,33620,33620,40,5,0,2613,108,2721
+20200417,OR,1785,34536,,301,427,69,,41,,,A,4/17/2020 11:00,bf9c123cbf30f148f7ab9b55f720802f1ce846fa,2020-04-17T20:00:00Z,70,427,36321,36321,36321,41,6,13,1334,49,1383
+20200417,PA,29441,117932,,2603,,,,661,,,A,4/17/2020 12:00,f706c9b93cfe41e2bb27b018c4b5a67ad16f436e,2020-04-17T20:00:00Z,756,,147373,147373,147373,42,49,0,4197,1706,5903
+20200417,PR,1068,7864,1478,,,,,,,,A,4/17/2020 06:00,89c321ea3d08d0ffe58678716567e30501f86bc5,2020-04-17T20:00:00Z,58,,10410,8932,8932,72,2,0,549,25,574
+20200417,RI,4177,26584,,252,331,62,,43,,196,B,4/17/2020 00:00,18cfe4f9143aa284803f9a8b582daa4572d93886,2020-04-17T20:00:00Z,118,331,30761,30761,30761,44,13,0,2358,339,2697
+20200417,SC,3931,32353,,,675,,,,,,B,4/17/2020 16:48,2c6a86630766d9a4651730ee429c6d4ad96eff57,2020-04-17T20:00:00Z,109,675,36284,36284,36284,45,2,0,1276,275,1551
+20200417,SD,1411,9651,0,,63,,,,,457,A,4/16/2020 18:00,3d82af4fd025a2ad33346a3abe9846a7792f3ee0,2020-04-17T20:00:00Z,7,63,11062,11062,11062,46,0,8,412,100,512
+20200417,TN,6589,80684,,,711,,,,,3017,A,4/17/2020 15:00,bccf49e9dcab00ac0d8e92ee16d07f1655b2231b,2020-04-17T20:00:00Z,142,711,87273,87273,87273,47,1,20,1897,327,2224
+20200417,TX,17371,152165,,1522,,,,,,4190,A,4/17/2020 12:45,dd463910e3e39bf2d37ab96706da54f081cd616c,2020-04-17T20:00:00Z,428,,169536,169536,169536,48,35,0,10073,916,10989
+20200417,UT,2805,52966,,,244,,,,,443,A,4/17/2020 15:00,17486f07521566ebd9679c19269c50b5c5c5a9c2,2020-04-17T20:00:00Z,23,244,55771,55771,55771,49,2,6,5971,122,6093
+20200417,VA,7491,41506,499,1308,1221,400,,224,,1110,A,4/16/2020 17:00,5d22e9f0eaed45ba102e45dad64b873d5c3cf125,2020-04-17T20:00:00Z,231,1221,49496,48997,48997,51,23,107,1951,602,2553
 20200417,VI,51,373,34,,,,,,,46,,4/17/2020 08:30,0454d9e368ccb41152a3fce3d06b74212be8b005,2020-04-17T20:00:00Z,2,,458,424,424,78,1,0,16,0,16
-20200417,VT,779,11337,,32,,,,,,15,,4/17/2020 10:05,27f7e75942b5dbf0fcf2c1aefd928ab792d96d78,2020-04-17T20:00:00Z,35,,12116,12116,12116,50,0,0,598,11,609
-20200417,WA,11673,138771,,622,,195,,,,,,4/17/2020 02:59,1b9cc86509b702252389226144b2278b6f429f0d,2020-04-17T20:00:00Z,585,,150444,150444,150444,53,14,0,4020,330,4350
-20200417,WI,4045,42365,198,361,1153,141,306,348,,,,4/17/2020 14:24,fa9a30f2e263394183021352a5603db5890e13ce,2020-04-17T20:00:00Z,205,1153,46608,46410,46410,55,8,32,1391,170,1561
-20200417,WV,754,17927,,85,,34,,24,,223,,4/17/2020 17:00,f8db90539b18bd63add004e57452ddd3154e3f6a,2020-04-17T20:00:00Z,13,,18681,18681,18681,54,0,0,360,15,375
-20200417,WY,296,6131,,19,43,,,,,148,,4/17/2020 16:02,86fa171bc126e1ff9fe3dc483fc78f84b95ee1f3,2020-04-17T20:00:00Z,2,43,6427,6427,6427,56,0,0,0,0,0
-20200416,AK,300,8435,,,35,,,,,110,,4/16/2020 15:30,2b6f22ee19873759113536421174b8142aa9769a,2020-04-16T20:00:00Z,9,35,8735,8735,8735,02,0,1,64,7,71
-20200416,AL,4345,32046,,,553,,227,,137,,,4/16/2020 00:00,bee37efe8849d9cc85ca72d4d7a1d42e8af614c5,2020-04-16T20:00:00Z,133,553,36391,36391,36391,01,12,28,2082,232,2314
-20200416,AR,1620,21055,,85,,,,21,,548,,4/16/2020 14:45,fc6da16a6d56469ec19d3aa0569737748cc74b04,2020-04-16T20:00:00Z,37,,22675,22675,22675,05,4,0,790,51,841
+20200417,VT,779,11337,,32,,,,,,15,A,4/17/2020 10:05,7fc32e6e84dfa6d5c2a7a392ef6f98b288ae638a,2020-04-17T20:00:00Z,35,,12116,12116,12116,50,0,0,598,11,609
+20200417,WA,11673,138771,,622,,195,,,,,C,4/17/2020 02:59,d854152c27bc0e00f8931100852e97fc321fc554,2020-04-17T20:00:00Z,585,,150444,150444,150444,53,14,0,4020,330,4350
+20200417,WI,4045,42365,198,361,1153,141,306,348,,,A,4/17/2020 14:24,2eba9251f7c3d704668b764220d3d4766d4d5935,2020-04-17T20:00:00Z,205,1153,46608,46410,46410,55,8,32,1391,170,1561
+20200417,WV,754,17927,,85,,34,,24,,223,B,4/17/2020 17:00,5486af49d5df3b2a3c1d7c9ec93798c22565e335,2020-04-17T20:00:00Z,13,,18681,18681,18681,54,0,0,360,15,375
+20200417,WY,296,6131,,19,43,,,,,148,A,4/17/2020 16:02,07bb5bba797252ef876736890a63cf4d239b7574,2020-04-17T20:00:00Z,2,43,6427,6427,6427,56,0,0,0,0,0
+20200416,AK,300,8435,,,35,,,,,110,A,4/16/2020 15:30,e0a0eae66518d1a943b4bb64c684d2fcd807218d,2020-04-16T20:00:00Z,9,35,8735,8735,8735,02,0,1,64,7,71
+20200416,AL,4345,32046,,,553,,227,,137,,B,4/16/2020 00:00,0630e48d201ab4e443a6bcbbf4a730766f437798,2020-04-16T20:00:00Z,133,553,36391,36391,36391,01,12,28,2082,232,2314
+20200416,AR,1620,21055,,85,,,,21,,548,A,4/16/2020 14:45,99d6e08e360e065638394f36bda39965d9d16354,2020-04-16T20:00:00Z,37,,22675,22675,22675,05,4,0,790,51,841
 20200416,AS,0,3,17,,,,,,,,,4/6/2020 00:00,69c6b25e7ed4004ce13d7bcbd28181128663649a,2020-04-16T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200416,AZ,4234,43164,,578,,278,,188,,460,,4/16/2020 00:00,2d9777edf25e11e2bd31f88aecf666f9ae13f1ca,2020-04-16T20:00:00Z,150,,47398,47398,47398,04,8,0,1816,272,2088
-20200416,CA,26182,220218,13200,5031,,1568,,,,,,4/15/2020 00:00,e58bde1fb985fbe85b08d6a352c769e2f464e489,2020-04-16T20:00:00Z,890,,259600,246400,246400,06,69,0,28156,1758,29914
-20200416,CO,8280,32253,,859,1636,,,,,,,4/16/2020 18:00,4fb9f1df41022dc6eb1b08531a549b81c69dd68f,2020-04-16T20:00:00Z,357,1636,40533,40533,40533,08,28,80,614,339,953
-20200416,CT,15884,37238,,1926,,,,,,,,4/16/2020 16:30,23daab131c4bf8c3f21fa60922b86ca3d3451134,2020-04-16T20:00:00Z,971,,53122,53122,53122,09,103,0,1850,1129,2979
-20200416,DC,2350,9800,,313,,105,,79,,552,,4/15/2020 00:00,b29b91d1550bf141ea0706aa4c21ab1c1a7bf5a5,2020-04-16T20:00:00Z,81,,12150,12150,12150,11,9,0,472,153,625
-20200416,DE,2075,11275,,209,,,,,,378,,4/16/2020 16:00,645a14293504b107b17ff9f68983a164720632c6,2020-04-16T20:00:00Z,52,,13350,13350,13350,10,6,0,187,61,248
-20200416,FL,22897,196351,1325,,3460,,,,,,,4/16/2020 16:39,114007ab4458480617a9aecd71fee0821fd592da,2020-04-16T20:00:00Z,646,3460,220573,219248,219248,12,37,116,5353,386,5739
-20200416,GA,15669,52270,,,3108,,,,,,,4/16/2020 18:28,777a8e153abf9443aa4864594f874cf06559e526,2020-04-16T20:00:00Z,587,3108,67939,67939,67939,13,35,186,3167,682,3849
+20200416,AZ,4234,43164,,578,,278,,188,,460,B,4/16/2020 00:00,638121c892b8737475097f1054eddd1d91fc657f,2020-04-16T20:00:00Z,150,,47398,47398,47398,04,8,0,1816,272,2088
+20200416,CA,26182,220218,13200,5031,,1568,,,,,B,4/15/2020 00:00,435af3ea5874a7d99fcebe9de7f9b9d4333b248d,2020-04-16T20:00:00Z,890,,259600,246400,246400,06,69,0,28156,1758,29914
+20200416,CO,8280,32253,,859,1636,,,,,,A,4/16/2020 18:00,1828b3a5ca504168bf506cefa83da3544137ed2a,2020-04-16T20:00:00Z,357,1636,40533,40533,40533,08,28,80,614,339,953
+20200416,CT,15884,37238,,1926,,,,,,,A,4/16/2020 16:30,e06765f22dc04179a048e9f6ac37e8f2ce046a33,2020-04-16T20:00:00Z,971,,53122,53122,53122,09,103,0,1850,1129,2979
+20200416,DC,2350,9800,,313,,105,,79,,552,A,4/15/2020 00:00,50d73ee8f031757bab6e659ad5af8f736cf6baaa,2020-04-16T20:00:00Z,81,,12150,12150,12150,11,9,0,472,153,625
+20200416,DE,2075,11275,,209,,,,,,378,A,4/16/2020 16:00,c3040e28f3edab8b93f38cb090a29b15315df0a7,2020-04-16T20:00:00Z,52,,13350,13350,13350,10,6,0,187,61,248
+20200416,FL,22897,196351,1325,,3460,,,,,,A,4/16/2020 16:39,52dce653bb14bf17a56dbb4be2798415ac69f6c8,2020-04-16T20:00:00Z,646,3460,220573,219248,219248,12,37,116,5353,386,5739
+20200416,GA,15669,52270,,,3108,,,,,,A,4/16/2020 18:28,df32d8aa6ec4ecca2a98798341a06860dbe510fc,2020-04-16T20:00:00Z,587,3108,67939,67939,67939,13,35,186,3167,682,3849
 20200416,GU,133,870,,9,,,,,,86,,4/16/2020 07:45,c694c2747f7c76f1ab8ba1a5c3c1d3d7c39178bb,2020-04-16T20:00:00Z,5,,1003,1003,1003,66,0,0,27,0,27
-20200416,HI,530,20170,,,45,,,,,359,,4/16/2020 18:00,64fd0aadd3957743ee62f059baa6a52543a9d77d,2020-04-16T20:00:00Z,9,45,20700,20700,20700,15,0,0,884,13,897
-20200416,IA,2141,18534,,175,,84,,48,,987,,4/15/2020 12:00,8a0dae01a079c9a71a7a3a65f6068aae8d2ae57c,2020-04-16T20:00:00Z,60,,20675,20675,20675,19,7,0,660,146,806
-20200416,ID,1587,14244,,,143,,46,,,,,4/16/2020 19:00,89bb90370a04b8eb01344c706a779973bc19bef5,2020-04-16T20:00:00Z,41,143,15831,15831,15831,16,2,2,310,123,433
-20200416,IL,25733,96856,,4423,,1248,,797,,,,4/16/2020 00:00,1856d4b3b7776d005c9c394c98368e4d59a3f532,2020-04-16T20:00:00Z,1072,,122589,122589,122589,17,124,0,4520,1140,5660
-20200416,IN,9542,41573,,,,696,,426,,,,4/15/2020 23:59,662e66c0887233060359439ca91c3b3d43b25db5,2020-04-16T20:00:00Z,477,,51115,51115,51115,18,41,0,2132,587,2719
-20200416,KS,1588,14534,,,359,,,,,,,4/16/2020 12:00,3e86311b46cae83dee1603f40a09f4276e5c59e6,2020-04-16T20:00:00Z,80,359,16122,16122,16122,20,4,17,1360,94,1454
-20200416,KY,2291,26033,,412,807,252,367,,,862,,4/16/2020 17:00,66707e09d3b8f2e8c3167ad43373e763426611ef,2020-04-16T20:00:00Z,122,807,28324,28324,28324,21,7,120,546,81,627
-20200416,LA,22532,104054,,1914,,,,396,,,,4/16/2020 13:00,2a3b44db83387f01a9c6f7a01633801ff7c7bfb7,2020-04-16T20:00:00Z,1156,,126586,126586,126586,22,53,0,4077,581,4658
-20200416,MA,32492,110098,,3726,3726,973,,,,,,4/16/2020 10:00,3d96de56acff54c0190a519a8fdb1fae9fc96d01,2020-04-16T20:00:00Z,1667,3726,142590,142590,142590,25,165,89,7308,2522,9830
-20200416,MD,10784,48059,,,2451,,,,,736,,4/16/2020 10:00,24b02bbfa6579f60e44799fa6622f509c902d8e8,2020-04-16T20:00:00Z,459,2451,58843,58843,58843,24,46,220,2328,752,3080
-20200416,ME,796,14076,,47,130,20,,7,,333,,4/16/2020 11:45,ca0b3061c22ed9714e3281d1dcb48b18ba707b53,2020-04-16T20:00:00Z,27,130,14872,14872,14872,23,3,4,0,26,26
-20200416,MI,29263,65023,,3809,,1447,,1211,,617,,4/16/2020 11:00,725dc2660cf2fa6445d861a18d14dd84795c42f4,2020-04-16T20:00:00Z,2093,,94286,94286,94286,26,172,0,3385,1204,4589
-20200416,MN,1912,39763,,213,475,103,188,,,1020,,4/15/2020 17:00,5f55a9ff09f8e41c98c9882cc444ba78f56d635c,2020-04-16T20:00:00Z,94,475,41675,41675,41675,27,7,30,1330,103,1433
-20200416,MO,5111,45537,,1043,,,,,,,,4/16/2020 15:00,ac8bea9c5dfcc593ac68e6f0c30a1a762575b343,2020-04-16T20:00:00Z,152,,50648,50648,50648,29,5,0,1420,216,1636
+20200416,HI,530,20170,,,45,,,,,359,A,4/16/2020 18:00,e6825df39202f5a14f7a123ba4b86a4cb29c779d,2020-04-16T20:00:00Z,9,45,20700,20700,20700,15,0,0,884,13,897
+20200416,IA,2141,18534,,175,,84,,48,,987,A,4/15/2020 12:00,d5ef7ebe3f42ccef8c4a08c7bae4a1426ce398b5,2020-04-16T20:00:00Z,60,,20675,20675,20675,19,7,0,660,146,806
+20200416,ID,1587,14244,,,143,,46,,,,A,4/16/2020 19:00,3ccce40fbf6b059bfae808c525040d3638e2ccca,2020-04-16T20:00:00Z,41,143,15831,15831,15831,16,2,2,310,123,433
+20200416,IL,25733,96856,,4423,,1248,,797,,,A,4/16/2020 00:00,60f41318f1c04c9cc64dcae3bb9737bb552b5bea,2020-04-16T20:00:00Z,1072,,122589,122589,122589,17,124,0,4520,1140,5660
+20200416,IN,9542,41573,,,,696,,426,,,B,4/15/2020 23:59,d2471004d7d97596a155ea7f5fd0cdea68bc0bd4,2020-04-16T20:00:00Z,477,,51115,51115,51115,18,41,0,2132,587,2719
+20200416,KS,1588,14534,,,359,,,,,,B,4/16/2020 12:00,62e469d40faeddc49e983ae69a68c15daa8072f8,2020-04-16T20:00:00Z,80,359,16122,16122,16122,20,4,17,1360,94,1454
+20200416,KY,2291,26033,,412,807,252,367,,,862,A,4/16/2020 17:00,330e05db97eac816ee6fd6f4c7c0c45a3659ca96,2020-04-16T20:00:00Z,122,807,28324,28324,28324,21,7,120,546,81,627
+20200416,LA,22532,104054,,1914,,,,396,,,A,4/16/2020 13:00,beba250d2fdc508dcc173fc36e0b5a04438d4ac2,2020-04-16T20:00:00Z,1156,,126586,126586,126586,22,53,0,4077,581,4658
+20200416,MA,32492,110098,,3726,3726,973,,,,,B,4/16/2020 10:00,1a5f7948be62c5cbdc6f84266a94e8fd0362848d,2020-04-16T20:00:00Z,1667,3726,142590,142590,142590,25,165,89,7308,2522,9830
+20200416,MD,10784,48059,,,2451,,,,,736,A,4/16/2020 10:00,8818e1bb2d6cc6619f9c4f24bc810585c139e0ac,2020-04-16T20:00:00Z,459,2451,58843,58843,58843,24,46,220,2328,752,3080
+20200416,ME,796,14076,,47,130,20,,7,,333,A,4/16/2020 11:45,672014ade8b845ebd19f6d0257ae15f0e234b3bc,2020-04-16T20:00:00Z,27,130,14872,14872,14872,23,3,4,0,26,26
+20200416,MI,29263,65023,,3809,,1447,,1211,,617,B,4/16/2020 11:00,d38e75f7b08c8f53abceb81cea0d397d5d541575,2020-04-16T20:00:00Z,2093,,94286,94286,94286,26,172,0,3385,1204,4589
+20200416,MN,1912,39763,,213,475,103,188,,,1020,A,4/15/2020 17:00,d5d9d5bc4370ec93f87c6175121767ee5a2eb0fa,2020-04-16T20:00:00Z,94,475,41675,41675,41675,27,7,30,1330,103,1433
+20200416,MO,5111,45537,,1043,,,,,,,A,4/16/2020 15:00,3729b5a4d5698ee86f42eee794f15a30049a191d,2020-04-16T20:00:00Z,152,,50648,50648,50648,29,5,0,1420,216,1636
 20200416,MP,13,27,7,,,,,,,,,4/15/2020 00:00,9854af700703f8a69749addb2e776cbadd5b0271,2020-04-16T20:00:00Z,2,,47,40,40,69,0,0,0,0,0
-20200416,MS,3624,34791,,,682,154,,99,,,,4/15/2020 19:00,bce828391a1e78df2f11edbd423b629e1724418e,2020-04-16T20:00:00Z,129,682,38415,38415,38415,28,7,37,0,264,264
-20200416,MT,415,9521,,21,52,,,,,218,,4/16/2020 11:44,a195ee91fddd014edb5a1f9b9502c76388708f42,2020-04-16T20:00:00Z,7,52,9936,9936,9936,30,0,1,342,11,353
-20200416,NC,5465,65452,,452,,,,,,,,4/16/2020 10:45,23f96a1051299efbed9966b563dc26556d13aca9,2020-04-16T20:00:00Z,131,,70917,70917,70917,37,14,0,2748,342,3090
-20200416,ND,393,11311,,14,45,,,,,163,,4/16/2020 13:00,74c5040736d4c272691d32bb7c62f48e94ca9b65,2020-04-16T20:00:00Z,9,45,11704,11704,11704,38,0,1,359,28,387
-20200416,NE,952,11342,,,,,,,,,,4/16/2020 19:40,38fbc7e05ec53b154f3abd37a3c08982e35f248b,2020-04-16T20:00:00Z,21,,12294,12294,12294,31,1,0,514,51,565
-20200416,NH,1139,11027,121,70,178,,,,,365,,4/15/2020 09:00,1b70e274dfda3db27437684c88191b1a08c20d95,2020-04-16T20:00:00Z,32,178,12287,12166,12166,33,0,0,0,0,0
-20200416,NJ,75317,76513,,8224,,2014,,1645,,,,4/16/2020 13:00,69371139a57023459224e02ca643595f1f002a03,2020-04-16T20:00:00Z,3518,,151830,151830,151830,34,362,0,3522,4287,7809
-20200416,NM,1484,31910,,90,215,,,,,353,,4/16/2020 19:09,d5bee535f0cbd74134fbe7b809197598832e2a4e,2020-04-16T20:00:00Z,36,215,33394,33394,33394,35,0,34,467,77,544
-20200416,NV,3321,25130,,,,,,,,,,4/16/2020 19:00,ac863ae96c681d243d8cccd562388dcfaaad07c2,2020-04-16T20:00:00Z,137,,28451,28451,28451,32,6,0,686,110,796
-20200416,NY,222284,328295,,17735,48535,5091,,,,30800,,4/16/2020 00:00,966381598ce1347133963a38b8bcc053924ec52c,2020-04-16T20:00:00Z,12192,48535,550579,550579,550579,36,606,1996,16062,8505,24567
-20200416,OH,8414,66426,,,2331,,707,,,,,4/16/2020 14:00,10ce9b8160e13bbaf1695040cc8ef6a3411d4fa5,2020-04-16T20:00:00Z,389,2331,74840,74840,74840,39,28,94,2665,623,3288
-20200416,OK,2357,28542,,236,528,163,,,,1240,,4/16/2020 08:00,28af7e43980abec613c8fee40c1bc88761e241fa,2020-04-16T20:00:00Z,131,528,30899,30899,30899,40,8,18,1586,94,1680
-20200416,OR,1736,33202,,307,414,89,,43,,,,4/16/2020 11:00,0270d0cdf477cf8b51aadf54a258661afd812624,2020-04-16T20:00:00Z,64,414,34938,34938,34938,41,6,13,1514,73,1587
-20200416,PA,27735,113735,,2512,,,,675,,,,4/16/2020 12:00,e9c3337a6603523699ed9eb831022144a75dfe38,2020-04-16T20:00:00Z,707,,141470,141470,141470,42,60,0,2641,1245,3886
-20200416,PR,1043,7315,1465,,,,,,,,,4/16/2020 07:00,8933f5e05c9a3350cc328d343317f0088ccaecb8,2020-04-16T20:00:00Z,56,,9823,8358,8358,72,5,0,490,69,559
-20200416,RI,3838,24226,,245,331,61,,43,,182,,4/16/2020 00:00,ccdca5d052439a05487968a6c3d5942d82755ccf,2020-04-16T20:00:00Z,105,331,28064,28064,28064,44,18,0,1858,309,2167
-20200416,SC,3656,31077,,,675,,,,,,,4/16/2020 17:06,5bc36f894904d30856c19bd222a1664bc342bac9,2020-04-16T20:00:00Z,107,675,34733,34733,34733,45,0,0,0,0,0
-20200416,SD,1311,9239,2,,55,,,,,373,,4/15/2020 18:00,1c3cc759879f3e0d05b03333b24e098740e9f18c,2020-04-16T20:00:00Z,7,55,10552,10550,10550,46,1,4,548,143,691
-20200416,TN,6262,78787,,,691,,,,,2786,,4/16/2020 15:00,e7785a6285001bab1cfa6f76fc4c19fd19099eb3,2020-04-16T20:00:00Z,141,691,85049,85049,85049,47,6,28,3970,183,4153
-20200416,TX,16455,142092,,1459,,,,,,3677,,4/16/2020 13:00,e2caba023b072b715c7ab8899928efb03b0b3597,2020-04-16T20:00:00Z,393,,158547,158547,158547,48,29,0,5774,963,6737
-20200416,UT,2683,46995,,,238,,,,,357,,4/16/2020 15:00,8c4f63dc97721aec2e182026e5a15a1ec1b97fd9,2020-04-16T20:00:00Z,21,238,49678,49678,49678,49,1,17,1923,141,2064
-20200416,VA,6889,39555,537,1337,1114,427,,238,,951,,4/16/2020 00:00,80fee2bf8d240e31fd7c288605a58fb652e5c176,2020-04-16T20:00:00Z,208,1114,46981,46444,46444,51,13,66,1886,389,2275
+20200416,MS,3624,34791,,,682,154,,99,,,A,4/15/2020 19:00,ef04138350fc1944bb66b55b5fa0e2bac893d797,2020-04-16T20:00:00Z,129,682,38415,38415,38415,28,7,37,0,264,264
+20200416,MT,415,9521,,21,52,,,,,218,A,4/16/2020 11:44,f62755b7f1a1a019c9cf81fd443afb5d7e53ac1d,2020-04-16T20:00:00Z,7,52,9936,9936,9936,30,0,1,342,11,353
+20200416,NC,5465,65452,,452,,,,,,,A,4/16/2020 10:45,7537b6a77581df10ff2cffc79558a4b1ae037561,2020-04-16T20:00:00Z,131,,70917,70917,70917,37,14,0,2748,342,3090
+20200416,ND,393,11311,,14,45,,,,,163,B,4/16/2020 13:00,48bb505538f89b6aa47644f43bb429770379a665,2020-04-16T20:00:00Z,9,45,11704,11704,11704,38,0,1,359,28,387
+20200416,NE,952,11342,,,,,,,,,A,4/16/2020 19:40,b72b537c011498e86822d738edd57788348c117b,2020-04-16T20:00:00Z,21,,12294,12294,12294,31,1,0,514,51,565
+20200416,NH,1139,11027,121,70,178,,,,,365,B,4/15/2020 09:00,6ddffcf8f5174afcc136c0cc9ccdc836f5bf123c,2020-04-16T20:00:00Z,32,178,12287,12166,12166,33,0,0,0,0,0
+20200416,NJ,75317,76513,,8224,,2014,,1645,,,A,4/16/2020 13:00,6f53830104152ffe83ea25f4f168e8080bd746fe,2020-04-16T20:00:00Z,3518,,151830,151830,151830,34,362,0,3522,4287,7809
+20200416,NM,1484,31910,,90,215,,,,,353,A,4/16/2020 19:09,d4551867258f4d856d1c3d3d52a03ea113a958a6,2020-04-16T20:00:00Z,36,215,33394,33394,33394,35,0,34,467,77,544
+20200416,NV,3321,25130,,,,,,,,,A,4/16/2020 19:00,a442df05598061dcba97c2c4a0effc91b871c46b,2020-04-16T20:00:00Z,137,,28451,28451,28451,32,6,0,686,110,796
+20200416,NY,222284,328295,,17735,48535,5091,,,,30800,A,4/16/2020 00:00,53fb51ea5f3fc0f462195e4b14847ceaa73517e6,2020-04-16T20:00:00Z,12192,48535,550579,550579,550579,36,606,1996,16062,8505,24567
+20200416,OH,8414,66426,,,2331,,707,,,,B,4/16/2020 14:00,6cbedc499e56e27314a4dc6c584877882d67772f,2020-04-16T20:00:00Z,389,2331,74840,74840,74840,39,28,94,2665,623,3288
+20200416,OK,2357,28542,,236,528,163,,,,1240,B,4/16/2020 08:00,87a4db1695e61bc57eb7de7ede856fca57468514,2020-04-16T20:00:00Z,131,528,30899,30899,30899,40,8,18,1586,94,1680
+20200416,OR,1736,33202,,307,414,89,,43,,,A,4/16/2020 11:00,e882a6df1a656b506650721eca501e24e1be5c40,2020-04-16T20:00:00Z,64,414,34938,34938,34938,41,6,13,1514,73,1587
+20200416,PA,27735,113735,,2512,,,,675,,,A,4/16/2020 12:00,10ad0c0c14394c6412669fa823f4369667dd0935,2020-04-16T20:00:00Z,707,,141470,141470,141470,42,60,0,2641,1245,3886
+20200416,PR,1043,7315,1465,,,,,,,,A,4/16/2020 07:00,d474563651be74c12631c26f7acc00707291c2fa,2020-04-16T20:00:00Z,56,,9823,8358,8358,72,5,0,490,69,559
+20200416,RI,3838,24226,,245,331,61,,43,,182,B,4/16/2020 00:00,f3a182252d930eef7df4760dd2ed4de8a11bc162,2020-04-16T20:00:00Z,105,331,28064,28064,28064,44,18,0,1858,309,2167
+20200416,SC,3656,31077,,,675,,,,,,B,4/16/2020 17:06,65d688580c90a3f582d0f44fcc4ea330142e57dc,2020-04-16T20:00:00Z,107,675,34733,34733,34733,45,0,0,0,0,0
+20200416,SD,1311,9239,2,,55,,,,,373,A,4/15/2020 18:00,c26f685f785f5688e64749a0f31de6df312809c6,2020-04-16T20:00:00Z,7,55,10552,10550,10550,46,1,4,548,143,691
+20200416,TN,6262,78787,,,691,,,,,2786,A,4/16/2020 15:00,6f5092ef000b277c8714670552a53ee588567553,2020-04-16T20:00:00Z,141,691,85049,85049,85049,47,6,28,3970,183,4153
+20200416,TX,16455,142092,,1459,,,,,,3677,A,4/16/2020 13:00,3c396ea54e975a5a87e9c160fa2cd0b2f6f56b54,2020-04-16T20:00:00Z,393,,158547,158547,158547,48,29,0,5774,963,6737
+20200416,UT,2683,46995,,,238,,,,,357,A,4/16/2020 15:00,ef4f3b2cf145f56715cd7dc952e645953860a1b7,2020-04-16T20:00:00Z,21,238,49678,49678,49678,49,1,17,1923,141,2064
+20200416,VA,6889,39555,537,1337,1114,427,,238,,951,A,4/16/2020 00:00,a8717ecbb12d77d090353871da2750ff4d428ffa,2020-04-16T20:00:00Z,208,1114,46981,46444,46444,51,13,66,1886,389,2275
 20200416,VI,51,357,35,,,,,,,46,,4/16/2020 08:30,36bf6014e9eed16bdf7fa844aec47ddc380dd3ec,2020-04-16T20:00:00Z,1,,443,408,408,78,0,0,26,0,26
-20200416,VT,768,10739,,58,,,,,,15,,4/16/2020 09:20,0b47e3ee19b081988be72a57aac434d5bf3607a7,2020-04-16T20:00:00Z,35,,11507,11507,11507,50,5,0,417,9,426
-20200416,WA,11343,134751,,595,,196,,,,,,4/16/2020 02:59,9f1dd54d2d2e33f4f33c0e0aac6bb5f437633bb6,2020-04-16T20:00:00Z,571,,146094,146094,146094,53,20,0,3923,243,4166
-20200416,WI,3875,40974,218,394,1121,147,299,,,,,4/16/2020 00:00,c17e02fa534470ab6a95475e1d66fb088175df1a,2020-04-16T20:00:00Z,197,1121,45067,44849,44849,55,15,30,1648,154,1802
-20200416,WV,739,17567,,85,,34,,24,,223,,4/16/2020 16:30,3cecf2cb9d455c918051626ab8e48e437a14a63c,2020-04-16T20:00:00Z,13,,18306,18306,18306,54,3,0,613,37,650
-20200416,WY,296,6131,,19,43,,,,,148,,4/16/2020 20:15,a3a8aca8adf08fdcb445df980b342d2cf6cd15d3,2020-04-16T20:00:00Z,2,43,6427,6427,6427,56,0,0,89,9,98
-20200415,AK,293,8371,,,34,,,,,106,,4/15/2020 15:15,be01c3ac18f2bbdb51063a2c4db7852b798b0d1a,2020-04-15T20:00:00Z,9,34,8664,8664,8664,02,0,2,308,8,316
-20200415,AL,4113,29964,,,525,,219,,134,,,4/15/2020 00:00,4a3801887ef23787466379789d253055719ec6f2,2020-04-15T20:00:00Z,121,525,34077,34077,34077,01,11,32,723,237,960
-20200415,AR,1569,20265,,83,130,,43,26,39,489,,4/15/2020 14:45,d4dbc5156bcb107fa2611e569ddc2b6e99ee3f98,2020-04-15T20:00:00Z,33,130,21834,21834,21834,05,3,0,614,89,703
+20200416,VT,768,10739,,58,,,,,,15,A,4/16/2020 09:20,33cc8466dcf61f9690c1b3055e17bba85fac6733,2020-04-16T20:00:00Z,35,,11507,11507,11507,50,5,0,417,9,426
+20200416,WA,11343,134751,,595,,196,,,,,C,4/16/2020 02:59,6d3cb7a69736d3d8fd0c7885af835b19ffdc4097,2020-04-16T20:00:00Z,571,,146094,146094,146094,53,20,0,3923,243,4166
+20200416,WI,3875,40974,218,394,1121,147,299,,,,A,4/16/2020 00:00,5728ce4252791f7d3855c60b7a5d0a51e5bf201c,2020-04-16T20:00:00Z,197,1121,45067,44849,44849,55,15,30,1648,154,1802
+20200416,WV,739,17567,,85,,34,,24,,223,B,4/16/2020 16:30,c35dbaff7125d13909dfe9907fffd7e5c6917384,2020-04-16T20:00:00Z,13,,18306,18306,18306,54,3,0,613,37,650
+20200416,WY,296,6131,,19,43,,,,,148,A,4/16/2020 20:15,cf9b128cef08a4d7fd42b8fb432560c179593bb5,2020-04-16T20:00:00Z,2,43,6427,6427,6427,56,0,0,89,9,98
+20200415,AK,293,8371,,,34,,,,,106,A,4/15/2020 15:15,5b0ccaf9afb8281edb8c356d24115b91228c0d63,2020-04-15T20:00:00Z,9,34,8664,8664,8664,02,0,2,308,8,316
+20200415,AL,4113,29964,,,525,,219,,134,,B,4/15/2020 00:00,3da9ba6d59bb59a18fb991d43fec5b3a5737aa94,2020-04-15T20:00:00Z,121,525,34077,34077,34077,01,11,32,723,237,960
+20200415,AR,1569,20265,,83,130,,43,26,39,489,A,4/15/2020 14:45,ffd3075c5cbd02b405fc88cb5814760001ba224c,2020-04-15T20:00:00Z,33,130,21834,21834,21834,05,3,0,614,89,703
 20200415,AS,0,3,17,,,,,,,,,4/6/2020 00:00,187f5210e67ce3b937ef94672584ca870f9b758c,2020-04-15T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200415,AZ,3962,41348,,590,,286,,202,,385,,4/15/2020 00:00,8b2174005fd668498d715c8207f1c9ded1eccc44,2020-04-15T20:00:00Z,142,,45310,45310,45310,04,11,0,1058,156,1214
-20200415,CA,24424,192062,13200,5163,,1175,,,,,,4/14/2020 00:00,93d3d86d00d3f4035c6223a5a4db6fcba5bed76f,2020-04-15T20:00:00Z,821,,229686,216486,216486,06,63,0,13192,1086,14278
-20200415,CO,7941,31639,,878,1556,,,,,,,4/14/2020 01:59,afecb7407d9aac4379513e865a660faeacac820d,2020-04-15T20:00:00Z,329,1556,39580,39580,39580,08,21,63,588,250,838
-20200415,CT,14755,35388,,1908,,,,,,,,4/15/2020 16:00,1a3cb94eeed2eedc208317132716be7b62b7a4db,2020-04-15T20:00:00Z,868,,50143,50143,50143,09,197,0,3536,766,4302
-20200415,DC,2197,9328,,313,,105,,79,,530,,4/15/2020 00:00,bb1ee363d936474527319c1c985478e2afbfe765,2020-04-15T20:00:00Z,72,,11525,11525,11525,11,5,0,102,139,241
-20200415,DE,2014,11088,,208,,,,,,354,,4/15/2020 16:15,7c4c77913fc200a68ab03e73ed085027816595b1,2020-04-15T20:00:00Z,46,,13102,13102,13102,10,5,0,545,253,798
-20200415,FL,22511,190998,1335,,3344,,,,,,,4/15/2020 13:50,8ca083befe5232c986ecf1a3794019c65d3f676f,2020-04-15T20:00:00Z,609,3344,214844,213509,213509,12,72,284,9185,1144,10329
-20200415,GA,14987,49103,,,2922,,,,,,,4/15/2020 11:28,4233e2fecdf6a39733a3f8dcf9852d3eec98477d,2020-04-15T20:00:00Z,552,2922,64090,64090,64090,13,51,153,1531,764,2295
+20200415,AZ,3962,41348,,590,,286,,202,,385,B,4/15/2020 00:00,9f325e12aceafea9d0d825fb397bea3390e43e65,2020-04-15T20:00:00Z,142,,45310,45310,45310,04,11,0,1058,156,1214
+20200415,CA,24424,192062,13200,5163,,1175,,,,,B,4/14/2020 00:00,f441997a6a1b89ec0dd21ae8ef29cf4fc7b5859e,2020-04-15T20:00:00Z,821,,229686,216486,216486,06,63,0,13192,1086,14278
+20200415,CO,7941,31639,,878,1556,,,,,,A,4/14/2020 01:59,f31bcbefc000b059d4d7b2022ebd78e729bed2a0,2020-04-15T20:00:00Z,329,1556,39580,39580,39580,08,21,63,588,250,838
+20200415,CT,14755,35388,,1908,,,,,,,A,4/15/2020 16:00,e47a17a04866a3f402e28d189d1229885d631c1f,2020-04-15T20:00:00Z,868,,50143,50143,50143,09,197,0,3536,766,4302
+20200415,DC,2197,9328,,313,,105,,79,,530,A,4/15/2020 00:00,e028f8b1fe39d6b8d3da713314db44171c54c1ec,2020-04-15T20:00:00Z,72,,11525,11525,11525,11,5,0,102,139,241
+20200415,DE,2014,11088,,208,,,,,,354,A,4/15/2020 16:15,452f7da2d94af552570e09a07ae20a4beffd2ab9,2020-04-15T20:00:00Z,46,,13102,13102,13102,10,5,0,545,253,798
+20200415,FL,22511,190998,1335,,3344,,,,,,A,4/15/2020 13:50,b02bb2e8a3f3e13210ec294acd8f0413c1ad6a34,2020-04-15T20:00:00Z,609,3344,214844,213509,213509,12,72,284,9185,1144,10329
+20200415,GA,14987,49103,,,2922,,,,,,A,4/15/2020 11:28,74f62ec0c6da0120e017fa0542f79f05c8323eb5,2020-04-15T20:00:00Z,552,2922,64090,64090,64090,13,51,153,1531,764,2295
 20200415,GU,133,843,,9,,2,,2,,73,,4/15/2020 07:45,bcf0dc74e4551562423e9fab48a994a6a33c644d,2020-04-15T20:00:00Z,5,,976,976,976,66,0,0,32,0,32
-20200415,HI,517,19286,,,45,,,,,333,,4/14/2020 18:00,2971e9a0368f57034afd2c4439ab3556a8f023db,2020-04-15T20:00:00Z,9,45,19803,19803,19803,15,0,1,370,13,383
-20200415,IA,1995,17874,,171,,78,,43,,908,,4/14/2020 12:00,eaf5df29de6b0b64952d99c9c3229cc5bb197758,2020-04-15T20:00:00Z,53,,19869,19869,19869,19,4,0,888,96,984
-20200415,ID,1464,13934,,,141,,43,,,,,4/14/2020 19:00,178997cb61e149d17eab6588f1afb5ebd29b31f5,2020-04-15T20:00:00Z,39,141,15398,15398,15398,16,6,6,273,11,284
-20200415,IL,24593,92336,,4283,,1189,,796,,,,4/15/2020 00:00,66c8211717bdc4db4db99ae45e853d3ea9d6ba22,2020-04-15T20:00:00Z,948,,116929,116929,116929,17,80,0,4967,1346,6313
-20200415,IN,8955,39441,,,,737,,422,,,,4/14/2020 11:59,e938d984088f4ba22098f01bac0bdb4f0e528fb2,2020-04-15T20:00:00Z,436,,48396,48396,48396,18,48,0,1951,428,2379
-20200415,KS,1494,13174,,,342,,,,,,,4/15/2020 11:30,2a9aa5cc329f01dcdd7c048bb360bbe083de7496,2020-04-15T20:00:00Z,76,342,14668,14668,14668,20,7,15,453,68,521
-20200415,KY,2210,25487,,305,687,137,263,,,653,,4/14/2020 17:00,464a3a1c79c20b528496e34641fa5907efc5b144,2020-04-15T20:00:00Z,115,687,27697,27697,27697,21,11,14,852,162,1014
-20200415,LA,21951,99977,,1943,,,,425,,,,4/15/2020 13:00,6a12994bc19ee67d19b24ffbd12e8399ae1af06c,2020-04-15T20:00:00Z,1103,,121928,121928,121928,22,90,0,3073,433,3506
-20200415,MA,29970,102790,,3637,3637,973,,,,,,4/15/2020 10:00,de78dca41270d94a76c20ab4f051b72a5bbaf9c0,2020-04-15T20:00:00Z,1502,3637,132760,132760,132760,25,173,21,3970,1861,5831
-20200415,MD,10032,45731,,,2231,,,,,607,,4/15/2020 10:00,1a6641b32e2056e1a0fc3c115879fe52f11fb816,2020-04-15T20:00:00Z,413,2231,55763,55763,55763,24,111,109,1470,560,2030
-20200415,ME,770,14076,,48,126,22,,9,,305,,4/15/2020 12:00,1204885b977c715defa8e4b3d1d68b875f03c2d0,2020-04-15T20:00:00Z,24,126,14846,14846,14846,23,4,2,2468,36,2504
-20200415,MI,28059,61638,,3918,,1468,,1212,,452,,4/15/2020 11:00,a4658c17878e2d57d446c25a547a65da5b65baca,2020-04-15T20:00:00Z,1921,,89697,89697,89697,26,153,0,2413,1058,3471
-20200415,MN,1809,38433,,197,445,93,175,,,940,,4/14/2020 17:00,46f7786abfbf8943e9a8c57531038f28283abbda,2020-04-15T20:00:00Z,87,445,40242,40242,40242,27,8,40,887,114,1001
-20200415,MO,4895,44117,,1024,,,,,,,,4/15/2020 15:00,8ff315fda2bc664bfcc7896110385ce533360248,2020-04-15T20:00:00Z,147,,49012,49012,49012,29,14,0,825,209,1034
+20200415,HI,517,19286,,,45,,,,,333,A,4/14/2020 18:00,40e5c246af2bcde9bde077ecc580e139fe22c4a6,2020-04-15T20:00:00Z,9,45,19803,19803,19803,15,0,1,370,13,383
+20200415,IA,1995,17874,,171,,78,,43,,908,A,4/14/2020 12:00,16e35f2aeddfb57adc764a65a4ea7fd686e2f3d5,2020-04-15T20:00:00Z,53,,19869,19869,19869,19,4,0,888,96,984
+20200415,ID,1464,13934,,,141,,43,,,,A,4/14/2020 19:00,96d4b8b8e9c570b72c61cdd77ff59a8cf4f34dee,2020-04-15T20:00:00Z,39,141,15398,15398,15398,16,6,6,273,11,284
+20200415,IL,24593,92336,,4283,,1189,,796,,,A,4/15/2020 00:00,108160afe82ca8104337dee854e03836a9589e1a,2020-04-15T20:00:00Z,948,,116929,116929,116929,17,80,0,4967,1346,6313
+20200415,IN,8955,39441,,,,737,,422,,,B,4/14/2020 11:59,47826170c9e1317ac5812c4b169b91ee00f7c930,2020-04-15T20:00:00Z,436,,48396,48396,48396,18,48,0,1951,428,2379
+20200415,KS,1494,13174,,,342,,,,,,B,4/15/2020 11:30,90d94c9ee65e4770432be801ea530b24195053e5,2020-04-15T20:00:00Z,76,342,14668,14668,14668,20,7,15,453,68,521
+20200415,KY,2210,25487,,305,687,137,263,,,653,A,4/14/2020 17:00,3b70f2bb6555d32a196205076fe07a4ff6e9a02b,2020-04-15T20:00:00Z,115,687,27697,27697,27697,21,11,14,852,162,1014
+20200415,LA,21951,99977,,1943,,,,425,,,A,4/15/2020 13:00,5a70bafcf19e57aa18291a421fe30ed1181820ff,2020-04-15T20:00:00Z,1103,,121928,121928,121928,22,90,0,3073,433,3506
+20200415,MA,29970,102790,,3637,3637,973,,,,,B,4/15/2020 10:00,208059e879c379e73e7dcd5ba1f9551f63afde30,2020-04-15T20:00:00Z,1502,3637,132760,132760,132760,25,173,21,3970,1861,5831
+20200415,MD,10032,45731,,,2231,,,,,607,A,4/15/2020 10:00,805353d49487c9e05ae2e402270cae3aafd63a7b,2020-04-15T20:00:00Z,413,2231,55763,55763,55763,24,111,109,1470,560,2030
+20200415,ME,770,14076,,48,126,22,,9,,305,A,4/15/2020 12:00,7e3b34217593df99e8d53eb4baebea95cca163f8,2020-04-15T20:00:00Z,24,126,14846,14846,14846,23,4,2,2468,36,2504
+20200415,MI,28059,61638,,3918,,1468,,1212,,452,B,4/15/2020 11:00,8c0de37f5acdde21f5c71a12d3bf52313eebc874,2020-04-15T20:00:00Z,1921,,89697,89697,89697,26,153,0,2413,1058,3471
+20200415,MN,1809,38433,,197,445,93,175,,,940,A,4/14/2020 17:00,a3be3d6861a57940edec4382a61655234e932bb1,2020-04-15T20:00:00Z,87,445,40242,40242,40242,27,8,40,887,114,1001
+20200415,MO,4895,44117,,1024,,,,,,,A,4/15/2020 15:00,3d3fe8e5fde130c829812e63dae4b55436490e6d,2020-04-15T20:00:00Z,147,,49012,49012,49012,29,14,0,825,209,1034
 20200415,MP,13,27,7,,,,,,,,,4/14/2020 00:00,4c47fde986cba4247beb12c1e39ba668a4a568fe,2020-04-15T20:00:00Z,2,,47,40,40,69,0,0,0,0,0
-20200415,MS,3360,34791,,,645,154,,99,,,,4/14/2020 19:00,d140230937dcfdbe1d490beb5b59c7d65681390b,2020-04-15T20:00:00Z,122,645,38151,38151,38151,28,11,49,0,273,273
-20200415,MT,404,9179,,21,51,,,,,209,,4/15/2020 11:59,3d98f4615ec1a832898adb9879062dafab0c8579,2020-04-15T20:00:00Z,7,51,9583,9583,9583,30,0,1,344,5,349
-20200415,NC,5123,62704,,431,,,,,,,,4/15/2020 11:00,42f826bf086592cb93e43981fb88a6b924090376,2020-04-15T20:00:00Z,117,,67827,67827,67827,37,9,0,2689,99,2788
-20200415,ND,365,10952,,13,44,,,,,142,,4/15/2020 13:00,6cfecb700344e1bfe73fafa882f988c447c697cc,2020-04-15T20:00:00Z,9,44,11317,11317,11317,38,0,2,377,24,401
-20200415,NE,901,10828,,,,,,,,,,4/14/2020 19:45,ed192c013b28391f77ea7308fc4e9aef88745258,2020-04-15T20:00:00Z,20,,11729,11729,11729,31,2,0,342,30,372
-20200415,NH,1139,11027,121,70,178,,,,,365,,4/15/2020 09:00,6dcc4d9a9e49ac5700a9ebfa815011961d1e9034,2020-04-15T20:00:00Z,32,178,12287,12166,12166,33,9,26,437,119,556
-20200415,NJ,71030,72991,,8270,,1980,,1705,,,,4/15/2020 13:00,5e2fc74de77777668e4481ff58b3f44cc1e6ee7a,2020-04-15T20:00:00Z,3156,,144021,144021,144021,34,351,0,2041,2206,4247
-20200415,NM,1407,31443,,87,181,,,,,340,,4/14/2020 18:56,65c6a721a67c2dc0af21027e0e8cbd72425bd656,2020-04-15T20:00:00Z,36,181,32850,32850,32850,35,5,0,818,62,880
-20200415,NV,3211,24444,,,,,,,,,,4/15/2020 12:00,2b4cc3414da5f3726d3deb182ac48b083df2df50,2020-04-15T20:00:00Z,131,,27655,27655,27655,32,11,0,871,123,994
-20200415,NY,213779,312233,,18535,46539,5225,,,,28004,,4/15/2020 00:00,f1325ce04c4d1fc33ca315beb257caf306cfc5c1,2020-04-15T20:00:00Z,11586,46539,526012,526012,526012,36,752,2253,15298,11571,26869
-20200415,OH,7791,63761,,,2237,,677,,,,,4/15/2020 14:00,d1f7c3b24af5e755bcdd62544a13b9d1ce2c1e93,2020-04-15T20:00:00Z,361,2237,71552,71552,71552,39,37,81,3040,511,3551
-20200415,OK,2263,26956,,194,510,107,,,,1115,,4/15/2020 08:00,ed10e05785e199753472549d463a46ac8ff51d92,2020-04-15T20:00:00Z,123,510,29219,29219,29219,40,15,22,871,79,950
-20200415,OR,1663,31688,,305,401,95,,43,,,,4/15/2020 11:00,804870ec8e0a4be1020075e396c33ad34453a571,2020-04-15T20:00:00Z,58,401,33351,33351,33351,41,3,20,958,30,988
-20200415,PA,26490,111094,,2395,,,,668,,,,4/15/2020 12:00,7bacce267fa4353aad7a00487a1f9a2e3d43f747,2020-04-15T20:00:00Z,647,,137584,137584,137584,42,63,0,2808,1145,3953
-20200415,PR,974,6825,1410,,,,,,,,,4/15/2020 07:00,94bf64eb2bf42c14151b1ecbb77c94c32bca1bbc,2020-04-15T20:00:00Z,51,,9209,7799,7799,72,6,0,541,51,592
-20200415,RI,3529,22368,,229,331,54,,44,,168,,4/15/2020 00:00,4e51ff8ba5b15ac4f35a62d002950e859e12deda,2020-04-15T20:00:00Z,87,331,25897,25897,25897,44,7,0,2719,278,2997
-20200415,SC,3656,31077,,,675,,,,,,,4/15/2020 14:55,614fc167df7dbb14655924af8725a55f86d297a4,2020-04-15T20:00:00Z,107,675,34733,34733,34733,45,10,0,758,103,861
-20200415,SD,1168,8691,0,,51,,,,,329,,4/15/2020 12:30,3709a4200319eee7d9477fb185b229c6cef926e5,2020-04-15T20:00:00Z,6,51,9859,9859,9859,46,0,6,383,180,563
-20200415,TN,6079,74817,,,663,,,,,2196,,4/15/2020 15:00,f043a33756700864cea4217ce0383507a37921f0,2020-04-15T20:00:00Z,135,663,80896,80896,80896,47,11,30,1809,256,2065
-20200415,TX,15492,136318,,1538,,,,,,3150,,4/15/2020 13:00,5d27624bdadf9057b10b6e7349b9b7f7d3912bee,2020-04-15T20:00:00Z,364,,151810,151810,151810,48,46,0,4475,868,5343
-20200415,UT,2542,45072,,,221,,,,,218,,4/15/2020 15:00,74102cbfa5519684e2fcd8f177b8337ac5a9faa0,2020-04-15T20:00:00Z,20,221,47614,47614,47614,49,1,8,1008,130,1138
-20200415,VA,6500,37669,496,1298,1048,394,,234,,752,,4/15/2020 00:00,6c13bdbe2845d15be08bd7334e34b598c4d975c2,2020-04-15T20:00:00Z,195,1048,44665,44169,44169,51,41,1048,1077,329,1406
+20200415,MS,3360,34791,,,645,154,,99,,,A,4/14/2020 19:00,2b33b6715fdea3749dcd0c0d10c5a05fa883f054,2020-04-15T20:00:00Z,122,645,38151,38151,38151,28,11,49,0,273,273
+20200415,MT,404,9179,,21,51,,,,,209,A,4/15/2020 11:59,99b2e8ee53c98a1da05db3317bca007ed89aad70,2020-04-15T20:00:00Z,7,51,9583,9583,9583,30,0,1,344,5,349
+20200415,NC,5123,62704,,431,,,,,,,A,4/15/2020 11:00,4b7902742c325ef8fe0ec1484a287748ab608ccb,2020-04-15T20:00:00Z,117,,67827,67827,67827,37,9,0,2689,99,2788
+20200415,ND,365,10952,,13,44,,,,,142,B,4/15/2020 13:00,5865fb194cf31634edf34ab287e0f0c87d7cea33,2020-04-15T20:00:00Z,9,44,11317,11317,11317,38,0,2,377,24,401
+20200415,NE,901,10828,,,,,,,,,A,4/14/2020 19:45,4f46c760b0dc8cd795ea8d34159a99bd3c5c2782,2020-04-15T20:00:00Z,20,,11729,11729,11729,31,2,0,342,30,372
+20200415,NH,1139,11027,121,70,178,,,,,365,B,4/15/2020 09:00,7437d703e80c5edffe00df1167c089bcdc86c71a,2020-04-15T20:00:00Z,32,178,12287,12166,12166,33,9,26,437,119,556
+20200415,NJ,71030,72991,,8270,,1980,,1705,,,A,4/15/2020 13:00,70411d7fb80ea3ae056455e78f96ef4289ff34c1,2020-04-15T20:00:00Z,3156,,144021,144021,144021,34,351,0,2041,2206,4247
+20200415,NM,1407,31443,,87,181,,,,,340,A,4/14/2020 18:56,a0a9b2145cccacca9419c4aa32a324038aaf2550,2020-04-15T20:00:00Z,36,181,32850,32850,32850,35,5,0,818,62,880
+20200415,NV,3211,24444,,,,,,,,,A,4/15/2020 12:00,7347cb28ada84203925d01f42dd483f0819c3227,2020-04-15T20:00:00Z,131,,27655,27655,27655,32,11,0,871,123,994
+20200415,NY,213779,312233,,18535,46539,5225,,,,28004,A,4/15/2020 00:00,c11436638749dffe28483d7d3a23aa087a677a40,2020-04-15T20:00:00Z,11586,46539,526012,526012,526012,36,752,2253,15298,11571,26869
+20200415,OH,7791,63761,,,2237,,677,,,,B,4/15/2020 14:00,276fd42f12be4f8c087bad1145c542d2d07e639f,2020-04-15T20:00:00Z,361,2237,71552,71552,71552,39,37,81,3040,511,3551
+20200415,OK,2263,26956,,194,510,107,,,,1115,B,4/15/2020 08:00,f9ef781b7b909ddda2ea7d99af163bbc73eff30b,2020-04-15T20:00:00Z,123,510,29219,29219,29219,40,15,22,871,79,950
+20200415,OR,1663,31688,,305,401,95,,43,,,A,4/15/2020 11:00,402a9c7a9a57307fc62501f90a1b97dab3a4e16e,2020-04-15T20:00:00Z,58,401,33351,33351,33351,41,3,20,958,30,988
+20200415,PA,26490,111094,,2395,,,,668,,,A,4/15/2020 12:00,877ac63b219dab9825d1b6a8c0864dcaa67d0ddd,2020-04-15T20:00:00Z,647,,137584,137584,137584,42,63,0,2808,1145,3953
+20200415,PR,974,6825,1410,,,,,,,,A,4/15/2020 07:00,8fcb3788b8b6a42ccdc9f0cd1882d331dd569459,2020-04-15T20:00:00Z,51,,9209,7799,7799,72,6,0,541,51,592
+20200415,RI,3529,22368,,229,331,54,,44,,168,B,4/15/2020 00:00,12ace966ac142b3d294e0add3aeffb6d1a39cb45,2020-04-15T20:00:00Z,87,331,25897,25897,25897,44,7,0,2719,278,2997
+20200415,SC,3656,31077,,,675,,,,,,B,4/15/2020 14:55,4e144f084cb2b72a4ffb0deb48835c3e6ccc3191,2020-04-15T20:00:00Z,107,675,34733,34733,34733,45,10,0,758,103,861
+20200415,SD,1168,8691,0,,51,,,,,329,A,4/15/2020 12:30,6981d1e10be66d769e8230f0a6578d3f32668735,2020-04-15T20:00:00Z,6,51,9859,9859,9859,46,0,6,383,180,563
+20200415,TN,6079,74817,,,663,,,,,2196,A,4/15/2020 15:00,23ab01f1a2de558482887246033bd9001765eaa5,2020-04-15T20:00:00Z,135,663,80896,80896,80896,47,11,30,1809,256,2065
+20200415,TX,15492,136318,,1538,,,,,,3150,A,4/15/2020 13:00,ac78ad2ed71386f6a4c6d9802bf7702fa480e58f,2020-04-15T20:00:00Z,364,,151810,151810,151810,48,46,0,4475,868,5343
+20200415,UT,2542,45072,,,221,,,,,218,A,4/15/2020 15:00,2f33a2ee4ee0afb319f38d914298db90b63dac87,2020-04-15T20:00:00Z,20,221,47614,47614,47614,49,1,8,1008,130,1138
+20200415,VA,6500,37669,496,1298,1048,394,,234,,752,A,4/15/2020 00:00,3e98655e9418e16da8bb9b34ea25b1f3cbbcacdb,2020-04-15T20:00:00Z,195,1048,44665,44169,44169,51,41,1048,1077,329,1406
 20200415,VI,51,331,35,,,,,,,44,,4/14/2020 17:30,5fa8adb4317e4068fdbec95a01b05682395ad39a,2020-04-15T20:00:00Z,1,,417,382,382,78,0,0,5,0,5
-20200415,VT,759,10322,,63,,,,,,15,,4/15/2020 10:15,3e17be53011c64e74412ea93a1dd9d5591ea6069,2020-04-15T20:00:00Z,30,,11081,11081,11081,50,1,0,489,7,496
-20200415,WA,11100,130828,,645,,194,,,,,,4/14/2020 02:59,09628dd9a9fcdd5969b574b78b6e3c2fb56d50c7,2020-04-15T20:00:00Z,551,,141928,141928,141928,53,9,0,3719,311,4030
-20200415,WI,3721,39326,280,406,1091,163,290,,,,,4/15/2020 11:01,7c4682f951c6b22be88291605f90886e0ed07b38,2020-04-15T20:00:00Z,182,1091,43327,43047,43047,55,12,42,1329,166,1495
-20200415,WV,702,16954,,82,164,36,73,23,50,211,,4/15/2020 10:00,e173d7b909493793f458966817a965b291ca467a,2020-04-15T20:00:00Z,10,164,17656,17656,17656,54,1,0,556,62,618
-20200415,WY,287,6042,,,43,,,,,129,,4/15/2020 12:30,404d46d113c40c87d0af6c9161c7687b9e2b60c1,2020-04-15T20:00:00Z,2,43,6329,6329,6329,56,1,0,353,12,365
-20200414,AK,285,8063,,,32,,,,,98,,4/14/2020 14:15,8a6e31bcac3d2f7546e41de8984cbc914fef3ac8,2020-04-14T20:00:00Z,9,32,8348,8348,8348,02,1,0,510,8,518
-20200414,AL,3876,29241,,,493,,210,,132,,,4/14/2020 00:00,b6b08c5598619ab153f2bb5ce05abcb7683a0742,2020-04-14T20:00:00Z,110,493,33117,33117,33117,01,11,36,3793,142,3935
-20200414,AR,1480,19651,,81,130,,43,29,39,427,,4/14/2020 14:46,d15eca657ababebc1b434181f3c3640939bd4573,2020-04-14T20:00:00Z,30,130,21131,21131,21131,05,0,0,257,70,327
+20200415,VT,759,10322,,63,,,,,,15,A,4/15/2020 10:15,64e01e66fa76490c1ffc4e5a005c447c2a83dcee,2020-04-15T20:00:00Z,30,,11081,11081,11081,50,1,0,489,7,496
+20200415,WA,11100,130828,,645,,194,,,,,C,4/14/2020 02:59,74dc1755199e5a8372629bf576da7256dc26bb9e,2020-04-15T20:00:00Z,551,,141928,141928,141928,53,9,0,3719,311,4030
+20200415,WI,3721,39326,280,406,1091,163,290,,,,A,4/15/2020 11:01,8960c30a15a77fb487104c1e6b423334089dd5d1,2020-04-15T20:00:00Z,182,1091,43327,43047,43047,55,12,42,1329,166,1495
+20200415,WV,702,16954,,82,164,36,73,23,50,211,B,4/15/2020 10:00,129b34bd18316d9ea3d06f9e2a34272b089972a6,2020-04-15T20:00:00Z,10,164,17656,17656,17656,54,1,0,556,62,618
+20200415,WY,287,6042,,,43,,,,,129,A,4/15/2020 12:30,daa535241b51a80b35408632ca2e34a946a0360b,2020-04-15T20:00:00Z,2,43,6329,6329,6329,56,1,0,353,12,365
+20200414,AK,285,8063,,,32,,,,,98,A,4/14/2020 14:15,668f4f7cbe6d0ddeff48380d9ec2aca1e74a1dfe,2020-04-14T20:00:00Z,9,32,8348,8348,8348,02,1,0,510,8,518
+20200414,AL,3876,29241,,,493,,210,,132,,B,4/14/2020 00:00,28b19ad8074d4f98646c2840d88064c2ca20e8b8,2020-04-14T20:00:00Z,110,493,33117,33117,33117,01,11,36,3793,142,3935
+20200414,AR,1480,19651,,81,130,,43,29,39,427,A,4/14/2020 14:46,81720db8376cf97c3fdc996ac912f8f0d151d570,2020-04-14T20:00:00Z,30,130,21131,21131,21131,05,0,0,257,70,327
 20200414,AS,0,3,17,,,,,,,,,4/6/2020 00:00,d8f6fa82ecef7a1983c932df4b8bbc08d61e06cb,2020-04-14T20:00:00Z,,,20,3,3,60,0,0,0,0,0
-20200414,AZ,3806,40290,,580,,286,,216,,249,,4/14/2020 00:00,b58c49af376c9d1e7881db407044dc086c2ca1de,2020-04-14T20:00:00Z,131,,44096,44096,44096,04,9,0,645,104,749
-20200414,CA,23338,178870,13200,5163,,1552,,,,,,4/13/2020 00:00,314c8d2a91c67f7096b80f01ff8d6c858e2ba53c,2020-04-14T20:00:00Z,758,,215408,202208,202208,06,71,0,10336,990,11326
-20200414,CO,7691,31051,,888,1493,,,,,,,4/14/2020 00:00,a9c2ce6cca6a685256df6a000a68ec8de61c8229,2020-04-14T20:00:00Z,308,1493,38742,38742,38742,08,4,21,1201,7,1208
-20200414,CT,13989,31852,,1779,,,,,,,,4/14/2020 16:00,40704df2395f5216c757f10ac3863b8d09be33ec,2020-04-14T20:00:00Z,671,,45841,45841,45841,09,69,0,924,608,1532
-20200414,DC,2058,9226,,295,,95,,31,,518,,4/14/2020 00:00,7edb9ad723f5b33ff01d2b72ab32c85037434413,2020-04-14T20:00:00Z,67,,11284,11284,11284,11,14,0,247,103,350
-20200414,DE,1761,10543,,204,,,,,,277,,4/14/2020 17:45,289ca7df73e0189a5c3bf663b291d01728d8e532,2020-04-14T20:00:00Z,41,,12304,12304,12304,10,6,0,348,136,484
-20200414,FL,21367,181813,1275,,3060,,,,,,,4/14/2020 16:59,2521a8cf2df905a521eb40d4234c0dca290f1486,2020-04-14T20:00:00Z,537,3060,204455,203180,203180,12,54,227,6207,766,6973
-20200414,GA,14223,47572,,,2769,,,,,,,4/14/2020 18:28,6c5c2f32eda07ef4320a87dc24db0d8de5b7fac2,2020-04-14T20:00:00Z,501,2769,61795,61795,61795,13,37,180,3866,908,4774
+20200414,AZ,3806,40290,,580,,286,,216,,249,B,4/14/2020 00:00,9e0f56d3e2d596de993fb58d38479e788d97426f,2020-04-14T20:00:00Z,131,,44096,44096,44096,04,9,0,645,104,749
+20200414,CA,23338,178870,13200,5163,,1552,,,,,B,4/13/2020 00:00,db1bac7c9f44520fcf9dced18a12846e1af9614c,2020-04-14T20:00:00Z,758,,215408,202208,202208,06,71,0,10336,990,11326
+20200414,CO,7691,31051,,888,1493,,,,,,A,4/14/2020 00:00,6657fd6249f6db5523c8ec8bec3e68838bd84ad5,2020-04-14T20:00:00Z,308,1493,38742,38742,38742,08,4,21,1201,7,1208
+20200414,CT,13989,31852,,1779,,,,,,,A,4/14/2020 16:00,861cbc2fd1da415f14c00e9fae10bd01728638d2,2020-04-14T20:00:00Z,671,,45841,45841,45841,09,69,0,924,608,1532
+20200414,DC,2058,9226,,295,,95,,31,,518,A,4/14/2020 00:00,db757a4c1f24c6d666a0390d1fca7f8e78726da8,2020-04-14T20:00:00Z,67,,11284,11284,11284,11,14,0,247,103,350
+20200414,DE,1761,10543,,204,,,,,,277,A,4/14/2020 17:45,a67d18c3ef44d1d97f36e821add9cda29081b6ee,2020-04-14T20:00:00Z,41,,12304,12304,12304,10,6,0,348,136,484
+20200414,FL,21367,181813,1275,,3060,,,,,,A,4/14/2020 16:59,286a31db2e5116a55d4aeb1a81b49ef593bf8c79,2020-04-14T20:00:00Z,537,3060,204455,203180,203180,12,54,227,6207,766,6973
+20200414,GA,14223,47572,,,2769,,,,,,A,4/14/2020 18:28,ec1390ecdeb9e07513c2446db7cd110b26361527,2020-04-14T20:00:00Z,501,2769,61795,61795,61795,13,37,180,3866,908,4774
 20200414,GU,133,811,,13,,2,,2,,66,,4/14/2020 08:15,7031856f0dd9de8f7d9c1f4c5ef0f3f99b5e176d,2020-04-14T20:00:00Z,5,,944,944,944,66,0,0,41,0,41
-20200414,HI,504,18916,,,44,,,,,315,,4/14/2020 18:00,89f5e2cc411255efc4069f5b6d7725328938661f,2020-04-14T20:00:00Z,9,44,19420,19420,19420,15,0,0,571,5,576
-20200414,IA,1899,16986,,163,,73,,41,,741,,4/14/2020 00:00,213e8a69b4de4a89a5ef6dd3df25614c5f4718e1,2020-04-14T20:00:00Z,49,,18885,18885,18885,19,6,0,0,189,189
-20200414,ID,1453,13661,,,135,,38,,,,,4/14/2020 19:00,8cc03baa841485f2c173bff2a0f625e7d12185ad,2020-04-14T20:00:00Z,33,135,15114,15114,15114,16,6,3,206,27,233
-20200414,IL,23247,87369,,4283,,1189,,796,,,,4/14/2020 00:00,51f4c7165545bb9d7fa1eb9e70e26135f84e6494,2020-04-14T20:00:00Z,868,,110616,110616,110616,17,74,0,3626,1222,4848
-20200414,IN,8527,37490,,,,721,,435,,,,4/14/2020 13:00,28e9c599908f9578f227699a8ea0f31d08405c7a,2020-04-14T20:00:00Z,388,,46017,46017,46017,18,38,0,1187,291,1478
-20200414,KS,1426,12721,,,327,,,,,,,4/14/2020 12:00,25ff402c7fc282da07579ab1be7a7b5653260559,2020-04-14T20:00:00Z,69,327,14147,14147,14147,20,7,18,233,50,283
-20200414,KY,2048,24635,,299,673,136,259,,,629,,4/14/2020 17:00,0a317c2b0c044828de0e5f40220958506295c21d,2020-04-14T20:00:00Z,104,673,26683,26683,26683,21,7,6,732,85,817
-20200414,LA,21518,96904,,1977,,,,436,,,,4/13/2020 13:00,8f831e048d0abe74ebdcf34ceeb46a707ad695ef,2020-04-14T20:00:00Z,1013,,118422,118422,118422,22,129,0,9829,502,10331
-20200414,MA,28109,98820,,3616,3616,,,,,,,4/14/2020 10:00,f1d87e37e197b38aeec58bfee9a5742148758060,2020-04-14T20:00:00Z,1329,3616,126929,126929,126929,25,118,131,3320,1315,4635
-20200414,MD,9472,44261,,,2122,,,,,607,,4/14/2020 10:00,bb5fc169f88dfecce3575f9e0ffd61d51dcea799,2020-04-14T20:00:00Z,302,2122,53733,53733,53733,24,40,147,1446,536,1982
-20200414,ME,734,11608,,58,124,21,,9,,292,,4/14/2020 11:45,6ad6f17830e515ccf0003b3d8766aa7168de4862,2020-04-14T20:00:00Z,20,124,12342,12342,12342,23,1,0,0,36,36
-20200414,MI,27001,59225,,3910,,1497,,1235,,452,,4/14/2020 11:00,8585830ff7e781eec8ad3829477866658240f47a,2020-04-14T20:00:00Z,1768,,86226,86226,86226,26,166,0,2216,1366,3582
-20200414,MN,1695,37546,,177,405,75,155,,,909,,4/13/2020 17:00,50e965f6f0cec41e4592f7b2f2f1166406b32e50,2020-04-14T20:00:00Z,79,405,39241,39241,39241,27,9,44,769,45,814
-20200414,MO,4686,43292,,1041,,,,,,,,4/14/2020 15:00,3fca02447220f2f5a47f6470c5d8bc17644e47d0,2020-04-14T20:00:00Z,133,,47978,47978,47978,29,19,0,2252,298,2550
+20200414,HI,504,18916,,,44,,,,,315,A,4/14/2020 18:00,112e7ae3d4473058f5f7056b5fac2de14c52050e,2020-04-14T20:00:00Z,9,44,19420,19420,19420,15,0,0,571,5,576
+20200414,IA,1899,16986,,163,,73,,41,,741,A,4/14/2020 00:00,31d4d25f60a74e293e6d29894bd3fa743b18c1c9,2020-04-14T20:00:00Z,49,,18885,18885,18885,19,6,0,0,189,189
+20200414,ID,1453,13661,,,135,,38,,,,A,4/14/2020 19:00,4cc3807ec6c0d4b35ff060cd72fdd26d67db6652,2020-04-14T20:00:00Z,33,135,15114,15114,15114,16,6,3,206,27,233
+20200414,IL,23247,87369,,4283,,1189,,796,,,A,4/14/2020 00:00,86e30997bc7e1aea835bf8c917e0103bbbd6f11a,2020-04-14T20:00:00Z,868,,110616,110616,110616,17,74,0,3626,1222,4848
+20200414,IN,8527,37490,,,,721,,435,,,B,4/14/2020 13:00,494a985ff9e75e358bd2cb017f003e52843bffe4,2020-04-14T20:00:00Z,388,,46017,46017,46017,18,38,0,1187,291,1478
+20200414,KS,1426,12721,,,327,,,,,,B,4/14/2020 12:00,b656123e532bff95913ad2a2f25b9ac0d0ee7c7c,2020-04-14T20:00:00Z,69,327,14147,14147,14147,20,7,18,233,50,283
+20200414,KY,2048,24635,,299,673,136,259,,,629,A,4/14/2020 17:00,4d0988bf89788f5a4b9c90b9bb04ff99cfb7d06f,2020-04-14T20:00:00Z,104,673,26683,26683,26683,21,7,6,732,85,817
+20200414,LA,21518,96904,,1977,,,,436,,,A,4/13/2020 13:00,66fe07f75d823430436470743438bfd150c83cc3,2020-04-14T20:00:00Z,1013,,118422,118422,118422,22,129,0,9829,502,10331
+20200414,MA,28109,98820,,3616,3616,,,,,,B,4/14/2020 10:00,14208e5fcf43fc55d10b65384ce29d2e6c650a66,2020-04-14T20:00:00Z,1329,3616,126929,126929,126929,25,118,131,3320,1315,4635
+20200414,MD,9472,44261,,,2122,,,,,607,A,4/14/2020 10:00,7791ef97ecb5dc2a461c316abff41cf8b0948f60,2020-04-14T20:00:00Z,302,2122,53733,53733,53733,24,40,147,1446,536,1982
+20200414,ME,734,11608,,58,124,21,,9,,292,A,4/14/2020 11:45,c9021f736d76d5db3e6c7b24efd332a55bfcb475,2020-04-14T20:00:00Z,20,124,12342,12342,12342,23,1,0,0,36,36
+20200414,MI,27001,59225,,3910,,1497,,1235,,452,B,4/14/2020 11:00,c89f9fc1f6a3439789444ef7388c5f2dcb52d70a,2020-04-14T20:00:00Z,1768,,86226,86226,86226,26,166,0,2216,1366,3582
+20200414,MN,1695,37546,,177,405,75,155,,,909,A,4/13/2020 17:00,4c88fc76dafb8205f544a0c1facf0530aa19e0bf,2020-04-14T20:00:00Z,79,405,39241,39241,39241,27,9,44,769,45,814
+20200414,MO,4686,43292,,1041,,,,,,,A,4/14/2020 15:00,86fc94a42cdc64c7fcadd162b6bec8cd03e247b7,2020-04-14T20:00:00Z,133,,47978,47978,47978,29,19,0,2252,298,2550
 20200414,MP,13,27,7,,,,,,,,,4/14/2020 00:00,d005c2e743292090da0e3ac3bfbc6b3bdea2d89e,2020-04-14T20:00:00Z,2,,47,40,40,69,0,0,0,2,2
-20200414,MS,3087,34791,,,596,154,,99,,,,4/13/2020 19:00,d5f16707aa2e79d1f11880216350c2c500508dca,2020-04-14T20:00:00Z,111,596,37878,37878,37878,28,13,47,6749,145,6894
-20200414,MT,399,8835,,24,50,,,,,197,,4/14/2020 11:56,628d2691b23e61be6b28741dafe2ef77204b7e28,2020-04-14T20:00:00Z,7,50,9234,9234,9234,30,0,3,131,5,136
-20200414,NC,5024,60015,,418,,,,,,,,4/14/2020 11:00,58019964f4bb14230cf0da70f020e5f43610b96d,2020-04-14T20:00:00Z,108,,65039,65039,65039,37,22,0,1443,208,1651
-20200414,ND,341,10575,,13,42,,,,,138,,4/14/2020 13:00,a29b555bab3bb69a615670eea3b4a2c8e3c79a16,2020-04-14T20:00:00Z,9,42,10916,10916,10916,38,1,2,125,10,135
-20200414,NE,871,10486,,,,,,,,,,4/14/2020 19:45,bd5644f08751690ed414d421070dfbed67edf195,2020-04-14T20:00:00Z,18,,11357,11357,11357,31,1,0,328,57,385
-20200414,NH,1020,10590,25,72,152,,,,,249,,4/14/2020 09:00,ac1f92f3346d0dd4449dee61e28e3bdac07d5100,2020-04-14T20:00:00Z,23,152,11635,11610,11610,33,0,0,368,35,403
-20200414,NJ,68824,70950,,8185,,2051,,1626,,,,4/14/2020 13:00,579b0e1ed6cfa6181ce072f1b005f4f824fce4c9,2020-04-14T20:00:00Z,2805,,139774,139774,139774,34,362,0,6065,4240,10305
-20200414,NM,1345,30625,,87,181,,,,,304,,4/14/2020 20:56,581a1c6a4349ff27f1d1bf8965649669908d630a,2020-04-14T20:00:00Z,31,181,31970,31970,31970,35,5,181,1355,100,1455
-20200414,NV,3088,23573,,,,,,,,,,4/14/2020 18:00,14771afcf9c735272bd56ead06be60d06d9b353f,2020-04-14T20:00:00Z,120,,26661,26661,26661,32,6,0,1080,117,1197
-20200414,NY,202208,296935,,18697,44286,5225,,,,25589,,4/14/2020 00:00,c09068e840931b162e7bd69b74488bf519f37eea,2020-04-14T20:00:00Z,10834,44286,499143,499143,499143,36,778,1649,13609,7177,20786
-20200414,OH,7280,60721,,,2156,,654,,,,,4/14/2020 14:00,ce91fee089dfef2c78ec9ba9576158dd50f4955d,2020-04-14T20:00:00Z,324,2156,68001,68001,68001,39,50,123,2584,305,2889
-20200414,OK,2184,26085,,194,488,107,,,,1060,,4/14/2020 08:00,76e64d6ea4ed074e5e22f1dadd39d2cea730ab8e,2020-04-14T20:00:00Z,108,488,28269,28269,28269,40,9,31,5295,115,5410
-20200414,OR,1633,30730,,311,381,88,,44,,,,4/14/2020 11:00,242ff4b53e0e3dcd82122feb60502ca320715b01,2020-04-14T20:00:00Z,55,381,32363,32363,32363,41,2,12,1193,49,1242
-20200414,PA,25345,108286,,2317,,,,675,,,,4/14/2020 12:00,0357935d1346845af26f383e81e667adbdfe8e23,2020-04-14T20:00:00Z,584,,133631,133631,133631,42,60,0,2693,1146,3839
-20200414,PR,923,6284,1322,,,,,,,,,4/14/2020 07:00,f12a2da5f085a9bbb2c60d1935bb813f71733b69,2020-04-14T20:00:00Z,45,,8529,7207,7207,72,0,0,324,20,344
-20200414,RI,3251,19649,,213,331,48,,,,135,,4/14/2020 00:00,37f5ec850db5a8761ee794c19cc6ca978785dbed,2020-04-14T20:00:00Z,80,331,22900,22900,22900,44,7,0,1964,275,2239
-20200414,SC,3553,30319,,,675,,,,,,,4/14/2020 15:55,95e1766fa486d4102d2353010bb78420e3b38a9f,2020-04-14T20:00:00Z,97,675,33872,33872,33872,45,15,179,2213,234,2447
-20200414,SD,988,8308,0,,45,,,,,261,,4/13/2020 18:00,f1a679c2522a6e3ff3dd1b9d3c00541762d8fd26,2020-04-14T20:00:00Z,6,45,9296,9296,9296,46,0,1,174,120,294
-20200414,TN,5823,73008,,,633,,,,,1969,,4/14/2020 15:00,facffe0bacae3bf7e984d390579f77e1c57c572b,2020-04-14T20:00:00Z,124,633,78831,78831,78831,47,15,54,2423,213,2636
-20200414,TX,14624,131843,,1409,,,,,,2580,,4/14/2020 12:45,857dba1556015e2a791c526979b22dabe085bad7,2020-04-14T20:00:00Z,318,,146467,146467,146467,48,31,0,12523,718,13241
-20200414,UT,2412,44064,,,213,,,,,218,,4/14/2020 15:00,8db2f313fc6208f1c4a806936ef07afe31df89dd,2020-04-14T20:00:00Z,19,213,46476,46476,46476,49,1,12,640,49,689
-20200414,VA,6171,36592,469,1282,,422,,276,,721,,4/13/2020 17:00,0eb70fa79df7e97c67f2e1d626a7be83f80ff171,2020-04-14T20:00:00Z,154,,43232,42763,42763,51,5,0,938,424,1362
+20200414,MS,3087,34791,,,596,154,,99,,,A,4/13/2020 19:00,c66d189100ed089a1303e11cffd8846f8ec58218,2020-04-14T20:00:00Z,111,596,37878,37878,37878,28,13,47,6749,145,6894
+20200414,MT,399,8835,,24,50,,,,,197,A,4/14/2020 11:56,4a64cfcd9b352b05b6162d78c0149f3fde3b92a5,2020-04-14T20:00:00Z,7,50,9234,9234,9234,30,0,3,131,5,136
+20200414,NC,5024,60015,,418,,,,,,,A,4/14/2020 11:00,61a7bec12a49e0cdc8826687cca3dc18fc6290b8,2020-04-14T20:00:00Z,108,,65039,65039,65039,37,22,0,1443,208,1651
+20200414,ND,341,10575,,13,42,,,,,138,B,4/14/2020 13:00,9f4a7303b31f7ec41b2b47f9061f8c5ab7fab25c,2020-04-14T20:00:00Z,9,42,10916,10916,10916,38,1,2,125,10,135
+20200414,NE,871,10486,,,,,,,,,A,4/14/2020 19:45,6237171a5c0aa381aa824756fba407b38e03b06f,2020-04-14T20:00:00Z,18,,11357,11357,11357,31,1,0,328,57,385
+20200414,NH,1020,10590,25,72,152,,,,,249,B,4/14/2020 09:00,7166d075f54ff6264b550d39730f99fbb7e186ca,2020-04-14T20:00:00Z,23,152,11635,11610,11610,33,0,0,368,35,403
+20200414,NJ,68824,70950,,8185,,2051,,1626,,,A,4/14/2020 13:00,6291d521db3bf9068b1bf316a34cff8c8278d878,2020-04-14T20:00:00Z,2805,,139774,139774,139774,34,362,0,6065,4240,10305
+20200414,NM,1345,30625,,87,181,,,,,304,A,4/14/2020 20:56,d3f0e898cebe23e3858736e74b6b40a69e58499b,2020-04-14T20:00:00Z,31,181,31970,31970,31970,35,5,181,1355,100,1455
+20200414,NV,3088,23573,,,,,,,,,A,4/14/2020 18:00,3d0428534f605044d76c5d2b91144a7b12597f5d,2020-04-14T20:00:00Z,120,,26661,26661,26661,32,6,0,1080,117,1197
+20200414,NY,202208,296935,,18697,44286,5225,,,,25589,A,4/14/2020 00:00,966bb86f839e9ca2804162af3d3538046e7de66d,2020-04-14T20:00:00Z,10834,44286,499143,499143,499143,36,778,1649,13609,7177,20786
+20200414,OH,7280,60721,,,2156,,654,,,,B,4/14/2020 14:00,6acbcf6aae1d50412b6850393ab5bfa2b9c79bd9,2020-04-14T20:00:00Z,324,2156,68001,68001,68001,39,50,123,2584,305,2889
+20200414,OK,2184,26085,,194,488,107,,,,1060,B,4/14/2020 08:00,6b65096dcfae879dcbfb1c6aaf1f50c98da79d27,2020-04-14T20:00:00Z,108,488,28269,28269,28269,40,9,31,5295,115,5410
+20200414,OR,1633,30730,,311,381,88,,44,,,A,4/14/2020 11:00,403e478bcb9e9d829ef7c3d22e5c53bcdd5268a2,2020-04-14T20:00:00Z,55,381,32363,32363,32363,41,2,12,1193,49,1242
+20200414,PA,25345,108286,,2317,,,,675,,,A,4/14/2020 12:00,d869d16d5c0430f17d1166ec87d645a8d9a2d3eb,2020-04-14T20:00:00Z,584,,133631,133631,133631,42,60,0,2693,1146,3839
+20200414,PR,923,6284,1322,,,,,,,,A,4/14/2020 07:00,80e3b0ada7ec50f18baa857ed8fe273a3067aa22,2020-04-14T20:00:00Z,45,,8529,7207,7207,72,0,0,324,20,344
+20200414,RI,3251,19649,,213,331,48,,,,135,B,4/14/2020 00:00,f475d980e978dc8eb66c5fefa032855805f59c71,2020-04-14T20:00:00Z,80,331,22900,22900,22900,44,7,0,1964,275,2239
+20200414,SC,3553,30319,,,675,,,,,,B,4/14/2020 15:55,a6257ee3dbc79737f2877bca12bfaa059c6bb369,2020-04-14T20:00:00Z,97,675,33872,33872,33872,45,15,179,2213,234,2447
+20200414,SD,988,8308,0,,45,,,,,261,A,4/13/2020 18:00,64efb5ac7f07d99e11485bd8abad0b3d42452103,2020-04-14T20:00:00Z,6,45,9296,9296,9296,46,0,1,174,120,294
+20200414,TN,5823,73008,,,633,,,,,1969,A,4/14/2020 15:00,c521f280500ed9c32453f266b6340aeb0ab71132,2020-04-14T20:00:00Z,124,633,78831,78831,78831,47,15,54,2423,213,2636
+20200414,TX,14624,131843,,1409,,,,,,2580,A,4/14/2020 12:45,5d7fd0648e40e997d8a4f720b622a463ff658865,2020-04-14T20:00:00Z,318,,146467,146467,146467,48,31,0,12523,718,13241
+20200414,UT,2412,44064,,,213,,,,,218,A,4/14/2020 15:00,5ced4e703a9d247592f4a734d701708320e9ea4e,2020-04-14T20:00:00Z,19,213,46476,46476,46476,49,1,12,640,49,689
+20200414,VA,6171,36592,469,1282,,422,,276,,721,A,4/13/2020 17:00,006a3ed203e56a525b2ad6e9fd7d5d57ce58cc7c,2020-04-14T20:00:00Z,154,,43232,42763,42763,51,5,0,938,424,1362
 20200414,VI,51,326,23,,,,,,,44,,4/14/2020 17:30,fa083dfcefe010db0fc0048819b22bdc0255fc56,2020-04-14T20:00:00Z,1,,400,377,377,78,0,0,4,0,4
-20200414,VT,752,9833,,64,,,,,,15,,4/13/2020 23:59,1cf0644c56b0dced711bb1554bb01da3dcbf3abb,2020-04-14T20:00:00Z,29,,10585,10585,10585,50,1,0,215,4,219
-20200414,WA,10789,127109,,387,,98,,,,,,4/14/2020 02:59,f762a9de7a67e7b8cc672c4f243e9048beda0f36,2020-04-14T20:00:00Z,542,,137898,137898,137898,53,16,0,3828,202,4030
-20200414,WI,3555,37997,277,432,1049,161,283,,,,,4/14/2020 16:00,9b3bd8ca505cd7a43d8f0b8c7c8de9eec1f56191,2020-04-14T20:00:00Z,170,1049,41829,41552,41552,55,16,56,1228,127,1355
-20200414,WV,640,16398,,87,164,38,73,25,50,147,,4/14/2020 17:00,26419a93622b077b19ded4c898c95e23080ad41a,2020-04-14T20:00:00Z,9,164,17038,17038,17038,54,0,0,369,14,383
-20200414,WY,275,5689,,,43,,,,,140,,4/14/2020 16:05,ceb8b9db4d53ae4b4ed2c909492d109b4e4aa626,2020-04-14T20:00:00Z,1,43,5964,5964,5964,56,0,2,0,0,0
-20200413,AK,277,7553,,,32,,,,,85,,4/13/2020 00:00,c853ee40488c4e0cfe0da56e967023725ffdbb67,2020-04-13T20:00:00Z,8,32,7830,7830,7830,02,0,1,-213,5,-208
-20200413,AL,3734,25448,,,457,,189,,119,,,4/13/2020 00:00,f4916ccbd660461e28a953d93090138b9b0e7a14,2020-04-13T20:00:00Z,99,457,29182,29182,29182,01,6,20,7390,209,7599
-20200413,AR,1410,19394,,74,130,,43,28,39,391,,4/13/2020 13:33,d1021489b0db5ad2a7950d0fd6b9e6f783b7305e,2020-04-13T20:00:00Z,30,130,20804,20804,20804,05,3,0,952,130,1082
+20200414,VT,752,9833,,64,,,,,,15,A,4/13/2020 23:59,8ef6e8d620fed554ef3bdf3fc02f2f80aa311694,2020-04-14T20:00:00Z,29,,10585,10585,10585,50,1,0,215,4,219
+20200414,WA,10789,127109,,387,,98,,,,,C,4/14/2020 02:59,a93f6fdbb696d7592e0f2fe6dbeeedb96249b908,2020-04-14T20:00:00Z,542,,137898,137898,137898,53,16,0,3828,202,4030
+20200414,WI,3555,37997,277,432,1049,161,283,,,,A,4/14/2020 16:00,7990a900a1ffecfaa260470bf317d09e487d2b4a,2020-04-14T20:00:00Z,170,1049,41829,41552,41552,55,16,56,1228,127,1355
+20200414,WV,640,16398,,87,164,38,73,25,50,147,B,4/14/2020 17:00,0bf20997ca6c137acb3a46da320685eeae3a07d0,2020-04-14T20:00:00Z,9,164,17038,17038,17038,54,0,0,369,14,383
+20200414,WY,275,5689,,,43,,,,,140,A,4/14/2020 16:05,fc17f818d120c168e187d5fc553b88920e4c4369,2020-04-14T20:00:00Z,1,43,5964,5964,5964,56,0,2,0,0,0
+20200413,AK,277,7553,,,32,,,,,85,A,4/13/2020 00:00,f3ede07cb6924edbe99587eb49eb7ae55c2d980f,2020-04-13T20:00:00Z,8,32,7830,7830,7830,02,0,1,-213,5,-208
+20200413,AL,3734,25448,,,457,,189,,119,,B,4/13/2020 00:00,e7d2baf93f8f760025f108068edcf6ed52d168de,2020-04-13T20:00:00Z,99,457,29182,29182,29182,01,6,20,7390,209,7599
+20200413,AR,1410,19394,,74,130,,43,28,39,391,A,4/13/2020 13:33,94365324201e7d36e6b5d48fbd84438708abc94f,2020-04-13T20:00:00Z,30,130,20804,20804,20804,05,3,0,952,130,1082
 20200413,AS,0,3,,,,,,,,,,4/6/2020 00:00,2a664cf0301a7a94e22348e4eca9978088f25f42,2020-04-13T20:00:00Z,,,3,3,3,60,0,0,0,0,0
-20200413,AZ,3702,39645,,525,,286,,195,,,,4/13/2020 00:00,7b1f9194309f3a84d0a2c6559e5523b497210ba0,2020-04-13T20:00:00Z,122,,43347,43347,43347,04,7,0,1075,163,1238
-20200413,CA,22348,168534,13200,3015,,1178,,,,,,4/12/2020 00:00,1c1d4945152a819e983495275a38b18994bd5154,2020-04-13T20:00:00Z,687,,204082,190882,190882,06,36,0,0,554,554
-20200413,CO,7684,29850,,842,1472,,,,,,,4/13/2020 00:00,a0da9c9b3acb9983524b252213cae46c4c3d1925,2020-04-13T20:00:00Z,304,1472,37534,37534,37534,08,30,96,1870,791,2661
-20200413,CT,13381,30928,,1760,,,,,,,,4/13/2020 16:00,2fb027967d3ebafed977dacc6f6ee674c05f7b0b,2020-04-13T20:00:00Z,602,,44309,44309,44309,09,48,0,1743,1346,3089
-20200413,DC,1955,8979,,295,,95,,31,,507,,4/13/2020 00:00,4ebcfd1fa36a351e89e132ddd595a6c170fcb9c2,2020-04-13T20:00:00Z,53,,10934,10934,10934,11,3,0,214,80,294
-20200413,DE,1625,10195,,201,,,,,,213,,4/13/2020 17:00,9ca11dadc8d221b7e96ed68bb41d912fa1797c55,2020-04-13T20:00:00Z,35,,11820,11820,11820,10,2,0,571,146,717
-20200413,FL,20601,175606,1789,,2833,,,,,,,4/13/2020 17:27,72c062d61501b2fd57479cab436e57c54bcc2060,2020-04-13T20:00:00Z,483,2833,197996,196207,196207,12,18,61,12208,1246,13454
-20200413,GA,13315,43706,,,2589,,,,,,,4/13/2020 18:27,01091b5f06ac5d8f3268c5620a8179cc35a94b0b,2020-04-13T20:00:00Z,464,2589,57021,57021,57021,13,31,84,1705,863,2568
+20200413,AZ,3702,39645,,525,,286,,195,,,B,4/13/2020 00:00,ca71158795af1dffd9357fff243cc199fc4c060a,2020-04-13T20:00:00Z,122,,43347,43347,43347,04,7,0,1075,163,1238
+20200413,CA,22348,168534,13200,3015,,1178,,,,,B,4/12/2020 00:00,91fce869b68e9d77dbbce09ad93f9a110ef03f38,2020-04-13T20:00:00Z,687,,204082,190882,190882,06,36,0,0,554,554
+20200413,CO,7684,29850,,842,1472,,,,,,A,4/13/2020 00:00,fc96242c021384b41b1de81107bad32183febd64,2020-04-13T20:00:00Z,304,1472,37534,37534,37534,08,30,96,1870,791,2661
+20200413,CT,13381,30928,,1760,,,,,,,A,4/13/2020 16:00,7de199fc6c92a5bb9672026695b91fbd95a57449,2020-04-13T20:00:00Z,602,,44309,44309,44309,09,48,0,1743,1346,3089
+20200413,DC,1955,8979,,295,,95,,31,,507,A,4/13/2020 00:00,6e7b30db355bf929f771c76b9d26122f545da5c9,2020-04-13T20:00:00Z,53,,10934,10934,10934,11,3,0,214,80,294
+20200413,DE,1625,10195,,201,,,,,,213,A,4/13/2020 17:00,3a2fbaec228cf4c64343a7aa6d99a55692d6783f,2020-04-13T20:00:00Z,35,,11820,11820,11820,10,2,0,571,146,717
+20200413,FL,20601,175606,1789,,2833,,,,,,A,4/13/2020 17:27,b5c5782615e03ba6805f81c4b5a9e6cb5b0681ed,2020-04-13T20:00:00Z,483,2833,197996,196207,196207,12,18,61,12208,1246,13454
+20200413,GA,13315,43706,,,2589,,,,,,A,4/13/2020 18:27,e7a2b2f6a556d5f8c005891d59427443fed7597c,2020-04-13T20:00:00Z,464,2589,57021,57021,57021,13,31,84,1705,863,2568
 20200413,GU,133,770,,12,,2,,2,,58,,4/13/2020 08:00,4debeaa1af142f25c331b325d6086243cc559698,2020-04-13T20:00:00Z,5,,903,903,903,66,0,0,77,0,77
-20200413,HI,499,18345,,,44,,6,,2,310,,4/13/2020 18:00,2c7d1b1e60401d661997eb1107b2f30a3e551d0e,2020-04-13T20:00:00Z,9,44,18844,18844,18844,15,1,0,863,13,876
-20200413,IA,1710,16986,,142,,70,,41,,741,,4/12/2020 00:00,1ac623750ae5d67b4e022ebc8d02b5a716ed5d70,2020-04-13T20:00:00Z,43,,18696,18696,18696,19,2,0,981,123,1104
-20200413,ID,1426,13455,,,132,,38,,,,,4/13/2020 19:00,973533d4d674edb2cebe30510f0194ee9cd6846f,2020-04-13T20:00:00Z,27,132,14881,14881,14881,16,0,1,554,19,573
-20200413,IL,22025,83743,,3680,,1166,,821,,,,4/13/2020 00:00,d96f229284caff96b82da52cdc42a31293f565f1,2020-04-13T20:00:00Z,794,,105768,105768,105768,17,74,0,3860,1173,5033
-20200413,IN,8236,36303,,,,740,,459,,,,4/12/2020 23:59,a6df591828ac8ef878e79dae66da6d8845cf9d7c,2020-04-13T20:00:00Z,350,,44539,44539,44539,18,7,0,1742,308,2050
-20200413,KS,1376,12488,,,309,,,,,,,4/13/2020 11:30,91a4a3a9ebfca0bdb5d28d316ce6f6a0f5e3e2e2,2020-04-13T20:00:00Z,62,309,13864,13864,13864,20,6,11,572,39,611
-20200413,KY,1963,23903,,289,667,136,256,,,607,,4/13/2020 17:00,692b9809c6dda45467f1aa614f570d1a2cb6183e,2020-04-13T20:00:00Z,97,667,25866,25866,25866,21,3,208,1176,123,1299
-20200413,LA,21016,87075,,2134,,,,461,,,,4/13/2020 13:00,ea803817a165f8159e1a3f628b4e70bc27ae2784,2020-04-13T20:00:00Z,884,,108091,108091,108091,22,44,0,3625,421,4046
-20200413,MA,26794,95500,,3485,3485,,,,,,,4/13/2020 10:00,47faaa1b0139da04bfe3d96b8c0cb766cc2a1698,2020-04-13T20:00:00Z,1211,3485,122294,122294,122294,25,155,971,4037,1413,5450
-20200413,MD,8936,42815,,,1975,,,,,603,,4/13/2020 10:00,707e4f26785e354d97b7eee8214149e3db8d2aff,2020-04-13T20:00:00Z,262,1975,51751,51751,51751,24,27,115,1276,711,1987
-20200413,ME,698,11608,,22,124,,,,,273,,4/13/2020 11:45,9dd580ea3985f99b8d0ec461f8090f0260fbc554,2020-04-13T20:00:00Z,19,124,12306,12306,12306,23,0,4,5520,65,5585
-20200413,MI,25635,57009,,3986,,1570,,1365,,447,,4/13/2020 11:00,a2e34bdcd95719ac7214ab787e17e58845924f03,2020-04-13T20:00:00Z,1602,,82644,82644,82644,26,115,0,2210,997,3207
-20200413,MN,1650,36777,,157,361,74,146,,,842,,4/12/2020 17:00,0920bf0ac82520936606ce55d0cb5592393b32c8,2020-04-13T20:00:00Z,70,361,38427,38427,38427,27,0,0,977,29,1006
-20200413,MO,4388,41040,,988,,,,,,,,4/13/2020 15:00,2223175db2a8215ceb01363764ff2c1ad36f615a,2020-04-13T20:00:00Z,114,,45428,45428,45428,29,4,0,0,228,228
+20200413,HI,499,18345,,,44,,6,,2,310,A,4/13/2020 18:00,7651ab17db2abc5af88e1bbefc35355e4cc7a401,2020-04-13T20:00:00Z,9,44,18844,18844,18844,15,1,0,863,13,876
+20200413,IA,1710,16986,,142,,70,,41,,741,A,4/12/2020 00:00,b09ac82132d8bbb8d2b452b3b926248a3b600170,2020-04-13T20:00:00Z,43,,18696,18696,18696,19,2,0,981,123,1104
+20200413,ID,1426,13455,,,132,,38,,,,A,4/13/2020 19:00,15186f4caff96d599e998a8c631b8444fe8a360e,2020-04-13T20:00:00Z,27,132,14881,14881,14881,16,0,1,554,19,573
+20200413,IL,22025,83743,,3680,,1166,,821,,,A,4/13/2020 00:00,717d100479891245fb7835dbe5ccb37c7f62c775,2020-04-13T20:00:00Z,794,,105768,105768,105768,17,74,0,3860,1173,5033
+20200413,IN,8236,36303,,,,740,,459,,,B,4/12/2020 23:59,489cbbd51dc1d531e34ebb4c7036816ea61bbbac,2020-04-13T20:00:00Z,350,,44539,44539,44539,18,7,0,1742,308,2050
+20200413,KS,1376,12488,,,309,,,,,,B,4/13/2020 11:30,6796780235f8f3923e7f0f20d67f4e372e1835d1,2020-04-13T20:00:00Z,62,309,13864,13864,13864,20,6,11,572,39,611
+20200413,KY,1963,23903,,289,667,136,256,,,607,A,4/13/2020 17:00,2fef44bdc2f93da3044edf1efc786b9b04e3d9db,2020-04-13T20:00:00Z,97,667,25866,25866,25866,21,3,208,1176,123,1299
+20200413,LA,21016,87075,,2134,,,,461,,,A,4/13/2020 13:00,1ceb37f89780979e34956615420134376e543ef6,2020-04-13T20:00:00Z,884,,108091,108091,108091,22,44,0,3625,421,4046
+20200413,MA,26794,95500,,3485,3485,,,,,,B,4/13/2020 10:00,a10aab3987971a677afef8f6ddaad918ad1036d6,2020-04-13T20:00:00Z,1211,3485,122294,122294,122294,25,155,971,4037,1413,5450
+20200413,MD,8936,42815,,,1975,,,,,603,A,4/13/2020 10:00,13aa01da2013a38100c411620dc4be2ac1b7b54f,2020-04-13T20:00:00Z,262,1975,51751,51751,51751,24,27,115,1276,711,1987
+20200413,ME,698,11608,,22,124,,,,,273,A,4/13/2020 11:45,45c86faaf51473415956b43db2e5469e59fbefd0,2020-04-13T20:00:00Z,19,124,12306,12306,12306,23,0,4,5520,65,5585
+20200413,MI,25635,57009,,3986,,1570,,1365,,447,B,4/13/2020 11:00,4399404e8c90772e2804bd8b7a318d6ebf398d71,2020-04-13T20:00:00Z,1602,,82644,82644,82644,26,115,0,2210,997,3207
+20200413,MN,1650,36777,,157,361,74,146,,,842,A,4/12/2020 17:00,b2738f068afb3b1e5f1d6a193f8d016c84139d04,2020-04-13T20:00:00Z,70,361,38427,38427,38427,27,0,0,977,29,1006
+20200413,MO,4388,41040,,988,,,,,,,A,4/13/2020 15:00,4767c1210c29df38f8cc89481392728204cbc88c,2020-04-13T20:00:00Z,114,,45428,45428,45428,29,4,0,0,228,228
 20200413,MP,11,27,9,,,,,,,,,4/12/2020 00:00,0035b1ccdb8b9309cc1cb55a11dd611564f9cbeb,2020-04-13T20:00:00Z,2,,47,38,38,69,0,0,0,0,0
-20200413,MS,2942,28042,,,549,124,,84,,,,4/13/2020 00:00,372d8f8083ba8567ee509f4a6d2ba5e6d64ae776,2020-04-13T20:00:00Z,98,549,30984,30984,30984,28,2,1,9410,161,9571
-20200413,MT,394,8704,,21,47,,,,,171,,4/13/2020 13:11,366d0afa8866c79688a117648aec5cbcc21f29e9,2020-04-13T20:00:00Z,7,47,9098,9098,9098,30,1,0,178,7,185
-20200413,NC,4816,58572,,313,,,,,,,,4/13/2020 11:00,4d1d2f3678c2c35fa37863a1f81c8c84da090bee,2020-04-13T20:00:00Z,86,,63388,63388,63388,37,5,0,953,296,1249
-20200413,ND,331,10450,,13,40,,,,,127,,4/13/2020 13:00,dc90f26d0066092b38eba4bbed5db82d50f4a980,2020-04-13T20:00:00Z,8,40,10781,10781,10781,38,0,1,408,23,431
-20200413,NE,814,10158,,,,,,,,,,4/13/2020 20:03,1258810c2dcf4c561901981bc16e562d25120870,2020-04-13T20:00:00Z,17,,10972,10972,10972,31,0,0,258,23,281
-20200413,NH,985,10222,125,,152,,,,,239,,4/13/2020 09:00,d176e76ca5b2363e2bc7347168f3e132862c51bf,2020-04-13T20:00:00Z,23,152,11332,11207,11207,33,0,6,226,56,282
-20200413,NJ,64584,64885,,7781,,1886,,1611,,,,4/13/2020 14:00,a7fd974c31197b8e304afd380337cfd74094a515,2020-04-13T20:00:00Z,2443,,129469,129469,129469,34,93,0,0,2734,2734
-20200413,NM,1245,29270,,80,,,,,,295,,4/13/2020 00:00,a39bc0bb75079a6b0b2a77f143a89f1b3d8212de,2020-04-13T20:00:00Z,26,,30515,30515,30515,35,6,0,1752,71,1823
-20200413,NV,2971,22493,,,,,,,,,,4/13/2020 10:00,c6a148079a10924fbbdc041b548ac276ad8ca45c,2020-04-13T20:00:00Z,114,,25464,25464,25464,32,2,0,718,135,853
-20200413,NY,195031,283326,,18825,42637,5156,,,,23887,,4/13/2020 00:00,f6cce545fc7093eb33de2ea9f3433e3b4a0edaa1,2020-04-13T20:00:00Z,10056,42637,478357,478357,478357,36,671,43,10419,6337,16756
-20200413,OH,6975,58137,,,2033,,613,,,,,4/13/2020 14:00,bd872bf40a49053d79b101e3006c4afc0a5d7997,2020-04-13T20:00:00Z,274,2033,65112,65112,65112,39,21,85,1498,371,1869
-20200413,OK,2069,20790,,383,457,191,,,,865,,4/13/2020 08:00,35f1f68121faf2308369a58ec0de5e57e185589a,2020-04-13T20:00:00Z,99,457,22859,22859,22859,40,3,11,0,99,99
-20200413,OR,1584,29537,,321,369,96,,50,,,,4/13/2020 11:00,7fd62a05828d0ed142d4cc49c0b27db187e893a6,2020-04-13T20:00:00Z,53,369,31121,31121,31121,41,1,10,1306,57,1363
-20200413,PA,24199,105593,,2243,,,,669,,,,4/13/2020 12:00,a40fd5368ba519dc9cfd73c550fe234ab6acc384,2020-04-13T20:00:00Z,524,,129792,129792,129792,42,17,0,3536,1366,4902
-20200413,PR,903,5960,1288,,,,,,,,,4/13/2020 06:00,2648936a707d02a108b9e1333dfe0c96552fa041,2020-04-13T20:00:00Z,45,,8151,6863,6863,72,1,0,141,6,147
-20200413,RI,2976,17685,,197,331,50,,26,,135,,4/13/2020 00:00,346d2ea71be28029a8b527a5557d339379ae064d,2020-04-13T20:00:00Z,73,331,20661,20661,20661,44,10,331,0,311,311
-20200413,SC,3319,28106,,,496,,,,,,,4/13/2020 17:26,b1034e9aeea234a9d63a3c2987b83c13169136b6,2020-04-13T20:00:00Z,82,496,31425,31425,31425,45,0,0,0,0,0
-20200413,SD,868,8134,0,,44,,,,,207,,4/12/2020 18:00,8812c8970b6c536378d840f33db7f82e54a84aa8,2020-04-13T20:00:00Z,6,44,9002,9002,9002,46,0,1,311,138,449
-20200413,TN,5610,70585,,,579,,,,,1671,,4/13/2020 15:00,d9798c4a8ea8df2f0ec123826e2fa20a0af88681,2020-04-13T20:00:00Z,109,579,76195,76195,76195,47,8,12,5216,302,5518
-20200413,TX,13906,119320,,1176,,,,,,2269,,4/13/2020 12:45,e12bd9ad71ead5b9fc111e39391a558e939bba13,2020-04-13T20:00:00Z,287,,133226,133226,133226,48,16,0,8271,422,8693
-20200413,UT,2363,43424,,,201,,,,,218,,4/13/2020 15:00,6ec7a8ba47b8e8970bce682f75faec9b49cfa089,2020-04-13T20:00:00Z,18,201,45787,45787,45787,49,0,6,1493,60,1553
-20200413,VA,5747,35654,473,1238,,428,,302,,,,4/13/2020 09:00,4f8654de84c9b2e177f37c50adf113aa6a19f3dd,2020-04-13T20:00:00Z,149,,41874,41401,41401,51,8,0,943,473,1416
+20200413,MS,2942,28042,,,549,124,,84,,,A,4/13/2020 00:00,198b7f3b03024ef001e523907574ae1e950da676,2020-04-13T20:00:00Z,98,549,30984,30984,30984,28,2,1,9410,161,9571
+20200413,MT,394,8704,,21,47,,,,,171,A,4/13/2020 13:11,34039c422d2dc1eb358fe57e1864873168ca78cd,2020-04-13T20:00:00Z,7,47,9098,9098,9098,30,1,0,178,7,185
+20200413,NC,4816,58572,,313,,,,,,,A,4/13/2020 11:00,6e1bec7ffa1a3c0fd9ec3c0995f90306806e3ff5,2020-04-13T20:00:00Z,86,,63388,63388,63388,37,5,0,953,296,1249
+20200413,ND,331,10450,,13,40,,,,,127,B,4/13/2020 13:00,4d5bac586aa26d219fcb811172e2b2b4df51f0e4,2020-04-13T20:00:00Z,8,40,10781,10781,10781,38,0,1,408,23,431
+20200413,NE,814,10158,,,,,,,,,A,4/13/2020 20:03,e4ea927f3942914cebacd8c0034e884d1f461846,2020-04-13T20:00:00Z,17,,10972,10972,10972,31,0,0,258,23,281
+20200413,NH,985,10222,125,,152,,,,,239,B,4/13/2020 09:00,f18aa74aa0bce817914f8c6a25ff642cce7d9656,2020-04-13T20:00:00Z,23,152,11332,11207,11207,33,0,6,226,56,282
+20200413,NJ,64584,64885,,7781,,1886,,1611,,,A,4/13/2020 14:00,f0f04b01d831f47a3f5ecf388761e7066160033e,2020-04-13T20:00:00Z,2443,,129469,129469,129469,34,93,0,0,2734,2734
+20200413,NM,1245,29270,,80,,,,,,295,A,4/13/2020 00:00,986a8951bd6c6fe9cdc004530bf2237b5c74f0f9,2020-04-13T20:00:00Z,26,,30515,30515,30515,35,6,0,1752,71,1823
+20200413,NV,2971,22493,,,,,,,,,A,4/13/2020 10:00,c01e244c960857f95dbf1cd3f41466fcfd66b80c,2020-04-13T20:00:00Z,114,,25464,25464,25464,32,2,0,718,135,853
+20200413,NY,195031,283326,,18825,42637,5156,,,,23887,A,4/13/2020 00:00,e49a38dc1ee6da48e71579b2fd0b060074e034fd,2020-04-13T20:00:00Z,10056,42637,478357,478357,478357,36,671,43,10419,6337,16756
+20200413,OH,6975,58137,,,2033,,613,,,,B,4/13/2020 14:00,2e6ef212d62dee85d26529b2ec7ed275e1ae0088,2020-04-13T20:00:00Z,274,2033,65112,65112,65112,39,21,85,1498,371,1869
+20200413,OK,2069,20790,,383,457,191,,,,865,B,4/13/2020 08:00,34454035c51a3415bb912b897d0a410f9376fd7d,2020-04-13T20:00:00Z,99,457,22859,22859,22859,40,3,11,0,99,99
+20200413,OR,1584,29537,,321,369,96,,50,,,A,4/13/2020 11:00,c262541454a8a8086a4efb0063057cba00b817f1,2020-04-13T20:00:00Z,53,369,31121,31121,31121,41,1,10,1306,57,1363
+20200413,PA,24199,105593,,2243,,,,669,,,A,4/13/2020 12:00,f1c5c427c4927456308686fc1a61558c3651bbd5,2020-04-13T20:00:00Z,524,,129792,129792,129792,42,17,0,3536,1366,4902
+20200413,PR,903,5960,1288,,,,,,,,A,4/13/2020 06:00,f9deec2bb1ea1ff3f5efba8d82f345c2cde28c51,2020-04-13T20:00:00Z,45,,8151,6863,6863,72,1,0,141,6,147
+20200413,RI,2976,17685,,197,331,50,,26,,135,B,4/13/2020 00:00,78258a2b36f044684574000c03ad0b3690a03c6a,2020-04-13T20:00:00Z,73,331,20661,20661,20661,44,10,331,0,311,311
+20200413,SC,3319,28106,,,496,,,,,,B,4/13/2020 17:26,5d08b3bbaaa4dca19b3da3fbb734b22e94a8557a,2020-04-13T20:00:00Z,82,496,31425,31425,31425,45,0,0,0,0,0
+20200413,SD,868,8134,0,,44,,,,,207,A,4/12/2020 18:00,1e4181483b5120661d72acc868a7fb51b5858238,2020-04-13T20:00:00Z,6,44,9002,9002,9002,46,0,1,311,138,449
+20200413,TN,5610,70585,,,579,,,,,1671,A,4/13/2020 15:00,6a2492b15d9d9a72a63895b695a147730d6d2bd2,2020-04-13T20:00:00Z,109,579,76195,76195,76195,47,8,12,5216,302,5518
+20200413,TX,13906,119320,,1176,,,,,,2269,A,4/13/2020 12:45,dcb2598c2ad0880575ef06ebdcd1f2b97bfcdac0,2020-04-13T20:00:00Z,287,,133226,133226,133226,48,16,0,8271,422,8693
+20200413,UT,2363,43424,,,201,,,,,218,A,4/13/2020 15:00,5eb0aa0d0343ec2c95f140fde0ab40e34cb9498a,2020-04-13T20:00:00Z,18,201,45787,45787,45787,49,0,6,1493,60,1553
+20200413,VA,5747,35654,473,1238,,428,,302,,,A,4/13/2020 09:00,81c18eb60662a412bc5a33dfb1dea1688242595b,2020-04-13T20:00:00Z,149,,41874,41401,41401,51,8,0,943,473,1416
 20200413,VI,51,322,2,,,,,,,43,,4/13/2020 18:30,fb021e4d408261d55a25442b2aa45232a8c814d0,2020-04-13T20:00:00Z,1,,375,373,373,78,0,0,23,0,23
-20200413,VT,748,9618,,33,,,,,,15,,4/13/2020 09:05,57c2f90582923742f8fa0ee5c8a420b16c5a2097,2020-04-13T20:00:00Z,28,,10366,10366,10366,50,1,0,504,21,525
-20200413,WA,10587,123281,,527,,166,,,,,,4/12/2020 20:30,cfc41725a62eda92b89660a402dbc030da8f2ea0,2020-04-13T20:00:00Z,526,,133868,133868,133868,53,17,0,3748,189,3937
-20200413,WI,3428,36769,273,442,993,175,264,,,,,4/13/2020 00:00,e1342988019cd5f46d818de489c6730f12449a62,2020-04-13T20:00:00Z,154,993,40470,40197,40197,55,10,19,853,87,940
-20200413,WV,626,16029,,95,164,43,73,23,50,85,,4/13/2020 17:00,614be432f7b6a7f4cbf4b13335dfc4594300848a,2020-04-13T20:00:00Z,9,164,16655,16655,16655,54,1,164,383,15,398
-20200413,WY,275,5689,,,41,,,,,138,,4/13/2020 15:19,29bb1903bcfc536fa8eda2156d081e5940588a98,2020-04-13T20:00:00Z,1,41,5964,5964,5964,56,1,1,491,14,505
-20200412,AK,272,7766,,,31,,,,,66,,4/12/2020 14:50,5c8e26765214be8750b0285515aadbb0b442331c,2020-04-12T20:00:00Z,8,31,8038,8038,8038,02,0,0,291,15,306
-20200412,AL,3525,18058,,,437,,189,,119,,,4/12/2020 00:00,7abf076ec4fc4e89d1eb8a01b65ae9087bd7c990,2020-04-12T20:00:00Z,93,437,21583,21583,21583,01,2,35,0,334,334
-20200412,AR,1280,18442,,74,130,,43,30,39,367,,4/12/2020 11:33,82e999cb23eca3ecb4674e70fb1920d73b4627ae,2020-04-12T20:00:00Z,27,130,19722,19722,19722,05,3,0,1090,54,1144
+20200413,VT,748,9618,,33,,,,,,15,A,4/13/2020 09:05,7b49b1ea9bbb824fd9f740f609da0eeb5b009ddd,2020-04-13T20:00:00Z,28,,10366,10366,10366,50,1,0,504,21,525
+20200413,WA,10587,123281,,527,,166,,,,,C,4/12/2020 20:30,47f3efdfe8ab08a72f6a6f9ba57810481e2d3fa7,2020-04-13T20:00:00Z,526,,133868,133868,133868,53,17,0,3748,189,3937
+20200413,WI,3428,36769,273,442,993,175,264,,,,A,4/13/2020 00:00,470410a083e58e16782bbde4858a57d92b28102f,2020-04-13T20:00:00Z,154,993,40470,40197,40197,55,10,19,853,87,940
+20200413,WV,626,16029,,95,164,43,73,23,50,85,B,4/13/2020 17:00,f846c933597a9b29b0eb46729b33a3649dc73bd5,2020-04-13T20:00:00Z,9,164,16655,16655,16655,54,1,164,383,15,398
+20200413,WY,275,5689,,,41,,,,,138,A,4/13/2020 15:19,01c85988f9c2c42c9b6a49ab1296f354b6ebfdea,2020-04-13T20:00:00Z,1,41,5964,5964,5964,56,1,1,491,14,505
+20200412,AK,272,7766,,,31,,,,,66,A,4/12/2020 14:50,ab315126039fdd19bd3cb0ad6fd3881c07202d6a,2020-04-12T20:00:00Z,8,31,8038,8038,8038,02,0,0,291,15,306
+20200412,AL,3525,18058,,,437,,189,,119,,B,4/12/2020 00:00,a7f394585c1f6a6b3443e7ef2c7240908b5808ef,2020-04-12T20:00:00Z,93,437,21583,21583,21583,01,2,35,0,334,334
+20200412,AR,1280,18442,,74,130,,43,30,39,367,A,4/12/2020 11:33,d3646c6a7fa8fb8a8a8e5e0b3821ee700ca8f6d6,2020-04-12T20:00:00Z,27,130,19722,19722,19722,05,3,0,1090,54,1144
 20200412,AS,0,3,2,,,,,,,,,3/31/2020 19:16,cce5331e33e183bead26ebea1549209752ae62a3,2020-04-12T20:00:00Z,,,5,3,3,60,0,0,0,0,0
-20200412,AZ,3539,38570,,,,,,,,,,4/12/2020 00:00,ca9733db8a3530f41ef6f14f477bfbfc47f6ac98,2020-04-12T20:00:00Z,115,,42109,42109,42109,04,7,0,1433,146,1579
-20200412,CA,21794,168534,13200,5234,,1539,,,,,,4/11/2020 00:00,fc80e0c3bdd72b8f3a9e096f4216cfb9c4c84475,2020-04-12T20:00:00Z,651,,203528,190328,190328,06,42,0,15930,2322,18252
-20200412,CO,6893,27980,,822,1376,,,,,,,4/11/2020 00:00,b5b1ab0a14cd2e50eab8a91615109af3bfe0aaf5,2020-04-12T20:00:00Z,274,1376,34873,34873,34873,08,24,64,1837,383,2220
-20200412,CT,12035,29185,,1654,,,,,,,,4/12/2020 16:00,f21df3a7e674953900071f47c506ac89a72c9aee,2020-04-12T20:00:00Z,554,,41220,41220,41220,09,60,0,864,525,1389
-20200412,DC,1875,8765,,,,,,,,493,,4/11/2020 00:00,e47df6af7a7dc06e0eb9e769cffc6af8cfc580fe,2020-04-12T20:00:00Z,50,,10640,10640,10640,11,3,0,504,97,601
-20200412,DE,1479,9624,,190,,,,,,191,,4/11/2020 13:30,3f52b6f18c57b7d81157a091c42f49b035e591cc,2020-04-12T20:00:00Z,33,,11103,11103,11103,10,0,0,0,0,0
-20200412,FL,19355,163398,1297,,2772,,,,,,,4/12/2020 11:23,14eda61d6264294a180a2b24152084eb8dfdbb60,2020-04-12T20:00:00Z,465,2772,184050,182753,182753,12,27,111,8959,861,9820
-20200412,GA,12452,42001,,,2505,,,,,,,4/12/2020 11:27,8ea4adbd47768a14bfcf428406ceba7b83aa013b,2020-04-12T20:00:00Z,433,2505,54453,54453,54453,13,5,26,2445,293,2738
+20200412,AZ,3539,38570,,,,,,,,,B,4/12/2020 00:00,04d465db4a8768ba1f3ae776f14f49e139cb2c00,2020-04-12T20:00:00Z,115,,42109,42109,42109,04,7,0,1433,146,1579
+20200412,CA,21794,168534,13200,5234,,1539,,,,,B,4/11/2020 00:00,0c5a7322066feb546eff5b90b64b2e4a4265b9ac,2020-04-12T20:00:00Z,651,,203528,190328,190328,06,42,0,15930,1179,17109
+20200412,CO,6893,27980,,822,1376,,,,,,A,4/11/2020 00:00,f4cad22e1aec2505ec7c09f7983fc78917b46a36,2020-04-12T20:00:00Z,274,1376,34873,34873,34873,08,24,64,1837,383,2220
+20200412,CT,12035,29185,,1654,,,,,,,A,4/12/2020 16:00,6d74e6f44cee58968912784c872c4c393f329807,2020-04-12T20:00:00Z,554,,41220,41220,41220,09,60,0,864,525,1389
+20200412,DC,1875,8765,,,,,,,,493,A,4/11/2020 00:00,115822bff3d0400672d20c59c4a70e2e2c372201,2020-04-12T20:00:00Z,50,,10640,10640,10640,11,3,0,504,97,601
+20200412,DE,1479,9624,,190,,,,,,191,A,4/11/2020 13:30,f2c7dd2649c707e8c13c3df4c1a73fd25b6a8e7b,2020-04-12T20:00:00Z,33,,11103,11103,11103,10,0,0,0,0,0
+20200412,FL,19355,163398,1297,,2772,,,,,,A,4/12/2020 11:23,35c7df0354d5ab739ab8502ef5c886c3d58bc21d,2020-04-12T20:00:00Z,465,2772,184050,182753,182753,12,27,111,8959,861,9820
+20200412,GA,12452,42001,,,2505,,,,,,A,4/12/2020 11:27,e7b2606b00086dbdcce227434d9b9b8e09051573,2020-04-12T20:00:00Z,433,2505,54453,54453,54453,13,5,26,2445,293,2738
 20200412,GU,133,693,,13,,2,,2,,58,,4/11/2020 07:40,ad8e1b871f9464df7e253e3158f71ce8c9f96f81,2020-04-12T20:00:00Z,5,,826,826,826,66,0,0,0,0,0
-20200412,HI,486,17482,,,44,,6,,2,300,,4/11/2020 18:00,35ff321fa4ea2ff989f2515abf630f8435e045cd,2020-04-12T20:00:00Z,8,44,17968,17968,17968,15,0,1,416,21,437
-20200412,IA,1587,16005,,129,,55,,30,,674,,4/12/2020 00:00,1d71f40b0cba5b733b02b6cc43b0be2b8b59db94,2020-04-12T20:00:00Z,41,,17592,17592,17592,19,7,0,383,77,460
-20200412,ID,1407,12901,,,131,,38,,,,,4/11/2020 19:00,aa57a1810e399ac55a0d49182439e0158defe805,2020-04-12T20:00:00Z,27,131,14308,14308,14308,16,2,3,533,11,544
-20200412,IL,20852,79883,,3680,,1166,,821,,,,4/12/2020 00:00,01b58d5b9ed4c6d5a5b7f1a1b679973848eae71a,2020-04-12T20:00:00Z,720,,100735,100735,100735,17,43,0,6914,1672,8586
-20200412,IN,7928,34561,,,,820,,497,,,,4/11/2020 11:59,e76d34aa3c18f07a6b702efa655208de33ab145a,2020-04-12T20:00:00Z,343,,42489,42489,42489,18,13,0,2781,493,3274
-20200412,KS,1337,11916,,,298,,,,,,,4/12/2020 12:00,1a4eb4ab053a0fb83715444a64f9cdac76835669,2020-04-12T20:00:00Z,56,298,13253,13253,13253,20,1,5,841,69,910
-20200412,KY,1840,22727,,271,459,105,177,,,464,,4/11/2020 17:00,5ae380491ae17067722be81cd8fe3c3669dd8b2b,2020-04-12T20:00:00Z,94,459,24567,24567,24567,21,4,0,132,147,279
-20200412,LA,20595,83450,,2084,,,,458,,,,4/12/2020 13:00,a4186f7b0ac64aadab3a1d55e3802266773d0624,2020-04-12T20:00:00Z,840,,104045,104045,104045,22,34,0,6549,581,7130
-20200412,MA,25381,91463,,2514,2514,,,,,,,4/12/2020 16:00,00a89a77280290de07fc02b2a805adbda978f936,2020-04-12T20:00:00Z,1056,2514,116844,116844,116844,25,110,7,5348,2615,7963
-20200412,MD,8225,41539,,,1860,,,,,456,,4/12/2020 10:00,feb945af77de52bcd7e4f5677a58399ed2ad098d,2020-04-12T20:00:00Z,235,1860,49764,49764,49764,24,29,151,1995,531,2526
-20200412,ME,633,6088,,,120,,,,,266,,4/12/2020 10:30,a5f6756a035254c10dbc0969a2be52a9b58dac9c,2020-04-12T20:00:00Z,19,120,6721,6721,6721,23,0,6,0,17,17
-20200412,MI,24638,54799,,3636,,1582,,1441,,433,,4/12/2020 11:00,b208c2a8b7eaa041e8c92686ee4d2b6d77d90850,2020-04-12T20:00:00Z,1487,,79437,79437,79437,26,95,0,2778,645,3423
-20200412,MN,1621,35800,,157,361,74,146,,,842,,4/11/2020 21:00,891afd0f42d3a576adb6dbc3b5cc91c56951d304,2020-04-12T20:00:00Z,70,361,37421,37421,37421,27,6,21,1823,194,2017
-20200412,MO,4160,41040,,988,,,,,,,,4/12/2020 15:00,69352fa0f2f81c77d16a8ee48bef67f3370d04ff,2020-04-12T20:00:00Z,110,,45200,45200,45200,29,1,0,1892,136,2028
+20200412,HI,486,17482,,,44,,6,,2,300,A,4/11/2020 18:00,5f18f4cd6fc5ae0d7faa4d1b947aa46416e45c64,2020-04-12T20:00:00Z,8,44,17968,17968,17968,15,0,1,416,21,437
+20200412,IA,1587,16005,,129,,55,,30,,674,A,4/12/2020 00:00,66cfd2f08f6fec24f3eaac212631bb63d0e2cb48,2020-04-12T20:00:00Z,41,,17592,17592,17592,19,7,0,383,77,460
+20200412,ID,1407,12901,,,131,,38,,,,A,4/11/2020 19:00,20d340a75145c1d863ead3de6dd5a3e1b38ede6e,2020-04-12T20:00:00Z,27,131,14308,14308,14308,16,2,3,533,11,544
+20200412,IL,20852,79883,,3680,,1166,,821,,,A,4/12/2020 00:00,25c61ff3bf5cce038afdd3964fe48a40bfc48155,2020-04-12T20:00:00Z,720,,100735,100735,100735,17,43,0,6914,1672,8586
+20200412,IN,7928,34561,,,,820,,497,,,B,4/11/2020 11:59,8914f6941ff2d922ff3aede644cb2d629cd9d0c3,2020-04-12T20:00:00Z,343,,42489,42489,42489,18,13,0,2781,493,3274
+20200412,KS,1337,11916,,,298,,,,,,B,4/12/2020 12:00,0c871b42264b82a78e4dd2c78ccf7bf387498085,2020-04-12T20:00:00Z,56,298,13253,13253,13253,20,1,5,841,69,910
+20200412,KY,1840,22727,,271,459,105,177,,,464,A,4/11/2020 17:00,5f19c6cdd17970d7ace7702b2d3f4093d8ade0a0,2020-04-12T20:00:00Z,94,459,24567,24567,24567,21,4,0,132,147,279
+20200412,LA,20595,83450,,2084,,,,458,,,A,4/12/2020 13:00,92180c96dd14d0d5bc1e3ebf8b9d5c8fb83c80aa,2020-04-12T20:00:00Z,840,,104045,104045,104045,22,34,0,6549,581,7130
+20200412,MA,25381,91463,,2514,2514,,,,,,B,4/12/2020 16:00,9d151b754a3c8fff7e950e6dfb015a67f8879821,2020-04-12T20:00:00Z,1056,2514,116844,116844,116844,25,110,7,5348,2615,7963
+20200412,MD,8225,41539,,,1860,,,,,456,A,4/12/2020 10:00,8ba0b53279f8efd87986afb76267a02ebd5637bd,2020-04-12T20:00:00Z,235,1860,49764,49764,49764,24,29,151,1995,531,2526
+20200412,ME,633,6088,,,120,,,,,266,A,4/12/2020 10:30,c2cc4907c9866e00fede3ab0ad2d106e946af695,2020-04-12T20:00:00Z,19,120,6721,6721,6721,23,0,6,0,17,17
+20200412,MI,24638,54799,,3636,,1582,,1441,,433,B,4/12/2020 11:00,e3bde5edaaa5c9e7316d174ff839c4a075eb2a71,2020-04-12T20:00:00Z,1487,,79437,79437,79437,26,95,0,2778,645,3423
+20200412,MN,1621,35800,,157,361,74,146,,,842,A,4/11/2020 21:00,7c7480aa99b13e3398cb4e412ea2e297b01ad829,2020-04-12T20:00:00Z,70,361,37421,37421,37421,27,6,21,1823,194,2017
+20200412,MO,4160,41040,,988,,,,,,,A,4/12/2020 15:00,a66517033d0b97e85b25957fa90a82dc03d00a07,2020-04-12T20:00:00Z,110,,45200,45200,45200,29,1,0,1892,136,2028
 20200412,MP,11,27,9,,,,,,,,,4/11/2020 00:00,2650510b7591047a789d878d6b957f7a66cb0f15,2020-04-12T20:00:00Z,2,,47,38,38,69,0,0,0,0,0
-20200412,MS,2781,18632,,,548,,,,,,,4/11/2020 19:00,fce8740517bd9fd5dd3991ea29b34126f70ba879,2020-04-12T20:00:00Z,96,548,21413,21413,21413,28,3,20,0,139,139
-20200412,MT,387,8526,,22,47,,,,,169,,4/12/2020 10:21,be6681c8158cb545e8cc464d43891be82211d2e1,2020-04-12T20:00:00Z,6,47,8913,8913,8913,30,0,1,322,10,332
-20200412,NC,4520,57619,,331,,,,,,,,4/12/2020 10:45,a027e4cc3933a7445faa110b5a2a05d2531b3a49,2020-04-12T20:00:00Z,81,,62139,62139,62139,37,1,0,1538,208,1746
-20200412,ND,308,10042,,12,39,,,,,121,,4/12/2020 12:58,900c1a88e02048241bc2e0c6409b06b5a060894a,2020-04-12T20:00:00Z,8,39,10350,10350,10350,38,1,3,255,15,270
-20200412,NE,791,9900,,,,,,,,,,4/12/2020 13:40,af81233dbdea126e76f075018aaad97bafe77c07,2020-04-12T20:00:00Z,17,,10691,10691,10691,31,0,0,615,91,706
-20200412,NH,929,9996,119,,146,,,,,236,,4/11/2020 09:00,1b031bff22d54419fdbc78737f193d3e465a03bf,2020-04-12T20:00:00Z,23,146,11044,10925,10925,33,1,12,388,44,432
-20200412,NJ,61850,64885,,7604,,1914,,1644,,,,4/12/2020 13:00,49f8b423e3b12cb453420655702d033830f0abca,2020-04-12T20:00:00Z,2350,,126735,126735,126735,34,167,0,2843,3699,6542
-20200412,NM,1174,27518,,78,,,,18,,235,,4/11/2020 00:00,74ee2020c37e14dc6a04949cfe9f747d3e52492e,2020-04-12T20:00:00Z,20,,28692,28692,28692,35,1,0,1511,83,1594
-20200412,NV,2836,21775,,282,,,,,,,,4/12/2020 10:30,ddaa7d5f10287a522251fa67fc69a1eb516bbde7,2020-04-12T20:00:00Z,112,,24611,24611,24611,32,10,0,888,136,1024
-20200412,NY,188694,272907,,18707,42594,5198,,,,23887,,4/12/2020 00:00,af22b910488e9acabab3ffd8040dc43603942961,2020-04-12T20:00:00Z,9385,42594,461601,461601,461601,36,758,1915,12385,8236,20621
-20200412,OH,6604,56639,,,1948,,595,,,,,4/12/2020 14:00,f2a83ca424fd60cc06d885b9f068e3a4bec51a3c,2020-04-12T20:00:00Z,253,1948,63243,63243,63243,39,6,89,2418,354,2772
-20200412,OK,1970,20790,,383,446,191,,,,865,,4/12/2020 08:00,670c30cbd803fb50b633aa630d0c104168b62911,2020-04-12T20:00:00Z,96,446,22760,22760,22760,40,2,0,0,102,102
-20200412,OR,1527,28231,,295,359,81,,52,,,,4/12/2020 11:00,06ee3fd08445fa9a5657fe15a3fe2d48cf72d788,2020-04-12T20:00:00Z,52,359,29758,29758,29758,41,4,21,2378,156,2534
-20200412,PA,22833,102057,,2097,,,,649,,,,4/12/2020 12:00,d255099e1f44a83805e189e05524ed4e0a8f8cfe,2020-04-12T20:00:00Z,507,,124890,124890,124890,42,13,0,3559,1178,4737
-20200412,PR,897,5819,1251,,,,,,,,,4/12/2020 07:00,16fa8e4528a3558e18aa8bc686a61f0fec870799,2020-04-12T20:00:00Z,44,,7967,6716,6716,72,2,0,236,109,345
-20200412,RI,2665,17685,,201,,50,,26,,35,,4/12/2020 00:00,cf7572f0a272f2984326238d2d4f6a9866caa419,2020-04-12T20:00:00Z,63,,20350,20350,20350,44,7,0,1827,316,2143
-20200412,SC,3319,28106,,,496,,,,,,,4/12/2020 15:30,15973680081ef25619c52ae70001ff6c6fafd254,2020-04-12T20:00:00Z,82,496,31425,31425,31425,45,2,0,1220,112,1332
-20200412,SD,730,7823,0,,43,,,,,197,,4/11/2020 18:00,39a2f5241475aabaca92e79158d44e9d5419975a,2020-04-12T20:00:00Z,6,43,8553,8553,8553,46,0,10,445,104,549
-20200412,TN,5308,65369,,,567,,,,,1504,,4/11/2020 15:00,cc06f6d4828c76fafedaa0b13812e9923aff5f72,2020-04-12T20:00:00Z,101,567,70677,70677,70677,47,0,11,3655,194,3849
-20200412,TX,13484,111049,,1338,,,,,,2014,,4/11/2020 21:00,9cdfdc975c2ff8771c6d4191f7c3aa5a6de8ba04,2020-04-12T20:00:00Z,271,,124533,124533,124533,48,17,0,3077,923,4000
-20200412,UT,2303,41931,,,195,,,,,,,4/12/2020 15:00,5309c13f8bc1b37d961845ba10f82016f3a5c734,2020-04-12T20:00:00Z,18,195,44234,44234,44234,49,0,5,1591,97,1688
-20200412,VA,5274,34711,521,751,,440,,294,,,,4/11/2020 17:00,a7c996274dd694d40d48b004db77445560c75236,2020-04-12T20:00:00Z,141,,40506,39985,39985,51,11,0,1789,197,1986
+20200412,MS,2781,18632,,,548,,,,,,A,4/11/2020 19:00,d8730b62b9e1eac4d4e041aa4bd5c5ba08b4161d,2020-04-12T20:00:00Z,96,548,21413,21413,21413,28,3,20,0,139,139
+20200412,MT,387,8526,,22,47,,,,,169,A,4/12/2020 10:21,616ed98fe70349a54287bde379fc0998a50746eb,2020-04-12T20:00:00Z,6,47,8913,8913,8913,30,0,1,322,10,332
+20200412,NC,4520,57619,,331,,,,,,,A,4/12/2020 10:45,bf0c40d554df30d66fe1bd2b8a2a6937eb4501b0,2020-04-12T20:00:00Z,81,,62139,62139,62139,37,1,0,1538,208,1746
+20200412,ND,308,10042,,12,39,,,,,121,B,4/12/2020 12:58,054779b15d36f6768985230ab0d0df0f482bd441,2020-04-12T20:00:00Z,8,39,10350,10350,10350,38,1,3,255,15,270
+20200412,NE,791,9900,,,,,,,,,A,4/12/2020 13:40,d65d87d047488e8d7b15e86a177a03b1aeee61b9,2020-04-12T20:00:00Z,17,,10691,10691,10691,31,0,0,615,91,706
+20200412,NH,929,9996,119,,146,,,,,236,B,4/11/2020 09:00,5969d5b38173559f2461673db51b7c18a13e1468,2020-04-12T20:00:00Z,23,146,11044,10925,10925,33,1,12,388,44,432
+20200412,NJ,61850,64885,,7604,,1914,,1644,,,A,4/12/2020 13:00,3d2b97144348615d644a2d7685ff3e3b9b07eb23,2020-04-12T20:00:00Z,2350,,126735,126735,126735,34,167,0,2843,3699,6542
+20200412,NM,1174,27518,,78,,,,18,,235,A,4/11/2020 00:00,73258fe4cab1bd6378aeca36639820f1987343d1,2020-04-12T20:00:00Z,20,,28692,28692,28692,35,1,0,1511,83,1594
+20200412,NV,2836,21775,,282,,,,,,,A,4/12/2020 10:30,55f6de4c2992ec54f6f81f15b1fba189a04f69af,2020-04-12T20:00:00Z,112,,24611,24611,24611,32,10,0,888,136,1024
+20200412,NY,188694,272907,,18707,42594,5198,,,,23887,A,4/12/2020 00:00,a2b5e5ca1d9eab043b5a07364a9690228d53943c,2020-04-12T20:00:00Z,9385,42594,461601,461601,461601,36,758,1915,12385,8236,20621
+20200412,OH,6604,56639,,,1948,,595,,,,B,4/12/2020 14:00,13e6e1e84e14fc036aa2e18adf57cccbf38d53c7,2020-04-12T20:00:00Z,253,1948,63243,63243,63243,39,6,89,2418,354,2772
+20200412,OK,1970,20790,,383,446,191,,,,865,B,4/12/2020 08:00,43e878313dada7a58b593f0cad4173d9946e88f0,2020-04-12T20:00:00Z,96,446,22760,22760,22760,40,2,0,0,102,102
+20200412,OR,1527,28231,,295,359,81,,52,,,A,4/12/2020 11:00,52519aa8dc557098bb10b6fb3c530341de786060,2020-04-12T20:00:00Z,52,359,29758,29758,29758,41,4,21,2378,156,2534
+20200412,PA,22833,102057,,2097,,,,649,,,A,4/12/2020 12:00,0927d15cf2e902cfc875e2f38949f85ea999224d,2020-04-12T20:00:00Z,507,,124890,124890,124890,42,13,0,3559,1178,4737
+20200412,PR,897,5819,1251,,,,,,,,A,4/12/2020 07:00,def2a5993cffb3701333607d9c0afec1927961e3,2020-04-12T20:00:00Z,44,,7967,6716,6716,72,2,0,236,109,345
+20200412,RI,2665,17685,,201,,50,,26,,35,B,4/12/2020 00:00,bc5c2698c90c85e5fdcb1e7accff23c6ed390f2c,2020-04-12T20:00:00Z,63,,20350,20350,20350,44,7,0,1827,316,2143
+20200412,SC,3319,28106,,,496,,,,,,B,4/12/2020 15:30,704fd7409cd6dca97a9208ca9c1a28bef984410e,2020-04-12T20:00:00Z,82,496,31425,31425,31425,45,2,0,1220,112,1332
+20200412,SD,730,7823,0,,43,,,,,197,A,4/11/2020 18:00,ddb8d2d8f83f7e8399a0b5549eebbc602655b2d3,2020-04-12T20:00:00Z,6,43,8553,8553,8553,46,0,10,445,104,549
+20200412,TN,5308,65369,,,567,,,,,1504,A,4/11/2020 15:00,8efac0db766cfab1489374a4fae96df946068a81,2020-04-12T20:00:00Z,101,567,70677,70677,70677,47,0,11,3655,194,3849
+20200412,TX,13484,111049,,1338,,,,,,2014,A,4/11/2020 21:00,03b826e537c619d0b4fa61cf3c61aa7543fa6dff,2020-04-12T20:00:00Z,271,,124533,124533,124533,48,17,0,3077,923,4000
+20200412,UT,2303,41931,,,195,,,,,,A,4/12/2020 15:00,da85271ce87ed0427aaec64dccd41060551047cb,2020-04-12T20:00:00Z,18,195,44234,44234,44234,49,0,5,1591,97,1688
+20200412,VA,5274,34711,521,751,,440,,294,,,A,4/11/2020 17:00,935d20ce71c6f902807fe3ca1d2c972c013e20b7,2020-04-12T20:00:00Z,141,,40506,39985,39985,51,11,0,1789,197,1986
 20200412,VI,51,299,20,3,,,,,,43,,4/10/2020 00:00,b746c3b24f77380774fa0dbfcba75a853d9b5570,2020-04-12T20:00:00Z,1,,370,350,350,78,0,0,0,0,0
-20200412,VT,727,9114,,34,,,,,,15,,4/12/2020 00:00,f62251d89d52e0c6e580a318894313a9a2826139,2020-04-12T20:00:00Z,27,,9841,9841,9841,50,2,0,567,16,583
-20200412,WA,10398,119533,,642,,191,,,,,,4/11/2020 02:59,936e1037f3cc71242d9c758cc8a83809d1186e01,2020-04-12T20:00:00Z,509,,129931,129931,129931,53,15,0,1297,236,1533
-20200412,WI,3341,35916,,442,974,179,261,,,,,4/12/2020 09:46,e9722ea1156ba7f7d1c95b2de327689ee563e633,2020-04-12T20:00:00Z,144,974,39257,39257,39257,55,7,24,1236,128,1364
-20200412,WV,611,15646,,81,,36,,24,,83,,4/12/2020 17:00,69ad4aed01a473d8d97a8b5185451a886c13f6b0,2020-04-12T20:00:00Z,8,,16257,16257,16257,54,3,0,771,34,805
-20200412,WY,261,5198,,,40,,,,,137,,4/11/2020 18:00,84d2b9d5ccd6d729f6880a0138d521d362c9daa2,2020-04-12T20:00:00Z,0,40,5459,5459,5459,56,0,3,0,0,0
-20200411,AK,257,7475,,,31,,,,,63,,4/11/2020 14:45,cae0f3d6eebcef7a8c2f3b54c304df924e6793de,2020-04-11T20:00:00Z,8,31,7732,7732,7732,02,1,3,289,11,300
-20200411,AL,3191,18058,,,402,,177,,113,,,4/11/2020 00:00,5ffd423fbe6e99cfe4654a3102cf09b887ec2a9d,2020-04-11T20:00:00Z,91,402,21249,21249,21249,01,11,34,0,223,223
-20200411,AR,1226,17352,,86,130,,43,33,39,340,,4/11/2020 13:20,28164043b5d2dbad9786570d1cf3d3297168c92a,2020-04-11T20:00:00Z,24,130,18578,18578,18578,05,1,0,1403,55,1458
+20200412,VT,727,9114,,34,,,,,,15,A,4/12/2020 00:00,b511614b0ad97f3f5f029369cf9dd3efbe00938d,2020-04-12T20:00:00Z,27,,9841,9841,9841,50,2,0,567,16,583
+20200412,WA,10398,119533,,642,,191,,,,,C,4/11/2020 02:59,ebdf48267986adfa3f57e224b5ef59c47545c98d,2020-04-12T20:00:00Z,509,,129931,129931,129931,53,15,0,1297,236,1533
+20200412,WI,3341,35916,,442,974,179,261,,,,A,4/12/2020 09:46,9fdec64068d8b8153b7f14af19ba05e85cb58ca7,2020-04-12T20:00:00Z,144,974,39257,39257,39257,55,7,24,1236,128,1364
+20200412,WV,611,15646,,81,,36,,24,,83,B,4/12/2020 17:00,3992bf14df48889edb3d05cbd971deb8f4306571,2020-04-12T20:00:00Z,8,,16257,16257,16257,54,3,0,771,34,805
+20200412,WY,261,5198,,,40,,,,,137,A,4/11/2020 18:00,baeee884ee322d3b0249ad2bed77a302a604e1ec,2020-04-12T20:00:00Z,0,40,5459,5459,5459,56,0,3,0,0,0
+20200411,AK,257,7475,,,31,,,,,63,A,4/11/2020 14:45,27d36d2d903e4b0763dc60d11778d85abadb887e,2020-04-11T20:00:00Z,8,31,7732,7732,7732,02,1,3,289,11,300
+20200411,AL,3191,18058,,,402,,177,,113,,B,4/11/2020 00:00,240469b6cba18fdb8a5bcca4fa330d25de051596,2020-04-11T20:00:00Z,91,402,21249,21249,21249,01,11,34,0,223,223
+20200411,AR,1226,17352,,86,130,,43,33,39,340,A,4/11/2020 13:20,c728fbde8f2f065b039241e81887faafbfa0338b,2020-04-11T20:00:00Z,24,130,18578,18578,18578,05,1,0,1403,55,1458
 20200411,AS,0,3,2,,,,,,,,,3/31/2020 19:16,1724fb337329f960ec47640e1efecf07800c6b64,2020-04-11T20:00:00Z,,,5,3,3,60,0,0,0,0,0
-20200411,AZ,3393,37137,,,,,,,,,,4/11/2020 00:00,1cc2fc5198373ecd2e683e6ede849f80a575b8aa,2020-04-11T20:00:00Z,108,,40530,40530,40530,04,11,0,2515,281,2796
-20200411,CA,19472,152604,13200,5236,,1591,,,,,,4/9/2020 00:00,7e3ab8287e49ebac16d8b3e4d6fb45f654ea616c,2020-04-11T20:00:00Z,609,,185276,172076,172076,06,68,0,7213,0,7213
-20200411,CO,6510,26143,,841,1312,,,,,,,4/10/2020 18:00,6179cc608bb2ecd3b695551913f37c9605d0efb5,2020-04-11T20:00:00Z,250,1312,32653,32653,32653,08,0,0,0,0,0
-20200411,CT,11510,28321,,1593,,,,,,,,4/11/2020 15:30,903297d8ae0ea6b150c0461bd4b97944b13f07b6,2020-04-11T20:00:00Z,494,,39831,39831,39831,09,46,0,2571,972,3543
-20200411,DC,1778,8261,,,,,,,,447,,4/10/2020 10:00,75c06d7d4673e31eb4f464f7b85e4168281f1726,2020-04-11T20:00:00Z,47,,10039,10039,10039,11,9,0,566,118,684
-20200411,DE,1479,9624,,190,,,,,,191,,4/11/2020 13:30,aaf25fcd3e785cbfa6d9ebe84bdca0f235754607,2020-04-11T20:00:00Z,33,,11103,11103,11103,10,10,0,-791,153,-638
-20200411,FL,18494,154439,1418,,2661,,,,,,,4/11/2020 11:30,aaa35efd92d12825088f9f6e2e010d0a7da0b410,2020-04-11T20:00:00Z,438,2661,174351,172933,172933,12,48,174,9140,963,10103
-20200411,GA,12159,39556,,,2479,,,,,,,4/11/2020 11:28,2ad2221bd894d0b41a6e08b35de58fd8626b5978,2020-04-11T20:00:00Z,428,2479,51715,51715,51715,13,12,128,4892,676,5568
+20200411,AZ,3393,37137,,,,,,,,,B,4/11/2020 00:00,ca6b7cd7f97336895c66fb9036ab14b0578c7e10,2020-04-11T20:00:00Z,108,,40530,40530,40530,04,11,0,2515,281,2796
+20200411,CA,20615,152604,13200,5236,,1591,,,,,B,4/9/2020 00:00,5d00dc8e18132f84aa79ae37cb52599cdc1c7a3d,2020-04-11T20:00:00Z,609,,186419,173219,173219,06,68,0,7213,1143,8356
+20200411,CO,6510,26143,,841,1312,,,,,,A,4/10/2020 18:00,e8ef4a04ac1aae9c405cbb4de803863595abaa8d,2020-04-11T20:00:00Z,250,1312,32653,32653,32653,08,0,0,0,0,0
+20200411,CT,11510,28321,,1593,,,,,,,A,4/11/2020 15:30,58f8f2eae503628702831e6bff79b1139a6efa8a,2020-04-11T20:00:00Z,494,,39831,39831,39831,09,46,0,2571,972,3543
+20200411,DC,1778,8261,,,,,,,,447,A,4/10/2020 10:00,d77c4c7fc0400e7f4fc777f4c7d2241d9116ad42,2020-04-11T20:00:00Z,47,,10039,10039,10039,11,9,0,566,118,684
+20200411,DE,1479,9624,,190,,,,,,191,A,4/11/2020 13:30,8af6db12fb508b713b13e9afefa03e41220c17f2,2020-04-11T20:00:00Z,33,,11103,11103,11103,10,10,0,-791,153,-638
+20200411,FL,18494,154439,1418,,2661,,,,,,A,4/11/2020 11:30,703584c18ed5ac5c3c843afed44d77db9cf6bbbc,2020-04-11T20:00:00Z,438,2661,174351,172933,172933,12,48,174,9140,963,10103
+20200411,GA,12159,39556,,,2479,,,,,,A,4/11/2020 11:28,dadf51463882d73949361915201824aefd8ec8fb,2020-04-11T20:00:00Z,428,2479,51715,51715,51715,13,12,128,4892,676,5568
 20200411,GU,133,693,,14,,2,,2,,58,,4/11/2020 07:40,a0267f35e988676a92ce47ca31ccf830cbe3340a,2020-04-11T20:00:00Z,5,,826,826,826,66,1,0,31,3,34
-20200411,HI,465,17066,,,43,,6,,2,284,,4/10/2020 18:00,e9f3bcc386eaf5224417ac6635e78d23476911f3,2020-04-11T20:00:00Z,8,43,17531,17531,17531,15,2,1,1359,23,1382
-20200411,IA,1510,15622,,118,,55,,30,,585,,4/11/2020 00:00,5b0c036415d3a94d46ab54cbc8d5a7bcd23ce974,2020-04-11T20:00:00Z,34,,17132,17132,17132,19,3,0,1057,122,1179
-20200411,ID,1396,12368,,,128,,35,,,,,4/10/2020 19:00,ecd8c05bbf086cc9ba04b6277abe19c76f4e255f,2020-04-11T20:00:00Z,25,128,13764,13764,13764,16,1,1,627,43,670
-20200411,IL,19180,72969,,3680,,1166,,821,,,,4/11/2020 00:00,55f16297a9c241729d1d46bb0e7bd034c09e342f,2020-04-11T20:00:00Z,677,,92149,92149,92149,17,81,0,3329,1293,4622
-20200411,IN,7435,31780,,,,820,,497,,,,4/10/2020 23:59,ad20594b82751b0f629b44aff60a29a0fac4e940,2020-04-11T20:00:00Z,330,,39215,39215,39215,18,30,0,3647,528,4175
-20200411,KS,1268,11075,,,293,,,,,,,4/11/2020 11:00,13994003f8912637e01144a5162f6960a0147ee5,2020-04-11T20:00:00Z,55,293,12343,12343,12343,20,5,19,827,102,929
-20200411,KY,1693,22595,,271,459,105,177,,,464,,4/10/2020 17:00,60fba77ea316f097982ffc0806077b042781e7cc,2020-04-11T20:00:00Z,90,459,24288,24288,24288,21,0,0,0,0,0
-20200411,LA,20014,76901,,2067,,,,470,,,,4/11/2020 13:00,d04738920d22d3a3c9d128a6295ac045d366f2dd,2020-04-11T20:00:00Z,806,,96915,96915,96915,22,51,0,3874,761,4635
-20200411,MA,22766,86115,,2507,2507,,,,,,,4/11/2020 12:30,c7affe9e7677e56e3b60d4a00118ca24543a6253,2020-04-11T20:00:00Z,946,2507,108881,108881,108881,25,114,72,4551,1888,6439
-20200411,MD,7694,39544,,,1709,,,,,431,,4/11/2020 10:00,fc240e243fa9ccb8b786c546819d60f9d00994aa,2020-04-11T20:00:00Z,206,1709,47238,47238,47238,24,35,296,2064,726,2790
-20200411,ME,616,6088,,,114,,,,,256,,4/11/2020 11:00,89fafe9a3f10d11ce7aa2d830542e633c654d591,2020-04-11T20:00:00Z,19,114,6704,6704,6704,23,2,3,0,30,30
-20200411,MI,23993,52021,,3636,,1582,,1441,,595,,4/11/2020 11:00,c7104b4277ebfcaa9d875689061b96d030001bd1,2020-04-11T20:00:00Z,1392,,76014,76014,76014,26,111,0,2760,1210,3970
-20200411,MN,1427,33977,,145,340,69,138,,,793,,4/10/2020 17:00,c7779dae07ed9d036d290a1ecf1a0a52b6bb95ce,2020-04-11T20:00:00Z,64,340,35404,35404,35404,27,7,23,1419,91,1510
-20200411,MO,4024,39148,,506,,,,,,,,4/11/2020 15:00,38364caf8196eb4386101aa2122bbfc6d0523c87,2020-04-11T20:00:00Z,109,,43172,43172,43172,29,13,0,2207,225,2432
+20200411,HI,465,17066,,,43,,6,,2,284,A,4/10/2020 18:00,9c1fd3082daa4bcc407babba93cf516450828220,2020-04-11T20:00:00Z,8,43,17531,17531,17531,15,2,1,1359,23,1382
+20200411,IA,1510,15622,,118,,55,,30,,585,A,4/11/2020 00:00,4b7b50c89e973cdbe3def7ae08062a3a2af51114,2020-04-11T20:00:00Z,34,,17132,17132,17132,19,3,0,1057,122,1179
+20200411,ID,1396,12368,,,128,,35,,,,A,4/10/2020 19:00,c76eb776d570f221f568c294f282b9ac2e5dc107,2020-04-11T20:00:00Z,25,128,13764,13764,13764,16,1,1,627,43,670
+20200411,IL,19180,72969,,3680,,1166,,821,,,A,4/11/2020 00:00,100b230e907a0d7de1a63d0a2d572543b5783be8,2020-04-11T20:00:00Z,677,,92149,92149,92149,17,81,0,3329,1293,4622
+20200411,IN,7435,31780,,,,820,,497,,,B,4/10/2020 23:59,d6583da0f546e2c120e27a1a7310ad8ece4a4117,2020-04-11T20:00:00Z,330,,39215,39215,39215,18,30,0,3647,528,4175
+20200411,KS,1268,11075,,,293,,,,,,B,4/11/2020 11:00,15258ea4c78b65e4d7af5a105c2b056f301d5ec2,2020-04-11T20:00:00Z,55,293,12343,12343,12343,20,5,19,827,102,929
+20200411,KY,1693,22595,,271,459,105,177,,,464,A,4/10/2020 17:00,026914690bbb9576b2ec1184671143fe68d4bd8f,2020-04-11T20:00:00Z,90,459,24288,24288,24288,21,0,0,0,0,0
+20200411,LA,20014,76901,,2067,,,,470,,,A,4/11/2020 13:00,4c3e29c850283fcf033a4d65958845db934f6ab3,2020-04-11T20:00:00Z,806,,96915,96915,96915,22,51,0,3874,761,4635
+20200411,MA,22766,86115,,2507,2507,,,,,,B,4/11/2020 12:30,390a710a9a9334a794b56f6625560b11668064d7,2020-04-11T20:00:00Z,946,2507,108881,108881,108881,25,114,72,4551,1888,6439
+20200411,MD,7694,39544,,,1709,,,,,431,A,4/11/2020 10:00,2ddb13a518e5cbb668c5d1e76eebe48e52a8d6eb,2020-04-11T20:00:00Z,206,1709,47238,47238,47238,24,35,296,2064,726,2790
+20200411,ME,616,6088,,,114,,,,,256,A,4/11/2020 11:00,92c07d997c7ca9a34e81112f40b81ef0298089a1,2020-04-11T20:00:00Z,19,114,6704,6704,6704,23,2,3,0,30,30
+20200411,MI,23993,52021,,3636,,1582,,1441,,595,B,4/11/2020 11:00,b2a7823aafa81a217fb6d15c2457417d81248cab,2020-04-11T20:00:00Z,1392,,76014,76014,76014,26,111,0,2760,1210,3970
+20200411,MN,1427,33977,,145,340,69,138,,,793,A,4/10/2020 17:00,b0fcd287087a8a21fb94631f4172430d447da27f,2020-04-11T20:00:00Z,64,340,35404,35404,35404,27,7,23,1419,91,1510
+20200411,MO,4024,39148,,506,,,,,,,A,4/11/2020 15:00,56328595eb22919c369c7a3bf47fb3e9ebee5ef6,2020-04-11T20:00:00Z,109,,43172,43172,43172,29,13,0,2207,225,2432
 20200411,MP,11,27,9,,,,,,,,,4/11/2020 00:00,187b17a38ecd4cf70c41a2140801208c5637c718,2020-04-11T20:00:00Z,2,,47,38,38,69,0,0,0,0,0
-20200411,MS,2642,18632,,,528,,,,,,,4/10/2020 19:00,81b16ed165f9af469676f84b6c6cfecaa3d4f470,2020-04-11T20:00:00Z,93,528,21274,21274,21274,28,11,46,0,173,173
-20200411,MT,377,8204,,21,46,,,,,169,,4/10/2020 00:00,43afe9874b8ce56b277463addc8ecb749d034dd2,2020-04-11T20:00:00Z,6,46,8581,8581,8581,30,0,5,272,12,284
-20200411,NC,4312,56081,,362,,,,,,,,4/11/2020 11:00,fa96e50bd432b442a8ce819b4e7d3331c2f00328,2020-04-11T20:00:00Z,80,,60393,60393,60393,37,6,0,2344,404,2748
-20200411,ND,293,9787,,10,36,,,,,119,,4/11/2020 13:00,04f17a9b4aa6ae198118b55ac8f9e34ff60f1331,2020-04-11T20:00:00Z,7,36,10080,10080,10080,38,1,0,457,15,472
-20200411,NE,700,9285,,,,,,,,,,4/11/2020 14:00,0b6a5351d8d86a0b217ad3b6cb3eae6ae5507c26,2020-04-11T20:00:00Z,17,,9985,9985,9985,31,2,0,566,65,631
-20200411,NH,885,9608,93,,134,,,,,234,,4/9/2020 09:00,d3640882f44bed6447b57d22daeb9963cb06bfa3,2020-04-11T20:00:00Z,22,134,10586,10493,10493,33,1,10,469,66,535
-20200411,NJ,58151,62042,,7618,,1746,,1650,,,,4/11/2020 13:00,ff90c51e0e175ed5ceec712cfa96d0c8aec516b7,2020-04-11T20:00:00Z,2183,,120193,120193,120193,34,251,0,3107,3563,6670
-20200411,NM,1091,26007,,75,,,,18,,235,,4/10/2020 00:00,f9bcea805d27388d051863eebee73ca4c0694368,2020-04-11T20:00:00Z,19,,27098,27098,27098,35,0,0,0,0,0
-20200411,NV,2700,20887,,282,,,,,,,,4/11/2020 10:30,0667efea7d8e578b3a6ff51fde706adce58d705c,2020-04-11T20:00:00Z,102,,23587,23587,23587,32,16,0,722,116,838
-20200411,NY,180458,260522,,18654,40679,5009,,,,22025,,4/11/2020 00:00,e33e16f84bdefce8faf4802cd41b59e2fe24eaab,2020-04-11T20:00:00Z,8627,40679,440980,440980,440980,36,783,1861,13149,9946,23095
-20200411,OH,6250,54221,,,1859,,572,,,,,4/11/2020 14:00,97f0a7431b3b7f4e0b517f266617999257ce221e,2020-04-11T20:00:00Z,247,1859,60471,60471,60471,39,16,104,1526,372,1898
-20200411,OK,1868,20790,,383,446,191,,,,865,,4/11/2020 08:00,dac61bc1a2574f43e5d94d08f02a1937665ebd34,2020-04-11T20:00:00Z,94,446,22658,22658,22658,40,6,18,420,74,494
-20200411,OR,1371,25853,,140,338,58,,46,,,,4/10/2020 11:00,30f239b3a85bb55242ddcef5a04d4d7ec0501be5,2020-04-11T20:00:00Z,48,338,27224,27224,27224,41,4,12,1547,50,1597
-20200411,PA,21655,98498,,2115,,,,639,,,,4/11/2020 12:00,280a32eddcee734ad00a33ffde35b455aea61145,2020-04-11T20:00:00Z,494,,120153,120153,120153,42,78,0,5458,1676,7134
-20200411,PR,788,5583,1332,,,,,,,,,4/11/2020 07:00,cc1f35def4fad261064fb85e82f2b74423e87482,2020-04-11T20:00:00Z,42,,7703,6371,6371,72,3,0,462,63,525
-20200411,RI,2349,15858,,183,,50,,26,,35,,4/11/2020 00:00,a69a6675db106a845b9111a4de763157ee8ba904,2020-04-11T20:00:00Z,56,,18207,18207,18207,44,7,0,3577,334,3911
-20200411,SC,3207,26886,,,496,,,,,,,4/11/2020 15:31,4b5810e34347d283c9f6da129f503be4af01cdaf,2020-04-11T20:00:00Z,80,496,30093,30093,30093,45,8,0,1768,142,1910
-20200411,SD,626,7378,2,,33,,,,,189,,4/10/2020 18:00,ca05edb8996f552bd8c2212ae88b7415119924ac,2020-04-11T20:00:00Z,6,33,8006,8004,8004,46,0,4,267,90,357
-20200411,TN,5114,61714,,,556,,,,,1386,,4/11/2020 15:00,9e706f10337fc7dc0f37268df7e9d74d86180f65,2020-04-11T20:00:00Z,101,556,66828,66828,66828,47,3,20,3777,252,4029
-20200411,TX,12561,107972,,1514,,,,,,1617,,4/11/2020 12:40,178a367caddb594cc0ac8b6f73c215f59fce1a74,2020-04-11T20:00:00Z,254,,120533,120533,120533,48,28,0,3925,890,4815
-20200411,UT,2206,40340,,,190,,,,,,,4/11/2020 15:00,f34847bedb8abc9852c72ab9793c161d16117c2a,2020-04-11T20:00:00Z,18,190,42546,42546,42546,49,1,7,1680,104,1784
-20200411,VA,5077,32922,517,1252,,426,,283,,,,4/10/2020 17:00,66a898c65047147c64dcdb51f66a86e1071b374d,2020-04-11T20:00:00Z,130,,38516,37999,37999,51,9,0,1972,568,2540
+20200411,MS,2642,18632,,,528,,,,,,A,4/10/2020 19:00,2faeb4542e275d1b05dad5a6e7b40c1fb0fbaa68,2020-04-11T20:00:00Z,93,528,21274,21274,21274,28,11,46,0,173,173
+20200411,MT,377,8204,,21,46,,,,,169,A,4/10/2020 00:00,b0963f72d5a9728307bac46c6fcc96713542f5fc,2020-04-11T20:00:00Z,6,46,8581,8581,8581,30,0,5,272,12,284
+20200411,NC,4312,56081,,362,,,,,,,A,4/11/2020 11:00,499285a83edd743eb822dda9d344d6c0fa619ab0,2020-04-11T20:00:00Z,80,,60393,60393,60393,37,6,0,2344,404,2748
+20200411,ND,293,9787,,10,36,,,,,119,B,4/11/2020 13:00,8468d1adaf5b9d317f4cefb765efa0c1736ca3d6,2020-04-11T20:00:00Z,7,36,10080,10080,10080,38,1,0,457,15,472
+20200411,NE,700,9285,,,,,,,,,A,4/11/2020 14:00,b0b36a476e8efe49d68d16442d9bb3cbfcd5f2c5,2020-04-11T20:00:00Z,17,,9985,9985,9985,31,2,0,566,65,631
+20200411,NH,885,9608,93,,134,,,,,234,B,4/9/2020 09:00,72cc0ae9a74610cdec63b2d6201a1998c2ca8f35,2020-04-11T20:00:00Z,22,134,10586,10493,10493,33,1,10,469,66,535
+20200411,NJ,58151,62042,,7618,,1746,,1650,,,A,4/11/2020 13:00,78f470c861fdf7c6d45fd86375d24c60d548e6f5,2020-04-11T20:00:00Z,2183,,120193,120193,120193,34,251,0,3107,3563,6670
+20200411,NM,1091,26007,,75,,,,18,,235,A,4/10/2020 00:00,ecea73deb24eaa38d43aa7425c5d9305f8b721eb,2020-04-11T20:00:00Z,19,,27098,27098,27098,35,0,0,0,0,0
+20200411,NV,2700,20887,,282,,,,,,,A,4/11/2020 10:30,266140d6b6f9ac38f17e413528080ea91cd52423,2020-04-11T20:00:00Z,102,,23587,23587,23587,32,16,0,722,116,838
+20200411,NY,180458,260522,,18654,40679,5009,,,,22025,A,4/11/2020 00:00,60d59689466fa1b6881e580773ee0d115443c6af,2020-04-11T20:00:00Z,8627,40679,440980,440980,440980,36,783,1861,13149,9946,23095
+20200411,OH,6250,54221,,,1859,,572,,,,B,4/11/2020 14:00,178a8aab50ca07d5724eb59a8a4f7c73f8f92027,2020-04-11T20:00:00Z,247,1859,60471,60471,60471,39,16,104,1526,372,1898
+20200411,OK,1868,20790,,383,446,191,,,,865,B,4/11/2020 08:00,b1d8cf0c5a94095729ba0460d021b8a2d1b27903,2020-04-11T20:00:00Z,94,446,22658,22658,22658,40,6,18,420,74,494
+20200411,OR,1371,25853,,140,338,58,,46,,,A,4/10/2020 11:00,bb1e4f995a38b802751fd45c3ef066396cbe522e,2020-04-11T20:00:00Z,48,338,27224,27224,27224,41,4,12,1547,50,1597
+20200411,PA,21655,98498,,2115,,,,639,,,A,4/11/2020 12:00,5d14e3f95510544cead308bbc6ee8940fbfe12bd,2020-04-11T20:00:00Z,494,,120153,120153,120153,42,78,0,5458,1676,7134
+20200411,PR,788,5583,1332,,,,,,,,A,4/11/2020 07:00,1fae83dc9ac6d45fbda9fd4388c275d0cec2fae4,2020-04-11T20:00:00Z,42,,7703,6371,6371,72,3,0,462,63,525
+20200411,RI,2349,15858,,183,,50,,26,,35,B,4/11/2020 00:00,6bded5d25aa468065955ee1dca799a4d22d4f68d,2020-04-11T20:00:00Z,56,,18207,18207,18207,44,7,0,3577,334,3911
+20200411,SC,3207,26886,,,496,,,,,,B,4/11/2020 15:31,e86b8b2397e4b339e40c4545e593b3f7aa4268bb,2020-04-11T20:00:00Z,80,496,30093,30093,30093,45,8,0,1768,142,1910
+20200411,SD,626,7378,2,,33,,,,,189,A,4/10/2020 18:00,035ea7382b97b5f6fb1c437bc4dcec80c2d32561,2020-04-11T20:00:00Z,6,33,8006,8004,8004,46,0,4,267,90,357
+20200411,TN,5114,61714,,,556,,,,,1386,A,4/11/2020 15:00,198d5b4ada99ad74b1712a7fe14d3216de77c031,2020-04-11T20:00:00Z,101,556,66828,66828,66828,47,3,20,3777,252,4029
+20200411,TX,12561,107972,,1514,,,,,,1617,A,4/11/2020 12:40,feb5a1f3f112cbb6be444af903cc4c79e5f1d40b,2020-04-11T20:00:00Z,254,,120533,120533,120533,48,28,0,3925,890,4815
+20200411,UT,2206,40340,,,190,,,,,,A,4/11/2020 15:00,9d6d191c9c2ea784ad2ed85570cd9c8b2571ee46,2020-04-11T20:00:00Z,18,190,42546,42546,42546,49,1,7,1680,104,1784
+20200411,VA,5077,32922,517,1252,,426,,283,,,A,4/10/2020 17:00,f5893567ec416bdf08a2aff15fe6cef78dfcfc06,2020-04-11T20:00:00Z,130,,38516,37999,37999,51,9,0,1972,568,2540
 20200411,VI,51,299,20,3,,,,,,43,,4/11/2020 09:30,d74e5ce36226ff7315d0282b00b8434ce04decd8,2020-04-11T20:00:00Z,1,,370,350,350,78,0,0,26,1,27
-20200411,VT,711,8547,,77,,,,,,15,,4/11/2020 00:00,74c7f9a850515ae6b78260dc68043f2b0d7a4b4a,2020-04-11T20:00:00Z,25,,9258,9258,9258,50,1,0,994,32,1026
-20200411,WA,10162,118236,,649,,191,,,,,,4/10/2020 02:59,576e319f8aca6a5156082c9447a288ed458a7739,2020-04-11T20:00:00Z,494,,128398,128398,128398,53,18,0,1840,221,2061
-20200411,WI,3213,34680,,444,950,179,257,,,,,4/11/2020 01:00,db3efdf7d0c4b3a5a281bae01a7541f323289f1f,2020-04-11T20:00:00Z,137,950,37893,37893,37893,55,9,46,1455,145,1600
-20200411,WV,577,14875,,85,,40,,22,,63,,4/11/2020 10:00,3996b83a5fd0ed04f080cbcc2331d8545ff821f9,2020-04-11T20:00:00Z,5,,15452,15452,15452,54,0,0,874,23,897
-20200411,WY,261,5198,,,37,,,,,129,,4/11/2020 18:00,2e4ad455ad6dc9e836e8c25d98066848223a95ac,2020-04-11T20:00:00Z,0,37,5459,5459,5459,56,0,0,462,8,470
-20200410,AK,246,7186,,,28,,,,,55,,4/10/2020 15:30,5ffee87f7dd343d321260f7fd502debd9814f581,2020-04-10T20:00:00Z,7,28,7432,7432,7432,02,0,1,198,11,209
-20200410,AL,2968,18058,,,368,,,,,,,4/10/2020 00:00,81ba86897892cd5a4acc24f2f6637f4137fff2a3,2020-04-10T20:00:00Z,80,368,21026,21026,21026,01,6,35,0,199,199
-20200410,AR,1171,15949,,86,130,,43,33,39,312,,4/10/2020 14:36,f3f6a767b23c2263b76e4910a2cf1ab814780245,2020-04-10T20:00:00Z,23,130,17120,17120,17120,05,2,0,2117,52,2169
+20200411,VT,711,8547,,77,,,,,,15,A,4/11/2020 00:00,729ffa01c213128a87dd27ce84a03dd3bd50921a,2020-04-11T20:00:00Z,25,,9258,9258,9258,50,1,0,994,32,1026
+20200411,WA,10162,118236,,649,,191,,,,,C,4/10/2020 02:59,27b172e53820ee8ade9795e7a9a56d388573459a,2020-04-11T20:00:00Z,494,,128398,128398,128398,53,18,0,1840,221,2061
+20200411,WI,3213,34680,,444,950,179,257,,,,A,4/11/2020 01:00,452c6d5dcb201632b5519a5f91d91166fd5a82db,2020-04-11T20:00:00Z,137,950,37893,37893,37893,55,9,46,1455,145,1600
+20200411,WV,577,14875,,85,,40,,22,,63,B,4/11/2020 10:00,31fcc8cc5d107e65d1c139458c922bddcce05907,2020-04-11T20:00:00Z,5,,15452,15452,15452,54,0,0,874,23,897
+20200411,WY,261,5198,,,37,,,,,129,A,4/11/2020 18:00,fce4a121734e726ec0a85bd483b794d7110b4a5e,2020-04-11T20:00:00Z,0,37,5459,5459,5459,56,0,0,462,8,470
+20200410,AK,246,7186,,,28,,,,,55,A,4/10/2020 15:30,11c8b876833123a3c18cfaac4900d4218ae7522f,2020-04-10T20:00:00Z,7,28,7432,7432,7432,02,0,1,198,11,209
+20200410,AL,2968,18058,,,368,,,,,,B,4/10/2020 00:00,e91676cc3e3dbe635ec583ab4607d4d02a3f3e73,2020-04-10T20:00:00Z,80,368,21026,21026,21026,01,6,35,0,199,199
+20200410,AR,1171,15949,,86,130,,43,33,39,312,A,4/10/2020 14:36,2edb28149eacfc79d95c4a519c0071a41fe57096,2020-04-10T20:00:00Z,23,130,17120,17120,17120,05,2,0,2117,52,2169
 20200410,AS,0,3,2,,,,,,,,,4/6/2020 16:00,dbbc6a1e0d8608e0d026394332ec6dcdc3834ce7,2020-04-10T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200410,AZ,3112,34622,,,,,,,,,,4/10/2020 00:00,fdf277cd1ff468c606df575132f8560156f21df4,2020-04-10T20:00:00Z,97,,37734,37734,37734,04,8,0,462,94,556
-20200410,CA,19472,145391,13900,2897,,1145,,,,,,4/9/2020 00:00,43aa6470f29452d35a7fe2169ef498aa0e61869b,2020-04-10T20:00:00Z,541,,178763,164863,164863,06,49,0,200,1163,1363
-20200410,CO,6510,26143,,842,1312,,,,,,,4/10/2020 01:59,decacd649f80b5a72876e5c94e773a9c3eaba0cc,2020-04-10T20:00:00Z,250,1312,32653,32653,32653,08,57,150,2599,855,3454
-20200410,CT,10538,25750,,1562,,,,,,,,4/10/2020 17:00,19b12a576cf80547832a223f40f62860df0e8432,2020-04-10T20:00:00Z,448,,36288,36288,36288,09,68,0,2032,754,2786
-20200410,DC,1660,7695,,,,,,,,426,,4/10/2020 10:00,cbd9a7f7bee2b2d811104f23850ec0f1183a9089,2020-04-10T20:00:00Z,38,,9355,9355,9355,11,6,0,494,137,631
-20200410,DE,1326,10415,,181,,,,,,177,,4/10/2020 14:00,aa130b1e357342e2810caf33dec26e047d4159c9,2020-04-10T20:00:00Z,23,,11741,11741,11741,10,0,0,1732,119,1851
-20200410,FL,17531,145299,1411,,2487,,,,,,,4/10/2020 11:30,31a9cb941492423c2e347dccff3c8e9608384aaf,2020-04-10T20:00:00Z,390,2487,164241,162830,162830,12,36,219,9114,1167,10281
-20200410,GA,11483,34664,,,2351,,,,,,,4/10/2020 11:28,212418ffbccf3fbed5096c0a9f0edb77c5850b36,2020-04-10T20:00:00Z,416,2351,46147,46147,46147,13,37,192,4145,917,5062
+20200410,AZ,3112,34622,,,,,,,,,B,4/10/2020 00:00,dca27879e9e3867d590d7ff708aa5bdd1c2929f1,2020-04-10T20:00:00Z,97,,37734,37734,37734,04,8,0,462,94,556
+20200410,CA,19472,145391,13900,2897,,1145,,,,,B,4/9/2020 00:00,8cfcf27a0009b4126a871dc45418782f90d90905,2020-04-10T20:00:00Z,541,,178763,164863,164863,06,49,0,200,1163,1363
+20200410,CO,6510,26143,,842,1312,,,,,,A,4/10/2020 01:59,a561f1d35d0249bfddfc532d02b2e8aec42299dc,2020-04-10T20:00:00Z,250,1312,32653,32653,32653,08,57,150,2599,855,3454
+20200410,CT,10538,25750,,1562,,,,,,,A,4/10/2020 17:00,a57ade9c378f1cf2ebf877845faa562bd8bb125e,2020-04-10T20:00:00Z,448,,36288,36288,36288,09,68,0,2032,754,2786
+20200410,DC,1660,7695,,,,,,,,426,A,4/10/2020 10:00,dc7764306f4d8db969ff5264a1de807bab3826d5,2020-04-10T20:00:00Z,38,,9355,9355,9355,11,6,0,494,137,631
+20200410,DE,1326,10415,,181,,,,,,177,A,4/10/2020 14:00,9be6836ea8b937fe022f580defe14ebeadcaac5a,2020-04-10T20:00:00Z,23,,11741,11741,11741,10,0,0,1732,119,1851
+20200410,FL,17531,145299,1411,,2487,,,,,,A,4/10/2020 11:30,bde7efe5e1545cdfed724a61668ae8b942ef0548,2020-04-10T20:00:00Z,390,2487,164241,162830,162830,12,36,219,9114,1167,10281
+20200410,GA,11483,34664,,,2351,,,,,,A,4/10/2020 11:28,ec22a6fca930679c883b2d47a6dd6df6e2764119,2020-04-10T20:00:00Z,416,2351,46147,46147,46147,13,37,192,4145,917,5062
 20200410,GU,130,662,,14,,2,,2,,41,,4/9/2020 20:45,e659b13210dcefc1a0ee8213f6d0dfbf4278099b,2020-04-10T20:00:00Z,4,,792,792,792,66,0,0,69,2,71
-20200410,HI,442,15707,,,42,,6,,2,251,,4/9/2020 18:00,041921de42afb3773b8a2cc136498d1fe4560cac,2020-04-10T20:00:00Z,6,42,16149,16149,16149,15,1,0,391,7,398
-20200410,IA,1388,14565,,125,,55,,30,,506,,4/10/2020 00:00,7509904e5be6fe61cf3cde8702c4ccbdc62dd46c,2020-04-10T20:00:00Z,31,,15953,15953,15953,19,2,0,862,118,980
-20200410,ID,1353,11741,,,127,,33,,,,,4/9/2020 19:00,259870454e80311018fe0c6edb987f1876d5fe49,2020-04-10T20:00:00Z,24,127,13094,13094,13094,16,6,14,442,121,563
-20200410,IL,17887,69640,,3680,,1166,,821,,,,4/10/2020 00:00,741b7dfee9db119f3af1365f00b939f2bbcf0ae2,2020-04-10T20:00:00Z,596,,87527,87527,87527,17,68,0,5205,1465,6670
-20200410,IN,6907,28133,,,,820,,497,,,,4/10/2020 10:00,ae6092910c69055b804ca9fdd75ce54a47325636,2020-04-10T20:00:00Z,300,,35040,35040,35040,18,55,0,2351,556,2907
-20200410,KS,1166,10248,,,274,,,,,,,4/10/2020 09:30,9b2dcafc52bc584077baedb644e93f6cf97faa4a,2020-04-10T20:00:00Z,50,274,11414,11414,11414,20,8,11,579,60,639
-20200410,KY,1693,22595,,271,459,105,177,,,464,,4/10/2020 17:00,25431e46f9aab192a9091aab3a8de2f8fdc171f9,2020-04-10T20:00:00Z,90,459,24288,24288,24288,21,17,459,2140,347,2487
-20200410,LA,19253,73027,,2054,,,,479,,,,4/10/2020 13:00,19db9270c15e971aa67045165fcddf82f75eb4ab,2020-04-10T20:00:00Z,755,,92280,92280,92280,22,53,0,4391,970,5361
-20200410,MA,20878,81564,,2435,2435,,,,,,,4/10/2020 12:30,15f2beb63084f9a1ab4d419876f57177d2161d50,2020-04-10T20:00:00Z,832,2435,102442,102442,102442,25,107,133,5418,2035,7453
-20200410,MD,6968,37480,,,1413,,,,,397,,4/10/2020 10:00,473ebc162a4976f5c7393bd1e7c2e484e3bbad79,2020-04-10T20:00:00Z,171,1413,44448,44448,44448,24,33,65,2136,783,2919
-20200410,ME,586,6088,,,111,,,,,246,,4/10/2020 12:00,f708cb85e983cfb6c16b7725e67921c0511a340e,2020-04-10T20:00:00Z,17,111,6674,6674,6674,23,1,6,0,26,26
-20200410,MI,22783,49261,,3823,,1663,,1394,,56,,4/10/2020 11:00,bea4556cff9110ed7140697aa08c57a16beac5bd,2020-04-10T20:00:00Z,1281,,72044,72044,72044,26,205,0,3711,1279,4990
-20200410,MN,1336,32558,,143,317,64,131,,,732,,4/9/2020 17:00,694c29d43d7422a8d976b4c2b66b790baffa9cbb,2020-04-10T20:00:00Z,57,317,33894,33894,33894,27,7,24,1506,94,1600
-20200410,MO,3799,36941,,568,,,,,,,,4/10/2020 15:00,3f15db2be755eee9432e14b195f2804c4c72007b,2020-04-10T20:00:00Z,96,,40740,40740,40740,29,19,0,1986,260,2246
+20200410,HI,442,15707,,,42,,6,,2,251,A,4/9/2020 18:00,6e8312be0dca093d9125120eb14647e1e00b34be,2020-04-10T20:00:00Z,6,42,16149,16149,16149,15,1,0,391,7,398
+20200410,IA,1388,14565,,125,,55,,30,,506,A,4/10/2020 00:00,0149fe025a46a5a2dd35e51b934ca17e04c08414,2020-04-10T20:00:00Z,31,,15953,15953,15953,19,2,0,862,118,980
+20200410,ID,1353,11741,,,127,,33,,,,A,4/9/2020 19:00,615494e7a80bd530e2c60d031251194c32e20c02,2020-04-10T20:00:00Z,24,127,13094,13094,13094,16,6,14,442,121,563
+20200410,IL,17887,69640,,3680,,1166,,821,,,A,4/10/2020 00:00,917761ab030f3e95c5190e61523ab9c1def68dfd,2020-04-10T20:00:00Z,596,,87527,87527,87527,17,68,0,5205,1465,6670
+20200410,IN,6907,28133,,,,820,,497,,,B,4/10/2020 10:00,b1405e7b67921aaf898bb3d7cc56aafb046760ec,2020-04-10T20:00:00Z,300,,35040,35040,35040,18,55,0,2351,556,2907
+20200410,KS,1166,10248,,,274,,,,,,B,4/10/2020 09:30,353cf136f94817eb650f5788806e31d83ded7da1,2020-04-10T20:00:00Z,50,274,11414,11414,11414,20,8,11,579,60,639
+20200410,KY,1693,22595,,271,459,105,177,,,464,A,4/10/2020 17:00,b5d516c88a1d7ac6460abc1d5bd0ca5971adb9ac,2020-04-10T20:00:00Z,90,459,24288,24288,24288,21,17,459,2140,347,2487
+20200410,LA,19253,73027,,2054,,,,479,,,A,4/10/2020 13:00,bc440f37a24b708ac2daea04a8323ad652b20058,2020-04-10T20:00:00Z,755,,92280,92280,92280,22,53,0,4391,970,5361
+20200410,MA,20878,81564,,2435,2435,,,,,,B,4/10/2020 12:30,bd8ab000ee6ee7a5a020a8bb386b1eb7246d8c35,2020-04-10T20:00:00Z,832,2435,102442,102442,102442,25,107,133,5418,2035,7453
+20200410,MD,6968,37480,,,1413,,,,,397,A,4/10/2020 10:00,aa3b7f19e3a7e78fdf9ae5354137bf1706bd3e01,2020-04-10T20:00:00Z,171,1413,44448,44448,44448,24,33,65,2136,783,2919
+20200410,ME,586,6088,,,111,,,,,246,A,4/10/2020 12:00,11b3197b875b016ef915c786e0b1d9040ec83aba,2020-04-10T20:00:00Z,17,111,6674,6674,6674,23,1,6,0,26,26
+20200410,MI,22783,49261,,3823,,1663,,1394,,56,B,4/10/2020 11:00,f221d5e7926fd2cf764f39b4acfaa9decdfaf754,2020-04-10T20:00:00Z,1281,,72044,72044,72044,26,205,0,3711,1279,4990
+20200410,MN,1336,32558,,143,317,64,131,,,732,A,4/9/2020 17:00,b3e9446360a5684e4767a8bfc7debfc7fd32f635,2020-04-10T20:00:00Z,57,317,33894,33894,33894,27,7,24,1506,94,1600
+20200410,MO,3799,36941,,568,,,,,,,A,4/10/2020 15:00,dbebd870875f930e4754654989c3124c4ec8f52f,2020-04-10T20:00:00Z,96,,40740,40740,40740,29,19,0,1986,260,2246
 20200410,MP,11,27,9,,,,,,,,,4/10/2020 00:00,4103654fecc778a9d9307a099bc0178aa5432958,2020-04-10T20:00:00Z,2,,47,38,38,69,0,0,0,0,0
-20200410,MS,2469,18632,,,482,,,,,,,4/9/2020 19:00,4d81edd1983f11d3c4132e3ce5837ab73294a2db,2020-04-10T20:00:00Z,82,482,21101,21101,21101,28,6,41,0,209,209
-20200410,MT,365,7932,,29,41,,,,,165,,4/10/2020 11:25,39c472d164ac7729ae98d3fe6d7dbd55fc6b9993,2020-04-10T20:00:00Z,6,41,8297,8297,8297,30,0,5,426,11,437
-20200410,NC,3908,53737,,423,,,,,,,,4/10/2020 11:00,be69a78bfd70bedd1cb9114af6e6a7c4c8c7aefd,2020-04-10T20:00:00Z,74,,57645,57645,57645,37,9,0,9579,257,9836
-20200410,ND,278,9330,,13,36,,,,,105,,4/10/2020 13:00,146632e101f8e578f8375e0f198e82fcbda35d14,2020-04-10T20:00:00Z,6,36,9608,9608,9608,38,1,2,609,9,618
-20200410,NE,635,8719,,,,,,,,,,4/10/2020 13:50,b5d643c3b07cc745a5333df1ac3007d5fa3fa2dd,2020-04-10T20:00:00Z,15,,9354,9354,9354,31,1,0,603,68,671
-20200410,NH,819,9139,155,,124,,,,,234,,4/9/2020 09:00,bb920e1a04384e47f978ca6c2152613a6e05c34c,2020-04-10T20:00:00Z,21,124,10113,9958,9958,33,3,6,376,31,407
-20200410,NJ,54588,58935,,7570,,1679,,1663,,682,,4/10/2020 13:00,5df7b541430dcdc529d70e42ed9a0604ab8f5a0d,2020-04-10T20:00:00Z,1932,,113523,113523,113523,34,232,0,2770,3561,6331
-20200410,NM,1091,26007,,73,,,,18,,217,,4/10/2020 00:00,d455af678d0ed1ca520a0fad070e6997966d3d77,2020-04-10T20:00:00Z,19,,27098,27098,27098,35,3,0,3065,226,3291
-20200410,NV,2584,20165,,282,,,,,,,,4/10/2020 10:30,d3a54032621729afa38df26b76afeb06b5496dfd,2020-04-10T20:00:00Z,86,,22749,22749,22749,32,6,0,850,128,978
-20200410,NY,170512,247373,,18569,38818,4908,,,,20249,,4/10/2020 00:00,050608205e461f87a3b1516d01893a27ec4dffd8,2020-04-10T20:00:00Z,7844,38818,417885,417885,417885,36,777,2242,15761,10575,26336
-20200410,OH,5878,52695,,,1755,,548,,,,,4/10/2020 14:00,dff47ef8a5e4ccbee0280fa318f713e95ce7e167,2020-04-10T20:00:00Z,231,1755,58573,58573,58573,39,18,143,2222,366,2588
-20200410,OK,1794,20370,,186,428,122,,,,790,,4/10/2020 08:00,54901bf09438685f6ae56d3c533a051e3b81201f,2020-04-10T20:00:00Z,88,428,22164,22164,22164,40,8,13,1775,110,1885
-20200410,OR,1321,24306,,146,326,66,,54,,,,4/9/2020 11:00,e168a5c6acd6ace795ec67a5c2f707ec2b74bc3d,2020-04-10T20:00:00Z,44,326,25627,25627,25627,41,0,0,0,0,0
-20200410,PA,19979,93040,,2072,,,,611,,,,4/10/2020 12:00,1f40403605ad613ae633865357a7424c5f53cdd4,2020-04-10T20:00:00Z,416,,113019,113019,113019,42,78,0,5666,1751,7417
-20200410,PR,725,5121,1392,,,,,,,,,4/10/2020 06:00,0ea0416e807b6b12349e944dad79b2cf0947d7fa,2020-04-10T20:00:00Z,39,,7238,5846,5846,72,6,0,418,42,460
-20200410,RI,2015,12281,,169,,45,,26,,35,,4/10/2020 00:00,aa71d99f72f01cd58ef60d9a9fb4109db2428752,2020-04-10T20:00:00Z,49,,14296,14296,14296,44,6,0,1599,288,1887
-20200410,SC,3065,25118,,,496,,,,,,,4/10/2020 15:49,a6e21ab8db2bda3cb092d5218aa70417e655e11a,2020-04-10T20:00:00Z,72,496,28183,28183,28183,45,5,255,543,273,816
-20200410,SD,536,7111,,,29,,,,,177,,4/9/2020 18:00,2d73c08bf713f3a189de27ba4d0a01bc90262392,2020-04-10T20:00:00Z,6,29,7647,7647,7647,46,0,2,411,89,500
-20200410,TN,4862,57937,,,536,,,,,1145,,4/10/2020 15:00,83539efdac7e810ae7d6aa562c34ed9d2d7b5777,2020-04-10T20:00:00Z,98,536,62799,62799,62799,47,4,31,2722,228,2950
-20200410,TX,11671,104047,,1532,,,,,,1366,,4/10/2020 13:00,75f84eeca602f4b35c81d8faf5e91d9ed9495535,2020-04-10T20:00:00Z,226,,115718,115718,115718,48,27,0,8143,1441,9584
-20200410,UT,2102,38660,,,183,,,,,,,4/10/2020 15:00,46a0529c270983208f26dc3e601e9ab78eefc415,2020-04-10T20:00:00Z,17,183,40762,40762,40762,49,4,15,2263,126,2389
-20200410,VA,4509,30950,521,1238,772,457,,287,,,,4/10/2020 09:00,1cc34126ec0b607fb2e25d1fbb8b7d1baf76195b,2020-04-10T20:00:00Z,121,772,35980,35459,35459,51,12,87,1966,467,2433
+20200410,MS,2469,18632,,,482,,,,,,A,4/9/2020 19:00,afacd44c0d14a7ad7710082e77732f1dc53c9625,2020-04-10T20:00:00Z,82,482,21101,21101,21101,28,6,41,0,209,209
+20200410,MT,365,7932,,29,41,,,,,165,A,4/10/2020 11:25,af7442f49c23e66b77e939b366412d35a2f9607d,2020-04-10T20:00:00Z,6,41,8297,8297,8297,30,0,5,426,11,437
+20200410,NC,3908,53737,,423,,,,,,,A,4/10/2020 11:00,38fbbfb79456e061d8075c0b8cca51dba34aa0fb,2020-04-10T20:00:00Z,74,,57645,57645,57645,37,9,0,9579,257,9836
+20200410,ND,278,9330,,13,36,,,,,105,B,4/10/2020 13:00,fc4f42e6828d806c56909736634fa39da4d5aecf,2020-04-10T20:00:00Z,6,36,9608,9608,9608,38,1,2,609,9,618
+20200410,NE,635,8719,,,,,,,,,A,4/10/2020 13:50,6b30849d9f6ea1fe5bfdecf0ddcbedfff1643fcb,2020-04-10T20:00:00Z,15,,9354,9354,9354,31,1,0,603,68,671
+20200410,NH,819,9139,155,,124,,,,,234,B,4/9/2020 09:00,b8ccb4fb46fe4f4574ef150119f75519f0e1eb4a,2020-04-10T20:00:00Z,21,124,10113,9958,9958,33,3,6,376,31,407
+20200410,NJ,54588,58935,,7570,,1679,,1663,,682,A,4/10/2020 13:00,01b723126abfcd5daec6878934ed34dbf08dfe75,2020-04-10T20:00:00Z,1932,,113523,113523,113523,34,232,0,2770,3561,6331
+20200410,NM,1091,26007,,73,,,,18,,217,A,4/10/2020 00:00,0a732fb018e09ef91626a5ae2cbb69d401e3ddaa,2020-04-10T20:00:00Z,19,,27098,27098,27098,35,3,0,3065,226,3291
+20200410,NV,2584,20165,,282,,,,,,,A,4/10/2020 10:30,e0e2ec8349d1d1e669e1be9f2e20c07f25e50df5,2020-04-10T20:00:00Z,86,,22749,22749,22749,32,6,0,850,128,978
+20200410,NY,170512,247373,,18569,38818,4908,,,,20249,A,4/10/2020 00:00,09162924c4b839ad6fbd55eb290671d94941e034,2020-04-10T20:00:00Z,7844,38818,417885,417885,417885,36,777,2242,15761,10575,26336
+20200410,OH,5878,52695,,,1755,,548,,,,B,4/10/2020 14:00,e07afe96fb2c257159d6c59bc6717a645cf9764f,2020-04-10T20:00:00Z,231,1755,58573,58573,58573,39,18,143,2222,366,2588
+20200410,OK,1794,20370,,186,428,122,,,,790,B,4/10/2020 08:00,a43d3c2cc06e8c7d040180f80b50526f77da0ad1,2020-04-10T20:00:00Z,88,428,22164,22164,22164,40,8,13,1775,110,1885
+20200410,OR,1321,24306,,146,326,66,,54,,,A,4/9/2020 11:00,a938afe1f6be0b401565936b64273f3a609fa76e,2020-04-10T20:00:00Z,44,326,25627,25627,25627,41,0,0,0,0,0
+20200410,PA,19979,93040,,2072,,,,611,,,A,4/10/2020 12:00,4946e0f62f1079582fb46d0cc987d15c90766b81,2020-04-10T20:00:00Z,416,,113019,113019,113019,42,78,0,5666,1751,7417
+20200410,PR,725,5121,1392,,,,,,,,A,4/10/2020 06:00,2557c9bfdb56054246b15dfacf958220b6f3af2e,2020-04-10T20:00:00Z,39,,7238,5846,5846,72,6,0,418,42,460
+20200410,RI,2015,12281,,169,,45,,26,,35,B,4/10/2020 00:00,9cee13637f94815b2a07a563ee5c13ba9ce49b10,2020-04-10T20:00:00Z,49,,14296,14296,14296,44,6,0,1599,288,1887
+20200410,SC,3065,25118,,,496,,,,,,B,4/10/2020 15:49,92ddf60239129a4a18a084ff1329dbcc201d4062,2020-04-10T20:00:00Z,72,496,28183,28183,28183,45,5,255,543,273,816
+20200410,SD,536,7111,,,29,,,,,177,A,4/9/2020 18:00,7e6bc7834074d96d85843c575f3789f502cdd350,2020-04-10T20:00:00Z,6,29,7647,7647,7647,46,0,2,411,89,500
+20200410,TN,4862,57937,,,536,,,,,1145,A,4/10/2020 15:00,ccb554a6ac89dc05c2f8ec0b7da3f3d0500bf168,2020-04-10T20:00:00Z,98,536,62799,62799,62799,47,4,31,2722,228,2950
+20200410,TX,11671,104047,,1532,,,,,,1366,A,4/10/2020 13:00,fd65ec707cff94972adc4e59c019d25a7ef5767b,2020-04-10T20:00:00Z,226,,115718,115718,115718,48,27,0,8143,1441,9584
+20200410,UT,2102,38660,,,183,,,,,,A,4/10/2020 15:00,99db3faad6b4be6bdd94180ce603e8c429a1f481,2020-04-10T20:00:00Z,17,183,40762,40762,40762,49,4,15,2263,126,2389
+20200410,VA,4509,30950,521,1238,772,457,,287,,,A,4/10/2020 09:00,4e91d26784ed1642d7d62e5f2adb74c6301d2e41,2020-04-10T20:00:00Z,121,772,35980,35459,35459,51,12,87,1966,467,2433
 20200410,VI,50,273,45,3,,,,,,43,,4/9/2020 21:30,8fa139e8fa06876661ca11147b2780bb4623f26f,2020-04-10T20:00:00Z,1,,368,323,323,78,0,0,22,4,26
-20200410,VT,679,7553,,32,,,,,,15,,4/10/2020 11:00,64b49485bf24ff230be5a3bdf2514d2a6afb7b7c,2020-04-10T20:00:00Z,24,,8232,8232,8232,50,1,0,0,51,51
-20200410,WA,9941,116396,,642,,191,,,,,,4/9/2020 02:59,58fbcaf1eb65ee6983870c37aa5907b3678c6d22,2020-04-10T20:00:00Z,476,,126337,126337,126337,53,17,0,3852,449,4301
-20200410,WI,3068,33225,,,904,190,247,,,,,4/10/2020 16:00,fdb0fad277f7815b62bacadb32620266fcc8d868,2020-04-10T20:00:00Z,128,904,36293,36293,36293,55,17,61,1801,183,1984
-20200410,WV,554,14001,,85,,20,,22,,63,,4/10/2020 10:00,96a89267f1316a846deac525ce9af588bde81556,2020-04-10T20:00:00Z,5,,14555,14555,14555,54,0,0,661,31,692
-20200410,WY,253,4736,,,37,,,,,105,,4/9/2020 18:00,e3fa7149d48597ebd258b1292d32de505112575a,2020-04-10T20:00:00Z,0,37,4989,4989,4989,56,0,3,816,23,839
-20200409,AK,235,6988,,,27,,,,,49,,4/9/2020 16:00,d9b1a1bcbfac59945ba04ef9fa5a4e2e49e387b3,2020-04-09T20:00:00Z,7,27,7223,7223,7223,02,0,0,146,9,155
-20200409,AL,2769,18058,,,333,,,,,,,4/9/2020 00:00,a0ba82d951f7acd4eaa1bb0fcec31c641eeb98d1,2020-04-09T20:00:00Z,74,333,20827,20827,20827,01,8,19,1305,400,1705
-20200409,AR,1119,13832,,73,130,,43,31,39,288,,4/9/2020 14:35,091a59fbaea5fba7f6835859f9982dfbf2333c55,2020-04-09T20:00:00Z,21,130,14951,14951,14951,05,3,0,302,119,421
+20200410,VT,679,7553,,32,,,,,,15,A,4/10/2020 11:00,8fd590fc70b5a3ca9ba57f6641f1ad7ece526658,2020-04-10T20:00:00Z,24,,8232,8232,8232,50,1,0,0,51,51
+20200410,WA,9941,116396,,642,,191,,,,,C,4/9/2020 02:59,6fb84080634b0ade3c0a82eceaabef4b1c085d5b,2020-04-10T20:00:00Z,476,,126337,126337,126337,53,17,0,3852,449,4301
+20200410,WI,3068,33225,,,904,190,247,,,,A,4/10/2020 16:00,741f36f3d6ddb2c6da14823cd339ea848c8966ba,2020-04-10T20:00:00Z,128,904,36293,36293,36293,55,17,61,1801,183,1984
+20200410,WV,554,14001,,85,,20,,22,,63,B,4/10/2020 10:00,b8b6ed8b5f6b09e1919936a573e9c0d73be8315d,2020-04-10T20:00:00Z,5,,14555,14555,14555,54,0,0,661,31,692
+20200410,WY,253,4736,,,37,,,,,105,A,4/9/2020 18:00,7691314a3ef2b38726579d178cd9ffbac113b644,2020-04-10T20:00:00Z,0,37,4989,4989,4989,56,0,3,816,23,839
+20200409,AK,235,6988,,,27,,,,,49,A,4/9/2020 16:00,a478c639e3438f3d28f09fe708285254623a4e7c,2020-04-09T20:00:00Z,7,27,7223,7223,7223,02,0,0,146,9,155
+20200409,AL,2769,18058,,,333,,,,,,B,4/9/2020 00:00,5638f08cce65aa57ed5b63bf18b6150700ba1b88,2020-04-09T20:00:00Z,74,333,20827,20827,20827,01,8,19,1305,400,1705
+20200409,AR,1119,13832,,73,130,,43,31,39,288,A,4/9/2020 14:35,6f80ea37a16c78bd868f7efabe39df79dab42038,2020-04-09T20:00:00Z,21,130,14951,14951,14951,05,3,0,302,119,421
 20200409,AS,0,3,2,,,,,,,,,4/6/2020 16:00,36bc94e616972c26ef29e635c6c06532edfe013e,2020-04-09T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200409,AZ,3018,34160,,,,,,,,,,4/9/2020 00:00,e9a796d0e88928e846f0bd8e73e8294469730bc4,2020-04-09T20:00:00Z,89,,37178,37178,37178,04,9,0,2322,292,2614
-20200409,CA,18309,145191,14100,2825,,1132,,,,,,4/8/2020 19:00,a2c69a3d2ef6569285289d4afe26d50a6e508ae6,2020-04-09T20:00:00Z,492,,177600,163500,163500,06,50,0,17884,1352,19236
-20200409,CO,5655,23544,,848,1162,,,,,,,4/8/2020 18:00,85f14cd137c2d69d2828479f80b26ffff48e7a7b,2020-04-09T20:00:00Z,193,1162,29199,29199,29199,08,14,83,879,226,1105
-20200409,CT,9784,23718,,1464,,,,,,,,4/9/2020 16:00,57f6431008d31f3c22e0c8b3dbcb97d11b7941c3,2020-04-09T20:00:00Z,380,,33502,33502,33502,09,103,0,2463,2003,4466
-20200409,DC,1523,7201,,,,,,,,393,,4/8/2020 00:00,70af9e09654668a41b2823e59e8533635f3273bd,2020-04-09T20:00:00Z,32,,8724,8724,8724,11,5,0,358,83,441
-20200409,DE,1207,8683,,201,,,,,,173,,4/9/2020 17:00,b530f505b08da9b9ed513ce45720d31bf87cde9b,2020-04-09T20:00:00Z,23,,9890,9890,9890,10,7,0,1055,279,1334
-20200409,FL,16364,136185,1395,,2268,,,,,,,4/9/2020 10:00,e740581aeafaa4378c1c7f156e57761f3013ae3d,2020-04-09T20:00:00Z,354,2268,153944,152549,152549,12,45,206,8506,909,9415
-20200409,GA,10566,30519,,,2159,,,,,,,4/9/2020 11:54,443b923861f12af232ce544ca28c8e2fa6448c0a,2020-04-09T20:00:00Z,379,2159,41085,41085,41085,13,17,166,1633,665,2298
+20200409,AZ,3018,34160,,,,,,,,,B,4/9/2020 00:00,570690c466f6e5eb5c6c122f848f619cd8f3c481,2020-04-09T20:00:00Z,89,,37178,37178,37178,04,9,0,2322,292,2614
+20200409,CA,18309,145191,14100,2825,,1132,,,,,B,4/8/2020 19:00,2477e17e6e5a31c8346bc6c5d8f91f9a06a742cf,2020-04-09T20:00:00Z,492,,177600,163500,163500,06,50,0,17884,1352,19236
+20200409,CO,5655,23544,,848,1162,,,,,,A,4/8/2020 18:00,e8850f1c0bfe938399cae50f98b990afc13d1db3,2020-04-09T20:00:00Z,193,1162,29199,29199,29199,08,14,83,879,226,1105
+20200409,CT,9784,23718,,1464,,,,,,,A,4/9/2020 16:00,6cf25282e1244620197d5c446ad245c30d608be7,2020-04-09T20:00:00Z,380,,33502,33502,33502,09,103,0,2463,2003,4466
+20200409,DC,1523,7201,,,,,,,,393,A,4/8/2020 00:00,7d0f7f7d7c40164ce8e7fb5df206b6ddc9f61b7a,2020-04-09T20:00:00Z,32,,8724,8724,8724,11,5,0,358,83,441
+20200409,DE,1207,8683,,201,,,,,,173,A,4/9/2020 17:00,86734fd40e91e12cb60c6340c557ed784b3bde2a,2020-04-09T20:00:00Z,23,,9890,9890,9890,10,7,0,1055,279,1334
+20200409,FL,16364,136185,1395,,2268,,,,,,A,4/9/2020 10:00,2b4d237641a293775733028babbea4e119378018,2020-04-09T20:00:00Z,354,2268,153944,152549,152549,12,45,206,8506,909,9415
+20200409,GA,10566,30519,,,2159,,,,,,A,4/9/2020 11:54,4a6e0b70e2e2e1c470bdb80e295cb92fb4ab608c,2020-04-09T20:00:00Z,379,2159,41085,41085,41085,13,17,166,1633,665,2298
 20200409,GU,128,593,,14,,2,,2,,33,,4/9/2020 08:00,87076c522b500977a9a961c78065395fac4f4c39,2020-04-09T20:00:00Z,4,,721,721,721,66,0,0,31,3,34
-20200409,HI,435,15316,,,42,,6,,,113,,4/8/2020 18:00,f146470ebccc3ae1643fa1583e95173eb967bdab,2020-04-09T20:00:00Z,5,42,15751,15751,15751,15,0,0,577,25,602
-20200409,IA,1270,13703,,122,,,,,,476,,4/9/2020 00:00,ae62fa3df40a66baba937baaeb74f5a245dadfe3,2020-04-09T20:00:00Z,29,,14973,14973,14973,19,2,0,882,125,1007
-20200409,ID,1232,11299,,,113,,29,,,,,4/8/2020 19:00,c9dd9fa7d86218d90c06de63e8650afd1e65c74a,2020-04-09T20:00:00Z,18,113,12531,12531,12531,16,3,20,611,22,633
-20200409,IL,16422,64435,,3680,,1166,,821,,,,4/9/2020 00:00,9ad4a203dd1325a35f92bcc9876e221a6c2b6ef0,2020-04-09T20:00:00Z,528,,80857,80857,80857,17,66,0,4447,1344,5791
-20200409,IN,6351,25782,,,,924,,507,,,,4/8/2020 23:59,6d4d3470310be70ba13dd0193c9eac9f390e87ee,2020-04-09T20:00:00Z,245,,32133,32133,32133,18,42,0,856,408,1264
-20200409,KS,1106,9669,,,263,,,,,,,4/9/2020 12:00,211473d8d871f878bfc3ca6e58d6b2d412e478a7,2020-04-09T20:00:00Z,42,263,10775,10775,10775,20,4,40,532,60,592
-20200409,KY,1346,20455,,,,,,,,,,4/8/2020 17:00,1471922279522c3cc6a2a66a12549d12e6f9e1d7,2020-04-09T20:00:00Z,73,,21801,21801,21801,21,8,0,0,197,197
-20200409,LA,18283,68636,,2014,,,,473,,,,4/9/2020 13:00,e042af9b5016d7e86509099c8295447f3adeb6a7,2020-04-09T20:00:00Z,702,,86919,86919,86919,22,50,0,4260,1253,5513
-20200409,MA,18843,76146,,2302,2302,,,,,,,4/9/2020 12:30,90cd84468896e4dbd38a3e4b04909cb9e591aeae,2020-04-09T20:00:00Z,725,2302,94989,94989,94989,25,110,183,5297,2151,7448
-20200409,MD,6185,35344,,,1348,,,,,376,,4/9/2020 10:00,1ba0c6b307e97bb2d2a03d4ac682170dcc193900,2020-04-09T20:00:00Z,138,1348,41529,41529,41529,24,14,138,2411,656,3067
-20200409,ME,560,6088,,,105,,,,,202,,4/9/2020 11:00,2db7a03b21546629abdbf7336497482ead6f9a6a,2020-04-09T20:00:00Z,16,105,6648,6648,6648,23,2,4,0,23,23
-20200409,MI,21504,45550,,3826,,1628,,1434,,56,,4/9/2020 11:00,0e00a0bc05fef06a7fe12e6b60bc1c806d2d69fc,2020-04-09T20:00:00Z,1076,,67054,67054,67054,26,117,0,0,915,915
-20200409,MN,1242,31052,,145,293,63,119,,,675,,4/9/2020 12:00,b9070a889973585f17b867bcb8d5d838aa0bd7d3,2020-04-09T20:00:00Z,50,293,32294,32294,32294,27,11,22,1453,88,1541
-20200409,MO,3539,34955,,568,,,,,,,,4/9/2020 15:00,3f1cd2c759457d30a6ab79fa1b0401aea9aa3658,2020-04-09T20:00:00Z,77,,38494,38494,38494,29,19,0,4172,212,4384
+20200409,HI,435,15316,,,42,,6,,,113,A,4/8/2020 18:00,9a2af34cd2d5d2e68f5e8707bfbb026f6967bdf9,2020-04-09T20:00:00Z,5,42,15751,15751,15751,15,0,0,577,25,602
+20200409,IA,1270,13703,,122,,,,,,476,A,4/9/2020 00:00,65353a292d2bf67ef1225687a24fa99167b97866,2020-04-09T20:00:00Z,29,,14973,14973,14973,19,2,0,882,125,1007
+20200409,ID,1232,11299,,,113,,29,,,,A,4/8/2020 19:00,ed494dbdac59879d1e96f9c77a88342d7776b557,2020-04-09T20:00:00Z,18,113,12531,12531,12531,16,3,20,611,22,633
+20200409,IL,16422,64435,,3680,,1166,,821,,,A,4/9/2020 00:00,20e9c24658a773bd8c3379a297f72bee27f2f4c6,2020-04-09T20:00:00Z,528,,80857,80857,80857,17,66,0,4447,1344,5791
+20200409,IN,6351,25782,,,,924,,507,,,B,4/8/2020 23:59,a2dd454cbebb1333fbae0cd88dde58dd232a7ddb,2020-04-09T20:00:00Z,245,,32133,32133,32133,18,42,0,856,408,1264
+20200409,KS,1106,9669,,,263,,,,,,B,4/9/2020 12:00,a3dda5e40d2f83081d09d43e57401f3c494b7ebd,2020-04-09T20:00:00Z,42,263,10775,10775,10775,20,4,40,532,60,592
+20200409,KY,1346,20455,,,,,,,,,A,4/8/2020 17:00,94102ebf5a9e7e3ac13a38595e4d8cf39d7019ff,2020-04-09T20:00:00Z,73,,21801,21801,21801,21,8,0,0,197,197
+20200409,LA,18283,68636,,2014,,,,473,,,A,4/9/2020 13:00,7df1bcab9684688806eb81c3c0272f06b6c29374,2020-04-09T20:00:00Z,702,,86919,86919,86919,22,50,0,4260,1253,5513
+20200409,MA,18843,76146,,2302,2302,,,,,,B,4/9/2020 12:30,c3707e97b1200655e13e6ee7f49c643351082ddf,2020-04-09T20:00:00Z,725,2302,94989,94989,94989,25,110,183,5297,2151,7448
+20200409,MD,6185,35344,,,1348,,,,,376,A,4/9/2020 10:00,2150d352956ca2a4fa67a4cf5ac1ce3be5d29d19,2020-04-09T20:00:00Z,138,1348,41529,41529,41529,24,14,138,2411,656,3067
+20200409,ME,560,6088,,,105,,,,,202,A,4/9/2020 11:00,11c2db8e6663828e4197d7bc5829e9527e9418da,2020-04-09T20:00:00Z,16,105,6648,6648,6648,23,2,4,0,23,23
+20200409,MI,21504,45550,,3826,,1628,,1434,,56,B,4/9/2020 11:00,6b3895dd6d55becf9979252146fd4fe4113d0649,2020-04-09T20:00:00Z,1076,,67054,67054,67054,26,117,0,0,915,915
+20200409,MN,1242,31052,,145,293,63,119,,,675,A,4/9/2020 12:00,6e54e693bd8e19c5ae4c322c61e68b33c68fd402,2020-04-09T20:00:00Z,50,293,32294,32294,32294,27,11,22,1453,88,1541
+20200409,MO,3539,34955,,568,,,,,,,A,4/9/2020 15:00,dd1cf5eddd633dbe8f588908f7f4ab50b887f4a0,2020-04-09T20:00:00Z,77,,38494,38494,38494,29,19,0,4172,212,4384
 20200409,MP,11,27,9,,,,,,,,,4/8/2020 00:00,f7ac648f01f2c91e38d3876e6fb05f67f2f72807,2020-04-09T20:00:00Z,2,,47,38,38,69,0,0,0,0,0
-20200409,MS,2260,18632,,,441,,,,,,,4/8/2020 00:00,c6607768f569775857bcba4d71cfe0800f147337,2020-04-09T20:00:00Z,76,441,20892,20892,20892,28,9,31,0,257,257
-20200409,MT,354,7506,,13,36,,,,,157,,4/9/2020 13:33,b70b07ac3ae0fb41e13ffc1a23269666f50578f4,2020-04-09T20:00:00Z,6,36,7860,7860,7860,30,0,5,440,22,462
-20200409,NC,3651,44158,,398,,,,,,,,4/9/2020 11:00,e52dd0e459db1c5a4685bfcfe6b459f40428b61c,2020-04-09T20:00:00Z,65,,47809,47809,47809,37,12,0,4597,225,4822
-20200409,ND,269,8721,,14,34,,,,,101,,4/9/2020 13:00,4a33c7dd70251e79a588e386314bb7719305c976,2020-04-09T20:00:00Z,5,34,8990,8990,8990,38,1,0,420,18,438
-20200409,NE,567,8116,,,,,,,,,,4/9/2020 13:36,539243de9b1b3c9f4c62b423190ab5cfdff842c5,2020-04-09T20:00:00Z,14,,8683,8683,8683,31,2,0,674,48,722
-20200409,NH,788,8763,143,,118,,,,,227,,4/8/2020 09:00,ec4488b58a209ec4a221e7193f5b7d081de33a5e,2020-04-09T20:00:00Z,18,118,9694,9551,9551,33,0,0,374,0,374
-20200409,NJ,51027,56165,,7363,,1523,,1551,,,,4/9/2020 08:00,4e9648083f2c5f1c55245c6cff76375e80c90759,2020-04-09T20:00:00Z,1700,,107192,107192,107192,34,196,0,3186,3590,6776
-20200409,NM,865,22942,,59,,,,18,,201,,4/8/2020 00:00,3f68b98f39df9bb6c2cdd09136dd15cdde4650fa,2020-04-09T20:00:00Z,16,,23807,23807,23807,35,3,0,1491,71,1562
-20200409,NV,2456,19315,,282,,,,,,,,4/9/2020 09:30,d207db9cf77534909ca526b32c6224139d92a909,2020-04-09T20:00:00Z,80,,21771,21771,21771,32,9,0,1067,138,1205
-20200409,NY,159937,231612,,18279,36576,4925,,,,18297,,4/9/2020 00:00,db1eb782ecd6c304149a3cf645829af4c64013b6,2020-04-09T20:00:00Z,7067,36576,391549,391549,391549,36,799,2144,15775,10621,26396
-20200409,OH,5512,50473,,,1612,,497,,,,,4/9/2020 14:00,e40d6b13ff2ba0497d5d28d5e50d3afe6405f6f9,2020-04-09T20:00:00Z,213,1612,55985,55985,55985,39,20,117,2280,364,2644
-20200409,OK,1684,18595,,188,415,120,,,,686,,4/9/2020 08:00,bdf89ebacb41bc7cb5deb918e45fef66162be45e,2020-04-09T20:00:00Z,80,415,20279,20279,20279,40,1,25,6774,160,6934
-20200409,OR,1321,24306,,146,326,66,,54,,,,4/9/2020 11:00,091c6c79b5364aeb1bf6deeaca76c578ee73e670,2020-04-09T20:00:00Z,44,326,25627,25627,25627,41,11,2,981,82,1063
-20200409,PA,18228,87374,,2051,,,,592,,,,4/9/2020 12:00,59fd408d6ad91707c7fe5cbc2b3f070adf558745,2020-04-09T20:00:00Z,338,,105602,105602,105602,42,29,0,5075,1989,7064
-20200409,PR,683,4703,1304,,,,,,,,,4/9/2020 07:00,6f3670917b565f70284e7bf57fceca65cc74e3cd,2020-04-09T20:00:00Z,33,,6690,5386,5386,72,9,0,437,63,500
-20200409,RI,1727,10682,,160,,45,,26,,35,,4/9/2020 00:00,4ebb2033b074d42bc7822a48d22b24a0b7d9484e,2020-04-09T20:00:00Z,43,,12409,12409,12409,44,8,0,0,277,277
-20200409,SC,2792,24575,,,241,,,,,,,4/9/2020 16:08,c8c27528a91c0ade88c6979b13ca98e4785db6c5,2020-04-09T20:00:00Z,67,241,27367,27367,27367,45,4,0,2493,240,2733
-20200409,SD,447,6700,,,27,,,,,161,,4/8/2020 18:00,31ba5847be769210e87d3038915181ea0d6cd85f,2020-04-09T20:00:00Z,6,27,7147,7147,7147,46,0,1,345,54,399
-20200409,TN,4634,55215,,,505,,,,,921,,4/9/2020 15:00,3375b73addf12fa3b84624a9e616b3243ec0db7c,2020-04-09T20:00:00Z,94,505,59849,59849,59849,47,15,56,2959,272,3231
-20200409,TX,10230,95904,,1439,,,,,,1101,,4/9/2020 13:15,d2fbc57caad0b11e8c7a95cb5b359f93b6069992,2020-04-09T20:00:00Z,199,,106134,106134,106134,48,22,0,8999,877,9876
-20200409,UT,1976,36397,,,168,,,,,,,4/9/2020 15:00,c19433320e0e1e720cf33e3e1cbe5a9547ec0b50,2020-04-09T20:00:00Z,13,168,38373,38373,38373,49,0,10,2127,130,2257
-20200409,VA,4042,28984,627,669,685,469,,285,,,,4/9/2020 00:00,a651291b7eea55c895d3863c1f72f4df32f33a10,2020-04-09T20:00:00Z,109,685,33653,33026,33026,51,34,70,1984,397,2381
+20200409,MS,2260,18632,,,441,,,,,,A,4/8/2020 00:00,5c0f4eeef13d6eda7b49558e78e49124c950c8ad,2020-04-09T20:00:00Z,76,441,20892,20892,20892,28,9,31,0,257,257
+20200409,MT,354,7506,,13,36,,,,,157,A,4/9/2020 13:33,661e44b2b976907c3afe787400ae4881976c5a59,2020-04-09T20:00:00Z,6,36,7860,7860,7860,30,0,5,440,22,462
+20200409,NC,3651,44158,,398,,,,,,,A,4/9/2020 11:00,77ea783344d6389abfc2843090bab59abd7e5d30,2020-04-09T20:00:00Z,65,,47809,47809,47809,37,12,0,4597,225,4822
+20200409,ND,269,8721,,14,34,,,,,101,B,4/9/2020 13:00,d273aea75571cb25f2b48767af2b900879f06ca6,2020-04-09T20:00:00Z,5,34,8990,8990,8990,38,1,0,420,18,438
+20200409,NE,567,8116,,,,,,,,,A,4/9/2020 13:36,8295e02ec055c0263f51a76dded6304ae1483af7,2020-04-09T20:00:00Z,14,,8683,8683,8683,31,2,0,674,48,722
+20200409,NH,788,8763,143,,118,,,,,227,B,4/8/2020 09:00,48d1b7fc1e03fb4b7c92ee19cee43413421251a3,2020-04-09T20:00:00Z,18,118,9694,9551,9551,33,0,0,374,0,374
+20200409,NJ,51027,56165,,7363,,1523,,1551,,,A,4/9/2020 08:00,854e96339ec4ecbc6865edf06f1bc7317313062a,2020-04-09T20:00:00Z,1700,,107192,107192,107192,34,196,0,3186,3590,6776
+20200409,NM,865,22942,,59,,,,18,,201,A,4/8/2020 00:00,e8d21e222cbb459d754a6d6df9fab6d95f097eba,2020-04-09T20:00:00Z,16,,23807,23807,23807,35,3,0,1491,71,1562
+20200409,NV,2456,19315,,282,,,,,,,A,4/9/2020 09:30,85cf92368b6edb22ca180eb8ca84b1fcf82684bb,2020-04-09T20:00:00Z,80,,21771,21771,21771,32,9,0,1067,138,1205
+20200409,NY,159937,231612,,18279,36576,4925,,,,18297,A,4/9/2020 00:00,afff59b2d7d4d0cc05fd29425776b6cbaa293c90,2020-04-09T20:00:00Z,7067,36576,391549,391549,391549,36,799,2144,15775,10621,26396
+20200409,OH,5512,50473,,,1612,,497,,,,B,4/9/2020 14:00,7cd46d18eb931e871133d25a3f84976a599a10e6,2020-04-09T20:00:00Z,213,1612,55985,55985,55985,39,20,117,2280,364,2644
+20200409,OK,1684,18595,,188,415,120,,,,686,B,4/9/2020 08:00,a975a9d002fb9a13bbfd4703ac9dad80dc45210a,2020-04-09T20:00:00Z,80,415,20279,20279,20279,40,1,25,6774,160,6934
+20200409,OR,1321,24306,,146,326,66,,54,,,A,4/9/2020 11:00,c15d0a74b5733827dfc61300bfe57db91e441b9d,2020-04-09T20:00:00Z,44,326,25627,25627,25627,41,11,2,981,82,1063
+20200409,PA,18228,87374,,2051,,,,592,,,A,4/9/2020 12:00,7394d73f97e52de6f5b0c06330b24aa71edc6a59,2020-04-09T20:00:00Z,338,,105602,105602,105602,42,29,0,5075,1989,7064
+20200409,PR,683,4703,1304,,,,,,,,A,4/9/2020 07:00,9ce9b4da229e0415d2eba68578b4c399567249f0,2020-04-09T20:00:00Z,33,,6690,5386,5386,72,9,0,437,63,500
+20200409,RI,1727,10682,,160,,45,,26,,35,B,4/9/2020 00:00,93ac15758844936eb0cd78a11cd0ce996b2dc524,2020-04-09T20:00:00Z,43,,12409,12409,12409,44,8,0,0,277,277
+20200409,SC,2792,24575,,,241,,,,,,B,4/9/2020 16:08,5d7eb6363452e4b44c9792cc7865bd708b883ca4,2020-04-09T20:00:00Z,67,241,27367,27367,27367,45,4,0,2493,240,2733
+20200409,SD,447,6700,,,27,,,,,161,A,4/8/2020 18:00,33e176925f91fefb28c890f2c3cd53ee5e7877ec,2020-04-09T20:00:00Z,6,27,7147,7147,7147,46,0,1,345,54,399
+20200409,TN,4634,55215,,,505,,,,,921,A,4/9/2020 15:00,3b0c6a934a3b4d8486e5604941be99fda6883858,2020-04-09T20:00:00Z,94,505,59849,59849,59849,47,15,56,2959,272,3231
+20200409,TX,10230,95904,,1439,,,,,,1101,A,4/9/2020 13:15,89970898529964095da7c8243a60c6e7a20f4f13,2020-04-09T20:00:00Z,199,,106134,106134,106134,48,22,0,8999,877,9876
+20200409,UT,1976,36397,,,168,,,,,,A,4/9/2020 15:00,917f6aa621edea0eb3138a37e72ef82c2490e9c4,2020-04-09T20:00:00Z,13,168,38373,38373,38373,49,0,10,2127,130,2257
+20200409,VA,4042,28984,627,669,685,469,,285,,,A,4/9/2020 00:00,df12a147f17ada1308c36ac022afdf5213821154,2020-04-09T20:00:00Z,109,685,33653,33026,33026,51,34,70,1984,397,2381
 20200409,VI,46,251,42,,,,,,,39,,4/8/2020 22:00,32754ad39d1e0c7d6c6cfd4d26db914ce67b1478,2020-04-09T20:00:00Z,1,,339,297,297,78,0,0,9,1,10
-20200409,VT,628,7553,,33,,,,,,15,,4/9/2020 09:30,af4c697c1fcec99ebd493ca282a47ae309547fc8,2020-04-09T20:00:00Z,23,,8181,8181,8181,50,0,0,409,23,432
-20200409,WA,9492,112544,,650,,191,,,,,,4/8/2020 18:30,14679759241962fb8dbe35bcc3597057b17a326f,2020-04-09T20:00:00Z,459,,122036,122036,122036,53,16,0,3697,278,3975
-20200409,WI,2885,31424,,,843,,230,,,,,4/9/2020 16:00,2dfbb11ab2e509bf84c8122240c75fa7293a49fb,2020-04-09T20:00:00Z,111,843,34309,34309,34309,55,12,53,1309,129,1438
-20200409,WV,523,13340,,,,,,,,,,4/9/2020 17:00,be443a162865d453fd61f37857182be80791d931,2020-04-09T20:00:00Z,5,,13863,13863,13863,54,1,0,1257,61,1318
-20200409,WY,230,3920,,,34,,,,,94,,4/8/2020 16:59,d7cb54d0327ed435359f88ef4d976b357d00e8cb,2020-04-09T20:00:00Z,0,34,4150,4150,4150,56,0,1,77,9,86
-20200408,AK,226,6842,,,27,,,,,32,,4/8/2020 15:00,fe364eecd0bb0e64cd740588dfebacb0c0207b22,2020-04-08T20:00:00Z,7,27,7068,7068,7068,02,1,4,142,13,155
-20200408,AL,2369,16753,,,314,,,,,,,4/8/2020 00:00,9373f8cf19bf895bb25027c4e14eb30943d1e8b3,2020-04-08T20:00:00Z,66,314,19122,19122,19122,01,10,43,3956,250,4206
-20200408,AR,1000,13530,,76,130,,43,30,39,208,,4/8/2020 14:35,53b6eb0813f81d3ef3e0dde11c8e966a58ce1ffe,2020-04-08T20:00:00Z,18,130,14530,14530,14530,05,2,-18,838,54,892
+20200409,VT,628,7553,,33,,,,,,15,A,4/9/2020 09:30,a438828a67b6de53883c3c976042756270a8ddd0,2020-04-09T20:00:00Z,23,,8181,8181,8181,50,0,0,409,23,432
+20200409,WA,9492,112544,,650,,191,,,,,A,4/8/2020 18:30,bb2bb6e991f08c1cc6cf589aa5fc51815629f82f,2020-04-09T20:00:00Z,459,,122036,122036,122036,53,16,0,3697,278,3975
+20200409,WI,2885,31424,,,843,,230,,,,A,4/9/2020 16:00,74f82985fa18524f49994f9f1088d114275dc6aa,2020-04-09T20:00:00Z,111,843,34309,34309,34309,55,12,53,1309,129,1438
+20200409,WV,523,13340,,,,,,,,,B,4/9/2020 17:00,b4aa5d2cb3745f6414b92c24d33555288cc6b48d,2020-04-09T20:00:00Z,5,,13863,13863,13863,54,1,0,1257,61,1318
+20200409,WY,230,3920,,,34,,,,,94,A,4/8/2020 16:59,ca2ca6527d9f921c32b252dfebb329220d411c2c,2020-04-09T20:00:00Z,0,34,4150,4150,4150,56,0,1,77,9,86
+20200408,AK,226,6842,,,27,,,,,32,A,4/8/2020 15:00,40fd3e7913276eaea19928e5d8732dfd79711f4a,2020-04-08T20:00:00Z,7,27,7068,7068,7068,02,1,4,142,13,155
+20200408,AL,2369,16753,,,314,,,,,,B,4/8/2020 00:00,8dd02ebdbd8c512631a6b96fd97f58858b154141,2020-04-08T20:00:00Z,66,314,19122,19122,19122,01,10,43,3956,250,4206
+20200408,AR,1000,13530,,76,130,,43,30,39,208,A,4/8/2020 14:35,5efb513d52bdcc1770239d45f8ddcd0a26d3fc4e,2020-04-08T20:00:00Z,18,130,14530,14530,14530,05,2,-18,838,54,892
 20200408,AS,0,3,2,,,,,,,,,4/6/2020 16:00,6eee3816e4649284f34668acdb996bba204f8468,2020-04-08T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200408,AZ,2726,31838,,,,,,,,,,4/8/2020 00:00,0f5fac3acdaf2f79ad8426df9123f32cc397d0fc,2020-04-08T20:00:00Z,80,,34564,34564,34564,04,7,0,1038,151,1189
-20200408,CA,16957,127307,14600,2714,,1154,,,,,,4/7/2020 18:00,90ebf18993697a3e5063917ec56630f77f887820,2020-04-08T20:00:00Z,442,,158864,144264,144264,06,68,0,11943,1092,13035
-20200408,CO,5429,22665,,833,1079,,,,,,,4/7/2020 18:00,81c38dd9edae806716cce74df2f462fe4025a82e,2020-04-08T20:00:00Z,179,1079,28094,28094,28094,08,29,85,962,257,1219
-20200408,CT,7781,21255,,1308,,,,,,,,4/7/2020 22:00,8b7417fbd7ccf4b9ab32806a35ba62173f533780,2020-04-08T20:00:00Z,277,,29036,29036,29036,09,0,0,0,0,0
-20200408,DC,1440,6843,,,,,,,,361,,4/7/2020 00:00,8b7f454df1295b44418940beb0d45b97b66e24e4,2020-04-08T20:00:00Z,27,,8283,8283,8283,11,5,0,231,229,460
-20200408,DE,928,7628,,147,,,,,,144,,4/7/2020 16:30,5d1732f9e796480a78908b006f53b08081b47eaa,2020-04-08T20:00:00Z,16,,8556,8556,8556,10,0,0,0,0,0
-20200408,FL,15455,127679,1324,,2062,,,,,,,4/8/2020 14:00,a5a9e7098a0b8907ee45eef8ae9189addc00c297,2020-04-08T20:00:00Z,309,2062,144458,143134,143134,12,13,63,4264,708,4972
-20200408,GA,9901,28886,,,1993,,,,,,,4/8/2020 12:29,e93a3ac3c82c23e12b4aa99a7a1a14ba4abb2ca1,2020-04-08T20:00:00Z,362,1993,38787,38787,38787,13,33,219,3991,1083,5074
+20200408,AZ,2726,31838,,,,,,,,,B,4/8/2020 00:00,231f7ca5a70d506dcd92a4a864bc2ebb013b616b,2020-04-08T20:00:00Z,80,,34564,34564,34564,04,7,0,1038,151,1189
+20200408,CA,16957,127307,14600,2714,,1154,,,,,B,4/7/2020 18:00,9292e9045ac33dbf84a41da49e64f141148b7f32,2020-04-08T20:00:00Z,442,,158864,144264,144264,06,68,0,11943,1092,13035
+20200408,CO,5429,22665,,833,1079,,,,,,A,4/7/2020 18:00,8db91cb79d02914c2484e4d9d509129148a369db,2020-04-08T20:00:00Z,179,1079,28094,28094,28094,08,29,85,962,257,1219
+20200408,CT,7781,21255,,1308,,,,,,,A,4/7/2020 22:00,007ae9738781cdeb80938f42f2ba43d4d15b9203,2020-04-08T20:00:00Z,277,,29036,29036,29036,09,0,0,0,0,0
+20200408,DC,1440,6843,,,,,,,,361,A,4/7/2020 00:00,b9354c150dac12c1c448d2f49b903f2cfd757028,2020-04-08T20:00:00Z,27,,8283,8283,8283,11,5,0,231,229,460
+20200408,DE,928,7628,,147,,,,,,144,A,4/7/2020 16:30,e1c821e584a80f3545d2f378d79bb55f1f6352cd,2020-04-08T20:00:00Z,16,,8556,8556,8556,10,0,0,0,0,0
+20200408,FL,15455,127679,1324,,2062,,,,,,A,4/8/2020 14:00,f77a46765d58b6bb6a7d64a224feb28da779a2fa,2020-04-08T20:00:00Z,309,2062,144458,143134,143134,12,13,63,4264,708,4972
+20200408,GA,9901,28886,,,1993,,,,,,A,4/8/2020 12:29,2953eeecaf95823f073084f60e4696aee94783ee,2020-04-08T20:00:00Z,362,1993,38787,38787,38787,13,33,219,3991,1083,5074
 20200408,GU,125,562,,21,,2,,2,,31,,4/8/2020 07:30,64ef5a20ea5799651aea134f7e66bb0094dd16b9,2020-04-08T20:00:00Z,4,,687,687,687,66,0,0,33,4,37
-20200408,HI,410,14739,,,42,,6,,,113,,4/7/2020 18:00,dcb1470e8f862d904c47f6d096937afaf939a2e1,2020-04-08T20:00:00Z,5,42,15149,15149,15149,15,0,16,1584,23,1607
-20200408,IA,1145,12821,,122,193,,,,,431,,4/8/2020 13:00,1eb98ead2dff7c54ee34029d5dc2bae0c7e74f8a,2020-04-08T20:00:00Z,27,193,13966,13966,13966,19,1,0,1151,97,1248
-20200408,ID,1210,10688,,,93,,24,,,,,4/7/2020 19:00,1e5844f53f2bb80e70629c067882e93f4ef93726,2020-04-08T20:00:00Z,15,93,11898,11898,11898,16,2,10,612,40,652
-20200408,IL,15078,59988,,3680,,1166,,821,,,,4/8/2020 00:00,010b182f1442f089b09de9b8ab9b059dc0069339,2020-04-08T20:00:00Z,462,,75066,75066,75066,17,82,0,4805,1529,6334
-20200408,IN,5943,24926,,,,924,,507,,,,4/8/2020 02:45,359b92a4c68a9aa47552b38acb1d2c0869ce7c79,2020-04-08T20:00:00Z,203,,30869,30869,30869,18,30,0,1669,436,2105
-20200408,KS,1046,9137,,,223,,,,,,,4/7/2020 12:00,ebcce0ffc8fa8a1ce794d83107918d1bfd2b248f,2020-04-08T20:00:00Z,38,223,10183,10183,10183,20,11,0,523,146,669
-20200408,KY,1149,20455,,,,,,,,,,4/7/2020 17:00,010d04be54fbd93278414fbd95937e899dfc3d54,2020-04-08T20:00:00Z,65,,21604,21604,21604,21,6,0,1508,141,1649
-20200408,LA,17030,64376,,1983,,,,490,,,,4/8/2020 13:00,198e887bd5f5ef135334cce9610c326d80ca057f,2020-04-08T20:00:00Z,652,,81406,81406,81406,22,70,0,6005,746,6751
-20200408,MA,16692,70849,,2119,2119,,,,,,,4/8/2020 12:30,ddbc6b460f6860771547491b2f16855fd377563c,2020-04-08T20:00:00Z,615,2119,87541,87541,87541,25,100,288,4579,1588,6167
-20200408,MD,5529,32933,,,1210,,,,,365,,4/8/2020 10:00,ce6c1d61a4bf93ad253ef80112d12b622c6ea555,2020-04-08T20:00:00Z,124,1210,38462,38462,38462,24,21,104,5677,1158,6835
-20200408,ME,537,6088,,,101,,,,,187,,4/8/2020 11:00,a561e4dd9f1ea2a519c48800c37da16c4492f01c,2020-04-08T20:00:00Z,14,101,6625,6625,6625,23,2,2,0,18,18
-20200408,MI,20589,45550,,,,,,,,56,,4/8/2020 11:00,7931f6ef2bbad298154e91ed45089a7d6cd8b6b7,2020-04-08T20:00:00Z,959,,66139,66139,66139,26,114,0,0,766,766
-20200408,MN,1154,29599,,135,271,64,105,,,632,,4/8/2020 17:00,60926611dd5c67dd0beb9dc54b8374814a6ab3fe,2020-04-08T20:00:00Z,39,271,30753,30753,30753,27,5,29,1408,85,1493
-20200408,MO,3327,30783,,519,,,,,,,,4/8/2020 15:00,a88d0da580d43d9abcf74511c010d84a725bf31c,2020-04-08T20:00:00Z,58,,34110,34110,34110,29,5,0,1851,290,2141
+20200408,HI,410,14739,,,42,,6,,,113,A,4/7/2020 18:00,73daa76a041cc37889c89dc896bcec3ed201b0a2,2020-04-08T20:00:00Z,5,42,15149,15149,15149,15,0,16,1584,23,1607
+20200408,IA,1145,12821,,122,193,,,,,431,A,4/8/2020 13:00,c6930595be9bafb616206f207b8c528faa24d400,2020-04-08T20:00:00Z,27,193,13966,13966,13966,19,1,0,1151,97,1248
+20200408,ID,1210,10688,,,93,,24,,,,A,4/7/2020 19:00,e71eb7dabb32c58c05a5471cb794ad8b2cb7152a,2020-04-08T20:00:00Z,15,93,11898,11898,11898,16,2,10,612,40,652
+20200408,IL,15078,59988,,3680,,1166,,821,,,A,4/8/2020 00:00,392c377290c9304cbbae91cb0d719d6cb8b7b810,2020-04-08T20:00:00Z,462,,75066,75066,75066,17,82,0,4805,1529,6334
+20200408,IN,5943,24926,,,,924,,507,,,B,4/8/2020 02:45,86a7bd6299f4d7ec6a95722a614d175eacbd4a15,2020-04-08T20:00:00Z,203,,30869,30869,30869,18,30,0,1669,436,2105
+20200408,KS,1046,9137,,,223,,,,,,B,4/7/2020 12:00,f96d32a96b67cbedbea5f4e98cde88b5b024fb3a,2020-04-08T20:00:00Z,38,223,10183,10183,10183,20,11,0,523,146,669
+20200408,KY,1149,20455,,,,,,,,,A,4/7/2020 17:00,26f2065a5cd8e1e67d1aa34c3d5a79f7eb08fa40,2020-04-08T20:00:00Z,65,,21604,21604,21604,21,6,0,1508,141,1649
+20200408,LA,17030,64376,,1983,,,,490,,,A,4/8/2020 13:00,7fbcc016c35945cc558b68d151d41a2e30e72b80,2020-04-08T20:00:00Z,652,,81406,81406,81406,22,70,0,6005,746,6751
+20200408,MA,16692,70849,,2119,2119,,,,,,B,4/8/2020 12:30,69ef7f3af46d28616da685ec7a54f9d6d1c3ef47,2020-04-08T20:00:00Z,615,2119,87541,87541,87541,25,100,288,4579,1588,6167
+20200408,MD,5529,32933,,,1210,,,,,365,A,4/8/2020 10:00,6446fac46405ef87cbde555e72dca50ceed52b49,2020-04-08T20:00:00Z,124,1210,38462,38462,38462,24,21,104,5677,1158,6835
+20200408,ME,537,6088,,,101,,,,,187,A,4/8/2020 11:00,cf407af1f6eb02937e5519280933a02548938679,2020-04-08T20:00:00Z,14,101,6625,6625,6625,23,2,2,0,18,18
+20200408,MI,20589,45550,,,,,,,,56,B,4/8/2020 11:00,db57d360de8b7d44f6e310cfc8bd8de3fe224cee,2020-04-08T20:00:00Z,959,,66139,66139,66139,26,114,0,0,766,766
+20200408,MN,1154,29599,,135,271,64,105,,,632,A,4/8/2020 17:00,bd89458c8a8eac8c42709871c665f84171e16132,2020-04-08T20:00:00Z,39,271,30753,30753,30753,27,5,29,1408,85,1493
+20200408,MO,3327,30783,,519,,,,,,,A,4/8/2020 15:00,3de03b31d6c7655b2e4d633500661f518cea3dc7,2020-04-08T20:00:00Z,58,,34110,34110,34110,29,5,0,1851,290,2141
 20200408,MP,11,27,9,,,,,,,,,4/8/2020 00:00,f03ea0ed7517200fdcbeb3e530f5ccae0ef20086,2020-04-08T20:00:00Z,2,,47,38,38,69,0,0,12,3,15
-20200408,MS,2003,18632,,,410,,,,,,,4/7/2020 19:00,22fbb617c96534872ff5c76c0bf309586b4c36f7,2020-04-08T20:00:00Z,67,410,20635,20635,20635,28,8,33,0,88,88
-20200408,MT,332,7066,,,31,,,,,135,,4/8/2020 13:45,1ab00cf117d58d4a3396688c37e0393600b4762d,2020-04-08T20:00:00Z,6,31,7398,7398,7398,30,0,3,400,13,413
-20200408,NC,3426,39561,,386,,,,,,,,4/8/2020 11:00,6bbf25597ebf3a296895d729f33bc333ba0bf661,2020-04-08T20:00:00Z,53,,42987,42987,42987,37,7,0,1700,205,1905
-20200408,ND,251,8301,,16,34,,,,,98,,4/8/2020 13:54,2fd0e49040a18a399ada307d93a9d7bc9871b276,2020-04-08T20:00:00Z,4,34,8552,8552,8552,38,0,1,835,14,849
-20200408,NE,519,7442,,,,,,,,,,4/8/2020 13:45,3ebc54c466a9dfc7f927226839b46a2685a6bd42,2020-04-08T20:00:00Z,12,,7961,7961,7961,31,2,0,631,72,703
-20200408,NH,788,8389,89,,118,,,,,211,,4/8/2020 15:11,97134a9befe8cb90afb2f0c5a67a8852d8fc9284,2020-04-08T20:00:00Z,18,118,9266,9177,9177,33,9,15,370,73,443
-20200408,NJ,47437,52979,,7026,,1617,,1576,,,,4/8/2020 14:08,3cc816ab6f9e36b6ef67fe5c657dd4627b8eec09,2020-04-08T20:00:00Z,1504,,100416,100416,100416,34,272,0,2421,3021,5442
-20200408,NM,794,21451,,51,,,,18,,171,,4/7/2020 00:00,02c9841e560b90f32e94bd6f0916afd3f198054d,2020-04-08T20:00:00Z,13,,22245,22245,22245,35,1,0,312,108,420
-20200408,NV,2318,18248,,282,,,,,,,,4/8/2020 15:00,57b79497079b39e517cdc7853cebc188525bc443,2020-04-08T20:00:00Z,71,,20566,20566,20566,32,13,0,1696,231,1927
-20200408,NY,149316,215837,,18079,34432,4593,,,,16353,,4/7/2020 00:00,7d1246c68456195920e0f0bfa08e45bd50d5e0d7,2020-04-08T20:00:00Z,6268,34432,365153,365153,365153,36,779,2349,14642,10453,25095
-20200408,OH,5148,48193,,,1495,,472,,,,,4/8/2020 14:00,e67937876263033a9465eebb6afcad0df54541a2,2020-04-08T20:00:00Z,193,1495,53341,53341,53341,39,26,141,2137,366,2503
-20200408,OK,1524,11821,,188,390,120,,,,686,,4/8/2020 08:00,46ff6098f4776c86c6555535a2166fc9bf64e907,2020-04-08T20:00:00Z,79,390,13345,13345,13345,40,12,14,0,52,52
-20200408,OR,1239,23325,,156,324,61,,58,69,,,4/7/2020 11:00,5ab2ff1b426338b028e9477a5f046669e1f9d088,2020-04-08T20:00:00Z,33,324,24564,24564,24564,41,0,0,1499,58,1557
-20200408,PA,16239,82299,,1898,,,,603,,,,4/8/2020 14:45,74dc3a38209e83b3d7f18eb7f3ead219edcda1ed,2020-04-08T20:00:00Z,309,,98538,98538,98538,42,69,0,5580,1680,7260
-20200408,PR,620,4266,1160,,,,,,,,,4/8/2020 09:00,2c604348d6b9fce5109df25f9d32fbe945f4af72,2020-04-08T20:00:00Z,24,,6046,4886,4886,72,1,0,300,47,347
-20200408,RI,1450,10682,,143,,45,,26,,35,,4/8/2020 00:00,3eb1a20bece3dae49bed9738c631e96a37b16312,2020-04-08T20:00:00Z,35,,12132,12132,12132,44,5,0,1605,220,1825
-20200408,SC,2552,22082,,,241,,,,,,,4/8/2020 15:30,6db2dfc370aae1d2362fffd36049ee788147d985,2020-04-08T20:00:00Z,63,241,24634,24634,24634,45,12,0,819,135,954
-20200408,SD,393,6355,0,,26,,,,,146,,4/8/2020 12:30,289a8656375da68be733fb96dfa96078f9ab4123,2020-04-08T20:00:00Z,6,26,6748,6748,6748,46,0,3,407,73,480
-20200408,TN,4362,52256,,,449,,,,,592,,4/8/2020 15:00,1c14404f3759efde5345b6f099205cda1a4fa6e6,2020-04-08T20:00:00Z,79,449,56618,56618,56618,47,7,41,3520,224,3744
-20200408,TX,9353,86905,,1491,,,,,,38,,4/8/2020 14:21,10587334af6b29fed193b281c959f20ce231f821,2020-04-08T20:00:00Z,177,,96258,96258,96258,48,23,0,6518,1091,7609
-20200408,UT,1846,34270,,,158,,,,,,,4/8/2020 15:00,a4abe09989d17ada3bb07c0a99dbd2495ed75f01,2020-04-08T20:00:00Z,13,158,36116,36116,36116,49,0,10,1361,108,1469
-20200408,VA,3645,27000,,,615,,145,,108,,,4/7/2020 17:00,a1f3c2ab844919d7b94960155879b82a019af8f1,2020-04-08T20:00:00Z,75,615,30645,30645,30645,51,12,52,1688,312,2000
+20200408,MS,2003,18632,,,410,,,,,,A,4/7/2020 19:00,425a94011e188e1099e81ad09680f497f6c3e7ef,2020-04-08T20:00:00Z,67,410,20635,20635,20635,28,8,33,0,88,88
+20200408,MT,332,7066,,,31,,,,,135,A,4/8/2020 13:45,f3bbbf0831d3ed7999d4a39a2f646990a8ccad92,2020-04-08T20:00:00Z,6,31,7398,7398,7398,30,0,3,400,13,413
+20200408,NC,3426,39561,,386,,,,,,,A,4/8/2020 11:00,97ac0d264bd841b853d84e2f6b8d3e54d84639fe,2020-04-08T20:00:00Z,53,,42987,42987,42987,37,7,0,1700,205,1905
+20200408,ND,251,8301,,16,34,,,,,98,B,4/8/2020 13:54,dc0289da8b9a466f66391bce7f30cdc93db3b5c6,2020-04-08T20:00:00Z,4,34,8552,8552,8552,38,0,1,835,14,849
+20200408,NE,519,7442,,,,,,,,,A,4/8/2020 13:45,70587f033bb60a13f8355defa9c58aef5445883a,2020-04-08T20:00:00Z,12,,7961,7961,7961,31,2,0,631,72,703
+20200408,NH,788,8389,89,,118,,,,,211,B,4/8/2020 15:11,09d979c935204b3b36e66ef0ebf545582a52d0ef,2020-04-08T20:00:00Z,18,118,9266,9177,9177,33,9,15,370,73,443
+20200408,NJ,47437,52979,,7026,,1617,,1576,,,A,4/8/2020 14:08,746da598aad50e79b61504afd3cfb34442686923,2020-04-08T20:00:00Z,1504,,100416,100416,100416,34,272,0,2421,3021,5442
+20200408,NM,794,21451,,51,,,,18,,171,A,4/7/2020 00:00,504080749d430ed62857a9342d5e68d71b6792b8,2020-04-08T20:00:00Z,13,,22245,22245,22245,35,1,0,312,108,420
+20200408,NV,2318,18248,,282,,,,,,,A,4/8/2020 15:00,c3293543c0ffbe7b573d0d36bd6075f137264c61,2020-04-08T20:00:00Z,71,,20566,20566,20566,32,13,0,1696,231,1927
+20200408,NY,149316,215837,,18079,34432,4593,,,,16353,A,4/7/2020 00:00,6f03c2a4ffb2a7a0801a214d9799cbf51d2e85f1,2020-04-08T20:00:00Z,6268,34432,365153,365153,365153,36,779,2349,14642,10453,25095
+20200408,OH,5148,48193,,,1495,,472,,,,B,4/8/2020 14:00,59d1f173d6170fdf9810191ac0baf947688f04a1,2020-04-08T20:00:00Z,193,1495,53341,53341,53341,39,26,141,2137,366,2503
+20200408,OK,1524,11821,,188,390,120,,,,686,B,4/8/2020 08:00,809aaedeaaf56eda76a105fa2812d574b6e7dbf5,2020-04-08T20:00:00Z,79,390,13345,13345,13345,40,12,14,0,52,52
+20200408,OR,1239,23325,,156,324,61,,58,69,,A,4/7/2020 11:00,da4eafb81f5f1b9431a8db2eae6a5f96776226e2,2020-04-08T20:00:00Z,33,324,24564,24564,24564,41,0,0,1499,58,1557
+20200408,PA,16239,82299,,1898,,,,603,,,A,4/8/2020 14:45,cb3c7c5261ca1a29bb38efe92b51eda1438b9260,2020-04-08T20:00:00Z,309,,98538,98538,98538,42,69,0,5580,1680,7260
+20200408,PR,620,4266,1160,,,,,,,,A,4/8/2020 09:00,db8e236d3c4756b756546f0917e3c9cd9a215b64,2020-04-08T20:00:00Z,24,,6046,4886,4886,72,1,0,300,47,347
+20200408,RI,1450,10682,,143,,45,,26,,35,B,4/8/2020 00:00,8cf26970c0f44588c823be78ea2805d27b231e28,2020-04-08T20:00:00Z,35,,12132,12132,12132,44,5,0,1605,220,1825
+20200408,SC,2552,22082,,,241,,,,,,B,4/8/2020 15:30,7309e5d10fee8a3625a11b8c5625d896ea65cf98,2020-04-08T20:00:00Z,63,241,24634,24634,24634,45,12,0,819,135,954
+20200408,SD,393,6355,0,,26,,,,,146,A,4/8/2020 12:30,48cca70f692962931bd370a8e6827ed614a4f25b,2020-04-08T20:00:00Z,6,26,6748,6748,6748,46,0,3,407,73,480
+20200408,TN,4362,52256,,,449,,,,,592,A,4/8/2020 15:00,26a231b21a0d8b0ee915536cf0eee1eab0eeabfb,2020-04-08T20:00:00Z,79,449,56618,56618,56618,47,7,41,3520,224,3744
+20200408,TX,9353,86905,,1491,,,,,,38,A,4/8/2020 14:21,aad63fb55e4795e27f30e717ac588682ff62d8bb,2020-04-08T20:00:00Z,177,,96258,96258,96258,48,23,0,6518,1091,7609
+20200408,UT,1846,34270,,,158,,,,,,A,4/8/2020 15:00,b4e5ed981d99dda125928e65c72b7d441b384627,2020-04-08T20:00:00Z,13,158,36116,36116,36116,49,0,10,1361,108,1469
+20200408,VA,3645,27000,,,615,,145,,108,,A,4/7/2020 17:00,22f8fac14598c880969baaf7a75ad771591725df,2020-04-08T20:00:00Z,75,615,30645,30645,30645,51,12,52,1688,312,2000
 20200408,VI,45,242,35,,,,,,,39,,4/7/2020 19:00,ab9315ef3207f85b5b7e543e94ce8837f901672f,2020-04-08T20:00:00Z,1,,322,287,287,78,0,0,20,2,22
-20200408,VT,605,7144,,35,50,,,,,15,,4/8/2020 11:00,f660dfe2f24470f1e4ce95d6a87bd753ef42c3df,2020-04-08T20:00:00Z,23,50,7749,7749,7749,50,0,5,590,30,620
-20200408,WA,9214,108847,,655,,186,,,,,,4/7/2020 18:30,58fc63b3658e385215715fd4b30ab64d84ce41c7,2020-04-08T20:00:00Z,443,,118061,118061,118061,53,14,0,4336,355,4691
-20200408,WI,2756,30115,,,790,,218,,,,,4/8/2020 16:00,ad60a30c67534153622d2f0818e55c6b2883de83,2020-04-08T20:00:00Z,99,790,32871,32871,32871,55,7,45,1603,178,1781
-20200408,WV,462,12083,,,,,,,,,,4/8/2020 10:00,6bc04195c3bc82582b0faec947b305a0711590da,2020-04-08T20:00:00Z,4,,12545,12545,12545,54,0,0,436,50,486
-20200408,WY,221,3843,,,33,,,,,62,,4/7/2020 18:21,2a15601767e2a6c98747f5ec4f9832873cf54fd2,2020-04-08T20:00:00Z,0,33,4064,4064,4064,56,0,0,54,5,59
-20200407,AK,213,6700,,,23,,,,,29,,4/7/2020 15:15,118d1ddf44ece1cc46e0f06c9a7828ffeaab3660,2020-04-07T20:00:00Z,6,23,6913,6913,6913,02,0,0,8,22,30
-20200407,AL,2119,12797,,,271,,,,,,,4/7/2020 00:00,d8686ead4a7e5df772058ad26879e55997079a5e,2020-04-07T20:00:00Z,56,271,14916,14916,14916,01,6,31,0,151,151
-20200407,AR,946,12692,,74,148,,,26,43,142,,4/7/2020 14:41,aa02ca04d2d21b19d65d8c7b7b9d971dbc6129eb,2020-04-07T20:00:00Z,16,148,13638,13638,13638,05,0,11,722,71,793
+20200408,VT,605,7144,,35,50,,,,,15,A,4/8/2020 11:00,2630ee6f1093dc0de85962fbe272404a48ec66be,2020-04-08T20:00:00Z,23,50,7749,7749,7749,50,0,5,590,30,620
+20200408,WA,9214,108847,,655,,186,,,,,A,4/7/2020 18:30,b2737f451e717cf5ed16cd079cfb64018cf0d796,2020-04-08T20:00:00Z,443,,118061,118061,118061,53,14,0,4336,355,4691
+20200408,WI,2756,30115,,,790,,218,,,,A,4/8/2020 16:00,1150361426c4dbc521e533b39807d24a678c1711,2020-04-08T20:00:00Z,99,790,32871,32871,32871,55,7,45,1603,178,1781
+20200408,WV,462,12083,,,,,,,,,B,4/8/2020 10:00,0264e0ad4c0764d1df119cdccef714e9b93e2cec,2020-04-08T20:00:00Z,4,,12545,12545,12545,54,0,0,436,50,486
+20200408,WY,221,3843,,,33,,,,,62,A,4/7/2020 18:21,13e9cd8840a3108fbf19acf39b8cfa3f7781006a,2020-04-08T20:00:00Z,0,33,4064,4064,4064,56,0,0,54,5,59
+20200407,AK,213,6700,,,23,,,,,29,A,4/7/2020 15:15,0ef9800944e34eadfb6732ef777f802afe136d8b,2020-04-07T20:00:00Z,6,23,6913,6913,6913,02,0,0,8,22,30
+20200407,AL,2119,12797,,,271,,,,,,B,4/7/2020 00:00,9062153a0bf58f2f2870828d3f87a64cc7ba196b,2020-04-07T20:00:00Z,56,271,14916,14916,14916,01,6,31,0,151,151
+20200407,AR,946,12692,,74,148,,,26,43,142,A,4/7/2020 14:41,da9c5dcb949b901a32db6dbb86da35d9e0734750,2020-04-07T20:00:00Z,16,148,13638,13638,13638,05,0,11,722,71,793
 20200407,AS,0,3,2,,,,,,,,,4/6/2020 16:00,d0c19bab3a0ad66d5a8587a5cc2261c91d75ce4f,2020-04-07T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200407,AZ,2575,30800,,,,,,,,,,4/7/2020 00:00,5b165807ccd985f7f36c256a3d20dfca7f3809a7,2020-04-07T20:00:00Z,73,,33375,33375,33375,04,8,0,722,119,841
-20200407,CA,15865,115364,14100,2611,,1108,,,,,,4/7/2020 18:00,7c0eb54047bb4b27f299ca05a106f640301cc774,2020-04-07T20:00:00Z,374,,145329,131229,131229,06,31,0,12269,1529,13798
-20200407,CO,5172,21703,,786,994,,,,,,,4/6/2020 18:00,00da866db742e37b6f99a58128b968881d235267,2020-04-07T20:00:00Z,150,994,26875,26875,26875,08,10,70,880,222,1102
-20200407,CT,7781,21255,,1308,,,,,,,,4/7/2020 04:00,54ba132cf86958ab8bc4b30475ea823fc41241fd,2020-04-07T20:00:00Z,277,,29036,29036,29036,09,71,0,1475,875,2350
-20200407,DC,1211,6612,,,,,,,,318,,4/6/2020 00:00,c75911b19efbd7d615691bc8d803e8dd0c193ed4,2020-04-07T20:00:00Z,22,,7823,7823,7823,11,-2,0,256,114,370
-20200407,DE,928,7628,,147,,,,,,144,,4/7/2020 16:30,cc0e7e1ea5eaf9b91172b8f767bf391e2c62a1b1,2020-04-07T20:00:00Z,16,,8556,8556,8556,10,2,0,1307,255,1562
-20200407,FL,14747,123415,1407,,1999,,,,,,,4/7/2020 16:36,28fd3e3438fc1cb20ee4d33e316de8ae278afe87,2020-04-07T20:00:00Z,296,1999,139569,138162,138162,12,60,317,13465,1423,14888
-20200407,GA,8818,24895,,,1774,,,,,,,4/7/2020 11:28,2f9537b52e862d51e01abd34dd201fcc0cc2739f,2020-04-07T20:00:00Z,329,1774,33713,33713,33713,13,100,442,935,1504,2439
+20200407,AZ,2575,30800,,,,,,,,,B,4/7/2020 00:00,a4099789827f1b6e913214851b48e04347c63292,2020-04-07T20:00:00Z,73,,33375,33375,33375,04,8,0,722,119,841
+20200407,CA,15865,115364,14100,2611,,1108,,,,,B,4/7/2020 18:00,9305e5d010ccbc639c8bac68aac2119c78ce7d1c,2020-04-07T20:00:00Z,374,,145329,131229,131229,06,31,0,12269,1529,13798
+20200407,CO,5172,21703,,786,994,,,,,,A,4/6/2020 18:00,90034e21a26b2f9408025b138daca2c0a2372066,2020-04-07T20:00:00Z,150,994,26875,26875,26875,08,10,70,880,222,1102
+20200407,CT,7781,21255,,1308,,,,,,,A,4/7/2020 04:00,655e89888811b9871c7e3ef529500a247c442456,2020-04-07T20:00:00Z,277,,29036,29036,29036,09,71,0,1475,875,2350
+20200407,DC,1211,6612,,,,,,,,318,A,4/6/2020 00:00,e65cac5a9427990c2305479b7349207d1a54fe9d,2020-04-07T20:00:00Z,22,,7823,7823,7823,11,-2,0,256,114,370
+20200407,DE,928,7628,,147,,,,,,144,A,4/7/2020 16:30,a4f29e8b852a1199dc502d4c45b26bbb1734f843,2020-04-07T20:00:00Z,16,,8556,8556,8556,10,2,0,1307,255,1562
+20200407,FL,14747,123415,1407,,1999,,,,,,A,4/7/2020 16:36,cc3a8a4bfbb20601d42ab835188a8bad88d53338,2020-04-07T20:00:00Z,296,1999,139569,138162,138162,12,60,317,13465,1423,14888
+20200407,GA,8818,24895,,,1774,,,,,,A,4/7/2020 11:28,57bf1ff43f9dee459124f409f1e7509748ea4820,2020-04-07T20:00:00Z,329,1774,33713,33713,33713,13,100,442,935,1504,2439
 20200407,GU,121,529,,21,,2,,2,,27,,4/7/2020 07:00,896594fdd1dada99d5fff422de915e7be34338ae,2020-04-07T20:00:00Z,4,,650,650,650,66,0,0,24,8,32
-20200407,HI,387,13155,,,26,,6,,,89,,4/6/2020 18:00,4d134cf03c61061bcbe8409cebcae2fbc6f9acf4,2020-04-07T20:00:00Z,5,26,13542,13542,13542,15,1,5,0,16,16
-20200407,IA,1048,11670,,104,193,,,,,341,,4/7/2020 00:00,17ecf1b732ea61da8bb429a4cb7a96eefb969cb6,2020-04-07T20:00:00Z,26,193,12718,12718,12718,19,1,14,1017,102,1119
-20200407,ID,1170,10076,,,83,,21,,,,,4/6/2020 19:00,eb30c44e7364d66975e838cc489a10704c355a87,2020-04-07T20:00:00Z,13,83,11246,11246,11246,16,3,6,182,69,251
-20200407,IL,13549,55183,,3680,,1166,,821,,,,4/7/2020 00:00,a5f4bac401f9f2c3c8f1542d8d71b8a721ad79c5,2020-04-07T20:00:00Z,380,,68732,68732,68732,17,73,0,4503,1287,5790
-20200407,IN,5507,23257,,,,924,,507,,,,4/6/2020 23:59,2381681d5daf223afe67078c0f2f6a83cc27dba7,2020-04-07T20:00:00Z,173,,28764,28764,28764,18,34,0,2010,563,2573
-20200407,KS,900,8614,,,223,,,,,,,4/7/2020 12:00,646d99ff8722291d999833427936751674fad40b,2020-04-07T20:00:00Z,27,223,9514,9514,9514,20,2,25,375,55,430
-20200407,KY,1008,18947,,,,,,,,,,4/6/2020 17:00,67c1e3ae000bfdb36dd3d66cfe30bb5de1b7bb81,2020-04-07T20:00:00Z,59,,19955,19955,19955,21,14,0,1135,53,1188
-20200407,LA,16284,58371,,1996,,,,519,,,,4/7/2020 13:00,efa14fc18b645f9a896c98cef7cff4242b074341,2020-04-07T20:00:00Z,582,,74655,74655,74655,22,70,0,4072,1417,5489
-20200407,MA,15104,66270,,1831,1831,,,,,,,4/7/2020 12:30,776af0b29dde4964c687bc6489b13ed192a1811f,2020-04-07T20:00:00Z,515,1831,81374,81374,81374,25,67,164,3550,1365,4915
-20200407,MD,4371,27256,,,1106,,,,,288,,4/7/2020 10:00,d655ca705523680726987d58215fc1a2f0b295ab,2020-04-07T20:00:00Z,103,1106,31627,31627,31627,24,12,47,1684,326,2010
-20200407,ME,519,6088,,,99,,,,,176,,4/7/2020 11:45,8dcbf6c1a3785870129b599f3000f644847bfd8d,2020-04-07T20:00:00Z,12,99,6607,6607,6607,23,2,7,0,20,20
-20200407,MI,19823,45550,,,,,,,,56,,4/7/2020 11:00,7c21bc612e8a09ab63210a7d6cd5be242e4ae6c0,2020-04-07T20:00:00Z,845,,65373,65373,65373,26,118,0,2430,973,3403
-20200407,MN,1069,28191,,120,242,64,100,,,549,,4/6/2020 17:00,7f73ba38b1a4b70ae92bf071909ed1a3efc748cb,2020-04-07T20:00:00Z,34,242,29260,29260,29260,27,4,19,1049,83,1132
-20200407,MO,3037,28932,,508,,,,,,,,4/7/2020 15:00,fbfa7b03474e44cf652e114eb50cf3204df4314d,2020-04-07T20:00:00Z,53,,31969,31969,31969,29,14,0,1819,315,2134
+20200407,HI,387,13155,,,26,,6,,,89,A,4/6/2020 18:00,480c13feb6dd3ee938f00079817d8c5fc84d8c5c,2020-04-07T20:00:00Z,5,26,13542,13542,13542,15,1,5,0,16,16
+20200407,IA,1048,11670,,104,193,,,,,341,A,4/7/2020 00:00,11e2c37a7ffbe1e1603c05e9a26f500a9374ce82,2020-04-07T20:00:00Z,26,193,12718,12718,12718,19,1,14,1017,102,1119
+20200407,ID,1170,10076,,,83,,21,,,,A,4/6/2020 19:00,270d8fbaba8da85e8fb4a8379a1fa34c943b0250,2020-04-07T20:00:00Z,13,83,11246,11246,11246,16,3,6,182,69,251
+20200407,IL,13549,55183,,3680,,1166,,821,,,A,4/7/2020 00:00,5c350545113d11b495c81d024b2352240843d669,2020-04-07T20:00:00Z,380,,68732,68732,68732,17,73,0,4503,1287,5790
+20200407,IN,5507,23257,,,,924,,507,,,B,4/6/2020 23:59,fc2df1ca427310fea53703a621a4d379433bfbd9,2020-04-07T20:00:00Z,173,,28764,28764,28764,18,34,0,2010,563,2573
+20200407,KS,900,8614,,,223,,,,,,B,4/7/2020 12:00,4aedd6be5b9697ccfd2096706966841aad478d18,2020-04-07T20:00:00Z,27,223,9514,9514,9514,20,2,25,375,55,430
+20200407,KY,1008,18947,,,,,,,,,A,4/6/2020 17:00,e8a15e2eedd890922f50cb539af467909b92d42e,2020-04-07T20:00:00Z,59,,19955,19955,19955,21,14,0,1135,53,1188
+20200407,LA,16284,58371,,1996,,,,519,,,A,4/7/2020 13:00,83fb05a719bdf4e08311f0a0f9686ce512cbec5c,2020-04-07T20:00:00Z,582,,74655,74655,74655,22,70,0,4072,1417,5489
+20200407,MA,15104,66270,,1831,1831,,,,,,B,4/7/2020 12:30,feaae2686b8d2ee1a310f095aa5d9f84252a957f,2020-04-07T20:00:00Z,515,1831,81374,81374,81374,25,67,164,3550,1365,4915
+20200407,MD,4371,27256,,,1106,,,,,288,A,4/7/2020 10:00,b05b05647ae61796dc891dbf9d8e742e2b8bccbd,2020-04-07T20:00:00Z,103,1106,31627,31627,31627,24,12,47,1684,326,2010
+20200407,ME,519,6088,,,99,,,,,176,A,4/7/2020 11:45,fad10cbd2cd4e4ddea073cdee8e26030597845e7,2020-04-07T20:00:00Z,12,99,6607,6607,6607,23,2,7,0,20,20
+20200407,MI,19823,45550,,,,,,,,56,B,4/7/2020 11:00,f9a166835a12d4df4131993ce836c3f0aea9dbe6,2020-04-07T20:00:00Z,845,,65373,65373,65373,26,118,0,2430,973,3403
+20200407,MN,1069,28191,,120,242,64,100,,,549,A,4/6/2020 17:00,293a935947f17c17770137f27ba3651632afadab,2020-04-07T20:00:00Z,34,242,29260,29260,29260,27,4,19,1049,83,1132
+20200407,MO,3037,28932,,508,,,,,,,A,4/7/2020 15:00,cae0da068a529200b50c5ee9f833be1953e37733,2020-04-07T20:00:00Z,53,,31969,31969,31969,29,14,0,1819,315,2134
 20200407,MP,8,15,,,,,,,,,,4/7/2020 05:39,a71407bbfc58c37a3bec279f6b2bc0927062e352,2020-04-07T20:00:00Z,2,,23,23,23,69,1,0,2,0,2
-20200407,MS,1915,18632,,,377,,,,,,,4/7/2020 19:00,0f4aa973a3f0cd320385ac13f9af0dedec6b0be9,2020-04-07T20:00:00Z,59,377,20547,20547,20547,28,8,-98,0,177,177
-20200407,MT,319,6666,,,28,,,,,,,4/7/2020 13:28,fe6329f0d354cd3e4c7da282963038407d09cc34,2020-04-07T20:00:00Z,6,28,6985,6985,6985,30,0,4,175,20,195
-20200407,NC,3221,37861,,354,,,,,,,,4/7/2020 10:15,9214836c074299e0bc6e80126bb8baa1e69e43d7,2020-04-07T20:00:00Z,46,,41082,41082,41082,37,13,0,5,351,356
-20200407,ND,237,7466,,18,33,,,,,82,,4/7/2020 13:00,2f51879f124612ab5067ce1e27d03ad1032bbce8,2020-04-07T20:00:00Z,4,33,7703,7703,7703,38,1,1,478,12,490
-20200407,NE,447,6811,,,,,,,,,,4/7/2020 14:38,85f0872b0963a64a0a261721814216ba34a025c3,2020-04-07T20:00:00Z,10,,7258,7258,7258,31,2,0,433,38,471
-20200407,NH,715,8019,49,,103,,,,,151,,4/6/2020 09:00,593a3431b90c7977775279abaeafb27c07e87c3d,2020-04-07T20:00:00Z,9,103,8783,8734,8734,33,0,11,318,46,364
-20200407,NJ,44416,50558,,7017,,1651,,1540,,,,4/7/2020 13:00,6d34d7581eb184df9c932ad49e955187acd752c3,2020-04-07T20:00:00Z,1232,,94974,94974,94974,34,229,0,2616,3326,5942
-20200407,NM,686,21139,,48,,,,18,,133,,4/6/2020 00:00,91052ba505ae605484fafd56b8258ed832bde050,2020-04-07T20:00:00Z,12,,21825,21825,21825,35,0,0,2627,62,2689
-20200407,NV,2087,16552,,282,,,,,,,,4/7/2020 10:00,8440a88a1c561a15ceaf7e5968da1248fa19ced4,2020-04-07T20:00:00Z,58,,18639,18639,18639,32,12,0,876,134,1010
-20200407,NY,138863,201195,,17493,32083,4593,,,,14590,,4/6/2020 00:00,c6b33c5fe0daccdb7da36dc7aac53a219536296c,2020-04-07T20:00:00Z,5489,32083,340058,340058,340058,36,731,1880,11073,8174,19247
-20200407,OH,4782,46056,,,1354,,417,,,,,4/7/2020 14:00,3daba86016b8169c5f386ee5438490eb44cfcb83,2020-04-07T20:00:00Z,167,1354,50838,50838,50838,39,25,140,2128,332,2460
-20200407,OK,1472,11821,,186,376,137,,,,612,,4/7/2020 08:00,8bab0401296ddbf16c87ef0f3caec6c57a6351da,2020-04-07T20:00:00Z,67,376,13293,13293,13293,40,16,36,10399,145,10544
-20200407,OR,1181,21826,,,324,,,69,,,,4/6/2020 11:00,5e9c1ba22ede4543b62d6efc5fbb10f1f6acd4f3,2020-04-07T20:00:00Z,33,324,23007,23007,23007,41,6,66,1157,49,1206
-20200407,PA,14559,76719,,1665,,,,548,,,,4/7/2020 13:00,21d831a63fd424822223d8d46f7dc0be8afc28ed,2020-04-07T20:00:00Z,240,,91278,91278,91278,42,78,0,5845,1579,7424
-20200407,PR,573,3966,968,,,,,,,,,4/7/2020 07:00,1ab3cc57a4da770e70c24bcb5d99c7aa50550b2b,2020-04-07T20:00:00Z,23,,5507,4539,4539,72,2,0,534,60,594
-20200407,RI,1230,9077,,123,,40,,26,,35,,4/7/2020 00:00,99d960dd480257a032ca4fe00862fc7f75ab672e,2020-04-07T20:00:00Z,30,,10307,10307,10307,44,3,0,1678,148,1826
-20200407,SC,2417,21263,,,241,,,,,,,4/7/2020 16:02,faeb797f72cedc9da3ac9b3548d7533a486c1dfc,2020-04-07T20:00:00Z,51,241,23680,23680,23680,45,7,0,4336,368,4704
-20200407,SD,320,5948,2,,23,,,,,98,,4/6/2020 18:00,726449a80059c7fad7f05e9362456d35edf3e437,2020-04-07T20:00:00Z,6,23,6270,6268,6268,46,2,0,216,32,248
-20200407,TN,4138,48736,,,408,,,,,466,,4/7/2020 15:00,282fb219764cff621641b8ac3c10621ecdba8030,2020-04-07T20:00:00Z,72,408,52874,52874,52874,47,7,56,5188,336,5524
-20200407,TX,8262,80387,,1252,,,,,,38,,4/6/2020 21:00,f2a3e39496912b3142cc8f47ab5c1ca96c41c08f,2020-04-07T20:00:00Z,154,,88649,88649,88649,48,14,0,2306,986,3292
-20200407,UT,1738,32909,,,148,,,,,,,4/7/2020 15:00,7744eb6ed0b55432c4746b06b955bc5e1b3ad7e2,2020-04-07T20:00:00Z,13,148,34647,34647,34647,49,0,10,1190,63,1253
-20200407,VA,3333,25312,,,563,,145,,108,,,4/6/2020 17:00,bb8663ecb1e6295c71e858b3c4857c85769732e5,2020-04-07T20:00:00Z,63,563,28645,28645,28645,51,9,66,3669,455,4124
+20200407,MS,1915,18632,,,377,,,,,,A,4/7/2020 19:00,e1f75f9741b5f11b2c4f2e525e1d3f08ce2a5dcd,2020-04-07T20:00:00Z,59,377,20547,20547,20547,28,8,-98,0,177,177
+20200407,MT,319,6666,,,28,,,,,,A,4/7/2020 13:28,9c9b06492b31cb45fad457d8ddc7286439a6d4e9,2020-04-07T20:00:00Z,6,28,6985,6985,6985,30,0,4,175,20,195
+20200407,NC,3221,37861,,354,,,,,,,A,4/7/2020 10:15,42731310d02235c7c24ba6e02f3c036ca5c0f4c9,2020-04-07T20:00:00Z,46,,41082,41082,41082,37,13,0,5,351,356
+20200407,ND,237,7466,,18,33,,,,,82,B,4/7/2020 13:00,56acac8b5ffd862c62bb49e60e9d53684a766ef1,2020-04-07T20:00:00Z,4,33,7703,7703,7703,38,1,1,478,12,490
+20200407,NE,447,6811,,,,,,,,,A,4/7/2020 14:38,d0863d756bafcd5d989ec214d579053a07042085,2020-04-07T20:00:00Z,10,,7258,7258,7258,31,2,0,433,38,471
+20200407,NH,715,8019,49,,103,,,,,151,B,4/6/2020 09:00,b30a14bdee39fe75c65d59a4d72b8642675d7e6a,2020-04-07T20:00:00Z,9,103,8783,8734,8734,33,0,11,318,46,364
+20200407,NJ,44416,50558,,7017,,1651,,1540,,,A,4/7/2020 13:00,5a69cba0094a937021527d5e6e561e38a75b4151,2020-04-07T20:00:00Z,1232,,94974,94974,94974,34,229,0,2616,3326,5942
+20200407,NM,686,21139,,48,,,,18,,133,A,4/6/2020 00:00,4fa835cc6795be27a9c5d56316eb1217d0f22fca,2020-04-07T20:00:00Z,12,,21825,21825,21825,35,0,0,2627,62,2689
+20200407,NV,2087,16552,,282,,,,,,,A,4/7/2020 10:00,01f34c7e91f91e15d9896a5d5d167245a5ab1b9c,2020-04-07T20:00:00Z,58,,18639,18639,18639,32,12,0,876,134,1010
+20200407,NY,138863,201195,,17493,32083,4593,,,,14590,A,4/6/2020 00:00,55f26b837736acab4f58391322359e3a2f1ea173,2020-04-07T20:00:00Z,5489,32083,340058,340058,340058,36,731,1880,11073,8174,19247
+20200407,OH,4782,46056,,,1354,,417,,,,B,4/7/2020 14:00,f246c090ef95ec326b372e8dc484d84db97cd5f5,2020-04-07T20:00:00Z,167,1354,50838,50838,50838,39,25,140,2128,332,2460
+20200407,OK,1472,11821,,186,376,137,,,,612,B,4/7/2020 08:00,6f7207da73f80a9a0be6e333b1150c84e5b9ef5a,2020-04-07T20:00:00Z,67,376,13293,13293,13293,40,16,36,10399,145,10544
+20200407,OR,1181,21826,,,324,,,69,,,A,4/6/2020 11:00,a2caec087f5e339e71e04eb5f5028b1730ff544c,2020-04-07T20:00:00Z,33,324,23007,23007,23007,41,6,66,1157,49,1206
+20200407,PA,14559,76719,,1665,,,,548,,,A,4/7/2020 13:00,dbc1ace64c985abbb9552fbfd0f3d852e6397418,2020-04-07T20:00:00Z,240,,91278,91278,91278,42,78,0,5845,1579,7424
+20200407,PR,573,3966,968,,,,,,,,A,4/7/2020 07:00,b55008d918d95c4cff386df41d422dc76d4aa6c8,2020-04-07T20:00:00Z,23,,5507,4539,4539,72,2,0,534,60,594
+20200407,RI,1230,9077,,123,,40,,26,,35,B,4/7/2020 00:00,e6a2d4a53ccd98517e916139acc762ea883075be,2020-04-07T20:00:00Z,30,,10307,10307,10307,44,3,0,1678,148,1826
+20200407,SC,2417,21263,,,241,,,,,,B,4/7/2020 16:02,e1d92747f845bc7a1a4432cb4071b2508a8beeb4,2020-04-07T20:00:00Z,51,241,23680,23680,23680,45,7,0,4336,368,4704
+20200407,SD,320,5948,2,,23,,,,,98,A,4/6/2020 18:00,c88f6784d53e0811a729fbc1837565f169f62fc5,2020-04-07T20:00:00Z,6,23,6270,6268,6268,46,2,0,216,32,248
+20200407,TN,4138,48736,,,408,,,,,466,A,4/7/2020 15:00,986566824fbe4173a2a72ca641ff6144d159c992,2020-04-07T20:00:00Z,72,408,52874,52874,52874,47,7,56,5188,336,5524
+20200407,TX,8262,80387,,1252,,,,,,38,A,4/6/2020 21:00,ea5f7730a3c138578dc7704cf579f4b3df5638c3,2020-04-07T20:00:00Z,154,,88649,88649,88649,48,14,0,2306,986,3292
+20200407,UT,1738,32909,,,148,,,,,,A,4/7/2020 15:00,9039c616202dfde175f6516d344165a8c5a687ac,2020-04-07T20:00:00Z,13,148,34647,34647,34647,49,0,10,1190,63,1253
+20200407,VA,3333,25312,,,563,,145,,108,,A,4/6/2020 17:00,58b43454d81c592215d106bc2427637948deee8f,2020-04-07T20:00:00Z,63,563,28645,28645,28645,51,9,66,3669,455,4124
 20200407,VI,43,222,20,,,,,,,36,,4/6/2020 21:50,6818776dba7570c4cd072b1189926dada86c7593,2020-04-07T20:00:00Z,1,,285,265,265,78,0,0,0,0,0
-20200407,VT,575,6554,,29,45,,,,,15,,4/6/2020 23:59,3d9b0e5f0de5683c26a74fc81e73adda3141d678,2020-04-07T20:00:00Z,23,45,7129,7129,7129,50,0,0,464,32,496
-20200407,WA,8859,104511,,641,,190,,,,,,4/6/2020 21:30,6569685160a0f988a083502bfb444b07649ce334,2020-04-07T20:00:00Z,429,,113370,113370,113370,53,22,0,4674,336,5010
-20200407,WI,2578,28512,,,745,,200,,,,,4/7/2020 16:00,de3ae906cd5ed70b46fe79f7c32e26a2fafd9e00,2020-04-07T20:00:00Z,92,745,31090,31090,31090,55,15,77,1938,138,2076
-20200407,WV,412,11647,,,,,,,,,,4/7/2020 10:00,8cfef37adc531a4d04e468de1d1d287e9ed75897,2020-04-07T20:00:00Z,4,,12059,12059,12059,54,0,0,2052,67,2119
-20200407,WY,216,3789,,,33,,,,,62,,4/7/2020 10:57,150e944da45ee83d3c9b1868bac2a2b1ca97eb3c,2020-04-07T20:00:00Z,0,33,4005,4005,4005,56,0,10,70,6,76
-20200406,AK,191,6692,,,23,,,,,,,4/6/2020 14:45,75eb070c07d93b8050ce40c7fbbc39b39bf51d5c,2020-04-06T20:00:00Z,6,23,6883,6883,6883,02,0,3,593,6,599
-20200406,AL,1968,12797,,,240,,,,,,,4/6/2020 00:00,566618d3eeeaab80ba8832cdcdb828d40e29f51a,2020-04-06T20:00:00Z,50,240,14765,14765,14765,01,5,9,1515,172,1687
-20200406,AR,875,11970,,74,137,,,22,39,102,,4/6/2020 14:35,e56abc0d9c0fd3a1b2a55e169e447635e38fa932,2020-04-06T20:00:00Z,16,137,12845,12845,12845,05,0,7,1558,45,1603
+20200407,VT,575,6554,,29,45,,,,,15,A,4/6/2020 23:59,eb7dc252beaab0d2d78276933e7658a7354d318a,2020-04-07T20:00:00Z,23,45,7129,7129,7129,50,0,0,464,32,496
+20200407,WA,8859,104511,,641,,190,,,,,A,4/6/2020 21:30,6deb4f1c0beb1c893909f8fe67ee53b81c7d2e56,2020-04-07T20:00:00Z,429,,113370,113370,113370,53,22,0,4674,336,5010
+20200407,WI,2578,28512,,,745,,200,,,,A,4/7/2020 16:00,bcb48ea2671c3f4c809d8cb6152f056098dd6798,2020-04-07T20:00:00Z,92,745,31090,31090,31090,55,15,77,1938,138,2076
+20200407,WV,412,11647,,,,,,,,,B,4/7/2020 10:00,e388498ee3a9b4b979231d85b5ef3e99ba732588,2020-04-07T20:00:00Z,4,,12059,12059,12059,54,0,0,2052,67,2119
+20200407,WY,216,3789,,,33,,,,,62,A,4/7/2020 10:57,ea6122fd474756818393bf830fd49386bfb57e6e,2020-04-07T20:00:00Z,0,33,4005,4005,4005,56,0,10,70,6,76
+20200406,AK,191,6692,,,23,,,,,,A,4/6/2020 14:45,1d4b2f9d0f737627c7103bb93f22cb9216446390,2020-04-06T20:00:00Z,6,23,6883,6883,6883,02,0,3,593,6,599
+20200406,AL,1968,12797,,,240,,,,,,B,4/6/2020 00:00,984cb27a09c05f902fc7de2d8824a1409ae53f60,2020-04-06T20:00:00Z,50,240,14765,14765,14765,01,5,9,1515,172,1687
+20200406,AR,875,11970,,74,137,,,22,39,102,A,4/6/2020 14:35,235da230b2c2ee57bb1c72f583d66cd4b243d5e1,2020-04-06T20:00:00Z,16,137,12845,12845,12845,05,0,7,1558,45,1603
 20200406,AS,0,3,2,,,,,,,,,4/6/2020 16:00,bb54229b62f9955105c6033d24d9401be02a95e9,2020-04-06T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200406,AZ,2456,30078,,,,,,,,,,4/6/2020 00:00,0c38b17db290866484d0a7d8c6fec380ce48f8f7,2020-04-06T20:00:00Z,65,,32534,32534,32534,04,1,0,4937,187,5124
-20200406,CA,14336,103095,15000,2509,,1085,,,,,,4/6/2020 00:00,b3939257c8e1ea99800d22c1fd5b7d3bca019ab8,2020-04-06T20:00:00Z,343,,132431,117431,117431,06,24,0,0,898,898
-20200406,CO,4950,20823,,786,924,,,,,,,4/5/2020 18:00,103a406f038de12627ab28d5a230a81baa509d27,2020-04-06T20:00:00Z,140,924,25773,25773,25773,08,14,49,1488,385,1873
-20200406,CT,6906,19780,,1221,,,,,,,,4/6/2020 15:15,ba9700a878ffba03f9ce7fe4118f4ce371d3ac56,2020-04-06T20:00:00Z,206,,26686,26686,26686,09,17,0,2185,1231,3416
-20200406,DC,1097,6356,,,,,,,,287,,4/5/2020 00:00,7fd91c629de655ea00627fee021f93d9b79fe697,2020-04-06T20:00:00Z,24,,7453,7453,7453,11,2,0,520,99,619
-20200406,DE,673,6321,,101,,,,,,71,,4/5/2020 03:30,6940a0f48bec182138e9b277117ed989d0387512,2020-04-06T20:00:00Z,14,,6994,6994,6994,10,0,0,0,0,0
-20200406,FL,13324,109950,1142,,1682,,,,,,,4/6/2020 12:17,959a3eb4697381cdd5b1660f7264d8f8ef9fdbe9,2020-04-06T20:00:00Z,236,1682,124416,123274,123274,12,18,110,8697,1173,9870
-20200406,GA,7314,23960,,,1332,,,,,,,4/6/2020 11:28,488483cb239fbad5786c9c7ebdd4a35b43f2c153,2020-04-06T20:00:00Z,229,1332,31274,31274,31274,13,18,49,2775,667,3442
+20200406,AZ,2456,30078,,,,,,,,,B,4/6/2020 00:00,62abd6e6431240c69764f04a2e688e01ed7550e4,2020-04-06T20:00:00Z,65,,32534,32534,32534,04,1,0,4937,187,5124
+20200406,CA,14336,103095,15000,2509,,1085,,,,,B,4/6/2020 00:00,950d32c052a87c2378fcc055d85a051e392d9bf1,2020-04-06T20:00:00Z,343,,132431,117431,117431,06,24,0,0,898,898
+20200406,CO,4950,20823,,786,924,,,,,,A,4/5/2020 18:00,1d2ad93e4c304bf5598e8ec7105039801139d5c2,2020-04-06T20:00:00Z,140,924,25773,25773,25773,08,14,49,1488,385,1873
+20200406,CT,6906,19780,,1221,,,,,,,A,4/6/2020 15:15,b4fabae43ce6d4a6fc6b2219b9f08a78180aae6c,2020-04-06T20:00:00Z,206,,26686,26686,26686,09,17,0,2185,1231,3416
+20200406,DC,1097,6356,,,,,,,,287,A,4/5/2020 00:00,341c3e2159711ef2be5efa972f8dae12d47902f9,2020-04-06T20:00:00Z,24,,7453,7453,7453,11,2,0,520,99,619
+20200406,DE,673,6321,,101,,,,,,71,A,4/5/2020 03:30,fdbe3153e1855e1060496d3cd49ccff170ff5026,2020-04-06T20:00:00Z,14,,6994,6994,6994,10,0,0,0,0,0
+20200406,FL,13324,109950,1142,,1682,,,,,,A,4/6/2020 12:17,f746c23ba2945880d1166f5d48ed41231789b38a,2020-04-06T20:00:00Z,236,1682,124416,123274,123274,12,18,110,8697,1173,9870
+20200406,GA,7314,23960,,,1332,,,,,,A,4/6/2020 11:28,ae6a1dbe880a1e383251bcfa7ffd17a2449cb3fc,2020-04-06T20:00:00Z,229,1332,31274,31274,31274,13,18,49,2775,667,3442
 20200406,GU,113,505,,21,,2,,,,25,,4/6/2020 06:00,49a5136a5e9c7a0645fe89f7fa647061c6f0b592,2020-04-06T20:00:00Z,4,,618,618,618,66,0,0,12,1,13
-20200406,HI,371,13155,,,21,,6,,,85,,4/5/2020 18:00,16523445c13141d4ca87189681ccb7cf6c04c0e8,2020-04-06T20:00:00Z,4,21,13526,13526,13526,15,0,2,551,20,571
-20200406,IA,946,10653,,99,179,,,,,284,,4/6/2020 00:00,81ae936deb377bd7e1f495e2771aee0a3773232f,2020-04-06T20:00:00Z,25,179,11599,11599,11599,19,3,14,680,78,758
-20200406,ID,1101,9894,,,77,,16,,,,,4/5/2020 19:00,1cbf9a51b1f66169cfff54084d55be1760c59111,2020-04-06T20:00:00Z,10,77,10995,10995,10995,16,0,11,710,24,734
-20200406,IL,12262,50680,,,,,,,,,,4/6/2020 00:00,4d61705fbe091bb90809a28a71481f3057046f66,2020-04-06T20:00:00Z,307,,62942,62942,62942,17,33,0,2953,1006,3959
-20200406,IN,4944,21247,,,,924,,507,,,,4/6/2020 14:00,38023180a0e67b8ea3edde3a57de2f3ad4c16dc2,2020-04-06T20:00:00Z,139,,26191,26191,26191,18,12,0,3006,533,3539
-20200406,KS,845,8239,,,198,,,,,,,4/6/2020 12:00,e135ddbf50e0381115c75123af76c14050453066,2020-04-06T20:00:00Z,25,198,9084,9084,9084,20,3,15,763,98,861
-20200406,KY,955,17812,,,,,,,,,,4/5/2020 17:00,c28cdf20fb81e20884d99d98024c3f6bea991870,2020-04-06T20:00:00Z,45,,18767,18767,18767,21,5,0,2066,38,2104
-20200406,LA,14867,54299,,1981,,,,552,,,,4/6/2020 13:00,03fdfd10b63c80f577ceb540a608f4cbf804cc3b,2020-04-06T20:00:00Z,512,,69166,69166,69166,22,35,0,6984,1857,8841
-20200406,MA,13739,62720,,1667,1667,,,,,,,4/6/2020 12:30,27193b802e8e1812f118d3258f1a4c7a55e1d9f3,2020-04-06T20:00:00Z,448,1667,76459,76459,76459,25,78,35,3155,1337,4492
-20200406,MD,4045,25572,,,1059,,,,,184,,4/6/2020 10:00,b193b10ba7faf651796477cc8c75e01767e7ddca,2020-04-06T20:00:00Z,91,1059,29617,29617,29617,24,24,123,844,436,1280
-20200406,ME,499,6088,,,92,,,,,158,,4/6/2020 11:00,43e198e135071d9f2fb880cc6f6509ac491e53b5,2020-04-06T20:00:00Z,10,92,6587,6587,6587,23,0,6,0,29,29
-20200406,MI,18850,43120,,,,,,,,56,,4/6/2020 11:00,494ba676424f14ab2971daad7add4f31db305570,2020-04-06T20:00:00Z,727,,61970,61970,61970,26,110,0,2789,1283,4072
-20200406,MN,986,27142,,115,223,57,90,,,470,,4/6/2020 17:11,0cc99ef239f892827b4ed6ab96ba015111b44ce4,2020-04-06T20:00:00Z,30,223,28128,28128,28128,27,1,21,1300,51,1351
-20200406,MO,2722,27113,,439,,,,,,,,4/6/2020 16:28,924ed58dd5f8a01714d7b992b96480b24cb0e697,2020-04-06T20:00:00Z,39,,29835,29835,29835,29,5,0,2231,355,2586
+20200406,HI,371,13155,,,21,,6,,,85,A,4/5/2020 18:00,4a6174d611b9548a92ce4f4ac835a4ed878767e9,2020-04-06T20:00:00Z,4,21,13526,13526,13526,15,0,2,551,20,571
+20200406,IA,946,10653,,99,179,,,,,284,A,4/6/2020 00:00,715a722413bccfe35a777e46cc7a56e238916212,2020-04-06T20:00:00Z,25,179,11599,11599,11599,19,3,14,680,78,758
+20200406,ID,1101,9894,,,77,,16,,,,A,4/5/2020 19:00,50b5447485020c1926c75944e973468937af5cba,2020-04-06T20:00:00Z,10,77,10995,10995,10995,16,0,11,710,24,734
+20200406,IL,12262,50680,,,,,,,,,A,4/6/2020 00:00,37375072af04066c00dc321fda75f48cdb3a1a48,2020-04-06T20:00:00Z,307,,62942,62942,62942,17,33,0,2953,1006,3959
+20200406,IN,4944,21247,,,,924,,507,,,B,4/6/2020 14:00,8586e8d00f159fbb60cd4afac33e76f3a5368885,2020-04-06T20:00:00Z,139,,26191,26191,26191,18,12,0,3006,533,3539
+20200406,KS,845,8239,,,198,,,,,,B,4/6/2020 12:00,01e8134ef78b859f9e74e3e81f7e4acaf31c128d,2020-04-06T20:00:00Z,25,198,9084,9084,9084,20,3,15,763,98,861
+20200406,KY,955,17812,,,,,,,,,A,4/5/2020 17:00,eb79ae8ceb19e703b8fa1dc6b05cee05e37afd23,2020-04-06T20:00:00Z,45,,18767,18767,18767,21,5,0,2066,38,2104
+20200406,LA,14867,54299,,1981,,,,552,,,A,4/6/2020 13:00,03da4db158c4cc114d17ed5c79258329341fdd5e,2020-04-06T20:00:00Z,512,,69166,69166,69166,22,35,0,6984,1857,8841
+20200406,MA,13739,62720,,1667,1667,,,,,,B,4/6/2020 12:30,92fe6407240a8971ee08b7dcfa70b33ea3476044,2020-04-06T20:00:00Z,448,1667,76459,76459,76459,25,78,35,3155,1337,4492
+20200406,MD,4045,25572,,,1059,,,,,184,A,4/6/2020 10:00,ca2116b13b1421ff525155aaedef9487ec2b8aaa,2020-04-06T20:00:00Z,91,1059,29617,29617,29617,24,24,123,844,436,1280
+20200406,ME,499,6088,,,92,,,,,158,A,4/6/2020 11:00,941f06892de9dbcdaa19e57444ecf1bc28cd528f,2020-04-06T20:00:00Z,10,92,6587,6587,6587,23,0,6,0,29,29
+20200406,MI,18850,43120,,,,,,,,56,B,4/6/2020 11:00,406969c0a33e34681b6738111a1aaebc965b07d5,2020-04-06T20:00:00Z,727,,61970,61970,61970,26,110,0,2789,1283,4072
+20200406,MN,986,27142,,115,223,57,90,,,470,A,4/6/2020 17:11,f71b3543f8a433ff7974a60ce1d720c574e57e40,2020-04-06T20:00:00Z,30,223,28128,28128,28128,27,1,21,1300,51,1351
+20200406,MO,2722,27113,,439,,,,,,,A,4/6/2020 16:28,199583f7e9ed24b2c7df261fed98e14ab52de661,2020-04-06T20:00:00Z,39,,29835,29835,29835,29,5,0,2231,355,2586
 20200406,MP,8,13,10,,,,,,,,,4/6/2020 02:57,94a74f1e789c163021b21f07042aad2ec6fe3d62,2020-04-06T20:00:00Z,1,,31,21,21,69,0,0,0,0,0
-20200406,MS,1738,18632,,,475,,,,,,,4/6/2020 16:33,2200b56cf4defb2897393327772bb864c63a7a54,2020-04-06T20:00:00Z,51,475,20370,20370,20370,28,8,0,13052,100,13152
-20200406,MT,299,6491,,,24,,,,,,,4/6/2020 10:00,53f7a4dd43aa8fb55f2a2ae54a8bac460843e00b,2020-04-06T20:00:00Z,6,24,6790,6790,6790,30,0,0,174,13,187
-20200406,NC,2870,37856,,270,,,,,,,,4/6/2020 11:00,6ac1c45dd6254c2c5744a72a237defbbbfae967a,2020-04-06T20:00:00Z,33,,40726,40726,40726,37,2,0,396,285,681
-20200406,ND,225,6988,,19,32,,,,,74,,4/6/2020 13:05,a6b8e72ff4b498cac6c774ac23eef65ec9b2c886,2020-04-06T20:00:00Z,3,32,7213,7213,7213,38,0,1,408,18,426
-20200406,NE,409,6378,8,,,,,,,,,4/6/2020 13:38,d5ab17f59a989f50a8afe3ec5be28e987548650f,2020-04-06T20:00:00Z,8,,6795,6787,6787,31,0,0,820,46,866
-20200406,NH,669,7701,101,,92,,,,,147,,4/5/2020 09:00,b87cb45840636ac8ff9f73c0cbd108d5eb4939ec,2020-04-06T20:00:00Z,9,92,8471,8370,8370,33,0,6,290,48,338
-20200406,NJ,41090,47942,,6390,,,,1263,,,,4/6/2020 13:00,aaa1bcb9d877e15a931dc4b170666f4c77618f8b,2020-04-06T20:00:00Z,1003,,89032,89032,89032,34,86,0,3281,3585,6866
-20200406,NM,624,18512,,45,,,,18,,130,,4/6/2020 00:00,910fc139c4bb173a6ec1c3c8d0b977cdc0be9067,2020-04-06T20:00:00Z,12,,19136,19136,19136,35,1,0,2227,81,2308
-20200406,NV,1953,15676,,,,,,,,,,4/6/2020 10:00,6c1831c8d9bb927bb5dd1a66131891347641c6df,2020-04-06T20:00:00Z,46,,17629,17629,17629,32,0,0,681,117,798
-20200406,NY,130689,190122,,16837,30203,4504,,,,13366,,4/6/2020 00:00,dc6e2fcb2afb921b5e924bba434c27c96ae7e2f0,2020-04-06T20:00:00Z,4758,30203,320811,320811,320811,36,599,2111,9873,8658,18531
-20200406,OH,4450,43928,,,1214,,371,,,,,4/6/2020 14:00,c3c18eb4226964e8c2158ed9b9edd645c9e2f701,2020-04-06T20:00:00Z,142,1214,48378,48378,48378,39,23,110,4215,407,4622
-20200406,OK,1327,1422,,161,340,143,,,,522,,4/6/2020 08:00,f9d15d8566a421dc6004ebfb25fed08983816c14,2020-04-06T20:00:00Z,51,340,2749,2749,2749,40,5,10,21,75,96
-20200406,OR,1132,20669,,,258,,,40,,,,4/5/2020 11:00,d506e7d0e4a54d96b55f3e1dd661af72abb75002,2020-04-06T20:00:00Z,27,258,21801,21801,21801,41,0,0,1113,64,1177
-20200406,PA,12980,70874,,,1145,,,533,,,,4/6/2020 12:00,a478b9a14a4180f78da76269dd8313307a062136,2020-04-06T20:00:00Z,162,1145,83854,83854,83854,42,12,73,4613,1470,6083
-20200406,PR,513,3432,1000,,,,,,,,,4/6/2020 07:00,ebdab5aee08c63898fc91fd4db2b95ea0902d036,2020-04-06T20:00:00Z,21,,4945,3945,3945,72,1,0,359,38,397
-20200406,RI,1082,7399,,109,,37,,26,,35,,4/6/2020 00:00,53cef23bd87eae1baba8c10c1854605b9820a1f7,2020-04-06T20:00:00Z,27,,8481,8481,8481,44,2,0,1140,160,1300
-20200406,SC,2049,16927,,,241,,,,,,,4/5/2020 15:30,3e59590fb8ccd3c30856931287a6749c8eea53da,2020-04-06T20:00:00Z,44,241,18976,18976,18976,45,0,0,0,0,0
-20200406,SD,288,5732,0,,23,,,,,91,,4/6/2020 12:30,3acb0fa5c967f05c631f2b61449c06efd9546375,2020-04-06T20:00:00Z,4,23,6020,6020,6020,46,2,1,379,48,427
-20200406,TN,3802,43548,,,352,,,,,356,,4/6/2020 15:00,5759ae3f953a617fcd293744a720f4f575e740f7,2020-04-06T20:00:00Z,65,352,47350,47350,47350,47,21,24,1881,169,2050
-20200406,TX,7276,78081,,1153,,,,,,38,,4/5/2020 21:00,09312dd33752a17eaf2090f7b488a88e5e4df10a,2020-04-06T20:00:00Z,140,,85357,85357,85357,48,13,0,13955,464,14419
-20200406,UT,1675,31719,,,138,,,,,,,4/5/2020 15:00,17fc6b57aef18cc02cebf8fd096c10d91d841cbb,2020-04-06T20:00:00Z,13,138,33394,33394,33394,49,5,14,2432,70,2502
-20200406,VA,2878,21643,,,497,,145,,108,,,4/5/2020 17:00,310e5785750f78cfbf53250d236c91269612b2a7,2020-04-06T20:00:00Z,54,497,24521,24521,24521,51,3,66,609,241,850
+20200406,MS,1738,18632,,,475,,,,,,A,4/6/2020 16:33,e94706b48537a9596904a81dce9cfddb117940f4,2020-04-06T20:00:00Z,51,475,20370,20370,20370,28,8,0,13052,100,13152
+20200406,MT,299,6491,,,24,,,,,,A,4/6/2020 10:00,b9f1650346438bfd21d9f2a18a904680c48dba15,2020-04-06T20:00:00Z,6,24,6790,6790,6790,30,0,0,174,13,187
+20200406,NC,2870,37856,,270,,,,,,,A,4/6/2020 11:00,83f3be16a399342f6a709875bea7c3070211cc74,2020-04-06T20:00:00Z,33,,40726,40726,40726,37,2,0,396,285,681
+20200406,ND,225,6988,,19,32,,,,,74,B,4/6/2020 13:05,a2cd500e0af338667f11697275eda797164bf678,2020-04-06T20:00:00Z,3,32,7213,7213,7213,38,0,1,408,18,426
+20200406,NE,409,6378,8,,,,,,,,A,4/6/2020 13:38,8eec59dc0d6aba42fcfb8ea5b5af7804c666dd3f,2020-04-06T20:00:00Z,8,,6795,6787,6787,31,0,0,820,46,866
+20200406,NH,669,7701,101,,92,,,,,147,B,4/5/2020 09:00,cdacba38bb4ad8621b5d885ec36b1627e57cfaa7,2020-04-06T20:00:00Z,9,92,8471,8370,8370,33,0,6,290,48,338
+20200406,NJ,41090,47942,,6390,,,,1263,,,A,4/6/2020 13:00,a74fe0e06299a4f19046463144d64c47233d712a,2020-04-06T20:00:00Z,1003,,89032,89032,89032,34,86,0,3281,3585,6866
+20200406,NM,624,18512,,45,,,,18,,130,A,4/6/2020 00:00,19786798da034b299a88aafefbdc73da81616b5e,2020-04-06T20:00:00Z,12,,19136,19136,19136,35,1,0,2227,81,2308
+20200406,NV,1953,15676,,,,,,,,,A,4/6/2020 10:00,db86f16e04ed4b25a821666e2268acbc2c1756a9,2020-04-06T20:00:00Z,46,,17629,17629,17629,32,0,0,681,117,798
+20200406,NY,130689,190122,,16837,30203,4504,,,,13366,A,4/6/2020 00:00,7157819a1cbc0028c234f57e016bf324decf9833,2020-04-06T20:00:00Z,4758,30203,320811,320811,320811,36,599,2111,9873,8658,18531
+20200406,OH,4450,43928,,,1214,,371,,,,B,4/6/2020 14:00,115fbef1d576aaa164ca1fa6df4e972e209c2dda,2020-04-06T20:00:00Z,142,1214,48378,48378,48378,39,23,110,4215,407,4622
+20200406,OK,1327,1422,,161,340,143,,,,522,B,4/6/2020 08:00,a8cf3fdaff21ac0bef6a2195edbfbd862edaa865,2020-04-06T20:00:00Z,51,340,2749,2749,2749,40,5,10,21,75,96
+20200406,OR,1132,20669,,,258,,,40,,,A,4/5/2020 11:00,7cef2a397ba319c40eb3cf213a5fe878d61061fb,2020-04-06T20:00:00Z,27,258,21801,21801,21801,41,0,0,1113,64,1177
+20200406,PA,12980,70874,,,1145,,,533,,,A,4/6/2020 12:00,248bddf6dc4760944abe16be76b730369a39f970,2020-04-06T20:00:00Z,162,1145,83854,83854,83854,42,12,73,4613,1470,6083
+20200406,PR,513,3432,1000,,,,,,,,A,4/6/2020 07:00,020f5cbf062d2387d2c4845ef96c07bc2082d2b0,2020-04-06T20:00:00Z,21,,4945,3945,3945,72,1,0,359,38,397
+20200406,RI,1082,7399,,109,,37,,26,,35,B,4/6/2020 00:00,0d3882733cc94a956ca33bfdd12bd826a7f1881f,2020-04-06T20:00:00Z,27,,8481,8481,8481,44,2,0,1140,160,1300
+20200406,SC,2049,16927,,,241,,,,,,B,4/5/2020 15:30,fed56482023362b33a5a9606a2d2adcafd12262c,2020-04-06T20:00:00Z,44,241,18976,18976,18976,45,0,0,0,0,0
+20200406,SD,288,5732,0,,23,,,,,91,A,4/6/2020 12:30,496cfcfa761d081dca7f76167cc8b5197ef25420,2020-04-06T20:00:00Z,4,23,6020,6020,6020,46,2,1,379,48,427
+20200406,TN,3802,43548,,,352,,,,,356,A,4/6/2020 15:00,0b9c139c072bf8d3310e48637e5f307d31364ce4,2020-04-06T20:00:00Z,65,352,47350,47350,47350,47,21,24,1881,169,2050
+20200406,TX,7276,78081,,1153,,,,,,38,A,4/5/2020 21:00,594cef2a8c6fcbc8eba602c7c5e33d868a55bbc7,2020-04-06T20:00:00Z,140,,85357,85357,85357,48,13,0,13955,464,14419
+20200406,UT,1675,31719,,,138,,,,,,A,4/5/2020 15:00,1cb02c887f73a6b940469296194d261e675dc502,2020-04-06T20:00:00Z,13,138,33394,33394,33394,49,5,14,2432,70,2502
+20200406,VA,2878,21643,,,497,,145,,108,,A,4/5/2020 17:00,03f55535e9a10519d2b3077c136ae75790f49521,2020-04-06T20:00:00Z,54,497,24521,24521,24521,51,3,66,609,241,850
 20200406,VI,43,222,20,,,,,,,36,,4/5/2020 21:50,58879d33a2a5ecc222387d25473a08d296e80aff,2020-04-06T20:00:00Z,1,,285,265,265,78,0,0,16,1,17
-20200406,VT,543,6090,,28,45,,,,,15,,4/6/2020 13:00,c82cc0c911a1858e1d6390c04315f04faae176b9,2020-04-06T20:00:00Z,23,45,6633,6633,6633,50,1,0,20,31,51
-20200406,WA,8523,99837,,638,,191,,,,,,4/5/2020 19:55,5efda1ac32c387ae493514f5cd3f312ecc05c57a,2020-04-06T20:00:00Z,407,,108360,108360,108360,53,21,0,4551,342,4893
-20200406,WI,2440,26574,,,668,,186,,,,,4/6/2020 16:00,e89a910336b3f2ec59b590528051668970e85ea9,2020-04-06T20:00:00Z,77,668,29014,29014,29014,55,9,44,1405,173,1578
-20200406,WV,345,9595,,,,,,,,,,4/6/2020 10:00,a2a91faa6858000ad08adbe549448113004c306f,2020-04-06T20:00:00Z,4,,9940,9940,9940,54,1,0,1081,21,1102
-20200406,WY,210,3719,,,23,,,,,52,,4/6/2020 11:32,862831a9b5a9875715e0b20ede1afdbbb98ff4ce,2020-04-06T20:00:00Z,0,23,3929,3929,3929,56,0,0,679,13,692
-20200405,AK,185,6099,,,20,,,,,,,4/5/2020 00:00,82eb8aeb6874bcbe8e9a9cfa496102d05920babb,2020-04-05T20:00:00Z,6,20,6284,6284,6284,02,1,4,230,14,244
-20200405,AL,1796,11282,,,231,,,,,,,4/5/2020 00:00,7a0691a6aad3f3ff50b62435b4913c3397d11e2a,2020-04-05T20:00:00Z,45,231,13078,13078,13078,01,2,19,2009,216,2225
-20200405,AR,830,10412,,67,130,,,27,39,97,,4/5/2020 14:34,b8d614ba3551ec694a92770cda8f6744779f1e3b,2020-04-05T20:00:00Z,16,130,11242,11242,11242,05,2,24,785,87,872
+20200406,VT,543,6090,,28,45,,,,,15,A,4/6/2020 13:00,d3a3ff98491d544417f7b631603dc63d9ae21394,2020-04-06T20:00:00Z,23,45,6633,6633,6633,50,1,0,20,31,51
+20200406,WA,8523,99837,,638,,191,,,,,A,4/5/2020 19:55,4d71fd91a381387eacde61af6c194b693e50bc9e,2020-04-06T20:00:00Z,407,,108360,108360,108360,53,21,0,4551,342,4893
+20200406,WI,2440,26574,,,668,,186,,,,A,4/6/2020 16:00,2def0fc7a4c4c32ff930bc6125013710ad666092,2020-04-06T20:00:00Z,77,668,29014,29014,29014,55,9,44,1405,173,1578
+20200406,WV,345,9595,,,,,,,,,B,4/6/2020 10:00,0d851d9c345cd7321c01f0ccf851055fddeca63f,2020-04-06T20:00:00Z,4,,9940,9940,9940,54,1,0,1081,21,1102
+20200406,WY,210,3719,,,23,,,,,52,A,4/6/2020 11:32,fa40a3be8efc151cd0c37e902f0af3d05bf6202c,2020-04-06T20:00:00Z,0,23,3929,3929,3929,56,0,0,679,13,692
+20200405,AK,185,6099,,,20,,,,,,A,4/5/2020 00:00,6fe21c4ec71dc8b13e0de1521e8a4fe161ac3325,2020-04-05T20:00:00Z,6,20,6284,6284,6284,02,1,4,230,14,244
+20200405,AL,1796,11282,,,231,,,,,,B,4/5/2020 00:00,61a882f70233d0908881fa9857ffdec9c96f5375,2020-04-05T20:00:00Z,45,231,13078,13078,13078,01,2,19,2009,216,2225
+20200405,AR,830,10412,,67,130,,,27,39,97,A,4/5/2020 14:34,165a8f8b5c2c71334b87f45580c501b73444cc51,2020-04-05T20:00:00Z,16,130,11242,11242,11242,05,2,24,785,87,872
 20200405,AS,0,3,2,,,,,,,,,3/30/2020 23:00,014b305a9bc1adc41028402aedfb7c0c9e958a0f,2020-04-05T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200405,AZ,2269,25141,,,,,,,,,,4/5/2020 00:00,7b6b4bc96286b115236b1092a1b09e2400aa3ace,2020-04-05T20:00:00Z,64,,27410,27410,27410,04,12,0,0,250,250
-20200405,CA,13438,103095,15000,2398,,1040,,,,,,4/4/2020 00:00,a4653f71b074ec6e49a3d8357760c136f8a0b1e1,2020-04-05T20:00:00Z,319,,131533,116533,116533,06,43,0,1421,1412,2833
-20200405,CO,4565,19335,,783,875,,,,,,,4/4/2020 18:00,a963c18fbb5dd0346c5e7d615d3a3770619fb44b,2020-04-05T20:00:00Z,126,875,23900,23900,23900,08,15,52,1437,392,1829
-20200405,CT,5675,17595,,1142,,,,,,,,4/5/2020 12:00,e5a02f8b7b70937d4915eabbf929261f8c8f28df,2020-04-05T20:00:00Z,189,,23270,23270,23270,09,24,0,842,399,1241
-20200405,DC,998,5836,,,,,,,,258,,4/4/2020 00:00,c12057541d7a92356af8892ad4e78f2a09b18979,2020-04-05T20:00:00Z,22,,6834,6834,6834,11,1,0,300,96,396
-20200405,DE,673,6321,,101,,,,,,71,,4/5/2020 12:30,3a52f25bc1433144a48245e5f40ff40993f99e37,2020-04-05T20:00:00Z,14,,6994,6994,6994,10,0,0,447,80,527
-20200405,FL,12151,101253,1129,,1572,,,,,,,4/5/2020 13:30,8287836f080dc820579ec5f390f11c752d9b93f1,2020-04-05T20:00:00Z,218,1572,114533,113404,113404,12,27,110,10297,1040,11337
-20200405,GA,6647,21185,,,1283,,,,,,,4/5/2020 11:27,8dab7f0cb6fcc1ce9113f7a53f03cca645f5c317,2020-04-05T20:00:00Z,211,1283,27832,27832,27832,13,10,44,1051,487,1538
+20200405,AZ,2269,25141,,,,,,,,,B,4/5/2020 00:00,102f45389259503aed2b18f79cbdef710b998f4d,2020-04-05T20:00:00Z,64,,27410,27410,27410,04,12,0,0,250,250
+20200405,CA,13438,103095,15000,2398,,1040,,,,,B,4/4/2020 00:00,a3a9a3ad15df74f58af675bff0f6fb5d62b26b52,2020-04-05T20:00:00Z,319,,131533,116533,116533,06,43,0,1421,1412,2833
+20200405,CO,4565,19335,,783,875,,,,,,A,4/4/2020 18:00,1a4ef533aea16e6a118994b7b0412ca50bc73e2f,2020-04-05T20:00:00Z,126,875,23900,23900,23900,08,15,52,1437,392,1829
+20200405,CT,5675,17595,,1142,,,,,,,A,4/5/2020 12:00,9e2b40179d4d129911c3b12f68f87f1d8d03d378,2020-04-05T20:00:00Z,189,,23270,23270,23270,09,24,0,842,399,1241
+20200405,DC,998,5836,,,,,,,,258,A,4/4/2020 00:00,c7f0fe5340a0a72d93b5356fa8a8e5354f5f83e0,2020-04-05T20:00:00Z,22,,6834,6834,6834,11,1,0,300,96,396
+20200405,DE,673,6321,,101,,,,,,71,C,4/5/2020 12:30,21ad8ad3f3e26a6096bea1890c2ba261bed8891d,2020-04-05T20:00:00Z,14,,6994,6994,6994,10,0,0,447,80,527
+20200405,FL,12151,101253,1129,,1572,,,,,,A,4/5/2020 13:30,1006c1e12dde1100c7046bb50b048cdd2e991c3a,2020-04-05T20:00:00Z,218,1572,114533,113404,113404,12,27,110,10297,1040,11337
+20200405,GA,6647,21185,,,1283,,,,,,A,4/5/2020 11:27,4f91670b296cddbbcfb1ff10b705f776699690ac,2020-04-05T20:00:00Z,211,1283,27832,27832,27832,13,10,44,1051,487,1538
 20200405,GU,112,493,,21,,2,,,,23,,4/5/2020 09:05,23c8f6dcd54e70d8c1dffcc32698baaf2890042e,2020-04-05T20:00:00Z,4,,605,605,605,66,0,0,21,19,40
-20200405,HI,351,12604,,,19,,6,,,82,,4/4/2020 18:00,5f49194a7d587ef1b0e4ecf42fecefd2c22bf584,2020-04-05T20:00:00Z,4,19,12955,12955,12955,15,1,1,645,32,677
-20200405,IA,868,9973,,91,165,,,,,188,,4/5/2020 00:00,1767724386c20868574cf9f1b7e1b70d92ed251a,2020-04-05T20:00:00Z,22,165,10841,10841,10841,19,8,12,519,82,601
-20200405,ID,1077,9184,,,66,,11,,,,,4/4/2020 19:00,df01ce8dc296f7f0a492b63ac185d570beda383c,2020-04-05T20:00:00Z,10,66,10261,10261,10261,16,0,4,1327,64,1391
-20200405,IL,11256,47727,,,,,,,,,,4/5/2020 00:00,46fa9441ac49959651edba75e2b9092ee358113c,2020-04-05T20:00:00Z,274,,58983,58983,58983,17,31,0,4503,899,5402
-20200405,IN,4411,18241,,,,,,,,,,4/4/2020 11:59,772ac056653b72ee3d6868cb39177a8de8e51719,2020-04-05T20:00:00Z,127,,22652,22652,22652,18,11,0,2394,458,2852
-20200405,KS,747,7476,,,183,,,,,,,4/5/2020 12:00,f57040fb1ce726c250ee1f6c1c7705f449b102d5,2020-04-05T20:00:00Z,22,183,8223,8223,8223,20,1,11,596,49,645
-20200405,KY,917,15746,,,,,,,,,,4/4/2020 17:00,8f26955ab833e2987ac206358dfe1c343e1b43a4,2020-04-05T20:00:00Z,40,,16663,16663,16663,21,3,0,1005,86,1091
-20200405,LA,13010,47315,,1803,,,,561,,,,4/5/2020 13:00,51f8fed52960cf9312e8fd903b521530f39fa35d,2020-04-05T20:00:00Z,477,,60325,60325,60325,22,68,0,1313,514,1827
-20200405,MA,12402,59565,,1632,1632,,,,,,,4/5/2020 12:30,9f5a723da4db32d0800a0111e1189986de64722e,2020-04-05T20:00:00Z,370,1632,71967,71967,71967,25,66,262,2374,765,3139
-20200405,MD,3609,24728,,,936,,,,,159,,4/5/2020 10:00,29c7d523c917d24cb64638b115fad4c3b4f776bc,2020-04-05T20:00:00Z,67,936,28337,28337,28337,24,14,115,2243,484,2727
-20200405,ME,470,6088,,,86,,,,,156,,4/5/2020 11:00,3124d69265b44add26e80ed60c6745d540fe2671,2020-04-05T20:00:00Z,10,86,6558,6558,6558,23,0,3,0,14,14
-20200405,MI,17567,40331,,,,,,,,56,,4/5/2020 11:00,3af287e90ac76033a135a0086e054c440bd49b91,2020-04-05T20:00:00Z,617,,57898,57898,57898,26,77,0,2926,1172,4098
-20200405,MN,935,25842,,106,202,48,77,,,451,,4/4/2020 17:00,affd683fa06e31aa35fb9e32dad5a64d42c11f64,2020-04-05T20:00:00Z,29,202,26777,26777,26777,27,5,22,1284,70,1354
-20200405,MO,2367,24882,,424,,,,,,,,4/5/2020 15:00,4c8d8ad2be4363af25dc3faefc32223e7f9f155e,2020-04-05T20:00:00Z,34,,27249,27249,27249,29,10,0,2268,76,2344
+20200405,HI,351,12604,,,19,,6,,,82,A,4/4/2020 18:00,d8f20460299185e68a9155a69b4a6decbd74e0ab,2020-04-05T20:00:00Z,4,19,12955,12955,12955,15,1,1,645,32,677
+20200405,IA,868,9973,,91,165,,,,,188,C,4/5/2020 00:00,ddfa424801ab60f4ff3b34b468d3e112463ca210,2020-04-05T20:00:00Z,22,165,10841,10841,10841,19,8,12,519,82,601
+20200405,ID,1077,9184,,,66,,11,,,,A,4/4/2020 19:00,b898143797c3cbeb04ca39d96477e3d0f912948a,2020-04-05T20:00:00Z,10,66,10261,10261,10261,16,0,4,1327,64,1391
+20200405,IL,11256,47727,,,,,,,,,A,4/5/2020 00:00,028360c7575c832d851c2a3bb927a7c371860578,2020-04-05T20:00:00Z,274,,58983,58983,58983,17,31,0,4503,899,5402
+20200405,IN,4411,18241,,,,,,,,,B,4/4/2020 11:59,b052bdd8a680a779f4a79dd2102a50a02cb46410,2020-04-05T20:00:00Z,127,,22652,22652,22652,18,11,0,2394,458,2852
+20200405,KS,747,7476,,,183,,,,,,B,4/5/2020 12:00,a65ae415b49ecc4840648e7d550639963c13dad2,2020-04-05T20:00:00Z,22,183,8223,8223,8223,20,1,11,596,49,645
+20200405,KY,917,15746,,,,,,,,,A,4/4/2020 17:00,3067cdf46aaa338ed15460187acfff460d1af2c2,2020-04-05T20:00:00Z,40,,16663,16663,16663,21,3,0,1005,86,1091
+20200405,LA,13010,47315,,1803,,,,561,,,A,4/5/2020 13:00,7f49cd9fac471ff403739c372c2db3608fcbae55,2020-04-05T20:00:00Z,477,,60325,60325,60325,22,68,0,1313,514,1827
+20200405,MA,12402,59565,,1632,1632,,,,,,B,4/5/2020 12:30,8afb901ea410e0a097fcb0740103c8632065372a,2020-04-05T20:00:00Z,370,1632,71967,71967,71967,25,66,262,2374,765,3139
+20200405,MD,3609,24728,,,936,,,,,159,A,4/5/2020 10:00,05576a6aa37bcb3ae5b8c2654d888e2486bc2d46,2020-04-05T20:00:00Z,67,936,28337,28337,28337,24,14,115,2243,484,2727
+20200405,ME,470,6088,,,86,,,,,156,A,4/5/2020 11:00,4814403baa5768898bd7a7b6ea80f4ab5fa67554,2020-04-05T20:00:00Z,10,86,6558,6558,6558,23,0,3,0,14,14
+20200405,MI,17567,40331,,,,,,,,56,B,4/5/2020 11:00,4eb9c36f867db3d243b0b82dd26ad18aa5e720a3,2020-04-05T20:00:00Z,617,,57898,57898,57898,26,77,0,2926,1172,4098
+20200405,MN,935,25842,,106,202,48,77,,,451,A,4/4/2020 17:00,1b4d69ff0c8508089c50f21f1baf4804f0bc69c3,2020-04-05T20:00:00Z,29,202,26777,26777,26777,27,5,22,1284,70,1354
+20200405,MO,2367,24882,,424,,,,,,,C,4/5/2020 15:00,d1e49f2389c6e0f20a58e417a427e95cd5c0d46c,2020-04-05T20:00:00Z,34,,27249,27249,27249,29,10,0,2268,76,2344
 20200405,MP,8,13,10,,,,,,,,,4/4/2020 18:30,d8dca952111844ccd61f4db7fc78a68f06d65166,2020-04-05T20:00:00Z,1,,31,21,21,69,0,0,0,0,0
-20200405,MS,1638,5580,,,475,,,,,,,4/4/2020 19:00,a29048fb596c5730bd9f4519f6e419f16190e673,2020-04-05T20:00:00Z,43,475,7218,7218,7218,28,8,39,447,183,630
-20200405,MT,286,6317,,,24,,,,,,,4/5/2020 10:00,699d9ce066745f0e8000f1c05212d38d092e5d71,2020-04-05T20:00:00Z,6,24,6603,6603,6603,30,1,0,405,21,426
-20200405,NC,2585,37460,,261,,,,,,,,4/5/2020 11:00,1029a16aa7918f76956eec00f002f22e11cb6979,2020-04-05T20:00:00Z,31,,40045,40045,40045,37,7,0,1089,183,1272
-20200405,ND,207,6580,,20,31,,,,,63,,4/5/2020 12:51,502a2e0f0ac5153d40e08c1ddd68b7d377c8c568,2020-04-05T20:00:00Z,3,31,6787,6787,6787,38,0,1,559,21,580
-20200405,NE,363,5558,12,,,,,,,,,4/5/2020 13:50,bc26d6d075a865677c4eea68e4b277d9ee441361,2020-04-05T20:00:00Z,8,,5933,5921,5921,31,2,0,500,42,542
-20200405,NH,621,7411,93,,86,,,,,146,,4/4/2020 09:00,a9932bb8292979f7812510b5d9c30bf1627e03a1,2020-04-05T20:00:00Z,9,86,8125,8032,8032,33,2,6,446,81,527
-20200405,NJ,37505,44661,,4000,,,,,,,,4/5/2020 13:00,d99044c7eb2961e33ed89d60bb3fb3421f70896f,2020-04-05T20:00:00Z,917,,82166,82166,82166,34,71,0,3429,3381,6810
-20200405,NM,543,16285,,37,,,,18,,54,,4/4/2020 00:00,836445e75546dd4dc6ad653769e204df829bab1f,2020-04-05T20:00:00Z,11,,16828,16828,16828,35,1,0,1148,48,1196
-20200405,NV,1836,14995,,,,,,,,,,4/5/2020 09:30,ef128e9fd38879e70f222fa22e968b9be2f2d1a4,2020-04-05T20:00:00Z,46,,16831,16831,16831,32,0,0,574,94,668
-20200405,NY,122031,180249,,16479,28092,4376,,,,12187,,4/4/2020 00:00,a020b8f181ef45a2ff517652378c6f7dea67e799,2020-04-05T20:00:00Z,4159,28092,302280,302280,302280,36,594,1709,10332,8327,18659
-20200405,OH,4043,39713,,,1104,,346,,,,,4/5/2020 14:00,22987d64cc0f4f36c7d019a52075631d00e0df4c,2020-04-05T20:00:00Z,119,1104,43756,43756,43756,39,17,98,1581,304,1885
-20200405,OK,1252,1401,,,330,,,,,,,4/5/2020 08:00,040596ef77b4a1033267807c1d0051f80a22032f,2020-04-05T20:00:00Z,46,330,2653,2653,2653,40,4,14,39,93,132
-20200405,OR,1068,19556,,,258,,,40,,,,4/4/2020 11:00,445631e3cb6f7444c084503965e13f9df23d0002,2020-04-05T20:00:00Z,27,258,20624,20624,20624,41,1,19,3021,69,3090
-20200405,PA,11510,66261,,,1072,,,,,,,4/5/2020 12:00,22dec3b893b79b1f9219870ed5d2dceb747561e2,2020-04-05T20:00:00Z,150,1072,77771,77771,77771,42,14,68,6248,1493,7741
-20200405,PR,475,3073,1039,,,,,,,,,4/5/2020 07:00,31f37089736514f489f24f69cc40e302a7907ccd,2020-04-05T20:00:00Z,20,,4587,3548,3548,72,2,0,468,23,491
-20200405,RI,922,6259,,103,,33,,6,,35,,4/5/2020 00:00,8c158241c226197809a4d7527c266df06708502c,2020-04-05T20:00:00Z,25,,7181,7181,7181,44,8,0,675,116,791
-20200405,SC,2049,16927,,,241,,,,,,,4/5/2020 15:30,908f29d9e15a0551e3a0328b0f63d3eab0efbb70,2020-04-05T20:00:00Z,44,241,18976,18976,18976,45,4,0,530,132,662
-20200405,SD,240,5353,,,22,,,,,84,,4/4/2020 18:00,107ef4b9995d441d2effe0a68f91cab94054a92c,2020-04-05T20:00:00Z,2,22,5593,5593,5593,46,0,3,341,28,369
-20200405,TN,3633,41667,,,328,,,,,295,,4/4/2020 15:00,47652fcdb621129e001b5d14a769118b7c532740,2020-04-05T20:00:00Z,44,328,45300,45300,45300,47,1,17,3597,312,3909
-20200405,TX,6812,64126,,827,,,,,,38,,4/5/2020 13:00,c8303ea8107b2d9c6e5112a890435ca9a783c34f,2020-04-05T20:00:00Z,127,,70938,70938,70938,48,22,0,6485,702,7187
-20200405,UT,1605,29287,,,124,,,,,,,4/5/2020 15:00,5ab7c60bb76eeb438b8cf517a291d167becab1cf,2020-04-05T20:00:00Z,8,124,30892,30892,30892,49,0,7,2672,177,2849
-20200405,VA,2637,21034,,,431,,145,,108,,,4/4/2020 17:00,15c86c91406c9a299c3c8ba94a479766f1b8b781,2020-04-05T20:00:00Z,51,431,23671,23671,23671,51,-1,41,1889,230,2119
+20200405,MS,1638,5580,,,475,,,,,,B,4/4/2020 19:00,0047e3cb18db13ec186265aacc7af335508ef92a,2020-04-05T20:00:00Z,43,475,7218,7218,7218,28,8,39,447,183,630
+20200405,MT,286,6317,,,24,,,,,,A,4/5/2020 10:00,d1137189523e5447c6854c3f17c2e2ba186237f7,2020-04-05T20:00:00Z,6,24,6603,6603,6603,30,1,0,405,21,426
+20200405,NC,2585,37460,,261,,,,,,,A,4/5/2020 11:00,9068c626b45bdb5ff9aa9ce4fd092d7bd666dce9,2020-04-05T20:00:00Z,31,,40045,40045,40045,37,7,0,1089,183,1272
+20200405,ND,207,6580,,20,31,,,,,63,B,4/5/2020 12:51,ef67c0333eaed271d8f31652c1a82b5d085acb7a,2020-04-05T20:00:00Z,3,31,6787,6787,6787,38,0,1,559,21,580
+20200405,NE,363,5558,12,,,,,,,,A,4/5/2020 13:50,62578131398666df086d00d5b3466f0b8bdb64f0,2020-04-05T20:00:00Z,8,,5933,5921,5921,31,2,0,500,42,542
+20200405,NH,621,7411,93,,86,,,,,146,B,4/4/2020 09:00,f8ccba43400f4fda7bbce932bb2b3cdbeb561dc1,2020-04-05T20:00:00Z,9,86,8125,8032,8032,33,2,6,446,81,527
+20200405,NJ,37505,44661,,4000,,,,,,,A,4/5/2020 13:00,4bef04414f31a9e0907940538128be5d99f3e924,2020-04-05T20:00:00Z,917,,82166,82166,82166,34,71,0,3429,3381,6810
+20200405,NM,543,16285,,37,,,,18,,54,A,4/4/2020 00:00,9cfc858d993699375880170d4f4a28cbf9e2b819,2020-04-05T20:00:00Z,11,,16828,16828,16828,35,1,0,1148,48,1196
+20200405,NV,1836,14995,,,,,,,,,A,4/5/2020 09:30,b0e111d738c821235bd616f7173fef4c0be5c0e7,2020-04-05T20:00:00Z,46,,16831,16831,16831,32,0,0,574,94,668
+20200405,NY,122031,180249,,16479,28092,4376,,,,12187,A,4/4/2020 00:00,86edd46199b4247433dc8387311bb1957f054ca4,2020-04-05T20:00:00Z,4159,28092,302280,302280,302280,36,594,1709,10332,8327,18659
+20200405,OH,4043,39713,,,1104,,346,,,,B,4/5/2020 14:00,8adb790943cb9abcab01b70d2b7f6df99dd99893,2020-04-05T20:00:00Z,119,1104,43756,43756,43756,39,17,98,1581,304,1885
+20200405,OK,1252,1401,,,330,,,,,,B,4/5/2020 08:00,1c09627f64b45e6a626ac3c31033c153bfe706b3,2020-04-05T20:00:00Z,46,330,2653,2653,2653,40,4,14,39,93,132
+20200405,OR,1068,19556,,,258,,,40,,,A,4/4/2020 11:00,f1b18affbbc6838a5ca1342c5beb093f06e354c1,2020-04-05T20:00:00Z,27,258,20624,20624,20624,41,1,19,3021,69,3090
+20200405,PA,11510,66261,,,1072,,,,,,A,4/5/2020 12:00,47b671abe077b72f600fa3b019fb2f9d1acee9f7,2020-04-05T20:00:00Z,150,1072,77771,77771,77771,42,14,68,6248,1493,7741
+20200405,PR,475,3073,1039,,,,,,,,A,4/5/2020 07:00,4a81a89ffa3167a1b555f433c1e2ddc116195164,2020-04-05T20:00:00Z,20,,4587,3548,3548,72,2,0,468,23,491
+20200405,RI,922,6259,,103,,33,,6,,35,B,4/5/2020 00:00,b165f5c7bfe8894a0fc9b3a3141b3ce8a8101bf7,2020-04-05T20:00:00Z,25,,7181,7181,7181,44,8,0,675,116,791
+20200405,SC,2049,16927,,,241,,,,,,B,4/5/2020 15:30,16d19cc7f9b970e7fc9cdac0aa31f6a8cf317828,2020-04-05T20:00:00Z,44,241,18976,18976,18976,45,4,0,530,132,662
+20200405,SD,240,5353,,,22,,,,,84,A,4/4/2020 18:00,688322773fbf267d6a92aec3e0a94de84d20c7fe,2020-04-05T20:00:00Z,2,22,5593,5593,5593,46,0,3,341,28,369
+20200405,TN,3633,41667,,,328,,,,,295,A,4/4/2020 15:00,2fac2b2a88b6ac45b64f85cf2ce087d6ee7c8443,2020-04-05T20:00:00Z,44,328,45300,45300,45300,47,1,17,3597,312,3909
+20200405,TX,6812,64126,,827,,,,,,38,A,4/5/2020 13:00,0c7a1ac735749982cf8155115b0e1d0b5fc35cae,2020-04-05T20:00:00Z,127,,70938,70938,70938,48,22,0,6485,702,7187
+20200405,UT,1605,29287,,,124,,,,,,A,4/5/2020 15:00,92701951b7360a1ebfd40fd03655b177f1944eb0,2020-04-05T20:00:00Z,8,124,30892,30892,30892,49,0,7,2672,177,2849
+20200405,VA,2637,21034,,,431,,145,,108,,A,4/4/2020 17:00,d1adecfa81bbb881fc4b2761f4ebab174950ee4b,2020-04-05T20:00:00Z,51,431,23671,23671,23671,51,-1,41,1889,230,2119
 20200405,VI,42,206,18,,,,,,,34,,4/5/2020 00:00,713c3d9b4b25ffef5bb78fc3d3167a2372754463,2020-04-05T20:00:00Z,1,,266,248,248,78,1,0,22,2,24
-20200405,VT,512,6070,,29,45,,,,,15,,4/5/2020 13:00,4ae209765bc94648928889b1452ab6a37b059e1d,2020-04-05T20:00:00Z,22,45,6582,6582,6582,50,2,0,687,51,738
-20200405,WA,8181,95286,,581,,178,,,,,,4/4/2020 02:59,fb056be7bcbf9e73a1f2c17e91f2e8fe7ceffdff,2020-04-05T20:00:00Z,386,,103467,103467,103467,53,21,0,1757,389,2146
-20200405,WI,2267,25169,,,624,,175,,,,,4/5/2020 16:00,2ec147583193cd5bb87beb270c0a0307a11c6178,2020-04-05T20:00:00Z,68,624,27436,27436,27436,55,12,36,1310,155,1465
-20200405,WV,324,8514,,,,,,,,,,4/5/2020 10:00,1d2cf85d427910141249430da21154d0602223d4,2020-04-05T20:00:00Z,3,,8838,8838,8838,54,1,0,1110,42,1152
-20200405,WY,197,3040,,,23,,,,,50,,4/5/2020 09:23,db6f463625516f3e570a14a211a7d3da05f4b4d1,2020-04-05T20:00:00Z,0,23,3237,3237,3237,56,0,0,95,10,105
-20200404,AK,171,5869,,,16,,,,,,,4/4/2020 16:00,5435362aada31d491847fc5707f261e2f75f58f0,2020-04-04T20:00:00Z,5,16,6040,6040,6040,02,2,1,10,14,24
-20200404,AL,1580,9273,,,212,,,,,,,4/4/2020 00:00,f7e6b891601c59220f1b6fa00d5c7a8edc13f39f,2020-04-04T20:00:00Z,43,212,10853,10853,10853,01,8,212,1086,148,1234
-20200404,AR,743,9627,,72,106,,,23,39,79,,4/4/2020 00:00,a4cbb42f339942ae5d2f80c29e6f234d8e8ffd63,2020-04-04T20:00:00Z,14,106,10370,10370,10370,05,2,1,632,39,671
+20200405,VT,512,6070,,29,45,,,,,15,A,4/5/2020 13:00,aeeb0e4df3281051b4d99bae918f1fbec0fa4e96,2020-04-05T20:00:00Z,22,45,6582,6582,6582,50,2,0,687,51,738
+20200405,WA,8181,95286,,581,,178,,,,,A,4/4/2020 02:59,a20cd4727ccd4d3c1c73f388ddd55415ab6972d3,2020-04-05T20:00:00Z,386,,103467,103467,103467,53,21,0,1757,389,2146
+20200405,WI,2267,25169,,,624,,175,,,,A,4/5/2020 16:00,8c5e9e4c10fbe30521bcc06625b3c5ebdfe5686c,2020-04-05T20:00:00Z,68,624,27436,27436,27436,55,12,36,1310,155,1465
+20200405,WV,324,8514,,,,,,,,,B,4/5/2020 10:00,b6619d2ae56c78fd75baf1748d95d966d3e788bb,2020-04-05T20:00:00Z,3,,8838,8838,8838,54,1,0,1110,42,1152
+20200405,WY,197,3040,,,23,,,,,50,A,4/5/2020 09:23,9a55b993326e4149d008ffc45bc94c18b5694d6c,2020-04-05T20:00:00Z,0,23,3237,3237,3237,56,0,0,95,10,105
+20200404,AK,171,5869,,,16,,,,,,A,4/4/2020 16:00,2fcf0831cbdf13c8779ec705f71fe6d542a8af32,2020-04-04T20:00:00Z,5,16,6040,6040,6040,02,2,1,10,14,24
+20200404,AL,1580,9273,,,212,,,,,,B,4/4/2020 00:00,b19623c0085a8df2a8ca6be43ff684eb7763c5bc,2020-04-04T20:00:00Z,43,212,10853,10853,10853,01,8,212,1086,148,1234
+20200404,AR,743,9627,,72,106,,,23,39,79,A,4/4/2020 00:00,8b51e9f2de31a851f9a0beb6414538d2fe02642f,2020-04-04T20:00:00Z,14,106,10370,10370,10370,05,2,1,632,39,671
 20200404,AS,0,3,2,,,,,,,,,3/30/2020 23:00,23715a252794aa55540465d1adb7e8d12c7c5bf1,2020-04-04T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200404,AZ,2019,25141,,,,,,,,,,4/4/2020 00:00,02239912a9284dc261ab6e04b09e347f2254dc04,2020-04-04T20:00:00Z,52,,27160,27160,27160,04,11,0,2237,250,2487
-20200404,CA,12026,101674,13000,2300,,1008,,,,,,4/2/2020 00:00,b608471438c228a5602ea9d5646c693d432cff20,2020-04-04T20:00:00Z,276,,126700,113700,113700,06,39,0,77075,1325,78400
-20200404,CO,4173,17898,,777,823,,,,,,,4/3/2020 18:00,e5226befc8dc941382c81c81bc9ba6b3017d2738,2020-04-04T20:00:00Z,111,823,22071,22071,22071,08,14,113,1215,445,1660
-20200404,CT,5276,16753,,1033,,,,,,,,4/4/2020 13:00,b9a6a3ea453cfb3fc8cdf4b87abdf0a5f034fb7a,2020-04-04T20:00:00Z,165,,22029,22029,22029,09,34,0,1652,362,2014
-20200404,DC,902,5536,,,,,,,,235,,4/3/2020 00:00,5579414e8341cfd59b09335ca391cb1fcec2edc4,2020-04-04T20:00:00Z,21,,6438,6438,6438,11,6,0,709,145,854
-20200404,DE,593,5874,,95,,,,,,71,,4/4/2020 13:45,ae73d657f81656f0cac2ebaa4c9ac7855a2f7f69,2020-04-04T20:00:00Z,14,,6467,6467,6467,10,0,0,879,143,1022
-20200404,FL,11111,90956,1281,,1462,,,,,,,4/4/2020 09:51,6404acdd37e1970add94140dd07b855dcb07c79b,2020-04-04T20:00:00Z,191,1462,103348,102067,102067,12,28,175,8819,1526,10345
-20200404,GA,6160,20134,,,1239,,,,,,,4/4/2020 11:27,af0ae8ea9cb453cf1c89364e11343f3c13e5b168,2020-04-04T20:00:00Z,201,1239,26294,26294,26294,13,17,81,700,329,1029
+20200404,AZ,2019,25141,,,,,,,,,B,4/4/2020 00:00,426476f2eb837c277c6f625f39dc0dd52185891c,2020-04-04T20:00:00Z,52,,27160,27160,27160,04,11,0,2237,250,2487
+20200404,CA,12026,101674,13000,2300,,1008,,,,,B,4/2/2020 00:00,ef58df43c29fb15fc944d7abae9ea74bedced0ca,2020-04-04T20:00:00Z,276,,126700,113700,113700,06,39,0,77075,1325,78400
+20200404,CO,4173,17898,,777,823,,,,,,A,4/3/2020 18:00,008eef33bc07902644252ab63fc5dd201ad2cd26,2020-04-04T20:00:00Z,111,823,22071,22071,22071,08,14,113,1215,445,1660
+20200404,CT,5276,16753,,1033,,,,,,,A,4/4/2020 13:00,db90667d46b5457a45587d7301969e6a1ebb7191,2020-04-04T20:00:00Z,165,,22029,22029,22029,09,34,0,1652,362,2014
+20200404,DC,902,5536,,,,,,,,235,A,4/3/2020 00:00,1cecf51c6b90945f6178c4382f5a68ec9566e7bb,2020-04-04T20:00:00Z,21,,6438,6438,6438,11,6,0,709,145,854
+20200404,DE,593,5874,,95,,,,,,71,C,4/4/2020 13:45,0349eca21ca46acc00498c682deea2a0765edffa,2020-04-04T20:00:00Z,14,,6467,6467,6467,10,0,0,879,143,1022
+20200404,FL,11111,90956,1281,,1462,,,,,,A,4/4/2020 09:51,b84817ac9891b258253609ad6be67ba90cee1c6b,2020-04-04T20:00:00Z,191,1462,103348,102067,102067,12,28,175,8819,1526,10345
+20200404,GA,6160,20134,,,1239,,,,,,A,4/4/2020 11:27,860fecdfc9fa22c91ad11d6ade5d551839d485f6,2020-04-04T20:00:00Z,201,1239,26294,26294,26294,13,17,81,700,329,1029
 20200404,GU,93,472,,20,,2,,,,20,,4/4/2020 06:45,eafc8cb15907ffd70c8a97e4a391622c66d30bcb,2020-04-04T20:00:00Z,4,,565,565,565,66,0,0,13,9,22
-20200404,HI,319,11959,,,18,,6,,,78,,4/3/2020 18:00,c102a3ed4e99a6dba4a33e889866650b11d854a9,2020-04-04T20:00:00Z,3,18,12278,12278,12278,15,1,3,1753,34,1787
-20200404,IA,786,9454,,85,153,,,,,188,,4/4/2020 00:00,e3d529fe42e4545985c3e52d38f86dcbbb1614a6,2020-04-04T20:00:00Z,14,153,10240,10240,10240,19,3,15,700,87,787
-20200404,ID,1013,7857,,,62,,8,,,,,4/3/2020 19:00,e00c88ad94cfa25c5e742c2ee5ec19d3b579451b,2020-04-04T20:00:00Z,10,62,8870,8870,8870,16,1,6,803,122,925
-20200404,IL,10357,43224,,,,,,,,,,4/4/2020 00:00,8656326ba7ebed22cb6bc4d1d72de3f2daf5e117,2020-04-04T20:00:00Z,243,,53581,53581,53581,17,33,0,4080,1453,5533
-20200404,IN,3953,15847,,,,,,,,,,4/2/2020 23:59,c7466667a882bbb3f396a484360864a95415a3ac,2020-04-04T20:00:00Z,116,,19800,19800,19800,18,14,0,1449,516,1965
-20200404,KS,698,6880,,,172,,,,,,,4/4/2020 12:00,e424f95d7909224ae466e46a843b6ee51f8c084d,2020-04-04T20:00:00Z,21,172,7578,7578,7578,20,4,21,426,78,504
-20200404,KY,831,14741,,,,,,,,,,4/3/2020 17:00,88df1004e7fec00a530b6c83300c2f94a1898cc0,2020-04-04T20:00:00Z,37,,15572,15572,15572,21,6,0,2707,61,2768
-20200404,LA,12496,46002,,1726,,,,571,,,,4/4/2020 13:40,7aea9a2d41814a48f37670117315e5a838c5b217,2020-04-04T20:00:00Z,409,,58498,58498,58498,22,39,0,2654,2199,4853
-20200404,MA,11637,57191,,1370,1370,,,,,,,4/4/2020 12:30,ffd6027a1d5f2f0eb9baeabc230632a7592cdee7,2020-04-04T20:00:00Z,304,1370,68828,68828,68828,25,39,404,4506,1334,5840
-20200404,MD,3125,22485,,,821,,,,,159,,4/4/2020 10:00,aa9a27f24bb91ece2abb8e5a30d6ae64ac59659d,2020-04-04T20:00:00Z,53,821,25610,25610,25610,24,11,157,1553,367,1920
-20200404,ME,456,6088,,,83,,,,,140,,4/4/2020 11:00,2d17d07720fc1fc3bc5d106d1a7914267cee22fc,2020-04-04T20:00:00Z,10,83,6544,6544,6544,23,1,8,0,24,24
-20200404,MI,16395,37405,,,,,,,,56,,4/4/2020 11:00,33657fd15aad4f05276580b551754e26bca5fe54,2020-04-04T20:00:00Z,540,,53800,53800,53800,26,61,0,3735,1143,4878
-20200404,MN,865,24558,,95,180,42,69,,,440,,4/4/2020 12:00,5f7925bbcd95e57772dbbda62bdb02589dddf4d4,2020-04-04T20:00:00Z,24,180,25423,25423,25423,27,2,24,1120,76,1196
-20200404,MO,2291,22614,,413,,,,,,,,4/4/2020 15:00,2b6b62492f76abd8f0b075fa84778372b9bbc055,2020-04-04T20:00:00Z,24,,24905,24905,24905,29,5,0,3257,178,3435
+20200404,HI,319,11959,,,18,,6,,,78,A,4/3/2020 18:00,fb720a96e2e02a222c24655b877b4cec7fc85193,2020-04-04T20:00:00Z,3,18,12278,12278,12278,15,1,3,1753,34,1787
+20200404,IA,786,9454,,85,153,,,,,188,C,4/4/2020 00:00,9e73cf5d729a0ea7d684c8562b7c73038b0dd231,2020-04-04T20:00:00Z,14,153,10240,10240,10240,19,3,15,700,87,787
+20200404,ID,1013,7857,,,62,,8,,,,A,4/3/2020 19:00,50d8672be5e1ff6d54ccfb9287693da63aeee222,2020-04-04T20:00:00Z,10,62,8870,8870,8870,16,1,6,803,122,925
+20200404,IL,10357,43224,,,,,,,,,A,4/4/2020 00:00,60c185422b926f6496b628a83b720ea412f3bdc1,2020-04-04T20:00:00Z,243,,53581,53581,53581,17,33,0,4080,1453,5533
+20200404,IN,3953,15847,,,,,,,,,B,4/2/2020 23:59,86e3e30e7908025e25aae55ab89d40dcf3db47a2,2020-04-04T20:00:00Z,116,,19800,19800,19800,18,14,0,1449,516,1965
+20200404,KS,698,6880,,,172,,,,,,B,4/4/2020 12:00,3b275ff593516712ccd9f2a28c8ca9c8ee4f7241,2020-04-04T20:00:00Z,21,172,7578,7578,7578,20,4,21,426,78,504
+20200404,KY,831,14741,,,,,,,,,A,4/3/2020 17:00,a8414c3fb46a5d701098a89d0c0863581f1a9b35,2020-04-04T20:00:00Z,37,,15572,15572,15572,21,6,0,2707,61,2768
+20200404,LA,12496,46002,,1726,,,,571,,,A,4/4/2020 13:40,b1edfeb206285d6beb8939a6da10362a48569840,2020-04-04T20:00:00Z,409,,58498,58498,58498,22,39,0,2654,2199,4853
+20200404,MA,11637,57191,,1370,1370,,,,,,B,4/4/2020 12:30,242bb0edba7f49fb5fd75db15132da0e194f2caf,2020-04-04T20:00:00Z,304,1370,68828,68828,68828,25,39,404,4506,1334,5840
+20200404,MD,3125,22485,,,821,,,,,159,A,4/4/2020 10:00,8d1b8af2cee45aee5c9345a9ce214ee490e64132,2020-04-04T20:00:00Z,53,821,25610,25610,25610,24,11,157,1553,367,1920
+20200404,ME,456,6088,,,83,,,,,140,A,4/4/2020 11:00,9f093ebf0b8e2f58cb5b2e972b3812c042d4e908,2020-04-04T20:00:00Z,10,83,6544,6544,6544,23,1,8,0,24,24
+20200404,MI,16395,37405,,,,,,,,56,B,4/4/2020 11:00,f9e3a7cf29b62ce26da69b0961418f4e4da4ce84,2020-04-04T20:00:00Z,540,,53800,53800,53800,26,61,0,3735,1143,4878
+20200404,MN,865,24558,,95,180,42,69,,,440,A,4/4/2020 12:00,62045683d9360fc5d4d5ce4be895db9f4158ef58,2020-04-04T20:00:00Z,24,180,25423,25423,25423,27,2,24,1120,76,1196
+20200404,MO,2291,22614,,413,,,,,,,C,4/4/2020 15:00,6f374ffbfb6ef05e73fc861e4f6486d7238c6188,2020-04-04T20:00:00Z,24,,24905,24905,24905,29,5,0,3257,178,3435
 20200404,MP,8,13,10,,,,,,,,,4/3/2020 13:30,075b90a76bcee262f6294982935dc4d4e499332a,2020-04-04T20:00:00Z,1,,31,21,21,69,0,0,0,0,0
-20200404,MS,1455,5133,,,436,,,,,,,4/3/2020 19:00,0b1a755461d8dbbfbd6b60af41d197aae48bcf6e,2020-04-04T20:00:00Z,35,436,6588,6588,6588,28,6,16,380,97,477
-20200404,MT,265,5912,,,24,,,,,,,4/4/2020 10:00,a75df2672451c8a712f0698a82dffda8d7585f74,2020-04-04T20:00:00Z,5,24,6177,6177,6177,30,0,0,579,22,601
-20200404,NC,2402,36371,,271,,,,,,,,4/4/2020 11:00,27eeb2e5190b6ecc8d94f644fbf3e1051d68917d,2020-04-04T20:00:00Z,24,,38773,38773,38773,37,5,0,6866,309,7175
-20200404,ND,186,6021,,,30,,,,,63,,4/4/2020 13:00,b6808f82b386d336c4bd9956e177471cbd8c434a,2020-04-04T20:00:00Z,3,30,6207,6207,6207,38,0,1,396,13,409
-20200404,NE,321,5058,10,,,,,,,,,4/4/2020 14:05,03eb42f6bde143484dd406ec7818bbd7b9bf39c8,2020-04-04T20:00:00Z,6,,5389,5379,5379,31,0,0,571,42,613
-20200404,NH,540,6965,94,,80,,,,,144,,4/3/2020 09:00,e60d5a30bce0d3e11fad0e90f8f6de2761fd6e4d,2020-04-04T20:00:00Z,7,80,7599,7505,7505,33,2,7,390,61,451
-20200404,NJ,34124,41232,,4000,,,,,,,,4/4/2020 13:00,35e7deabe92c857ecf85cd63ddbad1f018e1a5e4,2020-04-04T20:00:00Z,846,,75356,75356,75356,34,200,0,3624,4229,7853
-20200404,NM,495,15137,,41,,,,18,,26,,4/3/2020 00:00,907eea45675d766b84fe98ff833ccae12a61456f,2020-04-04T20:00:00Z,10,,15632,15632,15632,35,3,0,762,92,854
-20200404,NV,1742,14421,,,,,,,,,,4/4/2020 09:30,cb557d5f2687799be51b924074628ccb8cf6331e,2020-04-04T20:00:00Z,46,,16163,16163,16163,32,3,0,1403,228,1631
-20200404,NY,113704,169917,,15905,26383,4126,,,,10478,,4/3/2020 11:00,77df5095a55aa057b09f160c378bea0e34653af2,2020-04-04T20:00:00Z,3565,26383,283621,283621,283621,36,630,2687,12260,10841,23101
-20200404,OH,3739,38132,,,1006,,326,,,,,4/4/2020 14:00,6a711086a073d302072fdb8ce8d71cb98a3bdb6f,2020-04-04T20:00:00Z,102,1006,41871,41871,41871,39,11,111,3069,427,3496
-20200404,OK,1159,1362,,,316,,,,,,,4/4/2020 08:00,8a8c0136b4beb9aa116f44a5d940e787088f25b6,2020-04-04T20:00:00Z,42,316,2521,2521,2521,40,4,27,47,171,218
-20200404,OR,999,16535,,,239,,,38,,,,4/3/2020 12:00,b67540936a9182d4abacbe5a49e8b187025b4e06,2020-04-04T20:00:00Z,26,239,17534,17534,17534,41,4,35,0,100,100
-20200404,PA,10017,60013,,,1004,,,,,,,4/4/2020 12:00,a7f56a564c555886a32ac1ba2ad959e86ef9ac0e,2020-04-04T20:00:00Z,136,1004,70030,70030,70030,42,34,152,6318,1597,7915
-20200404,PR,452,2605,1129,,,,,,,,,4/4/2020 07:00,e728d4fbaf54f6918e7d35e8aa42c72f81b6dea9,2020-04-04T20:00:00Z,18,,4186,3057,3057,72,3,0,556,74,630
-20200404,RI,806,5584,,93,,31,,6,,35,,4/4/2020 00:00,da2363d2b55bd7c1f42766df55968321787443f6,2020-04-04T20:00:00Z,17,,6390,6390,6390,44,3,0,727,97,824
-20200404,SC,1917,16397,,,241,,,,,,,4/4/2020 15:54,1ca9db49724e4834f51e4853567108f07c6b239e,2020-04-04T20:00:00Z,40,241,18314,18314,18314,45,9,0,10956,363,11319
-20200404,SD,212,5012,1,,19,,,,,76,,4/3/2020 18:00,bb3b8304f40251ca7edf6032728d5b4897c3c0e8,2020-04-04T20:00:00Z,2,19,5225,5224,5224,46,0,2,419,25,444
-20200404,TN,3321,38070,,,311,,,,,416,,4/4/2020 15:00,2870ce4342db38bff5629f6301356eef5fa7418a,2020-04-04T20:00:00Z,43,311,41391,41391,41391,47,6,18,3298,254,3552
-20200404,TX,6110,57641,,196,,,,,,38,,4/3/2020 21:00,14744188cb506670c3664fdbaef9cff5e9887ea1,2020-04-04T20:00:00Z,105,,63751,63751,63751,48,15,0,7207,780,7987
-20200404,UT,1428,26615,,,117,,,,,,,4/4/2020 15:00,b8390dd431390bc779fb7a63231b632ff703f65c,2020-04-04T20:00:00Z,8,117,28043,28043,28043,49,1,11,3613,182,3795
-20200404,VA,2407,19145,,,390,,145,,108,,,4/3/2020 17:00,8e0a0b6f4a4bf192a7bae79149e653af570983f3,2020-04-04T20:00:00Z,52,390,21552,21552,21552,51,6,78,2152,395,2547
+20200404,MS,1455,5133,,,436,,,,,,B,4/3/2020 19:00,97dcdcef09fe306252674d70c23bfce9a9ac23c8,2020-04-04T20:00:00Z,35,436,6588,6588,6588,28,6,16,380,97,477
+20200404,MT,265,5912,,,24,,,,,,A,4/4/2020 10:00,044faefd306ec816c3d0436d152f916a19158566,2020-04-04T20:00:00Z,5,24,6177,6177,6177,30,0,0,579,22,601
+20200404,NC,2402,36371,,271,,,,,,,A,4/4/2020 11:00,b87e0be3398cd0bdf787bebd5bb44da0752e3e2c,2020-04-04T20:00:00Z,24,,38773,38773,38773,37,5,0,6866,309,7175
+20200404,ND,186,6021,,,30,,,,,63,B,4/4/2020 13:00,8da85757012c4347dbe4cd22c808710dbedd267c,2020-04-04T20:00:00Z,3,30,6207,6207,6207,38,0,1,396,13,409
+20200404,NE,321,5058,10,,,,,,,,A,4/4/2020 14:05,2910274f7e3b512c3bea20ba90901dd0e687355c,2020-04-04T20:00:00Z,6,,5389,5379,5379,31,0,0,571,42,613
+20200404,NH,540,6965,94,,80,,,,,144,B,4/3/2020 09:00,dd048a249ff2b83609756acb538158dcfbd6da93,2020-04-04T20:00:00Z,7,80,7599,7505,7505,33,2,7,390,61,451
+20200404,NJ,34124,41232,,4000,,,,,,,A,4/4/2020 13:00,31a1d627377614822cefe4ead3b8258cdfc02f88,2020-04-04T20:00:00Z,846,,75356,75356,75356,34,200,0,3624,4229,7853
+20200404,NM,495,15137,,41,,,,18,,26,A,4/3/2020 00:00,fa53c21b5e991e4bbb83336d4e548cccc74b8c65,2020-04-04T20:00:00Z,10,,15632,15632,15632,35,3,0,762,92,854
+20200404,NV,1742,14421,,,,,,,,,A,4/4/2020 09:30,e4362847a1a965aa8c82c9037b88d938bffba591,2020-04-04T20:00:00Z,46,,16163,16163,16163,32,3,0,1403,228,1631
+20200404,NY,113704,169917,,15905,26383,4126,,,,10478,A,4/3/2020 11:00,529325eba58201a58de23fa068761d435b790b0b,2020-04-04T20:00:00Z,3565,26383,283621,283621,283621,36,630,2687,12260,10841,23101
+20200404,OH,3739,38132,,,1006,,326,,,,B,4/4/2020 14:00,47c51d643a7ddf21a8b2cb82f67e5dea1cbe9106,2020-04-04T20:00:00Z,102,1006,41871,41871,41871,39,11,111,3069,427,3496
+20200404,OK,1159,1362,,,316,,,,,,B,4/4/2020 08:00,391606bf115a79162ec47b905f42b59b76eba267,2020-04-04T20:00:00Z,42,316,2521,2521,2521,40,4,27,47,171,218
+20200404,OR,999,16535,,,239,,,38,,,A,4/3/2020 12:00,6087d36677778a3083d557074042f7129b3240a1,2020-04-04T20:00:00Z,26,239,17534,17534,17534,41,4,35,0,100,100
+20200404,PA,10017,60013,,,1004,,,,,,A,4/4/2020 12:00,77f373dd0f26ffa07c93d6df87ad442d2304a309,2020-04-04T20:00:00Z,136,1004,70030,70030,70030,42,34,152,6318,1597,7915
+20200404,PR,452,2605,1129,,,,,,,,A,4/4/2020 07:00,763d733c37c66c62e524a942e7affd78d3fd6f32,2020-04-04T20:00:00Z,18,,4186,3057,3057,72,3,0,556,74,630
+20200404,RI,806,5584,,93,,31,,6,,35,B,4/4/2020 00:00,c017a70ce9b7ff546280f48b68c65a2d4cc41cee,2020-04-04T20:00:00Z,17,,6390,6390,6390,44,3,0,727,97,824
+20200404,SC,1917,16397,,,241,,,,,,B,4/4/2020 15:54,f77e7b39eabe76cf4167803caf243ccdfb46d4b5,2020-04-04T20:00:00Z,40,241,18314,18314,18314,45,9,0,10956,363,11319
+20200404,SD,212,5012,1,,19,,,,,76,A,4/3/2020 18:00,764ec8fd92e7c32ef3aeb292288e68fab496d074,2020-04-04T20:00:00Z,2,19,5225,5224,5224,46,0,2,419,25,444
+20200404,TN,3321,38070,,,311,,,,,416,A,4/4/2020 15:00,52a9b2c2646f588f2bf597067d54cab32b8203d0,2020-04-04T20:00:00Z,43,311,41391,41391,41391,47,6,18,3298,254,3552
+20200404,TX,6110,57641,,196,,,,,,38,A,4/3/2020 21:00,711655dbce2d14b472a5a6d8a1585bc44df2b6d1,2020-04-04T20:00:00Z,105,,63751,63751,63751,48,15,0,7207,780,7987
+20200404,UT,1428,26615,,,117,,,,,,A,4/4/2020 15:00,3f37cd78243dea5957484ea7bd96aa7e609c2095,2020-04-04T20:00:00Z,8,117,28043,28043,28043,49,1,11,3613,182,3795
+20200404,VA,2407,19145,,,390,,145,,108,,A,4/3/2020 17:00,ea58eb5c5ad3b40cf5f21756c1a4811ae6a3aa34,2020-04-04T20:00:00Z,52,390,21552,21552,21552,51,6,78,2152,395,2547
 20200404,VI,40,184,42,,,,,,,34,,4/3/2020 23:30,74ac2ec1cfafa3cf13ad3459533a021f61f1627e,2020-04-04T20:00:00Z,,,266,224,224,78,0,0,30,2,32
-20200404,VT,461,5383,,29,45,,,,,15,,4/4/2020 01:00,0e631fd70150a9a0acdb26b03a69b4be52b85d40,2020-04-04T20:00:00Z,20,45,5844,5844,5844,50,3,0,544,72,616
-20200404,WA,7792,93529,,574,,174,,,,,,4/3/2020 18:55,26ea84d80e7ec83dc5a11b3fb50282c7470efbb7,2020-04-04T20:00:00Z,365,,101321,101321,101321,53,27,0,2345,368,2713
-20200404,WI,2112,23859,,,588,,,,,,,4/4/2020 04:00,276161e760d1f349ea458f1c35e37ebc1929e503,2020-04-04T20:00:00Z,56,588,25971,25971,25971,55,19,101,1482,200,1682
-20200404,WV,282,7404,,,,,,,,,,4/4/2020 10:00,d9154c0d680bde4bc219b1b93e221af1f6d34332,2020-04-04T20:00:00Z,2,,7686,7686,7686,54,0,0,1274,45,1319
-20200404,WY,187,2945,,,23,,,,,49,,4/4/2020 09:49,7bfba1583e7bf5e78b5338ba91cf62102373abb8,2020-04-04T20:00:00Z,0,23,3132,3132,3132,56,0,2,241,25,266
-20200403,AK,157,5859,,,15,,,,,,,4/3/2020 16:00,1211409fef1c8173882347e9d301e43ddf4756be,2020-04-03T20:00:00Z,3,15,6016,6016,6016,02,0,6,980,14,994
-20200403,AL,1432,8187,,,,,,,,,,4/3/2020 00:00,1cc0d15c48fd624bcda0a5718256e933ae73f060,2020-04-03T20:00:00Z,35,,9619,9619,9619,01,3,0,684,199,883
-20200403,AR,704,8995,,71,105,,,26,39,60,,4/3/2020 16:21,0ef9f365d496e7e89a3a24c11095e0c73f274802,2020-04-03T20:00:00Z,12,105,9699,9699,9699,05,0,5,1115,61,1176
+20200404,VT,461,5383,,29,45,,,,,15,A,4/4/2020 01:00,b73726ad124546fc390ee1482f11616a0cb4a297,2020-04-04T20:00:00Z,20,45,5844,5844,5844,50,3,0,544,72,616
+20200404,WA,7792,93529,,574,,174,,,,,A,4/3/2020 18:55,9ff272543614d03a86eff6a19bb743157b9c164c,2020-04-04T20:00:00Z,365,,101321,101321,101321,53,27,0,2345,368,2713
+20200404,WI,2112,23859,,,588,,,,,,A,4/4/2020 04:00,71878794afe1c385d43ec1e5588085c7a090510c,2020-04-04T20:00:00Z,56,588,25971,25971,25971,55,19,101,1482,200,1682
+20200404,WV,282,7404,,,,,,,,,B,4/4/2020 10:00,fe9add69424023b10603eaf7a98d186073d4af2c,2020-04-04T20:00:00Z,2,,7686,7686,7686,54,0,0,1274,45,1319
+20200404,WY,187,2945,,,23,,,,,49,A,4/4/2020 09:49,d10d136eb59f137cd10cc1c3eeb7cfd73849db79,2020-04-04T20:00:00Z,0,23,3132,3132,3132,56,0,2,241,25,266
+20200403,AK,157,5859,,,15,,,,,,A,4/3/2020 16:00,17423669083906c2d217b4cf484d4aa817be4bdd,2020-04-03T20:00:00Z,3,15,6016,6016,6016,02,0,6,980,14,994
+20200403,AL,1432,8187,,,,,,,,,B,4/3/2020 00:00,76aea56de3f6416171223dfa66dff22097912053,2020-04-03T20:00:00Z,35,,9619,9619,9619,01,3,0,684,199,883
+20200403,AR,704,8995,,71,105,,,26,39,60,A,4/3/2020 16:21,cc6edd41b1349527e6d2c7499972656627f69c60,2020-04-03T20:00:00Z,12,105,9699,9699,9699,05,0,5,1115,61,1176
 20200403,AS,0,3,2,,,,,,,,,3/30/2020 23:00,b56b53719ad6111ea1982c73cb83f6c0d8855de8,2020-04-03T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200403,AZ,1769,22904,,,,,,,,,,4/3/2020 00:00,40abfea4d7960ea5cb9e26022d71e6523324ddb2,2020-04-03T20:00:00Z,41,,24673,24673,24673,04,9,0,1793,171,1964
-20200403,CA,10701,24599,59500,2188,,901,,,,,,4/2/2020 00:00,30307e64463da4dde0599007a6fb53d0a0793bf5,2020-04-03T20:00:00Z,237,,94800,35300,35300,06,34,0,790,1510,2300
-20200403,CO,3728,16683,,739,710,,,,,,,4/2/2020 18:00,2fc2f668bc0466e5a17276ef139c89ed5a6e362c,2020-04-03T20:00:00Z,97,710,20411,20411,20411,08,17,90,1380,386,1766
-20200403,CT,4914,15101,,909,,,,,,,,4/3/2020 15:30,bbd4121aa495cc66718cd3dceab41ecaba9a97c9,2020-04-03T20:00:00Z,131,,20015,20015,20015,09,19,0,625,1090,1715
-20200403,DC,757,4827,,,,,,,,206,,4/3/2020 00:00,26a4c584abc36deacfe6ed5d7f313ce63c38e499,2020-04-03T20:00:00Z,15,,5584,5584,5584,11,3,0,410,104,514
-20200403,DE,450,4995,,63,,,,,,71,,4/3/2020 00:00,963b83e8182e34b0313b85fdccf2cc98c20ca2f2,2020-04-03T20:00:00Z,14,,5445,5445,5445,10,2,0,429,57,486
-20200403,FL,9585,82137,1225,,1287,,,,,,,4/3/2020 11:30,41fa3439516c8956f2cb34b6eb7cdc9686fd135d,2020-04-03T20:00:00Z,163,1287,92947,91722,91722,12,35,164,12851,1575,14426
-20200403,GA,5831,19434,,,1158,,,,,,,4/3/2020 11:28,f9a207a71fe91a98a6c8cb908ee256dbdbd982ca,2020-04-03T20:00:00Z,184,1158,25265,25265,25265,13,21,102,1825,483,2308
+20200403,AZ,1769,22904,,,,,,,,,B,4/3/2020 00:00,940378aae1e23963f9be186131b3c99c0409e0a7,2020-04-03T20:00:00Z,41,,24673,24673,24673,04,9,0,1793,171,1964
+20200403,CA,10701,24599,59500,2188,,901,,,,,B,4/2/2020 00:00,70e3b5dd58bca1b77891541196c6d761509b1406,2020-04-03T20:00:00Z,237,,94800,35300,35300,06,34,0,790,1510,2300
+20200403,CO,3728,16683,,739,710,,,,,,A,4/2/2020 18:00,58e98e3ff714fc8500b2f56137244e7a0d59fd6c,2020-04-03T20:00:00Z,97,710,20411,20411,20411,08,17,90,1380,386,1766
+20200403,CT,4914,15101,,909,,,,,,,A,4/3/2020 15:30,70a55e453264d436d54fb9a2e343f88f9b6acf36,2020-04-03T20:00:00Z,131,,20015,20015,20015,09,19,0,625,1090,1715
+20200403,DC,757,4827,,,,,,,,206,A,4/3/2020 00:00,3ea285daa9eae202872a1d444f0983e2db2bc4ff,2020-04-03T20:00:00Z,15,,5584,5584,5584,11,3,0,410,104,514
+20200403,DE,450,4995,,63,,,,,,71,C,4/3/2020 00:00,cb4dfe887862d01431f4cd7bf253c77deb0cc681,2020-04-03T20:00:00Z,14,,5445,5445,5445,10,2,0,429,57,486
+20200403,FL,9585,82137,1225,,1287,,,,,,A,4/3/2020 11:30,2907c9d11f9d860cd58f5efdab07fdd3d930c23a,2020-04-03T20:00:00Z,163,1287,92947,91722,91722,12,35,164,12851,1575,14426
+20200403,GA,5831,19434,,,1158,,,,,,A,4/3/2020 11:28,10a2b225c2047201ac723e2f8eb885ea11427862,2020-04-03T20:00:00Z,184,1158,25265,25265,25265,13,21,102,1825,483,2308
 20200403,GU,84,459,,19,,2,,,,14,,4/3/2020 09:45,25c323e727114df3e52243dc57256fd73114f9c7,2020-04-03T20:00:00Z,4,,543,543,543,66,1,0,17,2,19
-20200403,HI,285,10206,,,15,,6,,,72,,4/2/2020 18:00,52f7972b53c285bab125208e77338e88f83dbc53,2020-04-03T20:00:00Z,2,15,10491,10491,10491,15,1,0,0,27,27
-20200403,IA,699,8754,,80,138,,,,,188,,4/3/2020 16:30,4ee135f0b67ca920dd5b7a31b589ac433809b0af,2020-04-03T20:00:00Z,11,138,9453,9453,9453,19,0,18,700,85,785
-20200403,ID,891,7054,,,56,,7,,,,,4/2/2020 19:00,928be0e340e0d8709921f3ba1d8c62718324a568,2020-04-03T20:00:00Z,9,56,7945,7945,7945,16,0,7,441,222,663
-20200403,IL,8904,39144,,,,,,,,,,4/3/2020 00:00,d88a5f13d4420c96a0563aeca015b8454fb17395,2020-04-03T20:00:00Z,210,,48048,48048,48048,17,53,0,3183,1209,4392
-20200403,IN,3437,14398,,,,,,,,,,4/2/2020 23:59,1dd50e0479a45ac511ad7be292ad61a1394138bd,2020-04-03T20:00:00Z,102,,17835,17835,17835,18,24,0,1152,398,1550
-20200403,KS,620,6454,,,151,,,,,,,4/3/2020 12:00,ed872ead412101c76de1d62659871d142f454a79,2020-04-03T20:00:00Z,17,151,7074,7074,7074,20,4,13,395,68,463
-20200403,KY,770,12034,,,,,,,,,,4/2/2020 17:00,f30cae7abb02f939dd65bcbf63b09081f16f501e,2020-04-03T20:00:00Z,31,,12804,12804,12804,21,11,0,4814,90,4904
-20200403,LA,10297,43348,,1707,,,,535,,,,4/3/2020 13:00,35a05431439d60cc72b34582a1cbeedfe35e762f,2020-04-03T20:00:00Z,370,,53645,53645,53645,22,60,0,1412,1147,2559
-20200403,MA,10303,52685,,,966,,,,,,,4/3/2020 12:30,d92c6fc1b69099c0b592a03d64680b1bb5d2c9d5,2020-04-03T20:00:00Z,265,966,62988,62988,62988,25,36,153,4918,1436,6354
-20200403,MD,2758,20932,,,664,,,,,159,,4/3/2020 10:00,6a62f5f65e05e182fd2be3722df0ca6e9d7d8734,2020-04-03T20:00:00Z,42,664,23690,23690,23690,24,6,82,2042,427,2469
-20200403,ME,432,6088,,,75,,,,,113,,4/3/2020 12:00,8703a61c13d507e377511baa02a8ad859f1392f2,2020-04-03T20:00:00Z,9,75,6520,6520,6520,23,2,7,0,56,56
-20200403,MI,15252,33670,,,,,,,,56,,4/3/2020 11:00,70479ba2cf3cb1cc19c1b1a9e9f081604ff7098f,2020-04-03T20:00:00Z,479,,48922,48922,48922,26,62,0,3302,1135,4437
-20200403,MN,789,23438,,86,156,40,40,,,,,4/2/2020 17:00,91bb4ed33d235dd3a667b73dbe20071fb253f013,2020-04-03T20:00:00Z,22,156,24227,24227,24227,27,4,18,1786,47,1833
-20200403,MO,2113,19357,,,,,,,,,,4/3/2020 15:00,d1a9179ba221ab318f86c45831a398d42d258e09,2020-04-03T20:00:00Z,19,,21470,21470,21470,29,0,0,1508,279,1787
+20200403,HI,285,10206,,,15,,6,,,72,A,4/2/2020 18:00,9fa30a00486ab35051c1c4c1eed762fe877c1015,2020-04-03T20:00:00Z,2,15,10491,10491,10491,15,1,0,0,27,27
+20200403,IA,699,8754,,80,138,,,,,188,C,4/3/2020 16:30,7ec6ebd16a1010f320439420def9566ab267c7c6,2020-04-03T20:00:00Z,11,138,9453,9453,9453,19,0,18,700,85,785
+20200403,ID,891,7054,,,56,,7,,,,A,4/2/2020 19:00,e7da8ab9143c8c3161be6301ae79d8f4ef1e2836,2020-04-03T20:00:00Z,9,56,7945,7945,7945,16,0,7,441,222,663
+20200403,IL,8904,39144,,,,,,,,,A,4/3/2020 00:00,0b2cef0dd78d22ac1c8abca15a1b4820f376ab10,2020-04-03T20:00:00Z,210,,48048,48048,48048,17,53,0,3183,1209,4392
+20200403,IN,3437,14398,,,,,,,,,B,4/2/2020 23:59,d1821aafae6dc70b91598705334f57816e852905,2020-04-03T20:00:00Z,102,,17835,17835,17835,18,24,0,1152,398,1550
+20200403,KS,620,6454,,,151,,,,,,B,4/3/2020 12:00,9a79bab996650d6230588741c888a7123ae9e692,2020-04-03T20:00:00Z,17,151,7074,7074,7074,20,4,13,395,68,463
+20200403,KY,770,12034,,,,,,,,,A,4/2/2020 17:00,71360df79d4183efe78dbbf74b7f08d20e563df7,2020-04-03T20:00:00Z,31,,12804,12804,12804,21,11,0,4814,90,4904
+20200403,LA,10297,43348,,1707,,,,535,,,A,4/3/2020 13:00,91fb339619b9cebe5ad540b64030f50d18ed6008,2020-04-03T20:00:00Z,370,,53645,53645,53645,22,60,0,1412,1147,2559
+20200403,MA,10303,52685,,,966,,,,,,B,4/3/2020 12:30,00f02e532d9b4e61f24a257d33891b5c3275589b,2020-04-03T20:00:00Z,265,966,62988,62988,62988,25,36,153,4918,1436,6354
+20200403,MD,2758,20932,,,664,,,,,159,A,4/3/2020 10:00,1f1ec05c4dd356e3a5c5f05128171f4edc6668aa,2020-04-03T20:00:00Z,42,664,23690,23690,23690,24,6,82,2042,427,2469
+20200403,ME,432,6088,,,75,,,,,113,A,4/3/2020 12:00,ff7ce1cb02ed3bf2b85c24bc2c7f8b6bc59edcd8,2020-04-03T20:00:00Z,9,75,6520,6520,6520,23,2,7,0,56,56
+20200403,MI,15252,33670,,,,,,,,56,B,4/3/2020 11:00,c166ae553d8969b34d5da144e5365b43525739e7,2020-04-03T20:00:00Z,479,,48922,48922,48922,26,62,0,3302,1135,4437
+20200403,MN,789,23438,,86,156,40,40,,,,A,4/2/2020 17:00,e85961bd1e98dbd903c152397ee2815f260dfcb4,2020-04-03T20:00:00Z,22,156,24227,24227,24227,27,4,18,1786,47,1833
+20200403,MO,2113,19357,,,,,,,,,C,4/3/2020 15:00,24e19de34286327f54180e306b39fc8c56f1ee3e,2020-04-03T20:00:00Z,19,,21470,21470,21470,29,0,0,1508,279,1787
 20200403,MP,8,13,10,,,,,,,,,4/2/2020 18:30,af45c500ab63a0a790b1a8843da8df48052d76cd,2020-04-03T20:00:00Z,1,,31,21,21,69,0,0,0,0,0
-20200403,MS,1358,4753,,,420,,,,,,,4/2/2020 19:00,eb6f9ccfd4c206e955e8faee33a5f72a626a75ee,2020-04-03T20:00:00Z,29,420,6111,6111,6111,28,3,60,0,181,181
-20200403,MT,243,5333,,,24,,,,,,,4/3/2020 10:00,3bc1cbc8bc5e7fbf93c20415902fa5a8ca248163,2020-04-03T20:00:00Z,5,24,5576,5576,5576,30,0,4,240,16,256
-20200403,NC,2093,29505,,184,,,,,,,,4/3/2020 13:55,0b95497cb90f9a36b72c903a7fd7e9c835ecebe0,2020-04-03T20:00:00Z,19,,31598,31598,31598,37,3,0,2683,236,2919
-20200403,ND,173,5625,,,29,,,,,55,,4/3/2020 13:50,1018f11da0c2a3c0f810fae10ebc344bd95c8d6c,2020-04-03T20:00:00Z,3,29,5798,5798,5798,38,0,1,804,14,818
-20200403,NE,279,4487,11,,,,,,,,,4/3/2020 13:50,218f73db4ea2c1ca4dd75685d5c72ce11e7c5a4c,2020-04-03T20:00:00Z,6,,4777,4766,4766,31,1,0,509,33,542
-20200403,NH,479,6575,114,,73,,,,,101,,4/2/2020 09:00,c541f02470b246754ddce8a49a107ee23f87f035,2020-04-03T20:00:00Z,5,73,7168,7054,7054,33,1,15,497,64,561
-20200403,NJ,29895,37608,,3016,,,,,,,,4/3/2020 13:00,7b6d13f25f23927dbff12521a77f4aac93668e02,2020-04-03T20:00:00Z,646,,67503,67503,67503,34,109,0,4088,4305,8393
-20200403,NM,403,14375,,31,,,,,,26,,4/2/2020 00:00,a35fab6dc9834f2047c4c236829e682ad108dd8f,2020-04-03T20:00:00Z,7,,14778,14778,14778,35,1,0,727,40,767
-20200403,NV,1514,13018,,,,,,,,,,4/3/2020 09:30,6d88ecebcf63f5e4a499114694d958cf111c4283,2020-04-03T20:00:00Z,43,,14532,14532,14532,32,5,0,430,56,486
-20200403,NY,102863,157657,,14810,23696,3731,,,,8886,,4/3/2020 11:00,522ead86644f5a78d58801e10cbcca15adb82bde,2020-04-03T20:00:00Z,2935,23696,260520,260520,260520,36,562,2879,11073,10482,21555
-20200403,OH,3312,35063,,,895,,288,,,,,4/3/2020 14:00,4a1a654005a43ff7823e3d2b77ca9b3a606b3190,2020-04-03T20:00:00Z,91,895,38375,38375,38375,39,10,93,3047,410,3457
-20200403,OK,988,1315,,171,289,123,,,,383,,4/3/2020 08:00,094aeeb79182b6bc600cba7c59dc1d1d6757902a,2020-04-03T20:00:00Z,38,289,2303,2303,2303,40,4,32,50,109,159
-20200403,OR,899,16535,,188,204,,,38,,,,4/2/2020 11:00,43078ddac52e1ef288ca017683c1d221a18c2b2d,2020-04-03T20:00:00Z,22,204,17434,17434,17434,41,1,16,1276,73,1349
-20200403,PA,8420,53695,,,852,,,,,,,4/3/2020 12:00,ea8b0cff4b2bf39ba6e12428380e43241406531f,2020-04-03T20:00:00Z,102,852,62115,62115,62115,42,12,122,5997,1404,7401
-20200403,PR,378,2049,1055,,,,,,,,,4/3/2020 07:00,1da6a954f0c47b5aa30fb526693915949d004355,2020-04-03T20:00:00Z,15,,3482,2427,2427,72,3,0,445,62,507
-20200403,RI,709,4857,,77,,14,,6,,35,,4/3/2020 00:00,74fa1e6c49bfa69a5c39d5fe2a554d332e51ac15,2020-04-03T20:00:00Z,14,,5566,5566,5566,44,2,0,445,52,497
-20200403,SC,1554,5441,,,241,,,,,,,4/2/2020 16:04,b1ce419413f8d7c17ce66752e341e9d3464375cd,2020-04-03T20:00:00Z,31,241,6995,6995,6995,45,0,-655,0,0,0
-20200403,SD,187,4593,3,,17,,,,,69,,4/3/2020 13:21,d71e8b2b3b29b78fecb3aa4b3b9a937990e08248,2020-04-03T20:00:00Z,2,17,4783,4780,4780,46,0,0,376,22,398
-20200403,TN,3067,34772,,,293,,,,,248,,4/3/2020 15:00,e20462ee1e528f0ab8974561c2fbd92bc95a26e3,2020-04-03T20:00:00Z,37,293,37839,37839,37839,47,5,30,3006,222,3228
-20200403,TX,5330,50434,,196,,,,,,38,,4/2/2020 21:00,c011aecfd30196d7966fb05b0c0aaa6d168ae099,2020-04-03T20:00:00Z,90,,55764,55764,55764,48,20,0,4424,661,5085
-20200403,UT,1246,23002,,,106,,,,,,,4/3/2020 15:00,0abfc16994687bf6fc53ebd1e05f6325bfb11427,2020-04-03T20:00:00Z,7,106,24248,24248,24248,49,0,6,2847,172,3019
-20200403,VA,2012,16993,,,312,,145,,108,,,4/3/2020 09:00,ec37b0e524aa8281a668d9ccb4b91c1cfb239f9d,2020-04-03T20:00:00Z,46,312,19005,19005,19005,51,5,7,1110,306,1416
+20200403,MS,1358,4753,,,420,,,,,,B,4/2/2020 19:00,ef6d6250f891f2f7b9579b146fce35d95d4adba4,2020-04-03T20:00:00Z,29,420,6111,6111,6111,28,3,60,0,181,181
+20200403,MT,243,5333,,,24,,,,,,A,4/3/2020 10:00,b74aa36eedee733ed53a9a8a430d7cbc7b8c09be,2020-04-03T20:00:00Z,5,24,5576,5576,5576,30,0,4,240,16,256
+20200403,NC,2093,29505,,184,,,,,,,A,4/3/2020 13:55,93d44ae84523393ea79d247c465de8d38588b236,2020-04-03T20:00:00Z,19,,31598,31598,31598,37,3,0,2683,236,2919
+20200403,ND,173,5625,,,29,,,,,55,B,4/3/2020 13:50,c617c2d3b8b1812d6033b1ca56ebbbaed5d4af38,2020-04-03T20:00:00Z,3,29,5798,5798,5798,38,0,1,804,14,818
+20200403,NE,279,4487,11,,,,,,,,A,4/3/2020 13:50,3e6c4ef3a306e2c09bd10d96400a042076db7c9b,2020-04-03T20:00:00Z,6,,4777,4766,4766,31,1,0,509,33,542
+20200403,NH,479,6575,114,,73,,,,,101,B,4/2/2020 09:00,725ffa5c67f3e07c88d4c45f277990868020edd4,2020-04-03T20:00:00Z,5,73,7168,7054,7054,33,1,15,497,64,561
+20200403,NJ,29895,37608,,3016,,,,,,,A,4/3/2020 13:00,00547937bc069f28878b1304cf91068be67752a3,2020-04-03T20:00:00Z,646,,67503,67503,67503,34,109,0,4088,4305,8393
+20200403,NM,403,14375,,31,,,,,,26,A,4/2/2020 00:00,4480f4d342f609ad33838dc3d0e03fcf70d15c08,2020-04-03T20:00:00Z,7,,14778,14778,14778,35,1,0,727,40,767
+20200403,NV,1514,13018,,,,,,,,,A,4/3/2020 09:30,e7f36731071c8e0ba8e0fc36209cc709f384cb1c,2020-04-03T20:00:00Z,43,,14532,14532,14532,32,5,0,430,56,486
+20200403,NY,102863,157657,,14810,23696,3731,,,,8886,A,4/3/2020 11:00,f6cddb01ff600916147dbbb6fe35cfd9c22409d1,2020-04-03T20:00:00Z,2935,23696,260520,260520,260520,36,562,2879,11073,10482,21555
+20200403,OH,3312,35063,,,895,,288,,,,B,4/3/2020 14:00,ea2bf2d723b66735545196a364c30165eee97d02,2020-04-03T20:00:00Z,91,895,38375,38375,38375,39,10,93,3047,410,3457
+20200403,OK,988,1315,,171,289,123,,,,383,B,4/3/2020 08:00,4481825db7c63f757ee00835b2c09f076307d233,2020-04-03T20:00:00Z,38,289,2303,2303,2303,40,4,32,50,109,159
+20200403,OR,899,16535,,188,204,,,38,,,A,4/2/2020 11:00,34d839252b2282b116ff49e00d7eb13c4060177d,2020-04-03T20:00:00Z,22,204,17434,17434,17434,41,1,16,1276,73,1349
+20200403,PA,8420,53695,,,852,,,,,,A,4/3/2020 12:00,a87c583c1d2866402e86cb8f73bb2374359a6405,2020-04-03T20:00:00Z,102,852,62115,62115,62115,42,12,122,5997,1404,7401
+20200403,PR,378,2049,1055,,,,,,,,A,4/3/2020 07:00,555f417361ab7c27ef5ec784794386a274013bdc,2020-04-03T20:00:00Z,15,,3482,2427,2427,72,3,0,445,62,507
+20200403,RI,709,4857,,77,,14,,6,,35,B,4/3/2020 00:00,409a564b5aa4780b7d370f68c953eeb062d20e17,2020-04-03T20:00:00Z,14,,5566,5566,5566,44,2,0,445,52,497
+20200403,SC,1554,5441,,,241,,,,,,B,4/2/2020 16:04,c18630a791c321f250b23352788afcea760d128c,2020-04-03T20:00:00Z,31,241,6995,6995,6995,45,0,0,0,0,0
+20200403,SD,187,4593,3,,17,,,,,69,A,4/3/2020 13:21,2bf2b04a61596cfe07afd86eeaf0d8a43e9f51ad,2020-04-03T20:00:00Z,2,17,4783,4780,4780,46,0,0,376,22,398
+20200403,TN,3067,34772,,,293,,,,,248,A,4/3/2020 15:00,39a4b9e9df186bdfeb4584f465c3f08adcac8a33,2020-04-03T20:00:00Z,37,293,37839,37839,37839,47,5,30,3006,222,3228
+20200403,TX,5330,50434,,196,,,,,,38,A,4/2/2020 21:00,f87fe9a1e7e04e6840c7f1e73155acf02fb15641,2020-04-03T20:00:00Z,90,,55764,55764,55764,48,20,0,4424,661,5085
+20200403,UT,1246,23002,,,106,,,,,,A,4/3/2020 15:00,63718cc39c1d610a71612f7c5268dc0dff45c303,2020-04-03T20:00:00Z,7,106,24248,24248,24248,49,0,6,2847,172,3019
+20200403,VA,2012,16993,,,312,,145,,108,,A,4/3/2020 09:00,cebef7f2e5854ef18f29e34e8334e3c7c5b70bb3,2020-04-03T20:00:00Z,46,312,19005,19005,19005,51,5,7,1110,306,1416
 20200403,VI,38,154,56,,,,,,,29,,4/3/2020 14:30,5248eed22be0ebaa00fd5240915ef781ea4fab0d,2020-04-03T20:00:00Z,,,248,192,192,78,0,0,5,5,10
-20200403,VT,389,4839,,29,45,,,,,15,,4/3/2020 13:00,dc457f76da0c00746fc8483797298902a118ccef,2020-04-03T20:00:00Z,17,45,5228,5228,5228,50,0,0,128,51,179
-20200403,WA,7424,91184,,,,,,,,,,4/2/2020 02:59,919d3214d834678fc07280092d37e9403f6aec04,2020-04-03T20:00:00Z,338,,98608,98608,98608,53,28,0,4295,531,4826
-20200403,WI,1912,22377,,,487,,,,,,,4/3/2020 04:00,bb6e570f405461f176258e1bd23d884c0f7aff85,2020-04-03T20:00:00Z,37,487,24289,24289,24289,55,6,26,2060,182,2242
-20200403,WV,237,6130,,,1,,,,,,,4/3/2020 10:00,86a38f37228482e0eacba5a115af5828930dead8,2020-04-03T20:00:00Z,2,1,6367,6367,6367,54,0,0,854,20,874
-20200403,WY,162,2704,,,21,,,,,37,,4/3/2020 10:42,a1dcddaaec5dc5caca66bc94d24a723f46de3d92,2020-04-03T20:00:00Z,0,21,2866,2866,2866,56,0,2,265,12,277
-20200402,AK,143,4879,,,9,,,,,,,4/1/2020 21:00,becfe2afafe9e7d9bfcc236000e6bcc8a55e596f,2020-04-02T20:00:00Z,3,9,5022,5022,5022,02,0,0,409,10,419
-20200402,AL,1233,7503,,,,,,,,,,4/2/2020 00:00,dc3e25296f7c4bbdd4ab0eded23da382154fa7ed,2020-04-02T20:00:00Z,32,,8736,8736,8736,01,6,0,806,156,962
-20200402,AR,643,7880,,66,100,,,23,32,47,,4/2/2020 14:45,7201d58800b550c93812af99aaa4ac50752f8298,2020-04-02T20:00:00Z,12,100,8523,8523,8523,05,2,10,526,59,585
+20200403,VT,389,4839,,29,45,,,,,15,A,4/3/2020 13:00,3239302215b7dc3a7d6107bf14cd0d9eec8fd3ef,2020-04-03T20:00:00Z,17,45,5228,5228,5228,50,0,0,128,51,179
+20200403,WA,7424,91184,,,,,,,,,A,4/2/2020 02:59,5ff0bdc9131dee66815d7e50cea380ba8e5d3cde,2020-04-03T20:00:00Z,338,,98608,98608,98608,53,28,0,4295,531,4826
+20200403,WI,1912,22377,,,487,,,,,,A,4/3/2020 04:00,528a51f36f9758064adfb4e3157dd3d26afdee45,2020-04-03T20:00:00Z,37,487,24289,24289,24289,55,6,26,2060,182,2242
+20200403,WV,237,6130,,,1,,,,,,B,4/3/2020 10:00,04a4990baf9d1384f71c86e4fb6b56e27fab5d1c,2020-04-03T20:00:00Z,2,1,6367,6367,6367,54,0,0,854,20,874
+20200403,WY,162,2704,,,21,,,,,37,A,4/3/2020 10:42,1bbecda6c7080afe8943746787c0f2a296071fd9,2020-04-03T20:00:00Z,0,21,2866,2866,2866,56,0,2,265,12,277
+20200402,AK,143,4879,,,9,,,,,,A,4/1/2020 21:00,3f21e74fd58b00709088e8f3ebda6e59b11fc8e2,2020-04-02T20:00:00Z,3,9,5022,5022,5022,02,0,0,409,10,419
+20200402,AL,1233,7503,,,,,,,,,B,4/2/2020 00:00,3b7e06a8f363841e0c01239ec822fb61543caa33,2020-04-02T20:00:00Z,32,,8736,8736,8736,01,6,0,806,156,962
+20200402,AR,643,7880,,66,100,,,23,32,47,A,4/2/2020 14:45,d331f5f5e770b8b51a1388a4dd4b261bbbf02a01,2020-04-02T20:00:00Z,12,100,8523,8523,8523,05,2,10,526,59,585
 20200402,AS,0,3,2,,,,,,,,,3/30/2020 23:00,4a0b54b6fd75224215a0745b907cf10bf0420566,2020-04-02T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200402,AZ,1598,21111,,,,,,,,,,4/2/2020 00:00,f64f7f7c211189239d2bbfa11631cb0f0e4f4863,2020-04-02T20:00:00Z,32,,22709,22709,22709,04,3,0,1466,185,1651
-20200402,CA,9191,23809,59500,1922,,816,,,,,,4/2/2020 00:00,71e6e60fdd4339c8eb2198e438156345c776dd5f,2020-04-02T20:00:00Z,203,,92500,33000,33000,06,32,0,2037,1036,3073
-20200402,CO,3342,15303,,698,620,,,,,,,4/1/2020 18:00,163e99b10761b067956d5d7a2b44f326ceb84e29,2020-04-02T20:00:00Z,80,620,18645,18645,18645,08,11,111,1420,376,1796
-20200402,CT,3824,14476,,827,,,,,,,,4/2/2020 15:30,34da68138da3d16b7b14de8cad45af24ab25301c,2020-04-02T20:00:00Z,112,,18300,18300,18300,09,27,0,1433,267,1700
-20200402,DC,653,4417,,,,,,,,173,,4/2/2020 09:00,dcac2b74d005662849efbea1dbc8f282c1ddecf4,2020-04-02T20:00:00Z,12,,5070,5070,5070,11,1,0,1155,67,1222
-20200402,DE,393,4566,,56,,,,,,49,,4/2/2020 16:45,beb4ae41268baef86e9724b63c363f21d213db7a,2020-04-02T20:00:00Z,12,,4959,4959,4959,10,1,0,551,25,576
-20200402,FL,8010,69286,1285,,1123,,,,,,,4/2/2020 11:01,bcff6be0e495c47a66ca782062db6bd92de26bca,2020-04-02T20:00:00Z,128,1123,78581,77296,77296,12,41,174,9757,1055,10812
-20200402,GA,5348,17609,,,1056,,,,,,,4/2/2020 11:28,5f00eb2b4065bc5486a92a12686d62ba5e78c69a,2020-04-02T20:00:00Z,163,1056,22957,22957,22957,13,24,104,1921,710,2631
+20200402,AZ,1598,21111,,,,,,,,,B,4/2/2020 00:00,a443098b8ef46df52b605793abe87f6ad32e447f,2020-04-02T20:00:00Z,32,,22709,22709,22709,04,3,0,1466,185,1651
+20200402,CA,9191,23809,59500,1922,,816,,,,,B,4/2/2020 00:00,e32c6484d57e7ce980f2b142c2f09bac97c8c3f4,2020-04-02T20:00:00Z,203,,92500,33000,33000,06,32,0,2037,1036,3073
+20200402,CO,3342,15303,,698,620,,,,,,A,4/1/2020 18:00,25c2395b9eeec80149eb2c832db5317415e7918d,2020-04-02T20:00:00Z,80,620,18645,18645,18645,08,11,111,1420,376,1796
+20200402,CT,3824,14476,,827,,,,,,,A,4/2/2020 15:30,29e52fee167c28a28673ac46c91b95269c6c068e,2020-04-02T20:00:00Z,112,,18300,18300,18300,09,27,0,1433,267,1700
+20200402,DC,653,4417,,,,,,,,173,A,4/2/2020 09:00,d846ba02f109239c2e826e9af339d1de139b9890,2020-04-02T20:00:00Z,12,,5070,5070,5070,11,1,0,1155,67,1222
+20200402,DE,393,4566,,56,,,,,,49,C,4/2/2020 16:45,4eecaba5f7d492c15722e254d4a46aa30407e645,2020-04-02T20:00:00Z,12,,4959,4959,4959,10,1,0,551,25,576
+20200402,FL,8010,69286,1285,,1123,,,,,,A,4/2/2020 11:01,fbe2876a05e4aef34393ca2bd0cb28205b2f00b4,2020-04-02T20:00:00Z,128,1123,78581,77296,77296,12,41,174,9757,1055,10812
+20200402,GA,5348,17609,,,1056,,,,,,A,4/2/2020 11:28,9f53d712173ccf962160a10135bf4e8a093f07b5,2020-04-02T20:00:00Z,163,1056,22957,22957,22957,13,24,104,1921,710,2631
 20200402,GU,82,442,,19,,2,,,,12,,4/2/2020 08:30,7ddc2bd518463a6e94555e447d144d3ad4078bc4,2020-04-02T20:00:00Z,3,,524,524,524,66,0,0,36,5,41
-20200402,HI,258,10206,,,15,,6,,,69,,4/1/2020 18:00,de20610feb584fc7efe65bca8d49291334ed153e,2020-04-02T20:00:00Z,1,15,10464,10464,10464,15,0,2,1485,50,1535
-20200402,IA,614,8054,,74,120,,,,,46,,4/2/2020 00:00,59b363aca446dd4303023d3b1e9f48ffe8888514,2020-04-02T20:00:00Z,11,120,8668,8668,8668,19,2,21,750,65,815
-20200402,ID,669,6613,,,49,,7,,,,,4/1/2020 19:00,0b3cfd5c7dbe017bb84a92bcccbb2b1cf71bece9,2020-04-02T20:00:00Z,9,49,7282,7282,7282,16,0,3,537,144,681
-20200402,IL,7695,35961,,,,,,,,,,4/2/2020 00:00,65251bd8a622842a679a461003dc3777fc1b8e34,2020-04-02T20:00:00Z,157,,43656,43656,43656,17,16,0,2557,715,3272
-20200402,IN,3039,13246,,,,,,,,,,4/1/2020 23:59,9b573c4e8401924480d0db70a2842a549b14edba,2020-04-02T20:00:00Z,78,,16285,16285,16285,18,13,0,1436,474,1910
-20200402,KS,552,6059,,,138,,,,,,,4/2/2020 12:00,aef0d478ea7d7f3e89029be01a32f7073997bc12,2020-04-02T20:00:00Z,13,138,6611,6611,6611,20,3,24,648,70,718
-20200402,KY,680,7220,,,,,,,,,,4/1/2020 17:00,b02d76b8c9192814a5e6a6bb66c66d877ba0a0e3,2020-04-02T20:00:00Z,20,,7900,7900,7900,21,3,0,255,89,344
-20200402,LA,9150,41936,,1639,,,,507,,,,4/2/2020 13:00,2ef1887e3cf8bc3f16868227d7b8b4c520203d78,2020-04-02T20:00:00Z,310,,51086,51086,51086,22,37,0,2584,2726,5310
-20200402,MA,8867,47767,,,813,,,,,,,4/2/2020 16:00,96eda634f2a566f6a5f910b42ff0b6ee14af8923,2020-04-02T20:00:00Z,229,813,56634,56634,56634,25,42,131,3642,1228,4870
-20200402,MD,2331,18890,,,582,,,,,81,,4/2/2020 10:00,eff7f859461243f24ba3638f38d2cec8f3b2f2ad,2020-04-02T20:00:00Z,36,582,21221,21221,21221,24,5,60,1657,346,2003
-20200402,ME,376,6088,,,68,,,,,94,,4/2/2020 10:00,29ea16d731823146c62219c610ab74fec99f1709,2020-04-02T20:00:00Z,7,68,6464,6464,6464,23,0,5,0,32,32
-20200402,MI,14117,30368,,,,,,,,,,4/2/2020 11:00,2d88558278fdb944e35ca7aec435b23a25da4304,2020-04-02T20:00:00Z,417,,44485,44485,44485,26,80,0,3131,1229,4360
-20200402,MN,742,21652,,75,138,38,38,,,,,4/2/2020 12:00,a172f5bc4fc23a56af9fb5af660bfcfe4d0837e8,2020-04-02T20:00:00Z,18,138,22394,22394,22394,27,1,16,1150,53,1203
-20200402,MO,1834,17849,,,,,,,,,,4/2/2020 15:00,75905c58a64f3183d87de1fc214db684b64928cb,2020-04-02T20:00:00Z,19,,19683,19683,19683,29,1,0,2003,253,2256
+20200402,HI,258,10206,,,15,,6,,,69,A,4/1/2020 18:00,064f2535c7eac6f34e7463f011a9259e2ad9ae7b,2020-04-02T20:00:00Z,1,15,10464,10464,10464,15,0,2,1485,50,1535
+20200402,IA,614,8054,,74,120,,,,,46,C,4/2/2020 00:00,171800a2c36f1b97fb3c6bda5d89bde27e047b80,2020-04-02T20:00:00Z,11,120,8668,8668,8668,19,2,21,750,65,815
+20200402,ID,669,6613,,,49,,7,,,,A,4/1/2020 19:00,d76518f393192a28bb5bf7b3bc02107669ab7597,2020-04-02T20:00:00Z,9,49,7282,7282,7282,16,0,3,537,144,681
+20200402,IL,7695,35961,,,,,,,,,A,4/2/2020 00:00,7bfa50c82e9cadbd97ea93ad51ac207aeae11b5c,2020-04-02T20:00:00Z,157,,43656,43656,43656,17,16,0,2557,715,3272
+20200402,IN,3039,13246,,,,,,,,,B,4/1/2020 23:59,859cdd019fe61ad8a48a9cb5208227e707f34bef,2020-04-02T20:00:00Z,78,,16285,16285,16285,18,13,0,1436,474,1910
+20200402,KS,552,6059,,,138,,,,,,B,4/2/2020 12:00,05c6523583718e789d65e9d7b19ee251b9145bf2,2020-04-02T20:00:00Z,13,138,6611,6611,6611,20,3,24,648,70,718
+20200402,KY,680,7220,,,,,,,,,A,4/1/2020 17:00,f64f6dc1cd1cc7cb81f8585de7351d08722c2113,2020-04-02T20:00:00Z,20,,7900,7900,7900,21,3,0,255,89,344
+20200402,LA,9150,41936,,1639,,,,507,,,A,4/2/2020 13:00,072fc59f253ae1d4d41cc04ef94727dc761b6edd,2020-04-02T20:00:00Z,310,,51086,51086,51086,22,37,0,2584,2726,5310
+20200402,MA,8867,47767,,,813,,,,,,B,4/2/2020 16:00,52a48fa52d46911b39824b7e5ecc002cdfcd83b5,2020-04-02T20:00:00Z,229,813,56634,56634,56634,25,42,131,3642,1228,4870
+20200402,MD,2331,18890,,,582,,,,,81,A,4/2/2020 10:00,39f8d4438aafec71e5a2fcc8660fc310d7f29a16,2020-04-02T20:00:00Z,36,582,21221,21221,21221,24,5,60,1657,346,2003
+20200402,ME,376,6088,,,68,,,,,94,A,4/2/2020 10:00,2122936ed43bb34b5d6514923716d4e6b7a3608e,2020-04-02T20:00:00Z,7,68,6464,6464,6464,23,0,5,0,32,32
+20200402,MI,14117,30368,,,,,,,,,B,4/2/2020 11:00,f0064a3912bc78f616a0e7cabf175ad52168fe60,2020-04-02T20:00:00Z,417,,44485,44485,44485,26,80,0,3131,1229,4360
+20200402,MN,742,21652,,75,138,38,38,,,,A,4/2/2020 12:00,bfcb97db7faf170c44a2dc19c18d62bfe3ac9924,2020-04-02T20:00:00Z,18,138,22394,22394,22394,27,1,16,1150,53,1203
+20200402,MO,1834,17849,,,,,,,,,C,4/2/2020 15:00,9b46daae56bf71b2388a694c6f38371cd9539e66,2020-04-02T20:00:00Z,19,,19683,19683,19683,29,1,0,2003,253,2256
 20200402,MP,8,13,12,,,,,,,,,4/2/2020 03:00,d262dee2db5a69a5af72b3e987d1b6d7d3a68dbb,2020-04-02T20:00:00Z,1,,33,21,21,69,1,0,13,2,15
-20200402,MS,1177,4753,,,360,,,,,,,4/1/2020 19:00,7de2bc9e21e861cec585a100c5efd333087116fc,2020-04-02T20:00:00Z,26,360,5930,5930,5930,28,4,28,1041,104,1145
-20200402,MT,227,5093,,,20,,,,,,,4/2/2020 10:00,5dd7dff5d9c50f97d7734a2cdca02e28a8b2fab9,2020-04-02T20:00:00Z,5,20,5320,5320,5320,30,0,3,383,19,402
-20200402,NC,1857,26822,,184,,,,,,,,4/2/2020 14:00,684821001992b405a22e840fce6e9e7318a5519b,2020-04-02T20:00:00Z,16,,28679,28679,28679,37,6,0,2163,273,2436
-20200402,ND,159,4821,,,28,,,,,43,,4/2/2020 12:56,5477d4dd4bdc203597828e9ae2539db249e96c2c,2020-04-02T20:00:00Z,3,28,4980,4980,4980,38,0,5,470,17,487
-20200402,NE,246,3978,11,,,,,,,,,4/2/2020 14:00,3e3b6d6840c9fde58e6a0978a02e4056cda998fb,2020-04-02T20:00:00Z,5,,4235,4224,4224,31,1,0,503,36,539
-20200402,NH,415,6078,126,,58,,,,,91,,4/1/2020 09:00,ea14aa7737f5d1d77b2929f1f44c235fea248d20,2020-04-02T20:00:00Z,4,58,6619,6493,6493,33,0,2,93,0,93
-20200402,NJ,25590,33520,,2000,,,,,,,,4/2/2020 13:00,dd8dda1b1ee766bfc04a7eb8bddb7ba482bfcf96,2020-04-02T20:00:00Z,537,,59110,59110,59110,34,182,0,3133,3335,6468
-20200402,NM,363,13648,,31,,,,,,26,,4/1/2020 00:00,7a25a7c03350d2b5da1a5384e8c14af2557c2120,2020-04-02T20:00:00Z,6,,14011,14011,14011,35,1,0,723,48,771
-20200402,NV,1458,12588,,,,,,,,,,4/2/2020 09:30,e43158189a9bd76615f8243d2e284973ed48d317,2020-04-02T20:00:00Z,38,,14046,14046,14046,32,12,0,1069,179,1248
-20200402,NY,92381,146584,,13383,20817,3396,,,,7434,,4/2/2020 11:45,27db1204dee68cfd65f0ae5106dafc7e3dc884e0,2020-04-02T20:00:00Z,2373,20817,238965,238965,238965,36,432,2449,9416,8669,18085
-20200402,OH,2902,32016,,,802,,260,,,,,4/2/2020 14:00,ee4cd46e6806476580f8bbfb3252b9c26617275d,2020-04-02T20:00:00Z,81,802,34918,34918,34918,39,16,123,5024,355,5379
-20200402,OK,879,1265,,182,257,144,,,,,,4/1/2020 08:00,405ad39862e9faf36c057bcf9e67100a9961007e,2020-04-02T20:00:00Z,34,257,2144,2144,2144,40,4,38,17,160,177
-20200402,OR,826,15259,,134,188,,,38,,,,4/1/2020 11:00,b41adb0eda5dffbd9dd13a3efa282de264e8a49f,2020-04-02T20:00:00Z,21,188,16085,16085,16085,41,3,34,2123,90,2213
-20200402,PA,7016,47698,,,730,,,,,,,4/2/2020 12:00,da71f40fdff0117bfad1ddf8e8535150609f7fd0,2020-04-02T20:00:00Z,90,730,54714,54714,54714,42,16,110,5271,1211,6482
-20200402,PR,316,1604,1119,,,,,,,,,4/2/2020 07:00,b8e2cc0d89eb1924d04596d81c15e3708e26de5e,2020-04-02T20:00:00Z,12,,3039,1920,1920,72,1,0,195,30,225
-20200402,RI,657,4412,,72,,14,,6,,35,,4/2/2020 00:00,8263c7799aae00206e3bb723682b217c35b90e34,2020-04-02T20:00:00Z,12,,5069,5069,5069,44,2,0,581,91,672
-20200402,SC,1554,5441,,,896,,,,,,,4/2/2020 16:04,f090a206c0e7df282b1d6d4b798834817b896340,2020-04-02T20:00:00Z,31,896,6995,6995,6995,45,5,547,408,261,669
-20200402,SD,165,4217,0,,17,,,,,57,,4/1/2020 18:00,b9fb018a8ae48696feab7f56a236cad4004cc600,2020-04-02T20:00:00Z,2,17,4382,4382,4382,46,0,5,314,36,350
-20200402,TN,2845,31766,,,263,,,,,220,,4/2/2020 15:00,13cb06804d143788267045f591439ab396d7403f,2020-04-02T20:00:00Z,32,263,34611,34611,34611,47,8,63,1997,162,2159
-20200402,TX,4669,46010,,196,,,,,,38,,4/1/2020 21:00,8b5fa22e0ee914f3ddb1544511174f071e2b7fd0,2020-04-02T20:00:00Z,70,,50679,50679,50679,48,12,0,2150,672,2822
-20200402,UT,1074,20155,,,100,,,,,,,4/2/2020 15:00,8fe29b198d1918f2f2469e645737a39c956d3941,2020-04-02T20:00:00Z,7,100,21229,21229,21229,49,0,9,0,62,62
-20200402,VA,1706,15883,,246,305,,145,,108,,,4/2/2020 09:00,0bce50f64877f0f2958c7045792021534a46c482,2020-04-02T20:00:00Z,41,305,17589,17589,17589,51,7,0,2023,222,2245
+20200402,MS,1177,4753,,,360,,,,,,B,4/1/2020 19:00,c9ea4548a472a931f7884718a7d20712be4a668d,2020-04-02T20:00:00Z,26,360,5930,5930,5930,28,4,28,1041,104,1145
+20200402,MT,227,5093,,,20,,,,,,A,4/2/2020 10:00,7310cab2ca40b5c5f4095ba313ef3e1d84afd3f9,2020-04-02T20:00:00Z,5,20,5320,5320,5320,30,0,3,383,19,402
+20200402,NC,1857,26822,,184,,,,,,,A,4/2/2020 14:00,43f561371ad0486d793604e795e7ae264c086ac3,2020-04-02T20:00:00Z,16,,28679,28679,28679,37,6,0,2163,273,2436
+20200402,ND,159,4821,,,28,,,,,43,B,4/2/2020 12:56,ab24e7c794ddd424ba7f7ac8552c2bedfa5fe693,2020-04-02T20:00:00Z,3,28,4980,4980,4980,38,0,5,470,17,487
+20200402,NE,246,3978,11,,,,,,,,A,4/2/2020 14:00,7425b5da1252c2d80bbfbcac3918ca2f56b69b7c,2020-04-02T20:00:00Z,5,,4235,4224,4224,31,1,0,503,36,539
+20200402,NH,415,6078,126,,58,,,,,91,B,4/1/2020 09:00,7ff4d43b0df330efc4a0a1156547889052412ff0,2020-04-02T20:00:00Z,4,58,6619,6493,6493,33,0,2,93,0,93
+20200402,NJ,25590,33520,,2000,,,,,,,A,4/2/2020 13:00,7505425d3c40f9b2cbcb2463390ea5f85f2d3ef1,2020-04-02T20:00:00Z,537,,59110,59110,59110,34,182,0,3133,3335,6468
+20200402,NM,363,13648,,31,,,,,,26,A,4/1/2020 00:00,79c008380ad9de38f806cf5517f7d9ae025e387c,2020-04-02T20:00:00Z,6,,14011,14011,14011,35,1,0,723,48,771
+20200402,NV,1458,12588,,,,,,,,,A,4/2/2020 09:30,724e9318ff31af91a700769aaf3bb738503e33f0,2020-04-02T20:00:00Z,38,,14046,14046,14046,32,12,0,1069,179,1248
+20200402,NY,92381,146584,,13383,20817,3396,,,,7434,A,4/2/2020 11:45,775f76625647df1623092ee21c45edb479690b22,2020-04-02T20:00:00Z,2373,20817,238965,238965,238965,36,432,2449,9416,8669,18085
+20200402,OH,2902,32016,,,802,,260,,,,B,4/2/2020 14:00,7e843cc7d061c4b7e7fedf31a9175b49230e4aea,2020-04-02T20:00:00Z,81,802,34918,34918,34918,39,16,123,5024,355,5379
+20200402,OK,879,1265,,182,257,144,,,,,B,4/1/2020 08:00,3b06c6184cccbf4b151c5e9ba233d24116cb11a1,2020-04-02T20:00:00Z,34,257,2144,2144,2144,40,4,38,17,160,177
+20200402,OR,826,15259,,134,188,,,38,,,A,4/1/2020 11:00,594e3d6e968a4203f472ba01f13a1cbb4dd1008d,2020-04-02T20:00:00Z,21,188,16085,16085,16085,41,3,34,2123,90,2213
+20200402,PA,7016,47698,,,730,,,,,,A,4/2/2020 12:00,6db8179f31ce01e09fe60c7f9e80e26a41a12e15,2020-04-02T20:00:00Z,90,730,54714,54714,54714,42,16,110,5271,1211,6482
+20200402,PR,316,1604,1119,,,,,,,,A,4/2/2020 07:00,7151e39f7c099534614525db075cfcb1503885be,2020-04-02T20:00:00Z,12,,3039,1920,1920,72,1,0,195,30,225
+20200402,RI,657,4412,,72,,14,,6,,35,B,4/2/2020 00:00,179ed889c9888cfb4e7bbddfc538a9e29954e420,2020-04-02T20:00:00Z,12,,5069,5069,5069,44,2,0,581,91,672
+20200402,SC,1554,5441,,,241,,,,,,B,4/2/2020 16:04,a2ada36eced02ef0f45b0577176f8b9b9e8c8c1b,2020-04-02T20:00:00Z,31,241,6995,6995,6995,45,5,139,408,261,669
+20200402,SD,165,4217,0,,17,,,,,57,A,4/1/2020 18:00,4be9dfc1b6a6df08ee4bfefd338de9d939470c30,2020-04-02T20:00:00Z,2,17,4382,4382,4382,46,0,5,314,36,350
+20200402,TN,2845,31766,,,263,,,,,220,A,4/2/2020 15:00,298d2f4a6c07d4bdf93bab1c86f3354ac8a38023,2020-04-02T20:00:00Z,32,263,34611,34611,34611,47,8,63,1997,162,2159
+20200402,TX,4669,46010,,196,,,,,,38,A,4/1/2020 21:00,f456c71263d60aed1ff80f3a4195def2693e258b,2020-04-02T20:00:00Z,70,,50679,50679,50679,48,12,0,2150,672,2822
+20200402,UT,1074,20155,,,100,,,,,,A,4/2/2020 15:00,705e740bf7ad80fd5b0e38fe7cbf65ff486df0fd,2020-04-02T20:00:00Z,7,100,21229,21229,21229,49,0,9,0,62,62
+20200402,VA,1706,15883,,246,305,,145,,108,,A,4/2/2020 09:00,ff13ca0c32dc298e552fa7eee8a27cf0bf129da7,2020-04-02T20:00:00Z,41,305,17589,17589,17589,51,7,0,2023,222,2245
 20200402,VI,33,149,42,,,,,,,25,,4/2/2020 09:30,f1c9599204060635e564aa0a73e78f885de792ec,2020-04-02T20:00:00Z,,,224,182,182,78,0,0,23,3,26
-20200402,VT,338,4711,,29,45,,,,,15,,4/2/2020 13:00,bf9638216ca773f508a0f6b04716d74a65e6c6e3,2020-04-02T20:00:00Z,17,45,5049,5049,5049,50,1,0,537,17,554
-20200402,WA,6893,86889,,,,,,,,,,4/1/2020 20:00,b72c843850c0ca2fa4ab8204102c056a49bd931f,2020-04-02T20:00:00Z,310,,93782,93782,93782,53,28,0,4332,353,4685
-20200402,WI,1730,20317,,,461,,,,,,,4/2/2020 16:00,901aa576eb522a5290af64101977d51e75fcdec1,2020-04-02T20:00:00Z,31,461,22047,22047,22047,55,7,63,1498,180,1678
-20200402,WV,217,5276,,,1,,,,,,,4/2/2020 00:17,59a81d49db5c1b7d2c3d183a2b71cba5e314a5b2,2020-04-02T20:00:00Z,2,1,5493,5493,5493,54,1,0,892,26,918
-20200402,WY,150,2439,,,19,,,,,31,,4/2/2020 10:30,cca96ba327943b2a0369e61baeef2bae461cb34a,2020-04-02T20:00:00Z,0,19,2589,2589,2589,56,0,1,221,20,241
-20200401,AK,133,4470,,,9,,,,,,,3/31/2020 19:00,087c3c9b79a26e12ed8d34e0c5cb7f123afd2076,2020-04-01T20:00:00Z,3,9,4603,4603,4603,02,0,2,876,14,890
-20200401,AL,1077,6697,,,,,,,,,,4/1/2020 00:00,80f82903ecee465d1b154cb8d5aa0dd5e69bb4ea,2020-04-01T20:00:00Z,26,,7774,7774,7774,01,13,0,399,96,495
-20200401,AR,584,7354,,56,90,,,25,32,42,,4/1/2020 13:26,e6ee1115e7dcee1b58046f3886cecccff093f7e0,2020-04-01T20:00:00Z,10,90,7938,7938,7938,05,2,90,1395,61,1456
+20200402,VT,338,4711,,29,45,,,,,15,A,4/2/2020 13:00,12282fa7214be24211f73d87cf0bf36b11764586,2020-04-02T20:00:00Z,17,45,5049,5049,5049,50,1,0,537,17,554
+20200402,WA,6893,86889,,,,,,,,,A,4/1/2020 20:00,2d19e98cda49092a7c77d7843ce87bfa72540602,2020-04-02T20:00:00Z,310,,93782,93782,93782,53,28,0,4332,353,4685
+20200402,WI,1730,20317,,,461,,,,,,A,4/2/2020 16:00,1bc4bf65120357c73e5c47ed1139a762a2c523af,2020-04-02T20:00:00Z,31,461,22047,22047,22047,55,7,63,1498,180,1678
+20200402,WV,217,5276,,,1,,,,,,B,4/2/2020 00:17,3a14cf4894fb724bf552dbd5c57fb026ba1a2a4b,2020-04-02T20:00:00Z,2,1,5493,5493,5493,54,1,0,892,26,918
+20200402,WY,150,2439,,,19,,,,,31,A,4/2/2020 10:30,7da49893b68f8346d922f1789daa6867adbf0e45,2020-04-02T20:00:00Z,0,19,2589,2589,2589,56,0,1,221,20,241
+20200401,AK,133,4470,,,9,,,,,,A,3/31/2020 19:00,d31552858f80a7eaa2bad29d9289576c3ca106a8,2020-04-01T20:00:00Z,3,9,4603,4603,4603,02,0,2,876,14,890
+20200401,AL,1077,6697,,,,,,,,,B,4/1/2020 00:00,9380594fd805d6915d7c8ff8f1fb8d0ebcad8338,2020-04-01T20:00:00Z,26,,7774,7774,7774,01,13,0,399,96,495
+20200401,AR,584,7354,,56,90,,,25,32,42,A,4/1/2020 13:26,96ad1681cf748791eec1cdf89ef5358887582295,2020-04-01T20:00:00Z,10,90,7938,7938,7938,05,2,90,1395,61,1456
 20200401,AS,0,3,2,,,,,,,,,3/30/2020 23:00,e36331f6d7284d24e1d06bf8f91f76e577ac99bd,2020-04-01T20:00:00Z,0,,5,3,3,60,0,0,0,0,0
-20200401,AZ,1413,19645,,,,,,,,,,4/1/2020 00:00,baef93b8a429966df3f63203043b109bef69d4fc,2020-04-01T20:00:00Z,29,,21058,21058,21058,04,5,0,1563,124,1687
-20200401,CA,8155,21772,57400,1855,,774,,,,,,3/31/2020 00:00,edcc37b46bfe4764a54084af8abadbb137201d33,2020-04-01T20:00:00Z,171,,87327,29927,29927,06,18,0,0,673,673
-20200401,CO,2966,13883,,574,509,,,,,,,3/31/2020 18:00,edf5d018dd469233e352d71c60b92d1dead3098e,2020-04-01T20:00:00Z,69,509,16849,16849,16849,08,18,95,1146,339,1485
-20200401,CT,3557,13043,,766,,,,,,,,4/1/2020 13:30,ca9d13ecadef5b2017e69a51186015c97a756af7,2020-04-01T20:00:00Z,85,,16600,16600,16600,09,16,0,14,429,443
-20200401,DC,586,3262,2,,,,,,,142,,3/31/2020 21:24,e3779ec719ad0ad543af08f635069fe27908c647,2020-04-01T20:00:00Z,11,,3850,3848,3848,11,2,0,0,91,91
-20200401,DE,368,4015,,51,,,,,,49,,4/1/2020 12:30,3599ee4defdce51163a0c2491582e7ca36ec6bbc,2020-04-01T20:00:00Z,11,,4383,4383,4383,10,1,0,319,49,368
-20200401,FL,6955,59529,1235,,949,,,,,,,4/1/2020 11:30,daad218a17419990aef20a510b7e391f2889661c,2020-04-01T20:00:00Z,87,949,67719,66484,66484,12,10,126,5244,617,5861
-20200401,GA,4638,15688,,,952,,,,,,,4/1/2020 11:28,c401444fb6e25191fac37ceb59c397f091d38b6f,2020-04-01T20:00:00Z,139,952,20326,20326,20326,13,28,119,3436,709,4145
+20200401,AZ,1413,19645,,,,,,,,,B,4/1/2020 00:00,743ac005342b7e9097fa953cc61bb7318432e3ca,2020-04-01T20:00:00Z,29,,21058,21058,21058,04,5,0,1563,124,1687
+20200401,CA,8155,21772,57400,1855,,774,,,,,B,3/31/2020 00:00,880b8d3b4dd1ca8075dd9dc3b2add9938935d595,2020-04-01T20:00:00Z,171,,87327,29927,29927,06,18,0,0,673,673
+20200401,CO,2966,13883,,574,509,,,,,,A,3/31/2020 18:00,fbf6970288cd86e6deb9b0d44d59fb750fd0fa7b,2020-04-01T20:00:00Z,69,509,16849,16849,16849,08,18,95,1146,339,1485
+20200401,CT,3557,13043,,766,,,,,,,A,4/1/2020 13:30,152ce443f66c465aa76d50e3315db2993a91f9bb,2020-04-01T20:00:00Z,85,,16600,16600,16600,09,16,0,14,429,443
+20200401,DC,586,3262,2,,,,,,,142,A,3/31/2020 21:24,50151cafe100c69ce4ccbe31924f268747a1191c,2020-04-01T20:00:00Z,11,,3850,3848,3848,11,2,0,0,91,91
+20200401,DE,368,4015,,51,,,,,,49,C,4/1/2020 12:30,482d0d703ed3a489c47a2b0c1ec23b05ab5cc346,2020-04-01T20:00:00Z,11,,4383,4383,4383,10,1,0,319,49,368
+20200401,FL,6955,59529,1235,,949,,,,,,A,4/1/2020 11:30,c0c3c4480b268bc84e4ff54821b2ea1bb475fc64,2020-04-01T20:00:00Z,87,949,67719,66484,66484,12,10,126,5244,617,5861
+20200401,GA,4638,15688,,,952,,,,,,A,4/1/2020 11:28,564b00e162245b1ca203aaf4cbf881ca89d8d3a0,2020-04-01T20:00:00Z,139,952,20326,20326,20326,13,28,119,3436,709,4145
 20200401,GU,77,406,,19,,2,,,,9,,4/1/2020 08:30,ec5d82975cf501c674c2b0f945d76fcf22d57f2d,2020-04-01T20:00:00Z,3,,483,483,483,66,1,0,35,8,43
-20200401,HI,208,8721,,,13,,6,,,58,,3/31/2020 18:00,0d0be3fb60c653b8058566f66aa1cdc6e382952e,2020-04-01T20:00:00Z,1,13,8929,8929,8929,15,1,1,250,4,254
-20200401,IA,549,7304,,63,99,,,,,118,,4/1/2020 14:40,aa1a25ec2c8da4c44bccef10d85e96350eacbb80,2020-04-01T20:00:00Z,9,99,7853,7853,7853,19,2,5,416,52,468
-20200401,ID,525,6076,,,46,,7,,,,,3/31/2020 19:00,6991470f1ad7b7d7ad23088df526a5b0db1f137a,2020-04-01T20:00:00Z,9,46,6601,6601,6601,16,2,1,779,110,889
-20200401,IL,6980,33404,,,,,,,,,,4/1/2020 02:00,ac5fc8c588bf8658fce6c13a5eeb99bbdcab74fe,2020-04-01T20:00:00Z,141,,40384,40384,40384,17,42,0,4173,986,5159
-20200401,IN,2565,11810,,,,,,,,,,4/1/2020 00:59,0e65d8ecdd115466b23331e5afad1603aca3e435,2020-04-01T20:00:00Z,65,,14375,14375,14375,18,16,0,596,406,1002
-20200401,KS,482,5411,,,114,,,,,,,4/1/2020 11:00,5405a26e40b3aefc7feda7be30563ddda1cd5d02,2020-04-01T20:00:00Z,10,114,5893,5893,5893,20,1,35,415,54,469
-20200401,KY,591,6965,,,,,,,,,,3/31/2020 17:00,98479c0947b9df369ef776c37a52fa3e3731a55c,2020-04-01T20:00:00Z,17,,7556,7556,7556,21,6,0,635,111,746
-20200401,LA,6424,39352,,1498,,,,490,,,,4/1/2020 13:00,2b0300b49ae6391a2ae059eaad16e9b13d2bc8fe,2020-04-01T20:00:00Z,273,,45776,45776,45776,22,34,0,5622,1187,6809
-20200401,MA,7639,44125,,,682,,,,,,,3/31/2020 12:30,44760ffd00f5fa15ac67d2cfaffcc37129b6d6a0,2020-04-01T20:00:00Z,187,682,51764,51764,51764,25,34,120,3685,1118,4803
-20200401,MD,1985,17233,,,522,,,,,,,4/1/2020 10:00,2e249f755522faca4f1711d5e582a25d6285fd00,2020-04-01T20:00:00Z,31,522,19218,19218,19218,24,13,93,2365,325,2690
-20200401,ME,344,6088,,,63,,,,,80,,4/1/2020 11:00,233aa605d4512b9511c86dbf88f4f36e344674ce,2020-04-01T20:00:00Z,7,63,6432,6432,6432,23,2,6,0,41,41
-20200401,MI,12888,27237,,,,,,,,,,4/1/2020 16:00,e4a62f8e1b6cb580a129225551c304a9a82fbfbf,2020-04-01T20:00:00Z,337,,40125,40125,40125,26,78,0,3258,1013,4271
-20200401,MN,689,20502,,54,122,27,27,,,,,4/1/2020 12:00,d7ceb0b906d4181e07797a22c4b13cbb06414cbf,2020-04-01T20:00:00Z,17,122,21191,21191,21191,27,5,10,1351,60,1411
-20200401,MO,1581,15846,,,,,,,,,,4/1/2020 15:00,32b39240ab82fd7c2de7822dce28cc759a1d285d,2020-04-01T20:00:00Z,18,,17427,17427,17427,29,4,0,1232,254,1486
+20200401,HI,208,8721,,,13,,6,,,58,A,3/31/2020 18:00,14a35e53864a84ba0531e35f19147ff09691cf8a,2020-04-01T20:00:00Z,1,13,8929,8929,8929,15,1,1,250,4,254
+20200401,IA,549,7304,,63,99,,,,,118,C,4/1/2020 14:40,8828795bcc8edb2b650530734afbf76dedd9b73f,2020-04-01T20:00:00Z,9,99,7853,7853,7853,19,2,5,416,52,468
+20200401,ID,525,6076,,,46,,7,,,,A,3/31/2020 19:00,1856fc33d76ed1fe3bbd2b2aa00f1d9fe145a77c,2020-04-01T20:00:00Z,9,46,6601,6601,6601,16,2,1,779,110,889
+20200401,IL,6980,33404,,,,,,,,,A,4/1/2020 02:00,c9425c7ede2a3fc33ef303093f389025e28f80f2,2020-04-01T20:00:00Z,141,,40384,40384,40384,17,42,0,4173,986,5159
+20200401,IN,2565,11810,,,,,,,,,B,4/1/2020 00:59,0d32c4eb618bf0bf80237541f05df7ee301bcfd2,2020-04-01T20:00:00Z,65,,14375,14375,14375,18,16,0,596,406,1002
+20200401,KS,482,5411,,,114,,,,,,B,4/1/2020 11:00,61319fe7179d606c6e16191ab239be098d78602f,2020-04-01T20:00:00Z,10,114,5893,5893,5893,20,1,35,415,54,469
+20200401,KY,591,6965,,,,,,,,,A,3/31/2020 17:00,1a5cb88298d45c1fa2b5ba405b4f50a7a4af73db,2020-04-01T20:00:00Z,17,,7556,7556,7556,21,6,0,635,111,746
+20200401,LA,6424,39352,,1498,,,,490,,,A,4/1/2020 13:00,58885ad06e0c1bb6f19199017d5f0524a1d61b65,2020-04-01T20:00:00Z,273,,45776,45776,45776,22,34,0,5622,1187,6809
+20200401,MA,7639,44125,,,682,,,,,,B,3/31/2020 12:30,384d6254ade5e885ae52455cef3d91bacc5f3cc4,2020-04-01T20:00:00Z,187,682,51764,51764,51764,25,34,120,3685,1118,4803
+20200401,MD,1985,17233,,,522,,,,,,A,4/1/2020 10:00,f7b80ecc2acfbe61289a29d1a603fbe418c5fe86,2020-04-01T20:00:00Z,31,522,19218,19218,19218,24,13,93,2365,325,2690
+20200401,ME,344,6088,,,63,,,,,80,A,4/1/2020 11:00,8d983aa0d19decc3071a7a7ded16ea055f21dc54,2020-04-01T20:00:00Z,7,63,6432,6432,6432,23,2,6,0,41,41
+20200401,MI,12888,27237,,,,,,,,,B,4/1/2020 16:00,f110081a6ddcde598a9b05cfb01140510f89b119,2020-04-01T20:00:00Z,337,,40125,40125,40125,26,78,0,3258,1013,4271
+20200401,MN,689,20502,,54,122,27,27,,,,A,4/1/2020 12:00,d3f794797d9b10bbf91740a7fbfca3beb9575a65,2020-04-01T20:00:00Z,17,122,21191,21191,21191,27,5,10,1351,60,1411
+20200401,MO,1581,15846,,,,,,,,,C,4/1/2020 15:00,eb21c196ff9fdf675f025aea2567d53c1c2fbc28,2020-04-01T20:00:00Z,18,,17427,17427,17427,29,4,0,1232,254,1486
 20200401,MP,6,,,,,,,,,,,3/31/2020 21:50,f77ac94600fd74b12b7e1a4ce1960f81653e78a3,2020-04-01T20:00:00Z,,,6,6,6,69,0,0,0,4,4
-20200401,MS,1073,3712,,,332,,,,,,,3/31/2020 19:00,03e7e90bbc10ff11e5df075a226afd04ac19ede3,2020-04-01T20:00:00Z,22,332,4785,4785,4785,28,2,121,175,136,311
-20200401,MT,208,4710,,,17,,,,,,,4/1/2020 10:00,23e5c62ab992cae3e13070f26b50f77aa4ec616b,2020-04-01T20:00:00Z,5,17,4918,4918,4918,30,1,3,476,24,500
-20200401,NC,1584,24659,,204,,,,,,,,4/1/2020 11:00,1282e4000ce96b5a2da895dce0a7180df0d4ffb6,2020-04-01T20:00:00Z,10,,26243,26243,26243,37,2,0,3051,86,3137
-20200401,ND,142,4351,,,23,,,,,34,,4/1/2020 12:00,06634de04f34021d57ca58dcc7f350a5d00819b0,2020-04-01T20:00:00Z,3,23,4493,4493,4493,38,0,2,220,16,236
-20200401,NE,210,3475,8,,,,,,,,,4/1/2020 14:00,aea51844664cf127e1e065b0e603f60dc64fce70,2020-04-01T20:00:00Z,4,,3693,3685,3685,31,1,0,544,38,582
-20200401,NH,415,5985,97,,56,,,,,56,,4/1/2020 09:00,65edb67d8f4cfcb0433812b47662c722dbc00e5b,2020-04-01T20:00:00Z,4,56,6497,6400,6400,33,1,11,572,101,673
-20200401,NJ,22255,30387,,2000,,,,,,,,4/1/2020 13:00,1a2fc6cae323b443ec20dd1288d7af2ac9c79e3e,2020-04-01T20:00:00Z,355,,52642,52642,52642,34,88,0,3310,3559,6869
-20200401,NM,315,12925,,24,,,,,,26,,3/31/2020 22:22,0264171ae75129fb1a2c87e863fbb2df81281a55,2020-04-01T20:00:00Z,5,,13240,13240,13240,35,1,0,679,34,713
-20200401,NV,1279,11519,,,,,,,,,,4/1/2020 09:30,b523681fd84cc8e77cfbf64795076e95534ba2e0,2020-04-01T20:00:00Z,26,,12798,12798,12798,32,9,0,838,166,1004
-20200401,NY,83712,137168,,12226,18368,3022,,,,6142,,4/1/2020 12:00,d17e2219d72fff59247d46dfffea0b157aa5278a,2020-04-01T20:00:00Z,1941,18368,220880,220880,220880,36,391,2464,7777,7917,15694
-20200401,OH,2547,26992,,,679,,222,,,,,4/1/2020 14:00,d5e8f53808fcd039cc4441049a201738cc3b11ad,2020-04-01T20:00:00Z,65,679,29539,29539,29539,39,10,94,0,348,348
-20200401,OK,719,1248,,174,219,98,,,,,,4/1/2020 08:00,cd99d4427ba45d708b0f924016ffa0f9059cf051,2020-04-01T20:00:00Z,30,219,1967,1967,1967,40,7,42,19,154,173
-20200401,OR,736,13136,,132,154,,,40,,,,3/31/2020 11:00,d96d9fc4879aee70d29ca61fc6e4254a8ac72e6c,2020-04-01T20:00:00Z,18,154,13872,13872,13872,41,0,0,0,46,46
-20200401,PA,5805,42427,,,620,,,,,,,4/1/2020 12:00,500eb0e91ff62dabc5c41e1d5f81cab03f4d91c3,2020-04-01T20:00:00Z,74,620,48232,48232,48232,42,11,106,4782,962,5744
-20200401,PR,286,1409,897,,,,,,,,,4/1/2020 07:00,02b69db34d9e18f43f607e90b00583bcd044dc0a,2020-04-01T20:00:00Z,11,,2592,1695,1695,72,3,0,214,47,261
-20200401,RI,566,3831,,60,,14,,6,,35,,4/1/2020 00:00,d9488b74a68f75b092c99319ff713dad78cf581a,2020-04-01T20:00:00Z,10,,4397,4397,4397,44,2,0,355,77,432
-20200401,SC,1293,5033,,,349,,,,,,,4/1/2020 15:55,09e4126d70727730dafbb303a6a9006d6bb6225d,2020-04-01T20:00:00Z,26,349,6326,6326,6326,45,4,90,417,210,627
-20200401,SD,129,3903,0,,12,,,,,51,,4/1/2020 12:30,8f3a347762b00f52891b9abc970ccf15bf8b1d5e,2020-04-01T20:00:00Z,2,12,4032,4032,4032,46,1,0,294,21,315
-20200401,TN,2683,29769,,,200,,,,,137,,4/1/2020 15:00,1c86429989fdab8e40ee63c77dee552860df5c26,2020-04-01T20:00:00Z,24,200,32452,32452,32452,47,1,25,4648,444,5092
-20200401,TX,3997,43860,,196,,,,,,38,,3/31/2020 21:00,e4b70e172cd68191dfd51edb2c9cf28880e48f1f,2020-04-01T20:00:00Z,58,,47857,47857,47857,48,17,0,4134,731,4865
-20200401,UT,1012,20155,,,91,,,,,,,4/1/2020 15:00,0ae4534604726d55823094dd599c7f694c5dd338,2020-04-01T20:00:00Z,7,91,21167,21167,21167,49,2,18,2529,125,2654
-20200401,VA,1484,13860,,,305,,145,,108,,,4/1/2020 13:00,d1247fca3d4b7ce7b3657976421609238f3811f7,2020-04-01T20:00:00Z,34,305,15344,15344,15344,51,7,140,1709,234,1943
+20200401,MS,1073,3712,,,332,,,,,,B,3/31/2020 19:00,a983393e324c3f0954e1a1039ddfa386071e7cdb,2020-04-01T20:00:00Z,22,332,4785,4785,4785,28,2,121,175,136,311
+20200401,MT,208,4710,,,17,,,,,,A,4/1/2020 10:00,12ce187899e98d0eb42158307b5267d3aaaf216f,2020-04-01T20:00:00Z,5,17,4918,4918,4918,30,1,3,476,24,500
+20200401,NC,1584,24659,,204,,,,,,,A,4/1/2020 11:00,8ddbb88d02bcd0607b48747e1c9a3401d53bd1e7,2020-04-01T20:00:00Z,10,,26243,26243,26243,37,2,0,3051,86,3137
+20200401,ND,142,4351,,,23,,,,,34,B,4/1/2020 12:00,d18580f006b6df087def17405e2268718e5b9510,2020-04-01T20:00:00Z,3,23,4493,4493,4493,38,0,2,220,16,236
+20200401,NE,210,3475,8,,,,,,,,A,4/1/2020 14:00,95c1465715bea3b1968ac22d6f4e09781a3fe918,2020-04-01T20:00:00Z,4,,3693,3685,3685,31,1,0,544,38,582
+20200401,NH,415,5985,97,,56,,,,,56,B,4/1/2020 09:00,d1e7d5f30caf6f06247c95ff7c698dfb3c229562,2020-04-01T20:00:00Z,4,56,6497,6400,6400,33,1,11,572,101,673
+20200401,NJ,22255,30387,,2000,,,,,,,A,4/1/2020 13:00,ac961a85b57ce49697bca058ea777a1aefc800d7,2020-04-01T20:00:00Z,355,,52642,52642,52642,34,88,0,3310,3559,6869
+20200401,NM,315,12925,,24,,,,,,26,A,3/31/2020 22:22,63a7ec036420ea2cd077deae2589ca9460a755b6,2020-04-01T20:00:00Z,5,,13240,13240,13240,35,1,0,679,34,713
+20200401,NV,1279,11519,,,,,,,,,A,4/1/2020 09:30,c055b4acec7a822c5d9cd244cd79dde729bbdfba,2020-04-01T20:00:00Z,26,,12798,12798,12798,32,9,0,838,166,1004
+20200401,NY,83712,137168,,12226,18368,3022,,,,6142,A,4/1/2020 12:00,1d614a1bcdaa1c82f46f20e84886028b578bdf1d,2020-04-01T20:00:00Z,1941,18368,220880,220880,220880,36,391,2464,7777,7917,15694
+20200401,OH,2547,26992,,,679,,222,,,,B,4/1/2020 14:00,2bbe08e56a0239bac5b3ae9941c7ba8dd312e27d,2020-04-01T20:00:00Z,65,679,29539,29539,29539,39,10,94,0,348,348
+20200401,OK,719,1248,,174,219,98,,,,,B,4/1/2020 08:00,be1b8240ff4bbf03606e07d6d6b9576352b5a6c1,2020-04-01T20:00:00Z,30,219,1967,1967,1967,40,7,42,19,154,173
+20200401,OR,736,13136,,132,154,,,40,,,A,3/31/2020 11:00,2607d640e6726f51c2bc905697b3cf934a0ffdf2,2020-04-01T20:00:00Z,18,154,13872,13872,13872,41,0,0,0,46,46
+20200401,PA,5805,42427,,,620,,,,,,A,4/1/2020 12:00,084361b60c663b53f4e397baf3e1333964a6ec16,2020-04-01T20:00:00Z,74,620,48232,48232,48232,42,11,106,4782,962,5744
+20200401,PR,286,1409,897,,,,,,,,A,4/1/2020 07:00,c4e269fb6e3a057d674fb76b7dd3a7407e505323,2020-04-01T20:00:00Z,11,,2592,1695,1695,72,3,0,214,47,261
+20200401,RI,566,3831,,60,,14,,6,,35,B,4/1/2020 00:00,7cfe4838ffdd06a9cc439893c127496570023d1f,2020-04-01T20:00:00Z,10,,4397,4397,4397,44,2,0,355,77,432
+20200401,SC,1293,5033,,,102,,,,,,B,4/1/2020 15:55,e68c77efe106b2d20baaea8a64b05aabec2e92f4,2020-04-01T20:00:00Z,26,102,6326,6326,6326,45,4,0,417,210,627
+20200401,SD,129,3903,0,,12,,,,,51,A,4/1/2020 12:30,c2ac95f21992ae965926e02375bef99f46c2309a,2020-04-01T20:00:00Z,2,12,4032,4032,4032,46,1,0,294,21,315
+20200401,TN,2683,29769,,,200,,,,,137,A,4/1/2020 15:00,13b42a28c4d8451ddd5df60f57662cb411584544,2020-04-01T20:00:00Z,24,200,32452,32452,32452,47,1,25,4648,444,5092
+20200401,TX,3997,43860,,196,,,,,,38,A,3/31/2020 21:00,b46e747cecd02ee1955bde8adb6bfa7edc1a27f2,2020-04-01T20:00:00Z,58,,47857,47857,47857,48,17,0,4134,731,4865
+20200401,UT,1012,20155,,,91,,,,,,A,4/1/2020 15:00,e652fbc718c08c3bb23838503e3ca82a77e41e4c,2020-04-01T20:00:00Z,7,91,21167,21167,21167,49,2,18,2529,125,2654
+20200401,VA,1484,13860,,,305,,145,,108,,A,4/1/2020 13:00,7cb5ae2ffb827a8b27a70a781555ff288f941c89,2020-04-01T20:00:00Z,34,305,15344,15344,15344,51,7,140,1709,234,1943
 20200401,VI,30,126,24,,,,,,,21,,3/31/2020 17:00,004e568ad1624976962830fabce284332646b9c7,2020-04-01T20:00:00Z,,,180,156,156,78,0,0,0,0,0
-20200401,VT,321,4174,,30,45,,,,,15,,4/1/2020 13:00,7bc4a3b758c3e3931243ea39fb8474e3929d75af,2020-04-01T20:00:00Z,16,45,4495,4495,4495,50,3,9,217,28,245
-20200401,WA,6540,82557,,,,,,,,,,4/1/2020 19:10,0ac0faa249ec62c68fd5b87f9d0d17ca45ac89e1,2020-04-01T20:00:00Z,282,,89097,89097,89097,53,20,0,4173,491,4664
-20200401,WI,1550,18819,,,398,,,,,,,4/1/2020 16:00,f2896cc0fd57a76b76e7bddf083c449c6d23bd9a,2020-04-01T20:00:00Z,24,398,20369,20369,20369,55,8,61,1444,199,1643
-20200401,WV,191,4384,,,1,,,,,,,4/1/2020 13:11,aa896c63b494d8085e43e39ceda29294f0f77820,2020-04-01T20:00:00Z,1,1,4575,4575,4575,54,0,0,403,29,432
-20200401,WY,130,2218,,,18,,,,,31,,3/31/2020 19:44,d732a84d1220a3a8878407662b8f3755f31789aa,2020-04-01T20:00:00Z,0,18,2348,2348,2348,56,0,1,219,21,240
-20200331,AK,119,3594,,,7,,,,,,,3/30/2020 19:00,c6f9438293c181c466c97b164a167f8f604c359e,2020-03-31T20:00:00Z,3,7,3713,3713,3713,02,0,0,54,5,59
-20200331,AL,981,6298,,,,,,,,,,3/31/2020 00:00,1da309ba66e6ef91132c91f6b815a10477dfc7b5,2020-03-31T20:00:00Z,13,,7279,7279,7279,01,7,0,604,122,726
-20200331,AR,523,5959,,64,,,,23,,35,,3/31/2020 14:59,e4896a3e90546f9ec1887b79a8a69a69746afd1c,2020-03-31T20:00:00Z,8,,6482,6482,6482,05,1,0,697,50,747
+20200401,VT,321,4174,,30,45,,,,,15,A,4/1/2020 13:00,821a914fad9ed167dd93d40509618c11ec216e64,2020-04-01T20:00:00Z,16,45,4495,4495,4495,50,3,9,217,28,245
+20200401,WA,6540,82557,,,,,,,,,A,4/1/2020 19:10,716efa3903511786f135d8ceb2df257945626a53,2020-04-01T20:00:00Z,282,,89097,89097,89097,53,20,0,4173,491,4664
+20200401,WI,1550,18819,,,398,,,,,,A,4/1/2020 16:00,51a4ffd9eb9f755766d3a34839257cd4d23cc3cd,2020-04-01T20:00:00Z,24,398,20369,20369,20369,55,8,61,1444,199,1643
+20200401,WV,191,4384,,,1,,,,,,B,4/1/2020 13:11,114b348f77f4070d9731a449e9129e5663cdd6a7,2020-04-01T20:00:00Z,1,1,4575,4575,4575,54,0,0,403,29,432
+20200401,WY,130,2218,,,18,,,,,31,A,3/31/2020 19:44,35ae6b5bde17334962bd3069e1e6a412ce1c1caa,2020-04-01T20:00:00Z,0,18,2348,2348,2348,56,0,1,219,21,240
+20200331,AK,119,3594,,,7,,,,,,A,3/30/2020 19:00,7daee4dd19e0e2f9d6a9fa2fe3297f4a56715af9,2020-03-31T20:00:00Z,3,7,3713,3713,3713,02,0,0,54,5,59
+20200331,AL,981,6298,,,,,,,,,B,3/31/2020 00:00,30c813a827ef8ec2067774691b104583fe4eeb7e,2020-03-31T20:00:00Z,13,,7279,7279,7279,01,7,0,604,122,726
+20200331,AR,523,5959,,64,,,,23,,35,A,3/31/2020 14:59,8da1e200b8ef0e36b1eed41e19413ed797b8a1f5,2020-03-31T20:00:00Z,8,,6482,6482,6482,05,1,0,697,50,747
 20200331,AS,0,3,2,,,,,,,,,3/30/2020 00:00,d51f96f4643dcd20ea4f5b3b8699a432148d3ca9,2020-03-31T20:00:00Z,0,,5,3,3,60,0,0,3,0,3
-20200331,AZ,1289,18082,,,,,,,,,,3/31/2020 00:00,150747c596e47c7b09276dfd6ad881b1ce4c6cdb,2020-03-31T20:00:00Z,24,,19371,19371,19371,04,4,0,2480,132,2612
-20200331,CA,7482,21772,57400,1617,,657,,,,,,3/31/2020 16:00,6158ffaaadc958508bd6e6b2161c1ba04742dfcc,2020-03-31T20:00:00Z,153,,86654,29254,29254,06,20,0,1223,1035,2258
-20200331,CO,2627,12737,,503,414,,,,,,,3/30/2020 18:00,cb6e3c16877199c4d49dc7cc540285782c4c46a1,2020-03-31T20:00:00Z,51,414,15364,15364,15364,08,0,0,0,0,0
-20200331,CT,3128,13029,,608,,,,,,,,3/31/2020 13:30,348c920dbc6593b52a9dac6d52b0c1690135332b,2020-03-31T20:00:00Z,69,,16157,16157,16157,09,33,0,1000,557,1557
-20200331,DC,495,3262,2,,,,,,,121,,3/30/2020 00:00,45b99a55c947763edd31ddef19db87330976f1e9,2020-03-31T20:00:00Z,9,,3759,3757,3757,11,0,0,580,94,674
-20200331,DE,319,3696,,57,,,,,,22,,3/31/2020 16:00,b17cb26fe5d73f8287ce0e65aa3afdb229e9c70b,2020-03-31T20:00:00Z,10,,4015,4015,4015,10,4,0,1480,55,1535
-20200331,FL,6338,54285,1163,,823,,,,,,,3/31/2020 11:30,12f7f591e94875340a2f02a914d3c2185d473ef2,2020-03-31T20:00:00Z,77,823,61786,60623,60623,12,14,171,6060,865,6925
-20200331,GA,3929,12252,,,833,,,,,,,3/31/2020 12:57,d04275dc3a9b657f43ff493f4b64cd4a09ac6ac1,2020-03-31T20:00:00Z,111,833,16181,16181,16181,13,24,126,2337,1120,3457
+20200331,AZ,1289,18082,,,,,,,,,B,3/31/2020 00:00,dceda3bc8b2eb4d2c91bd29b689a375dd007ff5e,2020-03-31T20:00:00Z,24,,19371,19371,19371,04,4,0,2480,132,2612
+20200331,CA,7482,21772,57400,1617,,657,,,,,B,3/31/2020 16:00,432ba727836dd611654632d51e2eaa336d9ae700,2020-03-31T20:00:00Z,153,,86654,29254,29254,06,20,0,1223,1035,2258
+20200331,CO,2627,12737,,503,414,,,,,,A,3/30/2020 18:00,ef9aed5a757619ae3c06b69946b1a18baaf4185e,2020-03-31T20:00:00Z,51,414,15364,15364,15364,08,0,0,0,0,0
+20200331,CT,3128,13029,,608,,,,,,,A,3/31/2020 13:30,a87ccf0dd90a8e024cb2b44eca9e6cd362040ce8,2020-03-31T20:00:00Z,69,,16157,16157,16157,09,33,0,1000,557,1557
+20200331,DC,495,3262,2,,,,,,,121,A,3/30/2020 00:00,0852340a3cc4a0923087fc4044b82510ca2fa60e,2020-03-31T20:00:00Z,9,,3759,3757,3757,11,0,0,580,94,674
+20200331,DE,319,3696,,57,,,,,,22,C,3/31/2020 16:00,964cc6c0a40a3ff44802708f4573c87c3009cbb8,2020-03-31T20:00:00Z,10,,4015,4015,4015,10,4,0,1480,55,1535
+20200331,FL,6338,54285,1163,,823,,,,,,A,3/31/2020 11:30,527ce8bfff16b746857e20a04b640bf49f614260,2020-03-31T20:00:00Z,77,823,61786,60623,60623,12,14,171,6060,865,6925
+20200331,GA,3929,12252,,,833,,,,,,A,3/31/2020 12:57,2287eaa2a6ba5129843ee31dbec44e14e2b9f64e,2020-03-31T20:00:00Z,111,833,16181,16181,16181,13,24,126,2337,1120,3457
 20200331,GU,69,371,,19,,2,,,,7,,3/31/2020 07:55,1186f41c915d1b8590ebf03ac77758d9c401faf7,2020-03-31T20:00:00Z,2,,440,440,440,66,1,0,19,11,30
-20200331,HI,204,8471,,,12,,6,,,49,,3/30/2020 18:00,aabfd58c1db4d36c698642ce49d969959aa14b8b,2020-03-31T20:00:00Z,,12,8675,8675,8675,15,0,0,646,29,675
-20200331,IA,497,6888,,61,94,,,,,33,,3/31/2020 00:00,a23111eb0995b96a2bd5431a8446072aadd7ab39,2020-03-31T20:00:00Z,7,94,7385,7385,7385,19,1,20,726,73,799
-20200331,ID,415,5297,,,45,,6,,,,,3/30/2020 19:00,3067e7659e7eb894048ae57ccff599d9ef77d571,2020-03-31T20:00:00Z,7,45,5712,5712,5712,16,1,6,901,105,1006
-20200331,IL,5994,29231,,,,,,,,,,3/31/2020 00:00,05d53fc01e4657b6d5e21ca6e2098eec6181f6df,2020-03-31T20:00:00Z,99,,35225,35225,35225,17,26,0,3842,937,4779
-20200331,IN,2159,11214,,,,,,,,,,3/30/2020 12:59,0021ea9c5be331b4c1096947ee674235f1a90e73,2020-03-31T20:00:00Z,49,,13373,13373,13373,18,14,0,1342,373,1715
-20200331,KS,428,4996,,,79,,,,,,,3/31/2020 11:00,0a50ba637e9467e7c697bb77ade96d6f154dbfc9,2020-03-31T20:00:00Z,9,79,5424,5424,5424,20,1,13,442,60,502
-20200331,KY,480,6330,,,,,,,,,,3/30/2020 17:00,0bd5419e028531c7b8cdfb7b1735132718440aa6,2020-03-31T20:00:00Z,11,,6810,6810,6810,21,2,0,751,41,792
-20200331,LA,5237,33730,,1355,,,,438,,,,3/31/2020 13:00,d26de966917c557f48c4b96ba8ce361c182e8ef1,2020-03-31T20:00:00Z,239,,38967,38967,38967,22,54,0,3722,1212,4934
-20200331,MA,6521,40440,,,562,,,,,,,3/31/2020 12:30,b25c2dff873a63018ccfed5c913919e9870fa067,2020-03-31T20:00:00Z,153,562,46961,46961,46961,25,29,109,3274,868,4142
-20200331,MD,1660,14868,,,429,,,,,,,3/31/2020 10:00,2edf503dd6ea5275e5cd4d6a99d839360eaca82c,2020-03-31T20:00:00Z,18,429,16528,16528,16528,24,3,76,1552,247,1799
-20200331,ME,303,6088,,,57,,,,,68,,3/31/2020 10:30,841535be93a9c6b700c119fdea810589ee3cff71,2020-03-31T20:00:00Z,5,57,6391,6391,6391,23,2,8,2694,28,2722
-20200331,MI,11875,23979,,,,,,,,,,3/31/2020 11:00,304dc9a5bca9a3d8845723bb648e0b629b314971,2020-03-31T20:00:00Z,259,,35854,35854,35854,26,75,0,2796,974,3770
-20200331,MN,629,19151,,56,112,26,26,,,,,3/31/2020 00:00,33ac58dc44dc0a040f0cbd14dae32d84c52d4f60,2020-03-31T20:00:00Z,12,112,19780,19780,19780,27,2,20,905,53,958
-20200331,MO,1327,14614,,,,,,,,,,3/31/2020 15:00,c0953f43228f7071518b4c95970a2290fc3668c1,2020-03-31T20:00:00Z,14,,15941,15941,15941,29,1,0,1410,296,1706
+20200331,HI,204,8471,,,12,,6,,,49,A,3/30/2020 18:00,8b549fa0eb0389ea7b9e2193c2d9b26e32692123,2020-03-31T20:00:00Z,,12,8675,8675,8675,15,0,0,646,29,675
+20200331,IA,497,6888,,61,94,,,,,33,C,3/31/2020 00:00,a80def6f7fd7bd1c4f8529f823843c4728454f45,2020-03-31T20:00:00Z,7,94,7385,7385,7385,19,1,20,726,73,799
+20200331,ID,415,5297,,,45,,6,,,,A,3/30/2020 19:00,8a91d5ffd1f96930af621b6d103f7e0c65a52f5f,2020-03-31T20:00:00Z,7,45,5712,5712,5712,16,1,6,901,105,1006
+20200331,IL,5994,29231,,,,,,,,,A,3/31/2020 00:00,0699600b1755c7ce2d31f68d6cc25931fe74f7a4,2020-03-31T20:00:00Z,99,,35225,35225,35225,17,26,0,3842,937,4779
+20200331,IN,2159,11214,,,,,,,,,B,3/30/2020 12:59,8c03f75821efb2250e80e618c0b6f2089a6f1b20,2020-03-31T20:00:00Z,49,,13373,13373,13373,18,14,0,1342,373,1715
+20200331,KS,428,4996,,,79,,,,,,B,3/31/2020 11:00,19ab0642e85c4dd0be80c550de159788b609879f,2020-03-31T20:00:00Z,9,79,5424,5424,5424,20,1,13,442,60,502
+20200331,KY,480,6330,,,,,,,,,A,3/30/2020 17:00,3afbeaab5adaddec917c047424b022e408bf7e63,2020-03-31T20:00:00Z,11,,6810,6810,6810,21,2,0,751,41,792
+20200331,LA,5237,33730,,1355,,,,438,,,A,3/31/2020 13:00,c5012f4a5317a6c370013bc1c889f61ecf9c121a,2020-03-31T20:00:00Z,239,,38967,38967,38967,22,54,0,3722,1212,4934
+20200331,MA,6521,40440,,,562,,,,,,B,3/31/2020 12:30,7ca3714b678bc6d0480f26e49a2db37a5b4d931d,2020-03-31T20:00:00Z,153,562,46961,46961,46961,25,29,109,3274,868,4142
+20200331,MD,1660,14868,,,429,,,,,,A,3/31/2020 10:00,56cb4a94c7ee61348b7deaa5940859954769e4e2,2020-03-31T20:00:00Z,18,429,16528,16528,16528,24,3,76,1552,247,1799
+20200331,ME,303,6088,,,57,,,,,68,A,3/31/2020 10:30,7b83fb27f5e65bb8d50f63302166dc420b7d212f,2020-03-31T20:00:00Z,5,57,6391,6391,6391,23,2,8,2694,28,2722
+20200331,MI,11875,23979,,,,,,,,,B,3/31/2020 11:00,0f74896b5aabf6b4e9c043d6948c587964af0a05,2020-03-31T20:00:00Z,259,,35854,35854,35854,26,75,0,2796,974,3770
+20200331,MN,629,19151,,56,112,26,26,,,,A,3/31/2020 00:00,79fcf14bafe6ac3a80bcbeb722f90e5d93a9eacc,2020-03-31T20:00:00Z,12,112,19780,19780,19780,27,2,20,905,53,958
+20200331,MO,1327,14614,,,,,,,,,C,3/31/2020 15:00,f6f3d884d544c7a73c03431474f776dd1730c40f,2020-03-31T20:00:00Z,14,,15941,15941,15941,29,1,0,1410,296,1706
 20200331,MP,2,,,,,,,,,,,3/30/2020 18:30,b908332c29b5a7283c5fc050c4ce488a2fe2d11f,2020-03-31T20:00:00Z,,,2,2,2,69,0,0,0,0,0
-20200331,MS,937,3537,,,211,,,,,,,3/30/2020 19:00,f744101e5b0abd155f9963bc39da066a93b6f4ce,2020-03-31T20:00:00Z,20,211,4474,4474,4474,28,4,16,548,90,638
-20200331,MT,184,4234,,,14,,,,,,,3/31/2020 10:00,e04b0c6ca17ac4557e49b242d58ce9c9e22f6132,2020-03-31T20:00:00Z,4,14,4418,4418,4418,30,0,4,91,13,104
-20200331,NC,1498,21608,,157,,,,,,,,3/31/2020 09:05,464f3c5a05be79469b1ccbe5117c66e9c5d34a6d,2020-03-31T20:00:00Z,8,,23106,23106,23106,37,2,0,2051,191,2242
-20200331,ND,126,4131,,,21,,,,,30,,3/31/2020 18:00,d09eff110e913945691a51bb66fc81e3fbf5308a,2020-03-31T20:00:00Z,3,21,4257,4257,4257,38,1,2,403,17,420
-20200331,NE,172,2931,8,,,,,,,,,3/31/2020 14:00,8acc412340c0e489add62bea2e3f17f454283dfb,2020-03-31T20:00:00Z,3,,3111,3103,3103,31,1,0,347,27,374
-20200331,NH,314,5413,65,,45,,,,,,,3/30/2020 09:00,6b8d1af6abc9e0e0966a90f2b8da0bbc209c1f27,2020-03-31T20:00:00Z,3,45,5792,5727,5727,33,0,0,27,0,27
-20200331,NJ,18696,27077,,2000,,,,,,,,3/31/2020 13:00,b866e67f560452fbe0d22f527d7e3ec3d3d01f95,2020-03-31T20:00:00Z,267,,45773,45773,45773,34,69,0,1853,2060,3913
-20200331,NM,281,12246,,22,,,,,,26,,3/31/2020 00:00,9d4b5d02a4b1cdc69bebdc157e6ed8afb2aa33c0,2020-03-31T20:00:00Z,4,,12527,12527,12527,35,2,0,1304,44,1348
-20200331,NV,1113,10681,,,,,,,,,,3/31/2020 09:30,88fb03a81e982097fb5ec2336244e09cc61d7606,2020-03-31T20:00:00Z,17,,11794,11794,11794,32,2,0,474,105,579
-20200331,NY,75795,129391,,10929,15904,2710,,,,4975,,3/29/2020 09:16,6d140e610bcacc55189347662d4186b03b687403,2020-03-31T20:00:00Z,1550,15904,205186,205186,205186,36,332,2183,9420,9298,18718
-20200331,OH,2199,26992,,,585,,198,,,,,3/31/2020 14:00,29a5aa904d90ab50cc3d4aad2363a771c87cf068,2020-03-31T20:00:00Z,55,585,29191,29191,29191,39,16,110,1650,266,1916
-20200331,OK,565,1229,,,177,83,,,,,,3/31/2020 08:00,6cd3e7b123c15706b40edbf9563485087dd880d1,2020-03-31T20:00:00Z,23,177,1794,1794,1794,40,6,24,22,84,106
-20200331,OR,690,13136,,132,154,,,40,,,,3/31/2020 11:00,c79e44eb1382be2711546f7daf0469e4cfb92adc,2020-03-31T20:00:00Z,18,154,13826,13826,13826,41,2,14,859,84,943
-20200331,PA,4843,37645,,,514,,,,,,,3/31/2020 12:00,43646997adf215d10d0f0832e20cdfe3b4c3fcab,2020-03-31T20:00:00Z,63,514,42488,42488,42488,42,14,128,3868,756,4624
-20200331,PR,239,1195,854,,,,,,,,,3/30/2020 07:00,24c6899f6264c07db031611e2e27c7aca9550a3b,2020-03-31T20:00:00Z,8,,2288,1434,1434,72,2,0,264,65,329
-20200331,RI,489,3476,,59,,9,,6,,35,,3/31/2020 00:00,94371764e94f747f60451d28393c7bbd69c4e739,2020-03-31T20:00:00Z,8,,3965,3965,3965,44,4,0,289,87,376
-20200331,SC,1083,4616,,,259,,,,,,,3/31/2020 16:31,8acc49c236995fc825595e86efc346bd044b60dc,2020-03-31T20:00:00Z,22,259,5699,5699,5699,45,4,130,456,158,614
-20200331,SD,108,3609,0,,12,,,,,44,,3/31/2020 12:30,4cceeacdfa54575289e02512e4de6810e5578b45,2020-03-31T20:00:00Z,1,12,3717,3717,3717,46,0,12,131,7,138
-20200331,TN,2239,25121,,,175,,,,,121,,3/31/2020 15:00,8b00c646504b48c8788cefd4ccf3e3298ef6778c,2020-03-31T20:00:00Z,23,175,27360,27360,27360,47,10,27,3651,405,4056
-20200331,TX,3266,39726,,196,,,,,,38,,3/31/2020 13:45,88abc22d2e83d86262ea891c8e7d846d827553f5,2020-03-31T20:00:00Z,41,,42992,42992,42992,48,7,0,6723,389,7112
-20200331,UT,887,17626,,,73,,,,,,,3/31/2020 15:00,4992c6f71c5a53dd161444fbb2f209efdfcaab82,2020-03-31T20:00:00Z,5,73,18513,18513,18513,49,1,73,2429,81,2510
-20200331,VA,1250,12151,,,165,,,,,,,3/31/2020 00:00,8aee3eebba1f2e90e67a632f87193e96c6a0c0c4,2020-03-31T20:00:00Z,27,165,13401,13401,13401,51,2,29,1133,230,1363
+20200331,MS,937,3537,,,211,,,,,,B,3/30/2020 19:00,dee58e609dbbbc59e0c4818672de4ff2fcbe104c,2020-03-31T20:00:00Z,20,211,4474,4474,4474,28,4,16,548,90,638
+20200331,MT,184,4234,,,14,,,,,,A,3/31/2020 10:00,4bf6d316b2bf2c832493840a54056f6a11089623,2020-03-31T20:00:00Z,4,14,4418,4418,4418,30,0,4,91,13,104
+20200331,NC,1498,21608,,157,,,,,,,A,3/31/2020 09:05,db4ca42edb018a371ec5592b6fa1496568098b74,2020-03-31T20:00:00Z,8,,23106,23106,23106,37,2,0,2051,191,2242
+20200331,ND,126,4131,,,21,,,,,30,B,3/31/2020 18:00,ad73cee72b0fe747752fe68e23cb3bc61f407bd4,2020-03-31T20:00:00Z,3,21,4257,4257,4257,38,1,2,403,17,420
+20200331,NE,172,2931,8,,,,,,,,A,3/31/2020 14:00,8dc42c9146d0e75f4ed9f3239129e6c5565ac62e,2020-03-31T20:00:00Z,3,,3111,3103,3103,31,1,0,347,27,374
+20200331,NH,314,5413,65,,45,,,,,,B,3/30/2020 09:00,2b6586a4ca9166c26542de28ae993908bb0897db,2020-03-31T20:00:00Z,3,45,5792,5727,5727,33,0,0,27,0,27
+20200331,NJ,18696,27077,,2000,,,,,,,A,3/31/2020 13:00,5f9d37eeaab7850e322a91cb627cf80ed4b64f33,2020-03-31T20:00:00Z,267,,45773,45773,45773,34,69,0,1853,2060,3913
+20200331,NM,281,12246,,22,,,,,,26,A,3/31/2020 00:00,d6bde9fec632e1838dab5129d9b18d6fe371eb18,2020-03-31T20:00:00Z,4,,12527,12527,12527,35,2,0,1304,44,1348
+20200331,NV,1113,10681,,,,,,,,,A,3/31/2020 09:30,a79040d71c1d16eb812290d356c2bcf14445f7ac,2020-03-31T20:00:00Z,17,,11794,11794,11794,32,2,0,474,105,579
+20200331,NY,75795,129391,,10929,15904,2710,,,,4975,A,3/29/2020 09:16,f5f32b6d7890a1239c97ff4eedef1e4368eb11e5,2020-03-31T20:00:00Z,1550,15904,205186,205186,205186,36,332,2183,9420,9298,18718
+20200331,OH,2199,26992,,,585,,198,,,,B,3/31/2020 14:00,fba82bf909acefb31066b64770e0e143211cb723,2020-03-31T20:00:00Z,55,585,29191,29191,29191,39,16,110,1650,266,1916
+20200331,OK,565,1229,,,177,83,,,,,B,3/31/2020 08:00,84f4f01bc184f2a541bd5d4a1fac1b9101ef3858,2020-03-31T20:00:00Z,23,177,1794,1794,1794,40,6,24,22,84,106
+20200331,OR,690,13136,,132,154,,,40,,,A,3/31/2020 11:00,73866d674cb80020557b0e84a477c7ffd864151a,2020-03-31T20:00:00Z,18,154,13826,13826,13826,41,2,14,859,84,943
+20200331,PA,4843,37645,,,514,,,,,,A,3/31/2020 12:00,4da96641b4571610eb81ebb1f5bb13e131eb881d,2020-03-31T20:00:00Z,63,514,42488,42488,42488,42,14,128,3868,756,4624
+20200331,PR,239,1195,854,,,,,,,,A,3/30/2020 07:00,2e469a2e2aed91ca0d53b02ee614b9e56d183e69,2020-03-31T20:00:00Z,8,,2288,1434,1434,72,2,0,264,65,329
+20200331,RI,489,3476,,59,,9,,6,,35,B,3/31/2020 00:00,670726ceb8f633e51bf5607fad1e9264a97dfdba,2020-03-31T20:00:00Z,8,,3965,3965,3965,44,4,0,289,87,376
+20200331,SC,1083,4616,,,102,,,,,,B,3/31/2020 16:31,4a46cca0e478a5bdffafa980b85d48b03fb95d3e,2020-03-31T20:00:00Z,22,102,5699,5699,5699,45,4,0,456,158,614
+20200331,SD,108,3609,0,,12,,,,,44,A,3/31/2020 12:30,1e2ec75b2221a16cc97f33315aef29472f2d5125,2020-03-31T20:00:00Z,1,12,3717,3717,3717,46,0,12,131,7,138
+20200331,TN,2239,25121,,,175,,,,,121,A,3/31/2020 15:00,7b0db1f93750479d021b16de82ec4072e1ad98ed,2020-03-31T20:00:00Z,23,175,27360,27360,27360,47,10,27,3651,405,4056
+20200331,TX,3266,39726,,196,,,,,,38,A,3/31/2020 13:45,35dc801ba2cef6824b0c9a97c5a2f57f3bb52804,2020-03-31T20:00:00Z,41,,42992,42992,42992,48,7,0,6723,389,7112
+20200331,UT,887,17626,,,73,,,,,,A,3/31/2020 15:00,a31fdb3429ef7247cb3c582e6228faea57b8bc73,2020-03-31T20:00:00Z,5,73,18513,18513,18513,49,1,73,2429,81,2510
+20200331,VA,1250,12151,,,165,,,,,,A,3/31/2020 00:00,efa2161fbf28bff9cc339e05dff758e51a7de03b,2020-03-31T20:00:00Z,27,165,13401,13401,13401,51,2,29,1133,230,1363
 20200331,VI,30,126,24,,,,,,,21,,3/30/2020 17:00,03d876a233dc584b5c483efb680e5f271ab90008,2020-03-31T20:00:00Z,,,180,156,156,78,0,0,0,0,0
-20200331,VT,293,3957,,21,36,,,,,15,,3/31/2020 13:00,07cb5ee39e7442712846fafd3a8957993c77790c,2020-03-31T20:00:00Z,13,36,4250,4250,4250,50,1,18,283,37,320
-20200331,WA,6049,78384,,,,,,,,,,3/31/2020 00:00,902e6708975c928a2327fd4639146a05845433d0,2020-03-31T20:00:00Z,262,,84433,84433,84433,53,14,0,4126,460,4586
-20200331,WI,1351,17375,,,337,,,,,,,3/31/2020 16:00,95d491af3eca3f3225dc7bf37a2c7bba6eb2cf71,2020-03-31T20:00:00Z,16,337,18726,18726,18726,55,2,337,1519,130,1649
-20200331,WV,162,3981,,,1,,,,,,,3/31/2020 00:00,443f6edd9312c75b894eeb28e8cc1892fea52307,2020-03-31T20:00:00Z,1,1,4143,4143,4143,54,0,0,997,36,1033
-20200331,WY,109,1999,,,17,,,,,26,,3/31/2020 10:37,f80bc0e4b9d4333742d16893eaa12b39570092af,2020-03-31T20:00:00Z,0,17,2108,2108,2108,56,0,0,159,15,174
-20200330,AK,114,3540,,,7,,,,,,,3/29/2020 19:00,97e72a98ca9366e414a8728401bcfffaf89eeeb2,2020-03-30T20:00:00Z,3,7,3654,3654,3654,02,1,1,308,12,320
-20200330,AL,859,5694,,,,,,,,,,3/29/2020 00:00,7ba0d4a68a3a30cf8126a9a3a0c5569c4f978bfc,2020-03-30T20:00:00Z,6,,6553,6553,6553,01,2,0,1510,53,1563
-20200330,AR,473,5262,,62,,,,21,,29,,3/30/2020 15:42,2f0e9add5e10086062e2b73232c34b6d2efdbe2d,2020-03-30T20:00:00Z,7,,5735,5735,5735,05,1,0,2235,47,2282
+20200331,VT,293,3957,,21,36,,,,,15,A,3/31/2020 13:00,77784ba7778397189bdba421e26bb79f6e1bffba,2020-03-31T20:00:00Z,13,36,4250,4250,4250,50,1,18,283,37,320
+20200331,WA,6049,78384,,,,,,,,,A,3/31/2020 00:00,b929be7cd12fab6f71563eb009d01d24add9a301,2020-03-31T20:00:00Z,262,,84433,84433,84433,53,14,0,4126,460,4586
+20200331,WI,1351,17375,,,337,,,,,,A,3/31/2020 16:00,50a2ad2d05de101552f3992401741d144bb42949,2020-03-31T20:00:00Z,16,337,18726,18726,18726,55,2,337,1519,130,1649
+20200331,WV,162,3981,,,1,,,,,,B,3/31/2020 00:00,4d5500eb299c45b7b5f33f1836e171f208d9410a,2020-03-31T20:00:00Z,1,1,4143,4143,4143,54,0,0,997,36,1033
+20200331,WY,109,1999,,,17,,,,,26,A,3/31/2020 10:37,ed67c54ca4d4eeec8456526e2b96d66b79a79405,2020-03-31T20:00:00Z,0,17,2108,2108,2108,56,0,0,159,15,174
+20200330,AK,114,3540,,,7,,,,,,A,3/29/2020 19:00,bd793c54a5c308dd75c908245d900e79a3c89812,2020-03-30T20:00:00Z,3,7,3654,3654,3654,02,1,1,308,12,320
+20200330,AL,859,5694,,,,,,,,,B,3/29/2020 00:00,609df05ff169b971fb34dcb3a6b2b1602bc9ddc6,2020-03-30T20:00:00Z,6,,6553,6553,6553,01,2,0,1510,53,1563
+20200330,AR,473,5262,,62,,,,21,,29,A,3/30/2020 15:42,347f936bd853834b4b7f1c0c198c00de8f193e57,2020-03-30T20:00:00Z,7,,5735,5735,5735,05,1,0,2235,47,2282
 20200330,AS,,,,,,,,,,,,3/30/2020 00:00,d36fc9801ec42649c071c0cd228bbb708eea7665,2020-03-30T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200330,AZ,1157,15602,,,,,,,,,,3/30/2020 00:00,74e5adc9f24d2ab0e57759305445f063afbaad9f,2020-03-30T20:00:00Z,20,,16759,16759,16759,04,3,0,2649,238,2887
-20200330,CA,6447,20549,64400,1432,,597,,,,,,3/30/2020 00:00,ba650d3ba059138095a594d8ba496adc76e616d4,2020-03-30T20:00:00Z,133,,91396,26996,26996,06,10,0,0,739,739
-20200330,CO,2627,12737,,358,414,,,,,,,3/30/2020 17:00,4ed920ab85c5a9916068d47a3662e19c8f8083ba,2020-03-30T20:00:00Z,51,414,15364,15364,15364,08,7,140,1522,566,2088
-20200330,CT,2571,12029,,517,,,,,,,,3/30/2020 11:30,608e9110439ce45b4f7d798b620aa58707e19442,2020-03-30T20:00:00Z,36,,14600,14600,14600,09,2,0,2122,578,2700
-20200330,DC,401,2682,2,,,,,,,106,,3/29/2020 20:45,708fea58ff3027f8d5c1123a26195e421d3322da,2020-03-30T20:00:00Z,9,,3085,3083,3083,11,4,0,213,59,272
-20200330,DE,264,2216,,45,,,,,,9,,3/30/2020 00:00,26222528bb7fb850ff5c0e685695b43598babc95,2020-03-30T20:00:00Z,6,,2480,2480,2480,10,0,0,2180,32,2212
-20200330,FL,5473,48225,,,652,,,,,,,3/30/2020 11:30,d67c3ad23eab9982fc4d3b6bb4754d34e93df714,2020-03-30T20:00:00Z,63,652,53698,53698,53698,12,7,58,9155,1227,10382
-20200330,GA,2809,9915,,,707,,,,,,,3/30/2020 11:28,152298b7712789753f67915a9b529907d021304c,2020-03-30T20:00:00Z,87,707,12724,12724,12724,13,7,41,2,158,160
+20200330,AZ,1157,15602,,,,,,,,,B,3/30/2020 00:00,116c9429446cf9ff2c92cf015421a255722a8aa8,2020-03-30T20:00:00Z,20,,16759,16759,16759,04,3,0,2649,238,2887
+20200330,CA,6447,20549,64400,1432,,597,,,,,B,3/30/2020 00:00,939374d27265e16a2e10aa30b5286d65fc15c714,2020-03-30T20:00:00Z,133,,91396,26996,26996,06,10,0,0,739,739
+20200330,CO,2627,12737,,358,414,,,,,,A,3/30/2020 17:00,91020ccedf24ab4183b0101b6891606d2e1c196f,2020-03-30T20:00:00Z,51,414,15364,15364,15364,08,7,140,1522,566,2088
+20200330,CT,2571,12029,,517,,,,,,,A,3/30/2020 11:30,125e70f9e4041de5cb4c1018f3ef41ac1cadc9c1,2020-03-30T20:00:00Z,36,,14600,14600,14600,09,2,0,2122,578,2700
+20200330,DC,401,2682,2,,,,,,,106,A,3/29/2020 20:45,661a50f92783e254bddd9c89c98ca33a518b5b82,2020-03-30T20:00:00Z,9,,3085,3083,3083,11,4,0,213,59,272
+20200330,DE,264,2216,,45,,,,,,9,C,3/30/2020 00:00,695794e04761630f5a5644975930fa6089b985bf,2020-03-30T20:00:00Z,6,,2480,2480,2480,10,0,0,2180,32,2212
+20200330,FL,5473,48225,,,652,,,,,,A,3/30/2020 11:30,3345e2b7b5f5331b0cc101429e95e264d3df8934,2020-03-30T20:00:00Z,63,652,53698,53698,53698,12,7,58,9155,1227,10382
+20200330,GA,2809,9915,,,707,,,,,,A,3/30/2020 11:28,a7dea476a300ae3a7f5867e16e68d873131b4643,2020-03-30T20:00:00Z,87,707,12724,12724,12724,13,7,41,2,158,160
 20200330,GU,58,352,,19,,2,,,,7,,3/30/2020 04:30,3931565edb4f17d79e9c546dea97a32c5dc72390,2020-03-30T20:00:00Z,1,,410,410,410,66,0,0,18,2,20
-20200330,HI,175,7825,,,12,,,,,,,3/29/2020 18:00,4b1e8e35654d10cc99890f6dab2b3af32973c828,2020-03-30T20:00:00Z,,12,8000,8000,8000,15,0,0,976,24,1000
-20200330,IA,424,6162,,51,74,,,,,23,,3/30/2020 00:00,a86e6c4a991825416badaf55b01010aed359de0e,2020-03-30T20:00:00Z,6,74,6586,6586,6586,19,2,6,1149,88,1237
-20200330,ID,310,4396,,,39,,,,,,,3/29/2020 19:00,94ebd1df0df5e36299ca15c72cbc943dd91782ee,2020-03-30T20:00:00Z,6,39,4706,4706,4706,16,1,3,375,49,424
-20200330,IL,5057,25389,,,,,,,,,,3/29/2020 00:00,f0994dd11f627c6e4a6aad1852b65a1bbdc0dcad,2020-03-30T20:00:00Z,73,,30446,30446,30446,17,8,0,2223,461,2684
-20200330,IN,1786,9872,,,,,,,,,,3/29/2020 12:59,cb34a1efcf2c62cfd44055c1289b8a35ddcbc2cd,2020-03-30T20:00:00Z,35,,11658,11658,11658,18,3,0,1556,272,1828
-20200330,KS,368,4554,,,66,,,,,,,3/30/2020 11:00,3028c7178307c29779bdcc3bfc996dda9b9723cb,2020-03-30T20:00:00Z,8,66,4922,4922,4922,20,2,11,360,49,409
-20200330,KY,439,5579,,,,,,,,,,3/29/2020 17:00,1ff73916aef4312a4a373df66640a2dbdf816df1,2020-03-30T20:00:00Z,9,,6018,6018,6018,21,0,0,432,45,477
-20200330,LA,4025,30008,,1185,,,,385,,,,3/30/2020 13:00,ccbe582d07b41711b471284ec9317a09e72cc9bc,2020-03-30T20:00:00Z,185,,34033,34033,34033,22,34,0,5677,485,6162
-20200330,MA,5653,37166,,,453,,,,,,,3/30/2020 16:15,94d0045ca12c3c724650591c814e1abd82935893,2020-03-30T20:00:00Z,124,453,42819,42819,42819,25,25,54,2932,797,3729
-20200330,MD,1413,13316,,,353,,,,,,,3/30/2020 10:00,b9fdabd96a2a0ef9354816af138d50a806ad93a6,2020-03-30T20:00:00Z,15,353,14729,14729,14729,24,5,76,962,174,1136
-20200330,ME,275,3394,,,49,,,,,41,,3/30/2020 12:00,e9f08a394eb450fc84ed43e38f379bbc4bccc2d7,2020-03-30T20:00:00Z,3,49,3669,3669,3669,23,0,49,0,22,22
-20200330,MI,10901,21183,,,,,,,,,,3/30/2020 16:00,32574538d65008e9f5a3ab429c5d6c71ab2a7ab4,2020-03-30T20:00:00Z,184,,32084,32084,32084,26,52,0,5507,891,6398
-20200330,MN,576,18246,,56,92,24,24,,,,,3/30/2020 00:00,b49b2b5852e4389c7872a880e5b14c39d072b101,2020-03-30T20:00:00Z,10,92,18822,18822,18822,27,1,17,1092,73,1165
-20200330,MO,1031,13204,,,,,,,,,,3/30/2020 16:00,87119efc442b3101b08794f7d149f541421eb0cf,2020-03-30T20:00:00Z,13,,14235,14235,14235,29,3,0,1657,193,1850
+20200330,HI,175,7825,,,12,,,,,,A,3/29/2020 18:00,8b37e1a6e24372990d030e5ddf8482be93951286,2020-03-30T20:00:00Z,,12,8000,8000,8000,15,0,0,976,24,1000
+20200330,IA,424,6162,,51,74,,,,,23,C,3/30/2020 00:00,a4a03d7ee6ef0f6a9f7fc0bd77f00cecbdcf520f,2020-03-30T20:00:00Z,6,74,6586,6586,6586,19,2,6,1149,88,1237
+20200330,ID,310,4396,,,39,,,,,,A,3/29/2020 19:00,946c7de6b5770de9fe203ab625bafee0cd3e007c,2020-03-30T20:00:00Z,6,39,4706,4706,4706,16,1,3,375,49,424
+20200330,IL,5057,25389,,,,,,,,,A,3/29/2020 00:00,533312dff1b1b4ab9d07280d569bbfd767bb905e,2020-03-30T20:00:00Z,73,,30446,30446,30446,17,8,0,2223,461,2684
+20200330,IN,1786,9872,,,,,,,,,B,3/29/2020 12:59,cbacb6f7b0af11baca016b7fb9f8c7a72da91514,2020-03-30T20:00:00Z,35,,11658,11658,11658,18,3,0,1556,272,1828
+20200330,KS,368,4554,,,66,,,,,,B,3/30/2020 11:00,fc76449fa64fa0b03b402fdd31a81a03dcdabff9,2020-03-30T20:00:00Z,8,66,4922,4922,4922,20,2,11,360,49,409
+20200330,KY,439,5579,,,,,,,,,A,3/29/2020 17:00,1de77fadf0bad9b5749f921331973b5e3885a66f,2020-03-30T20:00:00Z,9,,6018,6018,6018,21,0,0,432,45,477
+20200330,LA,4025,30008,,1185,,,,385,,,A,3/30/2020 13:00,02d2ff35a0a030bb1450d4f793b11e2ff5dfdacb,2020-03-30T20:00:00Z,185,,34033,34033,34033,22,34,0,5677,485,6162
+20200330,MA,5653,37166,,,453,,,,,,B,3/30/2020 16:15,1675e1a01a3ffc64db3a6a4c2e9de93e56a05537,2020-03-30T20:00:00Z,124,453,42819,42819,42819,25,25,54,2932,797,3729
+20200330,MD,1413,13316,,,353,,,,,,A,3/30/2020 10:00,3d4508879a35831793fcb0ee01c73efc83c42ac9,2020-03-30T20:00:00Z,15,353,14729,14729,14729,24,5,76,962,174,1136
+20200330,ME,275,3394,,,49,,,,,41,A,3/30/2020 12:00,8cf8924ae332ffd044eef8d08a77199b2f9df5a6,2020-03-30T20:00:00Z,3,49,3669,3669,3669,23,0,49,0,22,22
+20200330,MI,10901,21183,,,,,,,,,B,3/30/2020 16:00,6cd1832421e9bdafaafd48c6c58535a3db77b1a5,2020-03-30T20:00:00Z,184,,32084,32084,32084,26,52,0,5507,891,6398
+20200330,MN,576,18246,,56,92,24,24,,,,A,3/30/2020 00:00,8e1254ef51d0b04f0d5c9a7a1198dc6c6f3ca70e,2020-03-30T20:00:00Z,10,92,18822,18822,18822,27,1,17,1092,73,1165
+20200330,MO,1031,13204,,,,,,,,,C,3/30/2020 16:00,8ea65a46d8becbfdabbcc06090486ba98c3f6ec8,2020-03-30T20:00:00Z,13,,14235,14235,14235,29,3,0,1657,193,1850
 20200330,MP,2,,,,,,,,,,,3/30/2020 01:30,65a7c55492404c9fc5ed3760913620db776ad92a,2020-03-30T20:00:00Z,,,2,2,2,69,0,0,0,0,0
-20200330,MS,847,2989,,,195,,,,,,,3/29/2020 19:00,06b582cf066407893081c963f30aaf295ecbe7a4,2020-03-30T20:00:00Z,16,195,3836,3836,3836,28,2,-40,429,89,518
-20200330,MT,171,4143,,,10,,,,,,,3/30/2020 10:00,0c4832618dd0d16b6e28e2bb09fe72c037d29e1b,2020-03-30T20:00:00Z,4,10,4314,4314,4314,30,3,2,0,17,17
-20200330,NC,1307,19557,,137,,,,,,,,3/30/2020 11:00,74331e050c333b836e78e1c4cfe248e3eeeb91d4,2020-03-30T20:00:00Z,6,,20864,20864,20864,37,2,0,1652,267,1919
-20200330,ND,109,3728,,,19,,,,,19,,3/30/2020 12:00,a569f75d65f4115be58fefa0484e4926ff8f4a9e,2020-03-30T20:00:00Z,2,19,3837,3837,3837,38,1,2,373,11,384
-20200330,NE,145,2584,5,,,,,,,,,3/30/2020 14:30,30360574672684044a229726e309b4e47107bddf,2020-03-30T20:00:00Z,2,,2734,2729,2729,31,0,0,616,37,653
-20200330,NH,314,5386,144,,45,,,,,,,3/29/2020 09:00,3d614f05bf3febd968b28449f020909f03f88b69,2020-03-30T20:00:00Z,3,45,5844,5700,5700,33,1,12,862,100,962
-20200330,NJ,16636,25224,,2000,,,,,,,,3/29/2020 13:30,0ab29c12371f3e2728d1ab633220fa77e028c0c2,2020-03-30T20:00:00Z,198,,41860,41860,41860,34,37,0,3008,3250,6258
-20200330,NM,237,10942,,22,,,,,,26,,3/29/2020 00:00,600d013d74c6b4f3ba215cb349e5189987bc870f,2020-03-30T20:00:00Z,2,,11179,11179,11179,35,0,0,173,0,173
-20200330,NV,1008,10207,,,,,,,,,,3/30/2020 12:00,3200875e40a78d0fd34775d7055a7596febca424,2020-03-30T20:00:00Z,15,,11215,11215,11215,32,1,0,1795,270,2065
-20200330,NY,66497,119971,,9517,13721,2352,,,,4204,,3/29/2020 09:16,ab132ab53b5c3111eddc1876843bb0ac54ff3d83,2020-03-30T20:00:00Z,1218,13721,186468,186468,186468,36,253,1646,7124,6984,14108
-20200330,OH,1933,25342,,,475,,163,,,,,3/30/2020 14:00,4a15799ad47b3b4896c337873a129acbdbc955e8,2020-03-30T20:00:00Z,39,475,27275,27275,27275,39,10,72,6330,280,6610
-20200330,OK,481,1207,,,153,103,,,,,,3/30/2020 08:00,6df7afc89d23042fdba1ccb51ef74ed6928a27e2,2020-03-30T20:00:00Z,17,153,1688,1688,1688,40,1,13,2,52,54
-20200330,OR,606,12277,,132,140,,,39,,,,3/30/2020 11:00,4fb85fe2451a8c5525fc88063aeca4261c94310a,2020-03-30T20:00:00Z,16,140,12883,12883,12883,41,3,11,1399,58,1457
-20200330,PA,4087,33777,,,386,,,,,,,3/30/2020 12:00,db513f81d010427f9f7e377626ac5aabcc88388e,2020-03-30T20:00:00Z,49,386,37864,37864,37864,42,11,33,3716,693,4409
-20200330,PR,174,931,794,,,,,,,,,3/30/2020 07:00,6c73a505ff6dcc020c1602a69b2745aa03ae895a,2020-03-30T20:00:00Z,6,,1899,1105,1105,72,1,0,90,47,137
-20200330,RI,402,3187,,41,,9,,6,,,,3/30/2020 00:00,91ec61f954d2f385a9f47c41d525d5f54bbaa803,2020-03-30T20:00:00Z,4,,3589,3589,3589,44,1,0,347,108,455
-20200330,SC,925,4160,,,129,,,,,,,3/30/2020 16:00,267bbfe75bce7bbbe7ccd527036e1a8c9a425192,2020-03-30T20:00:00Z,18,129,5085,5085,5085,45,2,0,1145,151,1296
-20200330,SD,101,3478,0,,,,,,,34,,3/30/2020 12:30,d9d536195aac036bf4c6e29000d654d23c93694f,2020-03-30T20:00:00Z,1,,3579,3579,3579,46,0,0,351,11,362
-20200330,TN,1834,21470,,,148,,,,,,,3/30/2020 15:00,d0b3c25adad21ad9a80384573511f2ee8a1b9609,2020-03-30T20:00:00Z,13,148,23304,23304,23304,47,6,15,2433,297,2730
-20200330,TX,2877,33003,,,,,,,,38,,3/30/2020 12:45,064c58267853978f3a21043c7c7261d69b13b934,2020-03-30T20:00:00Z,34,,35880,35880,35880,48,0,0,9795,325,10120
-20200330,UT,806,15197,,,,,,,,,,3/30/2020 15:00,f8cf9c929be93430088983acc29686815a71a17c,2020-03-30T20:00:00Z,4,,16003,16003,16003,49,2,0,1923,87,2010
-20200330,VA,1020,11018,,,136,,,,,,,3/30/2020 00:00,9cc5e3e5dd1367cb6ae73be894a7f34bf59589e0,2020-03-30T20:00:00Z,25,136,12038,12038,12038,51,3,24,1299,130,1429
+20200330,MS,847,2989,,,195,,,,,,B,3/29/2020 19:00,6db2730eab948a4b333bf3e9d735fe0400dfc18d,2020-03-30T20:00:00Z,16,195,3836,3836,3836,28,2,-40,429,89,518
+20200330,MT,171,4143,,,10,,,,,,A,3/30/2020 10:00,4e4e5ee3bbfdbaf870bf5239190a9bfabde24cdd,2020-03-30T20:00:00Z,4,10,4314,4314,4314,30,3,2,0,17,17
+20200330,NC,1307,19557,,137,,,,,,,A,3/30/2020 11:00,d18f7d1fd85e2fa6a7f41ff59952b0710dad0b38,2020-03-30T20:00:00Z,6,,20864,20864,20864,37,2,0,1652,267,1919
+20200330,ND,109,3728,,,19,,,,,19,B,3/30/2020 12:00,01942159e87fca9128166b49bbcabafe5ce49ced,2020-03-30T20:00:00Z,2,19,3837,3837,3837,38,1,2,373,11,384
+20200330,NE,145,2584,5,,,,,,,,A,3/30/2020 14:30,8b0022e5ce7647a99ac436ccb7ad1d2e60839af1,2020-03-30T20:00:00Z,2,,2734,2729,2729,31,0,0,616,37,653
+20200330,NH,314,5386,144,,45,,,,,,B,3/29/2020 09:00,1293fb2ff90924a69fa734118a678c09650ed6e2,2020-03-30T20:00:00Z,3,45,5844,5700,5700,33,1,12,862,100,962
+20200330,NJ,16636,25224,,2000,,,,,,,A,3/29/2020 13:30,29d4f15d846d4ab8a298129007f2262d790ea56d,2020-03-30T20:00:00Z,198,,41860,41860,41860,34,37,0,3008,3250,6258
+20200330,NM,237,10942,,22,,,,,,26,A,3/29/2020 00:00,8dba4eeacb51f7881523c0f0a85197f59103dec0,2020-03-30T20:00:00Z,2,,11179,11179,11179,35,0,0,173,0,173
+20200330,NV,1008,10207,,,,,,,,,A,3/30/2020 12:00,7ad871bcff059484f3ca768fa10946b3a51e5183,2020-03-30T20:00:00Z,15,,11215,11215,11215,32,1,0,1795,270,2065
+20200330,NY,66497,119971,,9517,13721,2352,,,,4204,A,3/29/2020 09:16,3ce0f66b4b2a93caf488dd34387462396ba5aa3b,2020-03-30T20:00:00Z,1218,13721,186468,186468,186468,36,253,1646,7124,6984,14108
+20200330,OH,1933,25342,,,475,,163,,,,B,3/30/2020 14:00,3fe8c1314fb7c76928d0e7dfe795138cdee7e5f7,2020-03-30T20:00:00Z,39,475,27275,27275,27275,39,10,72,6330,280,6610
+20200330,OK,481,1207,,,153,103,,,,,B,3/30/2020 08:00,e2418d3a97a6f8979756913a3b919c31faaf5a02,2020-03-30T20:00:00Z,17,153,1688,1688,1688,40,1,13,2,52,54
+20200330,OR,606,12277,,132,140,,,39,,,A,3/30/2020 11:00,578b5a17463612dee29eb2a9217e4734a7f735c2,2020-03-30T20:00:00Z,16,140,12883,12883,12883,41,3,11,1399,58,1457
+20200330,PA,4087,33777,,,386,,,,,,A,3/30/2020 12:00,8e2e57fbf0afac11f430e8935a84dffed485bb77,2020-03-30T20:00:00Z,49,386,37864,37864,37864,42,11,33,3716,693,4409
+20200330,PR,174,931,794,,,,,,,,A,3/30/2020 07:00,ce2a0e01ccd1c7df80ce054a8001da2fcad73bf3,2020-03-30T20:00:00Z,6,,1899,1105,1105,72,1,0,90,47,137
+20200330,RI,402,3187,,41,,9,,6,,,B,3/30/2020 00:00,cb8295d645f0e77cb2c67157bb541d77ba4f2e29,2020-03-30T20:00:00Z,4,,3589,3589,3589,44,1,0,347,108,455
+20200330,SC,925,4160,,,102,,,,,,B,3/30/2020 16:00,d8306542c145bebb90f285d10ac766b8776dbb59,2020-03-30T20:00:00Z,18,102,5085,5085,5085,45,2,0,1145,151,1296
+20200330,SD,101,3478,0,,,,,,,34,A,3/30/2020 12:30,061d41786f81b3a3e18f1796a84254ddf938f719,2020-03-30T20:00:00Z,1,,3579,3579,3579,46,0,0,351,11,362
+20200330,TN,1834,21470,,,148,,,,,,A,3/30/2020 15:00,983fd57e027980ab90d8b15da66c9283a74b3d4f,2020-03-30T20:00:00Z,13,148,23304,23304,23304,47,6,15,2433,297,2730
+20200330,TX,2877,33003,,,,,,,,38,A,3/30/2020 12:45,c921c88eb1bf2827b20f8a533ec778d959a89d1a,2020-03-30T20:00:00Z,34,,35880,35880,35880,48,0,0,9795,325,10120
+20200330,UT,806,15197,,,,,,,,,A,3/30/2020 15:00,de0019eaa1a86c8613c0b594d40b89364cb47b33,2020-03-30T20:00:00Z,4,,16003,16003,16003,49,2,0,1923,87,2010
+20200330,VA,1020,11018,,,136,,,,,,A,3/30/2020 00:00,9609601318aad4108952831e350080fc07df5d7f,2020-03-30T20:00:00Z,25,136,12038,12038,12038,51,3,24,1299,130,1429
 20200330,VI,30,126,24,,,,,,,,,3/30/2020 11:00,2205e06f30b183b1016faa0689c5c5e51eca9089,2020-03-30T20:00:00Z,,,180,156,156,78,0,0,3,7,10
-20200330,VT,256,3674,,,18,,,,,,,3/30/2020 13:00,c2d32812670482cf410c307f82f5124baf847123,2020-03-30T20:00:00Z,12,18,3930,3930,3930,50,0,0,208,21,229
-20200330,WA,5589,74258,,,,,,,,,,3/29/2020 02:59,7e1f3e221c32c9da3a38a63afe724d6b15610380,2020-03-30T20:00:00Z,248,,79847,79847,79847,53,11,0,4470,468,4938
-20200330,WI,1221,15856,,,,,,,,,,3/30/2020 16:00,b87a4744b388dffbcd795769e2624977e565b7e9,2020-03-30T20:00:00Z,14,,17077,17077,17077,55,1,0,-694,109,-585
-20200330,WV,126,2984,0,,1,,,,,,,3/30/2020 14:10,3f9ce4f5338dc325960d256cae939c95bd672c30,2020-03-30T20:00:00Z,1,1,3110,3110,3110,54,1,0,279,13,292
-20200330,WY,94,1840,,,17,,,,,24,,3/30/2020 00:00,fcea26a7f02d7e56fd51796b88dc01e92d1daf87,2020-03-30T20:00:00Z,0,17,1934,1934,1934,56,0,2,286,8,294
-20200329,AK,102,3232,,,6,,,,,,,3/28/2020 19:00,71f3375925074c6117030962affa2bdbd558176f,2020-03-29T20:00:00Z,2,6,3334,3334,3334,02,0,1,396,17,413
-20200329,AL,806,4184,,,,,,,,,,3/29/2020 00:00,43f6a6f3f87f67d29e4c2e4a6cc9e26ae67bc05f,2020-03-29T20:00:00Z,4,,4990,4990,4990,01,1,0,0,110,110
-20200329,AR,426,3027,,43,,,,16,,28,,3/29/2020 11:10,84797b080f48f26795ce1c2295f366428a2b833c,2020-03-29T20:00:00Z,6,,3453,3453,3453,05,1,0,89,22,111
+20200330,VT,256,3674,,,18,,,,,,A,3/30/2020 13:00,4e126fdae4a31fe143295111afbe15deb87cb8fb,2020-03-30T20:00:00Z,12,18,3930,3930,3930,50,0,0,208,21,229
+20200330,WA,5589,74258,,,,,,,,,A,3/29/2020 02:59,0844db9f8f256c87b60bab0cc73b53bcaf3db31a,2020-03-30T20:00:00Z,248,,79847,79847,79847,53,11,0,4470,468,4938
+20200330,WI,1221,15856,,,,,,,,,A,3/30/2020 16:00,1276a1e98e3946935676a311321d0c402fb5a8fc,2020-03-30T20:00:00Z,14,,17077,17077,17077,55,1,0,-694,109,-585
+20200330,WV,126,2984,0,,1,,,,,,B,3/30/2020 14:10,49e651081b432b9b134ef88e97c1cf0e539aefbf,2020-03-30T20:00:00Z,1,1,3110,3110,3110,54,1,0,279,13,292
+20200330,WY,94,1840,,,17,,,,,24,A,3/30/2020 00:00,e20b003a55869a28cfaf1a2e40de1438641432af,2020-03-30T20:00:00Z,0,17,1934,1934,1934,56,0,2,286,8,294
+20200329,AK,102,3232,,,6,,,,,,A,3/28/2020 19:00,c2ee8258d18576b80e5c15f9e8460dfd173fe98d,2020-03-29T20:00:00Z,2,6,3334,3334,3334,02,0,1,396,17,413
+20200329,AL,806,4184,,,,,,,,,B,3/29/2020 00:00,b7381e0229039e088e4e9720ae700caff4e4a93b,2020-03-29T20:00:00Z,4,,4990,4990,4990,01,1,0,0,110,110
+20200329,AR,426,3027,,43,,,,16,,28,A,3/29/2020 11:10,fa441a6cda9d4b048e148882290f9b683ba9f1c6,2020-03-29T20:00:00Z,6,,3453,3453,3453,05,1,0,89,22,111
 20200329,AS,,,,,,,,,,,,3/27/2020 00:00,d5b5d5aefbc904e3d5ad69850e8d634e712c55f7,2020-03-29T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200329,AZ,919,12953,,,,,,,,,,3/29/2020 00:00,147fd02a95e611757d349e62f49c718b71392f4d,2020-03-29T20:00:00Z,17,,13872,13872,13872,04,2,0,5498,46,5544
-20200329,CA,5708,20549,64400,1034,,410,,,,,,3/29/2020 14:18,0f7febfb7d91979d48c162e6efef9a05da472a15,2020-03-29T20:00:00Z,123,,90657,26257,26257,06,22,0,0,1065,1065
-20200329,CO,2061,11215,,332,274,,,,,,,3/28/2020 18:00,9635913b146790d34a24fc1544a735bb9081f4ec,2020-03-29T20:00:00Z,44,274,13276,13276,13276,08,13,35,1273,327,1600
-20200329,CT,1993,9907,,404,,,,,,,,3/29/2020 12:30,02c473ced2778216a1b7938185df8445ec63d3d0,2020-03-29T20:00:00Z,34,,11900,11900,11900,09,7,0,2798,702,3500
-20200329,DC,342,2469,1,,,,,,,66,,3/28/2020 19:45,c70ae3be7092d1cdb6c06de871e5ae3da5684c5f,2020-03-29T20:00:00Z,5,,2812,2811,2811,11,1,0,258,38,296
-20200329,DE,232,36,,33,,,,,,9,,3/29/2020 00:00,6163f5d1991e6dad45d19752f5c05dab204909e6,2020-03-29T20:00:00Z,6,,268,268,268,10,3,0,0,18,18
-20200329,FL,4246,39070,,,594,,,,,,,3/29/2020 11:30,ce3ceb21dfaeda6dd2644f96b146725f713b87df,2020-03-29T20:00:00Z,56,594,43316,43316,43316,12,2,68,3704,483,4187
-20200329,GA,2651,9913,,,666,,,,,,,3/28/2020 18:27,1e2e481677e6782aa5c471ed768737f069495d57,2020-03-29T20:00:00Z,80,666,12564,12564,12564,13,11,49,1228,285,1513
+20200329,AZ,919,12953,,,,,,,,,B,3/29/2020 00:00,f6e326b82a5be8bbb1de4e284a20120de67e0d46,2020-03-29T20:00:00Z,17,,13872,13872,13872,04,2,0,5498,46,5544
+20200329,CA,5708,20549,64400,1034,,410,,,,,B,3/29/2020 14:18,e4c08bdfb682124f99f532d43ae08b7e927b1b80,2020-03-29T20:00:00Z,123,,90657,26257,26257,06,22,0,0,1065,1065
+20200329,CO,2061,11215,,332,274,,,,,,A,3/28/2020 18:00,36cea5686ee181cc0f1f0b0bf9a92f9601a7b4ee,2020-03-29T20:00:00Z,44,274,13276,13276,13276,08,13,35,1273,327,1600
+20200329,CT,1993,9907,,404,,,,,,,A,3/29/2020 12:30,c3d1ad1b3ac83496d0c1e50b50a612b47b4900c1,2020-03-29T20:00:00Z,34,,11900,11900,11900,09,7,0,2798,702,3500
+20200329,DC,342,2469,1,,,,,,,66,A,3/28/2020 19:45,55b292c6c573e2706648ee56921e3de7acd9ede6,2020-03-29T20:00:00Z,5,,2812,2811,2811,11,1,0,258,38,296
+20200329,DE,232,36,,33,,,,,,9,C,3/29/2020 00:00,397d21bc186abbc9d3aef382a30e43976ee5aeaa,2020-03-29T20:00:00Z,6,,268,268,268,10,3,0,0,18,18
+20200329,FL,4246,39070,,,594,,,,,,A,3/29/2020 11:30,429fdb15a44ce0414665027e06429b8f76df79d0,2020-03-29T20:00:00Z,56,594,43316,43316,43316,12,2,68,3704,483,4187
+20200329,GA,2651,9913,,,666,,,,,,A,3/28/2020 18:27,93795a74a7a0fe90c9f7b38a8e5570ebff1cc41e,2020-03-29T20:00:00Z,80,666,12564,12564,12564,13,11,49,1228,285,1513
 20200329,GU,56,334,,15,,,,,,7,,3/29/2020 04:00,20f7a7e7e0cde6b168c12051aab9cf7c0d2eb312,2020-03-29T20:00:00Z,1,,390,390,390,66,0,0,35,1,36
-20200329,HI,151,6849,,,12,,,,,,,3/28/2020 18:00,91e447b6198994388076bff3fd46513c7ac09c3f,2020-03-29T20:00:00Z,,12,7000,7000,7000,15,0,4,2492,31,2523
-20200329,IA,336,5013,,51,68,,,,,17,,3/29/2020 00:00,d319cd19309aceed4d6e71940048fc8531d22127,2020-03-29T20:00:00Z,4,68,5349,5349,5349,19,1,7,638,38,676
-20200329,ID,261,4021,,,36,,,,,,,3/28/2020 18:55,745ba6d62cff3e367a88a084dc3e6876146bae5f,2020-03-29T20:00:00Z,5,36,4282,4282,4282,16,1,11,679,31,710
-20200329,IL,4596,23166,,,,,,,,,,3/29/2020 00:00,8f170ed6827b10f2dd1526f1d9c4a2c8732fbea8,2020-03-29T20:00:00Z,65,,27762,27762,27762,17,18,0,1166,1105,2271
-20200329,IN,1514,8316,,,,,,,,,,3/29/2020 11:00,187675ed968fa942844d3115f3ddcf3643a86a17,2020-03-29T20:00:00Z,32,,9830,9830,9830,18,1,0,1141,282,1423
-20200329,KS,319,4194,,,55,,,,,,,3/29/2020 11:00,61f5a719734fb96eef559aca8972520657c8c38e,2020-03-29T20:00:00Z,6,55,4513,4513,4513,20,1,28,523,58,581
-20200329,KY,394,5147,,,,,,,,,,3/28/2020 17:00,a63ee585a66349eaf74bfc298f6b6264831c0615,2020-03-29T20:00:00Z,9,,5541,5541,5541,21,1,0,326,92,418
-20200329,LA,3540,24331,,1127,,,,380,,,,3/29/2020 13:00,842de9c09f106346578920c9eb4586ad3483efcb,2020-03-29T20:00:00Z,151,,27871,27871,27871,22,14,0,2485,225,2710
-20200329,MA,4856,34234,,,399,,,,,,,3/28/2020 12:30,e3bfa4130fb5d523ef5a4d305081e658b9c934bd,2020-03-29T20:00:00Z,99,399,39090,39090,39090,25,27,49,3319,698,4017
-20200329,MD,1239,12354,,,277,,,,,,,3/29/2020 10:00,dc61be54121b78ae64aef4d2cf8a10e05cfd3959,2020-03-29T20:00:00Z,10,277,13593,13593,13593,24,5,51,838,247,1085
-20200329,ME,253,3394,,,,,,,,41,,3/29/2020 14:20,c8d9f6751ba3dd6e8493a5539f29f8d1f1ad6bc7,2020-03-29T20:00:00Z,3,,3647,3647,3647,23,2,0,0,42,42
-20200329,MI,10010,15676,,,,,,,,,,3/28/2020 14:00,db59c814fde7a12b26a8475f0dd9323ee114a97f,2020-03-29T20:00:00Z,132,,25686,25686,25686,26,40,0,1493,723,2216
-20200329,MN,503,17154,,39,75,,17,,,252,,3/29/2020 00:00,18693fd450ec41e72e4c31d731751e3ea8cf2d15,2020-03-29T20:00:00Z,9,75,17657,17657,17657,27,4,18,1466,62,1528
-20200329,MO,838,11547,,,,,,,,,,3/28/2020 15:00,ed82b0cd754410bf745388065f285c9758287dc7,2020-03-29T20:00:00Z,10,,12385,12385,12385,29,0,0,1465,0,1465
+20200329,HI,151,6849,,,12,,,,,,A,3/28/2020 18:00,a80f9852d5130845b1a0b23bb91fb25ac504a710,2020-03-29T20:00:00Z,,12,7000,7000,7000,15,0,4,2492,31,2523
+20200329,IA,336,5013,,51,68,,,,,17,C,3/29/2020 00:00,7891f598849e034ea2835f838dc6d346fd6f078a,2020-03-29T20:00:00Z,4,68,5349,5349,5349,19,1,7,638,38,676
+20200329,ID,261,4021,,,36,,,,,,A,3/28/2020 18:55,93565675f15476c00ae5575b1dc7e8c1c3ef3b21,2020-03-29T20:00:00Z,5,36,4282,4282,4282,16,1,11,679,31,710
+20200329,IL,4596,23166,,,,,,,,,A,3/29/2020 00:00,ea483cbd69cb69672cd09f1020ab4c0bf5ad93cc,2020-03-29T20:00:00Z,65,,27762,27762,27762,17,18,0,1166,1105,2271
+20200329,IN,1514,8316,,,,,,,,,B,3/29/2020 11:00,8ea6695b7b6d36fe098cab4c5d12ee05e53ffbfc,2020-03-29T20:00:00Z,32,,9830,9830,9830,18,1,0,1141,282,1423
+20200329,KS,319,4194,,,55,,,,,,B,3/29/2020 11:00,629d35ed2e28a968ee69512aec9fb1d6cf4dbe26,2020-03-29T20:00:00Z,6,55,4513,4513,4513,20,1,28,523,58,581
+20200329,KY,394,5147,,,,,,,,,A,3/28/2020 17:00,edfbd9732693ab5d92b1477532c3cc7b9780906d,2020-03-29T20:00:00Z,9,,5541,5541,5541,21,1,0,326,92,418
+20200329,LA,3540,24331,,1127,,,,380,,,A,3/29/2020 13:00,dbd60b673d986516d0c1a847bd26436776bc189f,2020-03-29T20:00:00Z,151,,27871,27871,27871,22,14,0,2485,225,2710
+20200329,MA,4856,34234,,,399,,,,,,B,3/28/2020 12:30,53e238ddcbea39356aec1b6db641b79d81fdaea1,2020-03-29T20:00:00Z,99,399,39090,39090,39090,25,27,49,3319,698,4017
+20200329,MD,1239,12354,,,277,,,,,,D,3/29/2020 10:00,ac864b4f8e67b679db6077d9402b8eb13b55bc7e,2020-03-29T20:00:00Z,10,277,13593,13593,13593,24,5,51,838,247,1085
+20200329,ME,253,3394,,,,,,,,41,A,3/29/2020 14:20,ae7854e5bb58c8a8e3eb00a6b9f3810cbe0ed996,2020-03-29T20:00:00Z,3,,3647,3647,3647,23,2,0,0,42,42
+20200329,MI,10010,15676,,,,,,,,,B,3/28/2020 14:00,e6b8203963f99feb0d8d0d107900ae9899e3e0c3,2020-03-29T20:00:00Z,132,,25686,25686,25686,26,40,0,1493,723,2216
+20200329,MN,503,17154,,39,75,,17,,,252,A,3/29/2020 00:00,7530048402eab47cbe8e370c6c179ebe262b3c39,2020-03-29T20:00:00Z,9,75,17657,17657,17657,27,4,18,1466,62,1528
+20200329,MO,838,11547,,,,,,,,,C,3/28/2020 15:00,af59b95a77defc26a4d1ba166541a0d3b8d8fe3c,2020-03-29T20:00:00Z,10,,12385,12385,12385,29,0,0,1465,0,1465
 20200329,MP,2,,,,,,,,,,,3/29/2020 01:30,1ccb8e609dd54b9c60a16e9d24925609277e4eba,2020-03-29T20:00:00Z,,,2,2,2,69,0,0,0,0,0
-20200329,MS,758,2560,,,235,,,,,,,3/28/2020 19:00,a0417d816dc6d1f606d0c4dda4fa2153a9641d26,2020-03-29T20:00:00Z,14,235,3318,3318,3318,28,1,16,0,95,95
-20200329,MT,154,4143,,,8,,,,,,,3/29/2020 10:00,fe77f31ce22abd6fb8ca6749d54afb20368db0b9,2020-03-29T20:00:00Z,1,8,4297,4297,4297,30,0,1,887,25,912
-20200329,NC,1040,17905,,91,,,,,,,,3/29/2020 10:35,3b7bca7f2fdf8339c4dfb9fcf4f23547a220fbca,2020-03-29T20:00:00Z,4,,18945,18945,18945,37,0,0,1313,105,1418
-20200329,ND,98,3355,,,17,,,,,18,,3/29/2020 12:00,aab0d839e91aa65f7c1cc92e38eb133b7ab61b53,2020-03-29T20:00:00Z,1,17,3453,3453,3453,38,0,1,546,15,561
-20200329,NE,108,1968,4,,,,,,,,,3/28/2020 20:05,e433bfab8d87189bbc170dc6124bf81c1006054a,2020-03-29T20:00:00Z,2,,2080,2076,2076,31,0,0,64,12,76
-20200329,NH,214,4524,285,,33,,,,,,,3/28/2020 09:00,2452ad341181faac21b7bdcd6ca825cb8d218082,2020-03-29T20:00:00Z,2,33,5023,4738,4738,33,0,3,868,27,895
-20200329,NJ,13386,22216,,2000,,,,,,,,3/29/2020 13:30,909750eeb3e87776c0ebde58f50f356b36f0b7c5,2020-03-29T20:00:00Z,161,,35602,35602,35602,34,21,0,2830,2262,5092
-20200329,NM,237,10769,,19,,,,,,2,,3/29/2020 00:00,68a4e33fda5edf8f1824f0bfc3f92507b4084e92,2020-03-29T20:00:00Z,2,,11006,11006,11006,35,1,0,1573,46,1619
-20200329,NV,738,8412,,,,,,,,,,3/28/2020 21:00,35cb3b020dda88d6385a1ef50253f7476f04a255,2020-03-29T20:00:00Z,14,,9150,9150,9150,32,4,0,511,117,628
-20200329,NY,59513,112847,,8503,12075,2037,,,,3572,,3/29/2020 09:16,4c4fec95087c85501d64d8d19acca22836f73435,2020-03-29T20:00:00Z,965,12075,172360,172360,172360,36,237,2021,9231,7195,16426
-20200329,OH,1653,19012,,,403,,139,,,,,3/29/2020 14:00,08ce243df612535fa5d3b20d0e5cd1e1cae35037,2020-03-29T20:00:00Z,29,403,20665,20665,20665,39,4,59,0,247,247
-20200329,OK,429,1205,,,140,,,,,,,3/29/2020 08:00,6f7e16946c7fc0a392903d721a0e78ead20ae8f5,2020-03-29T20:00:00Z,16,140,1634,1634,1634,40,1,14,25,52,77
-20200329,OR,548,10878,,107,129,,,37,,,,3/29/2020 11:00,d1efe7291fad93dcbfccb6728bf3c555c0766b55,2020-03-29T20:00:00Z,13,129,11426,11426,11426,41,0,12,1185,69,1254
-20200329,PA,3394,30061,,,353,,,,,,,3/29/2020 12:00,8fa2f415c086811937b7eb2af2f7465fb746b30d,2020-03-29T20:00:00Z,38,353,33455,33455,33455,42,4,37,4807,643,5450
-20200329,PR,127,841,817,,,,,,,,,3/29/2020 07:00,1cc640b2fa674eb87639eefcf2ea20295a7d1424,2020-03-29T20:00:00Z,5,,1785,968,968,72,2,0,102,27,129
-20200329,RI,294,2840,,35,,9,,6,,,,3/29/2020 00:00,f16702766b6f57a2fbee16bd0c0c5e8a6961e40d,2020-03-29T20:00:00Z,3,,3134,3134,3134,44,3,0,299,55,354
-20200329,SC,774,3015,,,129,,,,,,,3/29/2020 15:30,600aec624fe6cc9b560c742892f88cfd664b4d13,2020-03-29T20:00:00Z,16,129,3789,3789,3789,45,3,0,607,235,842
-20200329,SD,90,3127,1,,,,,,,29,,3/29/2020 12:30,726048cd4a1402beb199db7df6a12eebdda3eef2,2020-03-29T20:00:00Z,1,,3218,3217,3217,46,0,0,535,22,557
-20200329,TN,1537,19037,,,133,,,,,,,3/29/2020 15:00,6089cd7afe89d6d6188b12e7230788eb1128c11b,2020-03-29T20:00:00Z,7,133,20574,20574,20574,47,1,15,2072,164,2236
-20200329,TX,2552,23208,,,,,,,,,,3/29/2020 13:45,9b54d085d9479a8ca4893a90e537bba1636ec751,2020-03-29T20:00:00Z,34,,25760,25760,25760,48,7,0,0,500,500
-20200329,UT,719,13274,,,,,,,,,,3/29/2020 15:00,f0c75e1e913a62ddd8c7ee89cd81964b447d76ab,2020-03-29T20:00:00Z,2,,13993,13993,13993,49,0,0,2564,117,2681
-20200329,VA,890,9719,,,112,,,,,,,3/29/2020 00:00,24ef385ed7bcab828686de3f287e15e7f04cdfcd,2020-03-29T20:00:00Z,22,112,10609,10609,10609,51,5,13,1292,151,1443
+20200329,MS,758,2560,,,235,,,,,,B,3/28/2020 19:00,0b0ada4710a1a1c63c048e4b05fa77f0b49ad3b9,2020-03-29T20:00:00Z,14,235,3318,3318,3318,28,1,16,0,95,95
+20200329,MT,154,4143,,,8,,,,,,A,3/29/2020 10:00,2e61c6e39be677d15dedc9642f600646457bcec0,2020-03-29T20:00:00Z,1,8,4297,4297,4297,30,0,1,887,25,912
+20200329,NC,1040,17905,,91,,,,,,,A,3/29/2020 10:35,2575ab34fa9d1bb24a7cd56cd2b2cec2cd79b613,2020-03-29T20:00:00Z,4,,18945,18945,18945,37,0,0,1313,105,1418
+20200329,ND,98,3355,,,17,,,,,18,B,3/29/2020 12:00,49f6f8cab5562696e21d0f7ff4385a48c44b3625,2020-03-29T20:00:00Z,1,17,3453,3453,3453,38,0,1,546,15,561
+20200329,NE,108,1968,4,,,,,,,,A,3/28/2020 20:05,8c016329bbd223e1e338865542978888caf255b9,2020-03-29T20:00:00Z,2,,2080,2076,2076,31,0,0,64,12,76
+20200329,NH,214,4524,285,,33,,,,,,B,3/28/2020 09:00,305991cd49b7babf90ab32f93c417859d7db68c6,2020-03-29T20:00:00Z,2,33,5023,4738,4738,33,0,3,868,27,895
+20200329,NJ,13386,22216,,2000,,,,,,,A,3/29/2020 13:30,0c7d90e6676635dcca262e36a335a738a5561e5d,2020-03-29T20:00:00Z,161,,35602,35602,35602,34,21,0,2830,2262,5092
+20200329,NM,237,10769,,19,,,,,,2,A,3/29/2020 00:00,d8416cab16d6a68157435a738507e920ff044d31,2020-03-29T20:00:00Z,2,,11006,11006,11006,35,1,0,1573,46,1619
+20200329,NV,738,8412,,,,,,,,,A,3/28/2020 21:00,51e3f4ea112e31e89409fadbcb1ec1c9068f767e,2020-03-29T20:00:00Z,14,,9150,9150,9150,32,4,0,511,117,628
+20200329,NY,59513,112847,,8503,12075,2037,,,,3572,A,3/29/2020 09:16,14ad04a515955b3a813189e392106a29b0a7cf21,2020-03-29T20:00:00Z,965,12075,172360,172360,172360,36,237,2021,9231,7195,16426
+20200329,OH,1653,19012,,,403,,139,,,,B,3/29/2020 14:00,2b46c53a1aab6ea45028152a0c0de6ca22780e74,2020-03-29T20:00:00Z,29,403,20665,20665,20665,39,4,59,0,247,247
+20200329,OK,429,1205,,,140,,,,,,A,3/29/2020 08:00,f617ab40afbe93b563b4390bd071f78a64df9e7f,2020-03-29T20:00:00Z,16,140,1634,1634,1634,40,1,14,25,52,77
+20200329,OR,548,10878,,107,129,,,37,,,A,3/29/2020 11:00,5b79bed66cfbd1165fde8784cd8ea80c2c3c0c4b,2020-03-29T20:00:00Z,13,129,11426,11426,11426,41,0,12,1185,69,1254
+20200329,PA,3394,30061,,,353,,,,,,A,3/29/2020 12:00,7e6e957b76a508e202f01599190a76dc1606a77b,2020-03-29T20:00:00Z,38,353,33455,33455,33455,42,4,37,4807,643,5450
+20200329,PR,127,841,817,,,,,,,,A,3/29/2020 07:00,9e41f7d73480fae0fc2e4c540e7c15762e8b4b79,2020-03-29T20:00:00Z,5,,1785,968,968,72,2,0,102,27,129
+20200329,RI,294,2840,,35,,9,,6,,,B,3/29/2020 00:00,71d13605a1210c926ab466823b0429de165a178f,2020-03-29T20:00:00Z,3,,3134,3134,3134,44,3,0,299,55,354
+20200329,SC,774,3015,,,102,,,,,,B,3/29/2020 15:30,b02d5040ce2e06462fa13c0decaa934ab6217b68,2020-03-29T20:00:00Z,16,102,3789,3789,3789,45,3,0,607,235,842
+20200329,SD,90,3127,1,,,,,,,29,A,3/29/2020 12:30,ed77b16ec6a346cb571d26e807b59fe2eee3d6ec,2020-03-29T20:00:00Z,1,,3218,3217,3217,46,0,0,535,22,557
+20200329,TN,1537,19037,,,133,,,,,,A,3/29/2020 15:00,6678f072bcffc66aa6fc663a6ffa9279be7846a7,2020-03-29T20:00:00Z,7,133,20574,20574,20574,47,1,15,2072,164,2236
+20200329,TX,2552,23208,,,,,,,,,A,3/29/2020 13:45,67244c50e7a878fd67c221dc8ab7fe1d4e50835c,2020-03-29T20:00:00Z,34,,25760,25760,25760,48,7,0,0,500,500
+20200329,UT,719,13274,,,,,,,,,A,3/29/2020 15:00,5cd0c166459f47793b02a4b0fef2fa2b90057bfa,2020-03-29T20:00:00Z,2,,13993,13993,13993,49,0,0,2564,117,2681
+20200329,VA,890,9719,,,112,,,,,,A,3/29/2020 00:00,4d96b72d635ba6365148deef41a4be2959f876cb,2020-03-29T20:00:00Z,22,112,10609,10609,10609,51,5,13,1292,151,1443
 20200329,VI,23,123,37,,,,,,,,,3/28/2020 19:00,ff424ffda9185606b757298d86bcfff15238ae4b,2020-03-29T20:00:00Z,,,183,146,146,78,0,0,17,1,18
-20200329,VT,235,3466,,,18,,,,,,,3/29/2020 13:00,ee160af8e78aecfac1e92cbce76a8b70b25e4f68,2020-03-29T20:00:00Z,12,18,3701,3701,3701,50,0,0,1303,24,1327
-20200329,WA,5121,69788,,,,,,,,,,3/28/2020 02:59,99b5c00a0863edd104517216e1be162a22a27e73,2020-03-29T20:00:00Z,237,,74909,74909,74909,53,17,0,1586,384,1970
-20200329,WI,1112,16550,,,,,,,,,,3/29/2020 16:00,312cf9a9882c3552aaa8930ff2dee40092d87527,2020-03-29T20:00:00Z,13,,17662,17662,17662,55,0,0,1318,123,1441
-20200329,WV,113,2705,0,,1,,,,,,,3/28/2020 00:00,3967547c4b16bb8e648e584b7dac2689cbcec819,2020-03-29T20:00:00Z,0,1,2818,2818,2818,54,0,0,374,17,391
-20200329,WY,86,1554,,,15,,,,,20,,3/29/2020 00:00,335abd3bb1028d886cf4b64319be44c6f2845b1d,2020-03-29T20:00:00Z,0,15,1640,1640,1640,56,0,1,79,4,83
-20200328,AK,85,2836,,,5,,,,,,,3/27/2020 19:00,c2ade93ce69ffb80fe6e4b3ddd215f792b7f9f7f,2020-03-28T20:00:00Z,2,5,2921,2921,2921,02,1,2,517,16,533
-20200328,AL,696,4184,,,,,,,,,,3/28/2020 00:00,8c359cc7c9e7c4a4367118963edec7ab8bfab389,2020-03-28T20:00:00Z,3,,4880,4880,4880,01,0,0,0,109,109
-20200328,AR,404,2938,,48,,,,17,,24,,3/28/2020 00:00,bd8e9bc17fcdab0a6b5132f26dd26af51c10b58a,2020-03-28T20:00:00Z,5,,3342,3342,3342,05,2,0,1393,23,1416
+20200329,VT,235,3466,,,18,,,,,,A,3/29/2020 13:00,927e7a5a0d7d4fb7bcb4b44c62884b98816023c2,2020-03-29T20:00:00Z,12,18,3701,3701,3701,50,0,0,1303,24,1327
+20200329,WA,5121,69788,,,,,,,,,A,3/28/2020 02:59,ca8c5445a84c7c61dbf910f6bbe5ba4de150db67,2020-03-29T20:00:00Z,237,,74909,74909,74909,53,17,0,1586,384,1970
+20200329,WI,1112,16550,,,,,,,,,A,3/29/2020 16:00,a519521d30ddaa45265c5172310d004d9bd8e435,2020-03-29T20:00:00Z,13,,17662,17662,17662,55,0,0,1318,123,1441
+20200329,WV,113,2705,0,,1,,,,,,B,3/28/2020 00:00,965187a3d9eef471765e6b996c8a377967afcc9c,2020-03-29T20:00:00Z,0,1,2818,2818,2818,54,0,0,374,17,391
+20200329,WY,86,1554,,,15,,,,,20,A,3/29/2020 00:00,c9a0184032cc9ea691df42284d50e00aab23b5c5,2020-03-29T20:00:00Z,0,15,1640,1640,1640,56,0,1,79,4,83
+20200328,AK,85,2836,,,5,,,,,,A,3/27/2020 19:00,d2f152b139741e68736faaa776275a1d5b4dac32,2020-03-28T20:00:00Z,2,5,2921,2921,2921,02,1,2,517,16,533
+20200328,AL,696,4184,,,,,,,,,B,3/28/2020 00:00,c479369642941b671287824db858134d4f692d0b,2020-03-28T20:00:00Z,3,,4880,4880,4880,01,0,0,0,109,109
+20200328,AR,404,2938,,48,,,,17,,24,A,3/28/2020 00:00,9383166629559b1cd3a48b41542cb7ed54a31bd6,2020-03-28T20:00:00Z,5,,3342,3342,3342,05,2,0,1393,23,1416
 20200328,AS,,,,,,,,,,,,3/27/2020 00:00,81a9b7b545c10784c42e19bf4803c5e16c280ac2,2020-03-28T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200328,AZ,873,7455,21,,,,,,,,,3/28/2020 00:00,9a857f3189cbaec1b05a6e165b11e025bf092eb5,2020-03-28T20:00:00Z,15,,8349,8328,8328,04,2,0,0,137,137
-20200328,CA,4643,20549,64400,1034,,410,,,,,,3/27/2020 17:00,1834bae3e8496cbc35f21f57eea0ea4232c6e1e5,2020-03-28T20:00:00Z,101,,89592,25192,25192,06,23,0,3169,764,3933
-20200328,CO,1734,9942,,307,239,,,,,,,3/27/2020 18:00,2be2bc4d5104ebec655a16054e7a909e0835bded,2020-03-28T20:00:00Z,31,239,11676,11676,11676,08,7,55,1250,304,1554
-20200328,CT,1291,7109,,173,,,,,,,,3/27/2020 13:30,edd72b53f40c8c36bf466723ff2ca72d3f04c414,2020-03-28T20:00:00Z,27,,8400,8400,8400,09,0,0,0,0,0
-20200328,DC,304,2211,1,,,,,,,51,,3/27/2020 20:30,7d5087ec228bc3c416da0a3b423ffcb9bef4f3b0,2020-03-28T20:00:00Z,4,,2516,2515,2515,11,1,0,314,37,351
-20200328,DE,214,36,,31,,,,,,9,,3/28/2020 00:00,722448b1d9f8f15993c2086fbc9f582763d10152,2020-03-28T20:00:00Z,3,,250,250,250,10,1,0,0,51,51
-20200328,FL,3763,35366,,,526,,,,,,,3/28/2020 12:00,ed1dd12ad51d64f1be5719f2da790e24ca08f337,2020-03-28T20:00:00Z,54,526,39129,39129,39129,12,20,70,7180,998,8178
-20200328,GA,2366,8685,,,617,,,,,,,3/28/2020 11:27,7f3cea117905f639f72b54047a96df0035e6519c,2020-03-28T20:00:00Z,69,617,11051,11051,11051,13,5,51,821,365,1186
+20200328,AZ,873,7455,21,,,,,,,,B,3/28/2020 00:00,7aad1fe086909db243854a673a430135538814a6,2020-03-28T20:00:00Z,15,,8349,8328,8328,04,2,0,0,137,137
+20200328,CA,4643,20549,64400,1034,,410,,,,,B,3/27/2020 17:00,3d91bd2db74f60f3a373e4b6fcf70ea61f24340b,2020-03-28T20:00:00Z,101,,89592,25192,25192,06,23,0,3169,764,3933
+20200328,CO,1734,9942,,307,239,,,,,,A,3/27/2020 18:00,c27c3e0d4bd02cfb215e0ffe34a05e1a9168b79b,2020-03-28T20:00:00Z,31,239,11676,11676,11676,08,7,55,1250,304,1554
+20200328,CT,1291,7109,,173,,,,,,,A,3/27/2020 13:30,f1cbe70ac4cea0537b27a0c4396d26ed1bd3716b,2020-03-28T20:00:00Z,27,,8400,8400,8400,09,0,0,0,0,0
+20200328,DC,304,2211,1,,,,,,,51,A,3/27/2020 20:30,583309f7da10d82a52456e0208cdd7cbbb293b33,2020-03-28T20:00:00Z,4,,2516,2515,2515,11,1,0,314,37,351
+20200328,DE,214,36,,31,,,,,,9,C,3/28/2020 00:00,0e1c0964ea659bba8085baf08b362d965ff2eb55,2020-03-28T20:00:00Z,3,,250,250,250,10,1,0,0,51,51
+20200328,FL,3763,35366,,,526,,,,,,A,3/28/2020 12:00,f5ece735644659af97b65e84b000fa10a21412b8,2020-03-28T20:00:00Z,54,526,39129,39129,39129,12,20,70,7180,998,8178
+20200328,GA,2366,8685,,,617,,,,,,A,3/28/2020 11:27,92bb29f067ebca817697dad7557927fbccb6ac70,2020-03-28T20:00:00Z,69,617,11051,11051,11051,13,5,51,821,365,1186
 20200328,GU,55,299,,15,,,,,,7,,3/28/2020 03:00,7c31242bf654a89c625c070db8d505aea8848a55,2020-03-28T20:00:00Z,1,,354,354,354,66,0,0,0,4,4
-20200328,HI,120,4357,,,8,,,,,,,3/27/2020 18:00,d24c982c6779f361caef30d74f5aae8f32e25d8f,2020-03-28T20:00:00Z,,8,4477,4477,4477,15,0,1,0,14,14
-20200328,IA,298,4375,,46,61,,,,,15,,3/28/2020 00:00,8ceedefcaa499c9be67435a94be3e63f543e09c0,2020-03-28T20:00:00Z,3,61,4673,4673,4673,19,0,11,635,63,698
-20200328,ID,230,3342,,,25,,,,,,,3/27/2020 19:00,3fbcca8624a59bdbcaa2dde34dc738acb7892e65,2020-03-28T20:00:00Z,4,25,3572,3572,3572,16,1,25,674,41,715
-20200328,IL,3491,22000,,,,,,,,,,3/28/2020 00:00,cc09f38c665da02bd6a37e840a4ed5a7c8cf898e,2020-03-28T20:00:00Z,47,,25491,25491,25491,17,13,0,3484,465,3949
-20200328,IN,1232,7175,,,,,,,,,,3/28/2020 11:00,e47e2fd572ac9ad2b86141b58265db7b1db29393,2020-03-28T20:00:00Z,31,,8407,8407,8407,18,7,0,1220,251,1471
-20200328,KS,261,3671,,,27,,,,,,,3/27/2020 09:00,1575f0e0ca959320fc91b10d003e80fb5bb26949,2020-03-28T20:00:00Z,5,27,3932,3932,3932,20,1,0,442,59,501
-20200328,KY,302,4821,,,,,,,,,,3/27/2020 17:00,496b56bb2b01c7cc2927594aadeada573df30a15,2020-03-28T20:00:00Z,8,,5123,5123,5123,21,2,0,1053,54,1107
-20200328,LA,3315,21846,,927,,,,336,,,,3/28/2020 13:00,fe8b9df51040b8704b8644ce372e50f95a42c9c2,2020-03-28T20:00:00Z,137,,25161,25161,25161,22,18,0,3233,569,3802
-20200328,MA,4158,30915,,,350,,,,,,,3/27/2020 12:30,967a48638f4a0c4df23537c8260c1a0cf917de7f,2020-03-28T20:00:00Z,72,350,35073,35073,35073,25,15,131,4671,1007,5678
-20200328,MD,992,11516,,,226,,,,,,,3/28/2020 10:00,d9d46c05fdc49f86ebce481d3b5e6cea027d0147,2020-03-28T20:00:00Z,5,226,12508,12508,12508,24,0,53,11422,218,11640
-20200328,ME,211,3394,,,,,,,,36,,3/28/2020 10:30,31ea51862b652b7897f44a694aff404f0b133355,2020-03-28T20:00:00Z,1,,3605,3605,3605,23,0,0,0,43,43
-20200328,MI,9287,14183,,,,,,,,,,3/27/2020 16:00,9f46b677bf2ebd43c94a3b251b25c4723df4cfc9,2020-03-28T20:00:00Z,92,,23470,23470,23470,26,0,0,1544,628,2172
-20200328,MN,441,15688,,30,57,,17,,,220,,3/28/2020 00:00,46a849cbe0aa966a771dbce7bb4bf2d5c4530273,2020-03-28T20:00:00Z,5,57,16129,16129,16129,27,1,6,2083,43,2126
-20200328,MO,838,10082,,,,,,,,,,3/28/2020 15:00,0186906d2459e881824046ed0b86c8651901e37a,2020-03-28T20:00:00Z,10,,10920,10920,10920,29,2,0,9713,169,9882
+20200328,HI,120,4357,,,8,,,,,,A,3/27/2020 18:00,12e93aab6c2c73c92742b380a0839ba7c398c9f0,2020-03-28T20:00:00Z,,8,4477,4477,4477,15,0,1,0,14,14
+20200328,IA,298,4375,,46,61,,,,,15,C,3/28/2020 00:00,cd492d18d3b66967de51c42ac470bc472a02c1b8,2020-03-28T20:00:00Z,3,61,4673,4673,4673,19,0,11,635,63,698
+20200328,ID,230,3342,,,25,,,,,,A,3/27/2020 19:00,03a1a0caa26ef4558a1de4a8c132387c3decd5f4,2020-03-28T20:00:00Z,4,25,3572,3572,3572,16,1,25,674,41,715
+20200328,IL,3491,22000,,,,,,,,,A,3/28/2020 00:00,abc3b5d80839604051ee462a292ea27ab704230b,2020-03-28T20:00:00Z,47,,25491,25491,25491,17,13,0,3484,465,3949
+20200328,IN,1232,7175,,,,,,,,,B,3/28/2020 11:00,c306ca198a535318ad7ec3cbb2db0675472168ef,2020-03-28T20:00:00Z,31,,8407,8407,8407,18,7,0,1220,251,1471
+20200328,KS,261,3671,,,27,,,,,,B,3/27/2020 09:00,ae5e094172ef3ff8bea1761ff4bc02b671d18e37,2020-03-28T20:00:00Z,5,27,3932,3932,3932,20,1,0,442,59,501
+20200328,KY,302,4821,,,,,,,,,A,3/27/2020 17:00,8039941271343acc82676fc4fce0ee428a8666dd,2020-03-28T20:00:00Z,8,,5123,5123,5123,21,2,0,1053,54,1107
+20200328,LA,3315,21846,,927,,,,336,,,A,3/28/2020 13:00,3ae95b27a3fa47fe754a21a5bc2b0eedacb50153,2020-03-28T20:00:00Z,137,,25161,25161,25161,22,18,0,3233,569,3802
+20200328,MA,4158,30915,,,350,,,,,,B,3/27/2020 12:30,c5661444338774ff0dd1106cdd745a9ef7d8f88f,2020-03-28T20:00:00Z,72,350,35073,35073,35073,25,15,131,4671,1007,5678
+20200328,MD,992,11516,,,226,,,,,,D,3/28/2020 10:00,6b10ef68ac2045c0ae255bac0540aff4be8cefc6,2020-03-28T20:00:00Z,5,226,12508,12508,12508,24,0,53,11422,218,11640
+20200328,ME,211,3394,,,,,,,,36,A,3/28/2020 10:30,0836dc21f397994016d08fef22c52f0070e36917,2020-03-28T20:00:00Z,1,,3605,3605,3605,23,0,0,0,43,43
+20200328,MI,9287,14183,,,,,,,,,B,3/27/2020 16:00,6d73c5bc2e0a867a1844e2bf0fb14ebaf9bb3046,2020-03-28T20:00:00Z,92,,23470,23470,23470,26,0,0,1544,628,2172
+20200328,MN,441,15688,,30,57,,17,,,220,A,3/28/2020 00:00,03ba907d89ea01c5bb45ced630c47bfd2a18705e,2020-03-28T20:00:00Z,5,57,16129,16129,16129,27,1,6,2083,43,2126
+20200328,MO,838,10082,,,,,,,,,C,3/28/2020 15:00,4309c8eddc27e0747325fc9ff0c5bb9b5f95b504,2020-03-28T20:00:00Z,10,,10920,10920,10920,29,2,0,9713,169,9882
 20200328,MP,2,,,,,,,,,,,3/28/2020 04:30,5bcad74fdf307c34a5d48407e2fd96b0c2772fbc,2020-03-28T20:00:00Z,,,2,2,2,69,0,0,0,2,2
-20200328,MS,663,2560,,,219,,,,,,,3/28/2020 00:00,9e7f1bac4f299320266553cdbbdb72f2da62e23a,2020-03-28T20:00:00Z,13,219,3223,3223,3223,28,5,34,0,84,84
-20200328,MT,129,3256,,,7,,,,,,,3/28/2020 12:30,37132347d61998a1af605a17eb1bf2d12d8de08c,2020-03-28T20:00:00Z,1,7,3385,3385,3385,30,1,0,666,21,687
-20200328,NC,935,16592,,87,,,,,,,,3/28/2020 10:55,e529e5afc8e01d8b0c26980ab2b97b394e449445,2020-03-28T20:00:00Z,4,,17527,17527,17527,37,1,0,2219,172,2391
-20200328,ND,83,2809,,,16,,,,,16,,3/28/2020 12:00,b68a9a255efbe899c1ad9917b6ddf36e22316027,2020-03-28T20:00:00Z,1,16,2892,2892,2892,38,1,3,382,18,400
-20200328,NE,96,1904,,,,,,,,,,3/28/2020 14:40,a97bff17707b25ab62b832e56b827a275efed854,2020-03-28T20:00:00Z,2,,2000,2000,2000,31,2,0,143,11,154
-20200328,NH,187,3656,296,,30,,,,,,,3/27/2020 09:00,2ceb7cf929e22b6fe4a0f54f63def49b883a3ce8,2020-03-28T20:00:00Z,2,30,4139,3843,3843,33,1,5,261,29,290
-20200328,NJ,11124,19386,,2000,,,,,,,,3/28/2020 13:30,11f95eaea57bd1eb9bb63a3a3271027ee6e79b6e,2020-03-28T20:00:00Z,140,,30510,30510,30510,34,32,0,2839,2299,5138
-20200328,NM,191,9196,,17,,,,,,,,3/27/2020 00:00,88db7000f8d0a77d6233f4cc89e913d3602c5121,2020-03-28T20:00:00Z,1,,9387,9387,9387,35,0,0,819,55,874
-20200328,NV,621,7901,,,,,,,,,,3/27/2020 22:00,2b0b8285aa65b6399407cf9215b90ca013ee788f,2020-03-28T20:00:00Z,10,,8522,8522,8522,32,0,0,1740,86,1826
-20200328,NY,52318,103616,,7328,10054,1755,,,,2726,,3/28/2020 13:15,fe5e2ebade808390a207dc9c2d3d0b8606f025d0,2020-03-28T20:00:00Z,728,10054,155934,155934,155934,36,209,1528,2498,7683,10181
-20200328,OH,1406,19012,,,344,,123,,,,,3/28/2020 14:00,3f5eb7e6c555bd313cf527042f0899a39d60520c,2020-03-28T20:00:00Z,25,344,20418,20418,20418,39,6,68,0,269,269
-20200328,OK,377,1180,,,126,,,,,,,3/27/2020 08:00,fada260894f385a1451578d39eb255beef3e85d0,2020-03-28T20:00:00Z,15,126,1557,1557,1557,40,7,21,96,55,151
-20200328,OR,479,9693,,107,117,,,31,,,,3/27/2020 12:30,bebce1cc3dc05c8437f0590174c90049a4d0802c,2020-03-28T20:00:00Z,13,117,10172,10172,10172,41,1,15,1183,65,1248
-20200328,PA,2751,25254,,,316,,,,,,,3/28/2020 12:00,d00d03c5094bfebf6d92cc40696bd983be9adc4c,2020-03-28T20:00:00Z,34,316,28005,28005,28005,42,12,75,4238,533,4771
-20200328,PR,100,739,792,,,,,,,,,3/28/2020 07:00,ddf4791b3b4f47031adb0a5041660661d9a637ea,2020-03-28T20:00:00Z,3,,1631,839,839,72,0,0,220,21,241
-20200328,RI,239,2541,138,29,,9,,6,,,,3/28/2020 00:00,25f7e6f78b1e23493c824519e386a31cde1e9b9d,2020-03-28T20:00:00Z,,,2918,2780,2780,44,0,0,235,36,271
-20200328,SC,539,2408,,,129,,,,,,,3/27/2020 16:32,aa9cd889e7049258defec2bb0e239928513c8a05,2020-03-28T20:00:00Z,13,129,2947,2947,2947,45,4,20,101,83,184
-20200328,SD,68,2592,0,,,,,,,26,,3/28/2020 12:30,30be228afe80c5ff611ed2c08d72d5ae20944458,2020-03-28T20:00:00Z,1,,2660,2660,2660,46,0,0,205,10,215
-20200328,TN,1373,16965,,,118,,,,,,,3/27/2020 15:00,de795118cc708e986335044045a0b1ce314ad8eb,2020-03-28T20:00:00Z,6,118,18338,18338,18338,47,0,15,2077,170,2247
-20200328,TX,2052,23208,,,,,,,,,,3/28/2020 12:45,08097ec5f5c9aafc4f478705a0465a5a91b7e4b0,2020-03-28T20:00:00Z,27,,25260,25260,25260,48,4,0,1273,321,1594
-20200328,UT,602,10710,,,,,,,,,,3/28/2020 15:00,3162c4f065d7ca16d28a957373370508bed1bee4,2020-03-28T20:00:00Z,2,,11312,11312,11312,49,0,0,1946,122,2068
-20200328,VA,739,8427,,,99,,,,,,,3/28/2020 00:00,5e52d39e11b18e8b8654eb290bc2881e0c35c9ee,2020-03-28T20:00:00Z,17,99,9166,9166,9166,51,3,16,1694,135,1829
+20200328,MS,663,2560,,,219,,,,,,B,3/28/2020 00:00,be3b6c992b20af4c366a4651675355813f62dddc,2020-03-28T20:00:00Z,13,219,3223,3223,3223,28,5,34,0,84,84
+20200328,MT,129,3256,,,7,,,,,,A,3/28/2020 12:30,a550cf68190ead3c7bc61cd1531b6ac153504f3a,2020-03-28T20:00:00Z,1,7,3385,3385,3385,30,1,0,666,21,687
+20200328,NC,935,16592,,87,,,,,,,A,3/28/2020 10:55,1c756c6fe9bc72219d425a091fe36b19e1989dd2,2020-03-28T20:00:00Z,4,,17527,17527,17527,37,1,0,2219,172,2391
+20200328,ND,83,2809,,,16,,,,,16,B,3/28/2020 12:00,2740776204678ac4243b5fb70a7901c184231b86,2020-03-28T20:00:00Z,1,16,2892,2892,2892,38,1,3,382,18,400
+20200328,NE,96,1904,,,,,,,,,A,3/28/2020 14:40,8e68e3e432ab8be0e8e28c340074fd9cc5c737dd,2020-03-28T20:00:00Z,2,,2000,2000,2000,31,2,0,143,11,154
+20200328,NH,187,3656,296,,30,,,,,,B,3/27/2020 09:00,cc255564acefd16e47601e8119d7ce5d98c47c39,2020-03-28T20:00:00Z,2,30,4139,3843,3843,33,1,5,261,29,290
+20200328,NJ,11124,19386,,2000,,,,,,,A,3/28/2020 13:30,3e3076748751e57a62347a7d715cbc49b7191b96,2020-03-28T20:00:00Z,140,,30510,30510,30510,34,32,0,2839,2299,5138
+20200328,NM,191,9196,,17,,,,,,,A,3/27/2020 00:00,43ca4cfa205a6717286ff3aac99fbacc8cf11d35,2020-03-28T20:00:00Z,1,,9387,9387,9387,35,0,0,819,55,874
+20200328,NV,621,7901,,,,,,,,,A,3/27/2020 22:00,c87395fc2578b283567472f39b42b356599c61ec,2020-03-28T20:00:00Z,10,,8522,8522,8522,32,0,0,1740,86,1826
+20200328,NY,52318,103616,,7328,10054,1755,,,,2726,A,3/28/2020 13:15,bff2cfbfc7d59b136600e875ae44039201658e70,2020-03-28T20:00:00Z,728,10054,155934,155934,155934,36,209,1528,2498,7683,10181
+20200328,OH,1406,19012,,,344,,123,,,,B,3/28/2020 14:00,35df4a243590edcaf24b08b55c221bcdcd6fbb33,2020-03-28T20:00:00Z,25,344,20418,20418,20418,39,6,68,0,269,269
+20200328,OK,377,1180,,,126,,,,,,A,3/27/2020 08:00,18e4518b4be3a9be844fc1846bfdc8c85c3daa04,2020-03-28T20:00:00Z,15,126,1557,1557,1557,40,7,21,96,55,151
+20200328,OR,479,9693,,107,117,,,31,,,A,3/27/2020 12:30,c970796fd85155f49624be3e4e2b897b73d71ff9,2020-03-28T20:00:00Z,13,117,10172,10172,10172,41,1,15,1183,65,1248
+20200328,PA,2751,25254,,,316,,,,,,A,3/28/2020 12:00,762b39d33cb6cbee04a3f1a38220ff5b1adadf2d,2020-03-28T20:00:00Z,34,316,28005,28005,28005,42,12,75,4238,533,4771
+20200328,PR,100,739,792,,,,,,,,A,3/28/2020 07:00,95379ab6295b07559a06bc4bec99b223b4a1b825,2020-03-28T20:00:00Z,3,,1631,839,839,72,0,0,220,21,241
+20200328,RI,239,2541,138,29,,9,,6,,,B,3/28/2020 00:00,5ef7dcf3ac4748ad926915221e7f4f96f9bcbd2b,2020-03-28T20:00:00Z,,,2918,2780,2780,44,0,0,235,36,271
+20200328,SC,539,2408,,,102,,,,,,B,3/27/2020 16:32,e8d8dca5081e2e25edde42b643fe244eebc98f69,2020-03-28T20:00:00Z,13,102,2947,2947,2947,45,4,0,101,83,184
+20200328,SD,68,2592,0,,,,,,,26,A,3/28/2020 12:30,4ef4b3b2fbed327be659f67c86ebb2984516d840,2020-03-28T20:00:00Z,1,,2660,2660,2660,46,0,0,205,10,215
+20200328,TN,1373,16965,,,118,,,,,,A,3/27/2020 15:00,bd83a18dc39c8ee56326d83a590b8da9e19eb4b3,2020-03-28T20:00:00Z,6,118,18338,18338,18338,47,0,15,2077,170,2247
+20200328,TX,2052,23208,,,,,,,,,A,3/28/2020 12:45,1731582d2f3336e58d58889c13bd45c05149c515,2020-03-28T20:00:00Z,27,,25260,25260,25260,48,4,0,1273,321,1594
+20200328,UT,602,10710,,,,,,,,,A,3/28/2020 15:00,e7916d5722a5032b8d9634894175d1f0ef6d4e48,2020-03-28T20:00:00Z,2,,11312,11312,11312,49,0,0,1946,122,2068
+20200328,VA,739,8427,,,99,,,,,,A,3/28/2020 00:00,8d0d09bf763747838e702297e46e1d9ef69db703,2020-03-28T20:00:00Z,17,99,9166,9166,9166,51,3,16,1694,135,1829
 20200328,VI,22,106,55,,,,,,,,,3/28/2020 12:00,8c9447de54cee4e82bb8d22062fcfcfc0abe3612,2020-03-28T20:00:00Z,,,183,128,128,78,0,0,51,3,54
-20200328,VT,211,2163,,,18,,,,,,,3/28/2020 13:00,cd6ec0604f3711ed343724327fafa5e55f2695c5,2020-03-28T20:00:00Z,12,18,2374,2374,2374,50,2,0,86,27,113
-20200328,WA,4737,68202,,,,,,,,,,3/27/2020 18:30,5b5c68bb19e3ce4aa05f2c8a4626e9284ef5a8c7,2020-03-28T20:00:00Z,220,,72939,72939,72939,53,21,0,2315,432,2747
-20200328,WI,989,15232,,,,,,,,,,3/28/2020 16:00,8923b1340467ad4a295dd24226ac7093056a79d2,2020-03-28T20:00:00Z,13,,16221,16221,16221,55,0,0,2092,147,2239
-20200328,WV,96,2331,6,,1,,,,,,,3/27/2020 00:00,ac53f5e700dfbc97889a8677a37a2dfe5e8c4e6e,2020-03-28T20:00:00Z,0,1,2433,2427,2427,54,0,0,552,20,572
-20200328,WY,82,1475,,,14,,,,,18,,3/28/2020 00:00,82d4c5ad94ca059aff88f0e1e13c1d35755cd3cc,2020-03-28T20:00:00Z,0,14,1557,1557,1557,56,0,3,264,12,276
-20200327,AK,69,2319,13,,3,,,,,,,3/26/2020 21:00,316be8280fc78e95eeb9bf73b8947ddd32f26e1f,2020-03-27T20:00:00Z,1,3,2401,2388,2388,02,0,0,518,10,528
-20200327,AL,587,4184,,,,,,,,,,3/27/2020 00:00,2009087dc9cc73d73d45a97f07ae3c774a5ec290,2020-03-27T20:00:00Z,3,,4771,4771,4771,01,2,0,591,81,672
-20200327,AR,381,1545,,48,,,,17,,19,,3/27/2020 14:05,e8e5794a71a6b9782e4fa14e4b7ccb9a23027bc3,2020-03-27T20:00:00Z,3,,1926,1926,1926,05,0,0,41,46,87
+20200328,VT,211,2163,,,18,,,,,,A,3/28/2020 13:00,c4828a39056f1a1bc00abdce4a44af1f299768b6,2020-03-28T20:00:00Z,12,18,2374,2374,2374,50,2,0,86,27,113
+20200328,WA,4737,68202,,,,,,,,,A,3/27/2020 18:30,eda527870d9bc9725b51aacabb379b5522eab2f3,2020-03-28T20:00:00Z,220,,72939,72939,72939,53,21,0,2315,432,2747
+20200328,WI,989,15232,,,,,,,,,A,3/28/2020 16:00,c10a91baff002e0dd3bffc42bad493faba628f54,2020-03-28T20:00:00Z,13,,16221,16221,16221,55,0,0,2092,147,2239
+20200328,WV,96,2331,6,,1,,,,,,B,3/27/2020 00:00,a0982c7c37f0d340cf2ab12ee2ecf3b6f8dccf04,2020-03-28T20:00:00Z,0,1,2433,2427,2427,54,0,0,552,20,572
+20200328,WY,82,1475,,,14,,,,,18,A,3/28/2020 00:00,b52c1c6792b74d0be877ac6e352510f63d4cb697,2020-03-28T20:00:00Z,0,14,1557,1557,1557,56,0,3,264,12,276
+20200327,AK,69,2319,13,,3,,,,,,A,3/26/2020 21:00,c4b13c790d9f110fcd6ea9bbe4323c80e4982d67,2020-03-27T20:00:00Z,1,3,2401,2388,2388,02,0,0,518,10,528
+20200327,AL,587,4184,,,,,,,,,B,3/27/2020 00:00,445884024903deeb398494c03bb278e739dd8e79,2020-03-27T20:00:00Z,3,,4771,4771,4771,01,2,0,591,81,672
+20200327,AR,381,1545,,48,,,,17,,19,A,3/27/2020 14:05,4867d4843328269469ae9001f9c70d6a95543816,2020-03-27T20:00:00Z,3,,1926,1926,1926,05,0,0,41,46,87
 20200327,AS,,,,,,,,,,,,3/27/2020 00:00,3e82ec53ac8168f279ee98bed371e8462348ffda,2020-03-27T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200327,AZ,736,7455,30,,,,,,,,,3/27/2020 00:00,c064cd3c8ffd50db8386dacb63c29924bc6d522e,2020-03-27T20:00:00Z,13,,8221,8191,8191,04,5,0,7108,159,7267
-20200327,CA,3879,17380,57400,746,,200,,,,,,3/27/2020 00:00,38ac09539f655de4630d4b9de1d7aab436f29611,2020-03-27T20:00:00Z,78,,78659,21259,21259,06,13,0,0,873,873
-20200327,CO,1430,8692,,278,184,,,,,,,3/26/2020 18:00,7e9984e66163b37a7c3e06b35df48af356ef98ec,2020-03-27T20:00:00Z,24,184,10122,10122,10122,08,5,36,1714,344,2058
-20200327,CT,1291,7109,,173,,,,,,,,3/27/2020 13:30,9d346c6b6c3c54180b4c1a5796eaa5574cd68555,2020-03-27T20:00:00Z,27,,8400,8400,8400,09,6,0,1484,279,1763
-20200327,DC,267,1897,2,,,,,,,49,,3/26/2020 19:00,aeb6672c38f2071ad6fb77d93ca3282ff603036b,2020-03-27T20:00:00Z,3,,2166,2164,2164,11,0,0,271,36,307
-20200327,DE,163,36,,15,,,,,,9,,3/27/2020 00:00,3deb8b6549126f15f1788f9c4156d18609383e66,2020-03-27T20:00:00Z,2,,199,199,199,10,1,0,0,33,33
-20200327,FL,2765,28186,1517,,456,,,,,,,3/27/2020 12:00,2634c2b0ec828df6aa3ee347da46fc77bc87ab01,2020-03-27T20:00:00Z,34,456,32468,30951,30951,12,6,50,4445,410,4855
-20200327,GA,2001,7864,,,566,,,,,,,3/27/2020 12:00,be018fcd1518d922f594af57500b220b9160a3dc,2020-03-27T20:00:00Z,64,566,9865,9865,9865,13,16,93,463,476,939
+20200327,AZ,736,7455,30,,,,,,,,B,3/27/2020 00:00,8db866af12c13df3a35779c20dbb4bdf9a938590,2020-03-27T20:00:00Z,13,,8221,8191,8191,04,5,0,7108,159,7267
+20200327,CA,3879,17380,57400,746,,200,,,,,B,3/27/2020 00:00,676239d47a722c18fdd37bb6f259660cd5386e58,2020-03-27T20:00:00Z,78,,78659,21259,21259,06,13,0,0,873,873
+20200327,CO,1430,8692,,278,184,,,,,,A,3/26/2020 18:00,91d09d3957251cb76ac5665f2ce281955d18dba4,2020-03-27T20:00:00Z,24,184,10122,10122,10122,08,5,36,1714,344,2058
+20200327,CT,1291,7109,,173,,,,,,,A,3/27/2020 13:30,e99be91d6dd7a1fbae0109289970826733a6a719,2020-03-27T20:00:00Z,27,,8400,8400,8400,09,6,0,1484,279,1763
+20200327,DC,267,1897,2,,,,,,,49,A,3/26/2020 19:00,0519eb45524ce070b353c39dd993bb9e1d8a5c27,2020-03-27T20:00:00Z,3,,2166,2164,2164,11,0,0,271,36,307
+20200327,DE,163,36,,15,,,,,,9,C,3/27/2020 00:00,123c7675ec3fef70c48885d28552c7baa95a9fcc,2020-03-27T20:00:00Z,2,,199,199,199,10,1,0,0,33,33
+20200327,FL,2765,28186,1517,,456,,,,,,A,3/27/2020 12:00,3e642ef8e8f4bff79615337e32cfc4f7fdf3bd06,2020-03-27T20:00:00Z,34,456,32468,30951,30951,12,6,50,4445,410,4855
+20200327,GA,2001,7864,,,566,,,,,,A,3/27/2020 12:00,c9b52e3568e4b59c1ac1316a0d2c86a5659a329b,2020-03-27T20:00:00Z,64,566,9865,9865,9865,13,16,93,463,476,939
 20200327,GU,51,299,,13,,,,,,,,3/27/2020 07:00,4b903f511047b26fb601ca612daa5ec82f78d952,2020-03-27T20:00:00Z,1,,350,350,350,66,0,0,36,6,42
-20200327,HI,106,4357,,,7,,,,,,,3/26/2020 18:00,1318cad3b47b835c971f9adc31a9d5e1f2433d1a,2020-03-27T20:00:00Z,,7,4463,4463,4463,15,0,2,0,11,11
-20200327,IA,235,3740,,32,50,,,,,18,,3/27/2020 15:40,59061217170c691ca0a104a4f8257411cf952a4a,2020-03-27T20:00:00Z,3,50,3975,3975,3975,19,2,4,1162,56,1218
-20200327,ID,189,2668,,,,,,,,,,3/26/2020 20:00,dfd26472a0958132e2803b60dc921994e638bf0f,2020-03-27T20:00:00Z,3,,2857,2857,2857,16,3,0,603,66,669
-20200327,IL,3026,18516,,,,,,,,,,3/27/2020 00:00,9ae58349edc608ee0d41caeb67a328eed40077e0,2020-03-27T20:00:00Z,34,,21542,21542,21542,17,8,0,4423,488,4911
-20200327,IN,981,5955,,,,,,,,,,3/26/2020 12:59,4c9265852d858da5defa828ed71279975cfc76a1,2020-03-27T20:00:00Z,24,,6936,6936,6936,18,7,0,1949,336,2285
-20200327,KS,202,3229,,,27,,,,,,,3/27/2020 09:00,9051fe68608955a0e06884f5fb795cfddaa69ad5,2020-03-27T20:00:00Z,4,27,3431,3431,3431,20,1,27,360,34,394
-20200327,KY,248,3768,,,,,,,,,,3/26/2020 17:00,11205c2c6c22663b97146361be1b8cf9dd1dcf21,2020-03-27T20:00:00Z,6,,4016,4016,4016,21,2,0,666,50,716
-20200327,LA,2746,18613,,773,,,,270,,,,3/27/2020 13:00,a60b7e3de6d4243a3acf081f5db3784de60e9628,2020-03-27T20:00:00Z,119,,21359,21359,21359,22,36,0,2889,441,3330
-20200327,MA,3151,26244,,,219,,,,,,,3/27/2020 12:30,6d47cff5653ac54893e8dee3ec6c7900c8249fb0,2020-03-27T20:00:00Z,57,219,29395,29395,29395,25,15,0,4917,833,5750
-20200327,MD,774,94,,,173,,,,,25,,3/27/2020 10:00,39de379348a02314d5815e5ef6cdda230208196e,2020-03-27T20:00:00Z,5,173,868,868,868,24,1,41,0,194,194
-20200327,ME,168,3394,,,,,,,,24,,3/27/2020 11:30,16babeb31e288e75fbfa3f8a890075ace5c3c037,2020-03-27T20:00:00Z,1,,3562,3562,3562,23,1,0,0,13,13
-20200327,MI,8659,12639,,,,,,,,,,3/27/2020 11:00,15fea5fe5d9566f291763ef249428a172f2a09c8,2020-03-27T20:00:00Z,92,,21298,21298,21298,26,32,0,2334,892,3226
-20200327,MN,398,13605,,34,51,,17,,,180,,3/27/2020 00:00,1721f566f31dab9149badc26f64caa7fbe5dc62d,2020-03-27T20:00:00Z,4,51,14003,14003,14003,27,2,10,1001,52,1053
-20200327,MO,669,369,,,,,,,,,,3/27/2020 00:00,3dd5ce2f6377cc1fab17b823d61a1aa6c8831a1d,2020-03-27T20:00:00Z,8,,1038,1038,1038,29,0,0,0,167,167
+20200327,HI,106,4357,,,7,,,,,,A,3/26/2020 18:00,6af67cadb0d5ef6cbd519f9c5ed1cbafff454766,2020-03-27T20:00:00Z,,7,4463,4463,4463,15,0,2,0,11,11
+20200327,IA,235,3740,,32,50,,,,,18,C,3/27/2020 15:40,f4c7f099ccba4abc8467acd36d07f99583db9b2e,2020-03-27T20:00:00Z,3,50,3975,3975,3975,19,2,4,1162,56,1218
+20200327,ID,189,2668,,,,,,,,,A,3/26/2020 20:00,206b099d81bd9c26b69ce9d1503f8c25d8c63788,2020-03-27T20:00:00Z,3,,2857,2857,2857,16,3,0,603,66,669
+20200327,IL,3026,18516,,,,,,,,,A,3/27/2020 00:00,104044606552671318c98a6916f1fe32d3f19658,2020-03-27T20:00:00Z,34,,21542,21542,21542,17,8,0,4423,488,4911
+20200327,IN,981,5955,,,,,,,,,B,3/26/2020 12:59,1b9a2fa2cecd59e5f22a41230f251f93537e05c6,2020-03-27T20:00:00Z,24,,6936,6936,6936,18,7,0,1949,336,2285
+20200327,KS,202,3229,,,27,,,,,,B,3/27/2020 09:00,6c06b7270fa10695968029fa4a2a932ff4bd4455,2020-03-27T20:00:00Z,4,27,3431,3431,3431,20,1,27,360,34,394
+20200327,KY,248,3768,,,,,,,,,A,3/26/2020 17:00,e4f10985eeb5da1b0d4cb5a35e440d601108a636,2020-03-27T20:00:00Z,6,,4016,4016,4016,21,2,0,666,50,716
+20200327,LA,2746,18613,,773,,,,270,,,A,3/27/2020 13:00,2fc5c8ee702d72cebe9a33e26b958a8bf0adcb89,2020-03-27T20:00:00Z,119,,21359,21359,21359,22,36,0,2889,441,3330
+20200327,MA,3151,26244,,,219,,,,,,B,3/27/2020 12:30,c42d64799a8cb6bd234becbe6cf9b33d9fafd5a0,2020-03-27T20:00:00Z,57,219,29395,29395,29395,25,15,0,4917,833,5750
+20200327,MD,774,94,,,173,,,,,25,D,3/27/2020 10:00,733d24f89ec9db50d437f5ac4f6665fed4f95119,2020-03-27T20:00:00Z,5,173,868,868,868,24,1,41,0,194,194
+20200327,ME,168,3394,,,,,,,,24,A,3/27/2020 11:30,dbeb268328393dc92180927617e14dcb6f056b64,2020-03-27T20:00:00Z,1,,3562,3562,3562,23,1,0,0,13,13
+20200327,MI,8659,12639,,,,,,,,,B,3/27/2020 11:00,9e7ebd82e83a16519be4d26333e4d5cc101a4053,2020-03-27T20:00:00Z,92,,21298,21298,21298,26,32,0,2334,892,3226
+20200327,MN,398,13605,,34,51,,17,,,180,A,3/27/2020 00:00,60513e5a99999cca89ee32264cb41919a662af71,2020-03-27T20:00:00Z,4,51,14003,14003,14003,27,2,10,1001,52,1053
+20200327,MO,669,369,,,,,,,,,C,3/27/2020 00:00,deb09d39dfad307c9285bd2dfc3282abd166f644,2020-03-27T20:00:00Z,8,,1038,1038,1038,29,0,0,0,167,167
 20200327,MP,0,,,,,,,,,,,3/26/2020 13:30,721770b120e4ef791be79ddd8f3e616e480529da,2020-03-27T20:00:00Z,0,,0,0,0,69,0,0,0,0,0
-20200327,MS,579,2560,,,185,,,,,,,3/26/2020 19:00,e163370af65c6c88eac7fa68036a24ad9eb96f47,2020-03-27T20:00:00Z,8,185,3139,3139,3139,28,2,35,269,94,363
-20200327,MT,108,2590,,,7,,,,,,,3/27/2020 10:00,55b5878af92f2c183432b6f296c753be3f5a3511,2020-03-27T20:00:00Z,,7,2698,2698,2698,30,0,6,462,37,499
-20200327,NC,763,14373,,77,,,,,,,,3/27/2020 11:40,7595775a1e1b5fbe1ca74965e6dd735eefc280b6,2020-03-27T20:00:00Z,3,,15136,15136,15136,37,1,0,2099,127,2226
-20200327,ND,65,2427,,,13,,,,,15,,3/27/2020 11:31,f54a0c80b552bdf7f9958359d695df23b4fc4f02,2020-03-27T20:00:00Z,0,13,2492,2492,2492,38,0,3,388,13,401
-20200327,NE,85,1761,,,,,,,,,,3/27/2020 14:30,ddae1803af4a480080279780747cdc1195b21604,2020-03-27T20:00:00Z,0,,1846,1846,1846,31,0,0,177,12,189
-20200327,NH,158,3395,592,,25,,,,,,,3/26/2020 09:00,de8caae7bf1bbe5fc9aede692f4e7617e88fd615,2020-03-27T20:00:00Z,1,25,4145,3553,3553,33,0,6,394,21,415
-20200327,NJ,8825,16547,,2000,,,,,,,,3/27/2020 13:30,4abc5dec7f18db5f6ab2cf0b33a8a047be3b9557,2020-03-27T20:00:00Z,108,,25372,25372,25372,34,27,0,2886,1949,4835
-20200327,NM,136,8377,,,,,,,,,,3/26/2020 00:00,25f10ada82474f62e19a87536bab7fd86d42a396,2020-03-27T20:00:00Z,1,,8513,8513,8513,35,0,0,696,24,720
-20200327,NV,535,6161,,,,,,,,,,3/26/2020 23:00,992729a437a738b8dc392bcfaf18b2f1e489d68c,2020-03-27T20:00:00Z,10,,6696,6696,6696,32,0,0,1464,115,1579
-20200327,NY,44635,101118,,6481,8526,1583,,,,2045,,3/27/2020 11:15,3ddcb657410fe8aacdf4631acadaea1171edbaad,2020-03-27T20:00:00Z,519,8526,145753,145753,145753,36,134,1682,16272,7377,23649
-20200327,OH,1137,19012,,,276,,107,,,,,3/27/2020 14:00,dbb63468b1845620a4f4025908e8575a7ac2d127,2020-03-27T20:00:00Z,19,276,20149,20149,20149,39,4,53,2563,270,2833
-20200327,OK,322,1084,,,105,,,,,,,3/27/2020 08:00,8cd6fc03422f2c8592c13a4cb5dbf2527efdcdc5,2020-03-27T20:00:00Z,8,105,1406,1406,1406,40,1,19,126,74,200
-20200327,OR,414,8510,,91,102,,,31,,,,3/27/2020 12:30,a379c3a9ba1277070d9d6b39c653d32b79981e29,2020-03-27T20:00:00Z,12,102,8924,8924,8924,41,1,12,1557,87,1644
-20200327,PA,2218,21016,,,241,,,,,,,3/27/2020 12:00,702548ec84ed18f69ac12f34d7a88c6380908b31,2020-03-27T20:00:00Z,22,241,23234,23234,23234,42,6,241,4575,531,5106
-20200327,PR,79,519,334,,,,,,,,,3/27/2020 07:00,ddf335d0e11711dfdf42e20eb14d37779486f758,2020-03-27T20:00:00Z,3,,932,598,598,72,1,0,142,15,157
-20200327,RI,203,2306,138,28,,9,,6,,,,3/27/2020 00:00,61b68f6a437b5c5ba707d11e074b88e42604fcc9,2020-03-27T20:00:00Z,,,2647,2509,2509,44,0,0,1044,38,1082
-20200327,SC,456,2307,,,109,,,,,,,3/26/2020 16:35,aa2c5ca89d9dff1851ff8d37c934441e6057858f,2020-03-27T20:00:00Z,9,109,2763,2763,2763,45,0,0,0,0,0
-20200327,SD,58,2387,20,,,,,,,21,,3/27/2020 12:30,44415a2ec803716f5ce7c19d0a140db9d3d2d038,2020-03-27T20:00:00Z,1,,2465,2445,2445,46,0,0,414,12,426
-20200327,TN,1203,14888,,,103,,,,,,,3/27/2020 15:00,a59c697512f35d88a7766e6ff3d4f76621829132,2020-03-27T20:00:00Z,6,103,16091,16091,16091,47,3,27,936,246,1182
-20200327,TX,1731,21935,,,,,,,,,,3/27/2020 13:00,d0219f4db31192b6c178f1dba85131b822af6c57,2020-03-27T20:00:00Z,23,,23666,23666,23666,48,5,0,1907,335,2242
-20200327,UT,480,8764,,,,,,,,,,3/27/2020 15:00,2865e9f49f6168fd9a6a225c877197f90a3b95b2,2020-03-27T20:00:00Z,2,,9244,9244,9244,49,1,0,1456,78,1534
-20200327,VA,604,6733,,,83,,,,,,,3/27/2020 00:00,d2e5c04dc3e9fa705ecfb4ef8dd3c1ed50f0e14b,2020-03-27T20:00:00Z,14,83,7337,7337,7337,51,1,18,1004,144,1148
+20200327,MS,579,2560,,,185,,,,,,B,3/26/2020 19:00,023e0e2c67538edb60ca3c9bbe2ec122b137d070,2020-03-27T20:00:00Z,8,185,3139,3139,3139,28,2,35,269,94,363
+20200327,MT,108,2590,,,7,,,,,,A,3/27/2020 10:00,dd6c46ddd24878dac57fdbfe1370e1ca2527ca60,2020-03-27T20:00:00Z,,7,2698,2698,2698,30,0,6,462,37,499
+20200327,NC,763,14373,,77,,,,,,,A,3/27/2020 11:40,48bb94361fd0567d187af19d12522fb895e78ca8,2020-03-27T20:00:00Z,3,,15136,15136,15136,37,1,0,2099,127,2226
+20200327,ND,65,2427,,,13,,,,,15,B,3/27/2020 11:31,448213f30a90ca4508be99c8a14b790d8f6ab387,2020-03-27T20:00:00Z,0,13,2492,2492,2492,38,0,3,388,13,401
+20200327,NE,85,1761,,,,,,,,,A,3/27/2020 14:30,761bcd32966118d4da256c994e84d23b3909c082,2020-03-27T20:00:00Z,0,,1846,1846,1846,31,0,0,177,12,189
+20200327,NH,158,3395,592,,25,,,,,,B,3/26/2020 09:00,edf015ae3e4a7b9cfddb8811bf3a2ef0b6c9e277,2020-03-27T20:00:00Z,1,25,4145,3553,3553,33,0,6,394,21,415
+20200327,NJ,8825,16547,,2000,,,,,,,A,3/27/2020 13:30,72f99280fdc8565fd36094eb44e33cf380762661,2020-03-27T20:00:00Z,108,,25372,25372,25372,34,27,0,2886,1949,4835
+20200327,NM,136,8377,,,,,,,,,A,3/26/2020 00:00,ce48027c706375b3c6fcf6eb3d870e42c7be711f,2020-03-27T20:00:00Z,1,,8513,8513,8513,35,0,0,696,24,720
+20200327,NV,535,6161,,,,,,,,,A,3/26/2020 23:00,6f16190cf940aa38fc2cac838757b7380a511d77,2020-03-27T20:00:00Z,10,,6696,6696,6696,32,0,0,1464,115,1579
+20200327,NY,44635,101118,,6481,8526,1583,,,,2045,A,3/27/2020 11:15,04fc13195c2f6f99023c2a165488143fa7011847,2020-03-27T20:00:00Z,519,8526,145753,145753,145753,36,134,1682,16272,7377,23649
+20200327,OH,1137,19012,,,276,,107,,,,B,3/27/2020 14:00,5656910a8b68eeca7a22cf8e07f319832903644f,2020-03-27T20:00:00Z,19,276,20149,20149,20149,39,4,53,2563,270,2833
+20200327,OK,322,1084,,,105,,,,,,A,3/27/2020 08:00,b2b43d843fb3376f921c6c760abd9bde9bf3dfae,2020-03-27T20:00:00Z,8,105,1406,1406,1406,40,1,19,126,74,200
+20200327,OR,414,8510,,91,102,,,31,,,A,3/27/2020 12:30,299ca9adc81eee959f3c78a5381e5c03fd190141,2020-03-27T20:00:00Z,12,102,8924,8924,8924,41,1,12,1557,87,1644
+20200327,PA,2218,21016,,,241,,,,,,A,3/27/2020 12:00,0a5a43609288cd2b196423b8b07edbdac1b7060a,2020-03-27T20:00:00Z,22,241,23234,23234,23234,42,6,241,4575,531,5106
+20200327,PR,79,519,334,,,,,,,,A,3/27/2020 07:00,630d4dab82f37bab3a5ffb6530808ae6f4889045,2020-03-27T20:00:00Z,3,,932,598,598,72,1,0,142,15,157
+20200327,RI,203,2306,138,28,,9,,6,,,B,3/27/2020 00:00,b3c0dc2540ec70c82ee92675fcf62f35ef5221bb,2020-03-27T20:00:00Z,,,2647,2509,2509,44,0,0,1044,38,1082
+20200327,SC,456,2307,,,102,,,,,,B,3/26/2020 16:35,5ca233424c9fbfb777a88f9ebe1b992470cc3b5c,2020-03-27T20:00:00Z,9,102,2763,2763,2763,45,0,0,0,0,0
+20200327,SD,58,2387,20,,,,,,,21,A,3/27/2020 12:30,6bf399ee935fce63331434b46c95e49032de3b5d,2020-03-27T20:00:00Z,1,,2465,2445,2445,46,0,0,414,12,426
+20200327,TN,1203,14888,,,103,,,,,,A,3/27/2020 15:00,748533ae139100c8a1181dc23662f47a07ff86c6,2020-03-27T20:00:00Z,6,103,16091,16091,16091,47,3,27,936,246,1182
+20200327,TX,1731,21935,,,,,,,,,A,3/27/2020 13:00,2b18573393e9a459979c059753837f3f11e28995,2020-03-27T20:00:00Z,23,,23666,23666,23666,48,5,0,1907,335,2242
+20200327,UT,480,8764,,,,,,,,,A,3/27/2020 15:00,1592f075130579f1ee7316b7caf4d8d99b1c84ee,2020-03-27T20:00:00Z,2,,9244,9244,9244,49,1,0,1456,78,1534
+20200327,VA,604,6733,,,83,,,,,,A,3/27/2020 00:00,a62c95c2410d72fa761c9da414f16bfd6af7ecdc,2020-03-27T20:00:00Z,14,83,7337,7337,7337,51,1,18,1004,144,1148
 20200327,VI,19,55,2,,,,,,,,,3/27/2020 14:00,550db378244deb6005d46d173c73474345da65fa,2020-03-27T20:00:00Z,,,76,74,74,78,0,0,0,2,2
-20200327,VT,184,2077,,,18,,,,,,,3/27/2020 13:00,de94a389186727f44c121c36f19e1d9084ec0825,2020-03-27T20:00:00Z,10,18,2261,2261,2261,50,1,18,227,26,253
-20200327,WA,4305,65887,,,,,,,,,,3/27/2020 02:59,f2f590190e3904518d2cf80c4be96c18f237d620,2020-03-27T20:00:00Z,199,,70192,70192,70192,53,16,0,3900,483,4383
-20200327,WI,842,13140,,,,,,,,,,3/27/2020 16:00,931218a458eff18625f471ac20612720969e693c,2020-03-27T20:00:00Z,13,,13982,13982,13982,55,5,0,1557,135,1692
-20200327,WV,76,1779,43,,1,,,,,,,3/26/2020 00:00,ec5818cd6996d8b568cd9d2670ec5e614408adbe,2020-03-27T20:00:00Z,0,1,1898,1855,1855,54,0,0,748,25,773
-20200327,WY,70,1211,,,11,,,,,17,,3/27/2020 12:50,f6a49f9fb17603de7c1f0cf26b1524f82016dbdb,2020-03-27T20:00:00Z,0,11,1281,1281,1281,56,0,11,159,17,176
-20200326,AK,59,1801,,,3,,,,,,,3/25/2020 21:00,85167cec4294a3feb37de008f846cf044cc66382,2020-03-26T20:00:00Z,1,3,1860,1860,1860,02,0,2,152,17,169
-20200326,AL,506,3593,,,,,,,,,,3/26/2020 00:00,6bb4f421b680c0a12f3b6c44065952069732b8a8,2020-03-26T20:00:00Z,1,,4099,4099,4099,01,1,0,1064,223,1287
-20200326,AR,335,1504,,41,,,,13,,13,,3/26/2020 00:00,83def6fdfe2a405b8d1c2c112ee74b09bede9ef2,2020-03-26T20:00:00Z,3,,1839,1839,1839,05,1,0,67,55,122
+20200327,VT,184,2077,,,18,,,,,,A,3/27/2020 13:00,52094beb8cc205ded7d9d6108657b0c4d47fc35b,2020-03-27T20:00:00Z,10,18,2261,2261,2261,50,1,18,227,26,253
+20200327,WA,4305,65887,,,,,,,,,A,3/27/2020 02:59,6283fef277c8c4159d61018b0db37dc180ccca0a,2020-03-27T20:00:00Z,199,,70192,70192,70192,53,16,0,3900,483,4383
+20200327,WI,842,13140,,,,,,,,,A,3/27/2020 16:00,3e3b99d24e052578788d6ac777cc0d5c327fd5ec,2020-03-27T20:00:00Z,13,,13982,13982,13982,55,5,0,1557,135,1692
+20200327,WV,76,1779,43,,1,,,,,,B,3/26/2020 00:00,0ca57409c9d750ac08f280083c784b65d205ce6e,2020-03-27T20:00:00Z,0,1,1898,1855,1855,54,0,0,748,25,773
+20200327,WY,70,1211,,,11,,,,,17,A,3/27/2020 12:50,6371cc01439e958e78ae680dd04a3c0178df4cd4,2020-03-27T20:00:00Z,0,11,1281,1281,1281,56,0,11,159,17,176
+20200326,AK,59,1801,,,3,,,,,,A,3/25/2020 21:00,ec77c3bf1ed295816f9ba1bc2eb33ca18cb1916b,2020-03-26T20:00:00Z,1,3,1860,1860,1860,02,0,2,152,17,169
+20200326,AL,506,3593,,,,,,,,,C,3/26/2020 00:00,dcc7f8f7cc56486858d5ca441e0c7a9e1c0a099e,2020-03-26T20:00:00Z,1,,4099,4099,4099,01,1,0,1064,223,1287
+20200326,AR,335,1504,,41,,,,13,,13,A,3/26/2020 00:00,26c2705c0be18308e63e954f81708110e6ab2ef8,2020-03-26T20:00:00Z,3,,1839,1839,1839,05,1,0,67,55,122
 20200326,AS,,,,,,,,,,,,3/25/2020 00:00,939714a5f3b2e4c355e41e763f36bce165dfa516,2020-03-26T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200326,AZ,577,347,33,,,,,,,,,3/26/2020 00:00,2b27971e86b60885d2110efc495a63cf6523e74a,2020-03-26T20:00:00Z,8,,957,924,924,04,2,0,24,127,151
-20200326,CA,3006,17380,57400,,,,,,,,,3/25/2020 17:00,0518dca42372039bd5f7df822c1e5e4a3ff12f18,2020-03-26T20:00:00Z,65,,77786,20386,20386,06,12,0,1459,651,2110
-20200326,CO,1086,6978,,230,148,,,,,,,3/25/2020 18:00,859fa79f8ef149d2225ba59dfe294d513b20e530,2020-03-26T20:00:00Z,19,148,8064,8064,8064,08,8,64,189,174,363
-20200326,CT,1012,5625,,125,,,,,,,,3/26/2020 16:00,e62cdc758332e4e64cda0d0aad445bea989a9fdd,2020-03-26T20:00:00Z,21,,6637,6637,6637,09,2,0,602,137,739
-20200326,DC,231,1626,1,,,,,,,21,,3/25/2020 00:00,4b67cc5c3bdcc9c74f5dcb4fa9e8fc4eda23f0e9,2020-03-26T20:00:00Z,3,,1858,1857,1857,11,1,0,203,48,251
-20200326,DE,130,36,,13,,,,,,4,,3/26/2020 00:00,1050a1d42a16e9044a5a99c08377aa8292eaaf18,2020-03-26T20:00:00Z,1,,166,166,166,10,1,0,0,15,15
-20200326,FL,2355,23741,1443,,406,,,,,,,3/26/2020 11:00,932a13929d9ea2c43c77a8b8251d5301127ee7ea,2020-03-26T20:00:00Z,28,406,27539,26096,26096,12,6,90,8367,673,9040
-20200326,GA,1525,7401,,,473,,,,,,,3/26/2020 12:00,8421120563bf9d574d29851abca3ff2328e1d348,2020-03-26T20:00:00Z,48,473,8926,8926,8926,13,8,79,2469,278,2747
+20200326,AZ,577,347,33,,,,,,,,B,3/26/2020 00:00,461dcf19cf752479ab7e31412282cea80d3cc180,2020-03-26T20:00:00Z,8,,957,924,924,04,2,0,24,127,151
+20200326,CA,3006,17380,57400,,,,,,,,B,3/25/2020 17:00,a4865c9629fade015b8a5721dbf3007ffcaad4f1,2020-03-26T20:00:00Z,65,,77786,20386,20386,06,12,0,1459,651,2110
+20200326,CO,1086,6978,,230,148,,,,,,A,3/25/2020 18:00,e4e8ad1dcccde254b9ac0d200e8217eb39bf195c,2020-03-26T20:00:00Z,19,148,8064,8064,8064,08,8,64,189,174,363
+20200326,CT,1012,5625,,125,,,,,,,A,3/26/2020 16:00,69fc57de33c6c0f8e09701fd1c30b1187b6d47c0,2020-03-26T20:00:00Z,21,,6637,6637,6637,09,2,0,602,137,739
+20200326,DC,231,1626,1,,,,,,,21,A,3/25/2020 00:00,daa3053c2a3d02b80b307802675f382ec440b16d,2020-03-26T20:00:00Z,3,,1858,1857,1857,11,1,0,203,48,251
+20200326,DE,130,36,,13,,,,,,4,C,3/26/2020 00:00,f046e233388cec5b88729d387119c9300958b221,2020-03-26T20:00:00Z,1,,166,166,166,10,1,0,0,15,15
+20200326,FL,2355,23741,1443,,406,,,,,,A,3/26/2020 11:00,2384ad95631a8298024b4c58c99e39a949eb4671,2020-03-26T20:00:00Z,28,406,27539,26096,26096,12,6,90,8367,673,9040
+20200326,GA,1525,7401,,,473,,,,,,A,3/26/2020 12:00,6d473e147321df8bbcb1fe2d4d5166c6ea4f7f75,2020-03-26T20:00:00Z,48,473,8926,8926,8926,13,8,79,2469,278,2747
 20200326,GU,45,263,,11,,,,,,,,3/26/2020 06:30,16d69f171db00c3b643008e226c0e95ac1f2809c,2020-03-26T20:00:00Z,1,,308,308,308,66,0,0,30,8,38
-20200326,HI,95,4357,,,5,,,,,,,3/25/2020 18:00,7a8a39710df6071975687cac0be04f220fe86616,2020-03-26T20:00:00Z,,5,4452,4452,4452,15,0,-1,0,5,5
-20200326,IA,179,2578,,31,46,,,,,15,,3/26/2020 00:00,d5c796e9a6dab491251e3d011edec081036857b4,2020-03-26T20:00:00Z,1,46,2757,2757,2757,19,0,10,0,34,34
-20200326,ID,123,2065,,,,,,,,,,3/25/2020 19:00,5c45e214d7264387239cecc1ca2eb9e0816f831b,2020-03-26T20:00:00Z,0,,2188,2188,2188,16,0,0,178,50,228
-20200326,IL,2538,14093,,,,,,,,,,3/26/2020 00:00,c25b94d0cd867c009e1a44d9c0bdea3722b149bd,2020-03-26T20:00:00Z,26,,16631,16631,16631,17,7,0,1749,673,2422
-20200326,IN,645,4006,,,,,,,,,,3/25/2020 12:59,39eeb24ee4314555a0093bde8f2764a5b1453511,2020-03-26T20:00:00Z,17,,4651,4651,4651,18,3,0,1127,168,1295
-20200326,KS,168,2869,,,,,,,,,,3/26/2020 12:00,58943c8110791f8db3d7f5126dbdc48b876ff3c7,2020-03-26T20:00:00Z,3,,3037,3037,3037,20,0,0,509,42,551
-20200326,KY,198,3102,,,,,,,,,,3/25/2020 17:00,5e7e4e17ebd919723580bad148b7b3229d6f9869,2020-03-26T20:00:00Z,4,,3300,3300,3300,21,0,0,237,41,278
-20200326,LA,2305,15724,,676,,,,239,,,,3/26/2020 15:00,3bc34456f6b5a2b902aeeb1888a95b67e30771cf,2020-03-26T20:00:00Z,83,,18029,18029,18029,22,18,0,6068,510,6578
-20200326,MA,2318,21327,,,219,,,,,,,3/26/2020 12:30,17e9f32978fca699333257f4b2cb3261c469b03c,2020-03-26T20:00:00Z,42,219,23645,23645,23645,25,9,116,3248,579,3827
-20200326,MD,580,94,,,132,,,,,,,3/26/2020 10:00,b21bf5198b32dfaac80ac3d422b6fc95c4bdde8b,2020-03-26T20:00:00Z,4,132,674,674,674,24,0,132,0,157,157
-20200326,ME,155,3394,,,,,,,,16,,3/26/2020 11:00,ed3966dbbfdeb91b0ab4ac5d84c807d20b32e300,2020-03-26T20:00:00Z,,,3549,3549,3549,23,0,0,217,6,223
-20200326,MI,7767,10305,,,,,,,,,,3/26/2020 11:00,558492f382605d59137b50a4136e3b6318cf78ba,2020-03-26T20:00:00Z,60,,18072,18072,18072,26,17,0,2768,707,3475
-20200326,MN,346,12604,,31,41,,,,,,,3/26/2020 13:15,346d272730af1d17cac8d51a094637e2ebd1a747,2020-03-26T20:00:00Z,2,41,12950,12950,12950,27,1,6,1416,59,1475
-20200326,MO,502,369,,,,,,,,,,3/26/2020 15:00,ad7c52b88be05b385757608506decebfeef79ab3,2020-03-26T20:00:00Z,8,,871,871,871,29,0,0,0,146,146
+20200326,HI,95,4357,,,5,,,,,,A,3/25/2020 18:00,eb01e93536cf15994a479f8ae4addd0cc96b3b9c,2020-03-26T20:00:00Z,,5,4452,4452,4452,15,0,-1,0,5,5
+20200326,IA,179,2578,,31,46,,,,,15,C,3/26/2020 00:00,41561df8d2bce6fab97bbb1858c3c2282ac3e7cd,2020-03-26T20:00:00Z,1,46,2757,2757,2757,19,0,10,0,34,34
+20200326,ID,123,2065,,,,,,,,,A,3/25/2020 19:00,ac731d0baf23e0b87aed73fb1a03bb2a966c0cad,2020-03-26T20:00:00Z,0,,2188,2188,2188,16,0,0,178,50,228
+20200326,IL,2538,14093,,,,,,,,,A,3/26/2020 00:00,e73689a554afd38adb1fcbb70fb98ee446b712f7,2020-03-26T20:00:00Z,26,,16631,16631,16631,17,7,0,1749,673,2422
+20200326,IN,645,4006,,,,,,,,,B,3/25/2020 12:59,ada1e86902090d8e67fd3d8d8bb727718d514c36,2020-03-26T20:00:00Z,17,,4651,4651,4651,18,3,0,1127,168,1295
+20200326,KS,168,2869,,,,,,,,,B,3/26/2020 12:00,1d94d92e3b84173f37d2c5291f6c3489e4bacb0b,2020-03-26T20:00:00Z,3,,3037,3037,3037,20,0,0,509,42,551
+20200326,KY,198,3102,,,,,,,,,A,3/25/2020 17:00,c04eee9e8fdbd29f42975e04031170f7b3ef5eb8,2020-03-26T20:00:00Z,4,,3300,3300,3300,21,0,0,237,41,278
+20200326,LA,2305,15724,,676,,,,239,,,A,3/26/2020 15:00,bddced6e06c416818a74177202b7bd46cd1efeea,2020-03-26T20:00:00Z,83,,18029,18029,18029,22,18,0,6068,510,6578
+20200326,MA,2318,21327,,,219,,,,,,B,3/26/2020 12:30,08d76813a076b49074eb6af95db1c792035ab0b6,2020-03-26T20:00:00Z,42,219,23645,23645,23645,25,9,116,3248,579,3827
+20200326,MD,580,94,,,132,,,,,,D,3/26/2020 10:00,1d5357ae89d708bab091026700f814cc4923632d,2020-03-26T20:00:00Z,4,132,674,674,674,24,0,132,0,157,157
+20200326,ME,155,3394,,,,,,,,16,A,3/26/2020 11:00,0dff50b7860a38e97521d2795e7df0adec7354a7,2020-03-26T20:00:00Z,,,3549,3549,3549,23,0,0,217,6,223
+20200326,MI,7767,10305,,,,,,,,,D,3/26/2020 11:00,a300d070c2cd56bf617afea3c1efbb6ef2254387,2020-03-26T20:00:00Z,60,,18072,18072,18072,26,17,0,2768,707,3475
+20200326,MN,346,12604,,31,41,,,,,,A,3/26/2020 13:15,6aad9324340b3006e5c50b07aafedd156f830b77,2020-03-26T20:00:00Z,2,41,12950,12950,12950,27,1,6,1416,59,1475
+20200326,MO,502,369,,,,,,,,,C,3/26/2020 15:00,2b8690ad06bec833d05800cf511ab76690b4e9ab,2020-03-26T20:00:00Z,8,,871,871,871,29,0,0,0,146,146
 20200326,MP,0,,,,,,,,,,,3/26/2020 01:30,aa3edb7e40429d19b9ad9f42423783b4c739df13,2020-03-26T20:00:00Z,0,,0,0,0,69,0,0,0,0,0
-20200326,MS,485,2291,,,150,,,,,,,3/26/2020 00:00,ed0a9ae4b252cd7df222d66efa509147f2cfa1a1,2020-03-26T20:00:00Z,6,150,2776,2776,2776,28,4,33,725,108,833
-20200326,MT,71,2128,,,1,,,,,,,3/26/2020 10:00,d0f6d02838feba45dfd3d9a80d3986470ed09ab6,2020-03-26T20:00:00Z,,1,2199,2199,2199,30,0,1,180,18,198
-20200326,NC,636,12274,,29,,,,,,,,3/26/2020 12:36,7deb7ccc1022791532a71b8ab23e138c5d1641a7,2020-03-26T20:00:00Z,2,,12910,12910,12910,37,1,0,2289,132,2421
-20200326,ND,52,2039,,,10,,,,,,,3/26/2020 11:37,44e1b489eb0cb697aa89f4b942e08d68594929ca,2020-03-26T20:00:00Z,0,10,2091,2091,2091,38,0,2,305,13,318
-20200326,NE,73,1584,,,,,,,,,,3/26/2020 14:00,3d9af029d3176420c7a16a3cb77ac49d91c04247,2020-03-26T20:00:00Z,0,,1657,1657,1657,31,0,0,280,12,292
-20200326,NH,137,3001,712,,19,,,,,,,3/25/2020 09:00,79d4bf8eeef2262a7d6b8bde0606f5faf13a55de,2020-03-26T20:00:00Z,1,19,3850,3138,3138,33,0,6,645,29,674
-20200326,NJ,6876,13661,,1080,,,,,,,,3/25/2020 14:00,e0257f23a3df9f9f568c47bc66940ab5e087be13,2020-03-26T20:00:00Z,81,,20537,20537,20537,34,19,0,3209,2474,5683
-20200326,NM,112,7681,,,,,,,,,,3/25/2020 00:00,1cc0ab60fa614d6b2ad5c78d9fd16d6132fad54b,2020-03-26T20:00:00Z,1,,7793,7793,7793,35,0,0,939,12,951
-20200326,NV,420,4697,,,,,,,,,,3/26/2020 11:00,e73c45cc922c61498750d3b7d52d465234acbf74,2020-03-26T20:00:00Z,10,,5117,5117,5117,32,4,0,446,99,545
-20200326,NY,37258,84846,,5327,6844,1290,,,,,,3/26/2020 16:59,09389d47c5aba92fb76121b07b926f01ac10628b,2020-03-26T20:00:00Z,385,6844,122104,122104,122104,36,100,3039,12178,6447,18625
-20200326,OH,867,16449,,,223,,91,,,,,3/26/2020 14:00,798dc0abce1b7be1c269af32e9bf62667789f927,2020-03-26T20:00:00Z,15,223,17316,17316,17316,39,5,41,2389,163,2552
-20200326,OK,248,958,,,86,,,,,,,3/26/2020 08:00,46290574ab9a0d749ec98bdba54764f386e91349,2020-03-26T20:00:00Z,7,86,1206,1206,1206,40,2,27,153,84,237
-20200326,OR,327,6953,,,90,,,,,,,3/26/2020 16:31,27d280887f640beccf302d1082fb4988a62ecfaf,2020-03-26T20:00:00Z,11,90,7280,7280,7280,41,3,29,2603,118,2721
-20200326,PA,1687,16441,,,,,,,,,,3/26/2020 12:00,ef0c52b6705acaca4d47aca08d93a7ef428995cc,2020-03-26T20:00:00Z,16,,18128,18128,18128,42,5,0,5248,560,5808
-20200326,PR,64,377,335,,,,,,,,,3/26/2020 07:00,d3d26c807c42ef28c3994bb474845a00c1c49b55,2020-03-26T20:00:00Z,2,,776,441,441,72,0,0,60,13,73
-20200326,RI,165,1262,181,23,,9,,6,,,,3/26/2020 00:00,70fbc9d02fc1fd9c4df0ed3cc2c9377922d10ade,2020-03-26T20:00:00Z,,,1608,1427,1427,44,0,0,0,33,33
-20200326,SC,456,2307,,,109,,,,,,,3/26/2020 11:00,8529925ed0dae178a6974949da5b5e6808f55737,2020-03-26T20:00:00Z,9,109,2763,2763,2763,45,2,7,4,32,36
-20200326,SD,46,1973,125,,,,,,,16,,3/25/2020 13:00,2ea12c433a5be0de834ddb961c5ddd6f903b1b40,2020-03-26T20:00:00Z,1,,2144,2019,2019,46,0,0,1154,5,1159
-20200326,TN,957,13952,,,76,,,,,,,3/26/2020 15:00,f0432b9ca4bb14b07e1ed3b7bbe3b33a87b7c1fa,2020-03-26T20:00:00Z,3,76,14909,14909,14909,47,0,23,2940,173,3113
-20200326,TX,1396,20028,,,,,,,,,,3/26/2020 13:00,370a325d47c41fa7567d268e5f5ee78d48d69958,2020-03-26T20:00:00Z,18,,21424,21424,21424,48,6,0,7508,422,7930
-20200326,UT,402,7308,,,,,,,,,,3/26/2020 15:00,0946c10873d0512b0c3ec66e55ca123be18ba2ef,2020-03-26T20:00:00Z,1,,7710,7710,7710,49,0,0,817,56,873
-20200326,VA,460,5729,,,65,,,,,,,3/26/2020 00:00,da15cace0b4f42804da2ecc96d5b00138d63914e,2020-03-26T20:00:00Z,13,65,6189,6189,6189,51,4,6,750,69,819
+20200326,MS,485,2291,,,150,,,,,,B,3/26/2020 00:00,1235b6a0cd406d77cdfc6801ecd2c10315cb94b0,2020-03-26T20:00:00Z,6,150,2776,2776,2776,28,4,33,725,108,833
+20200326,MT,71,2128,,,1,,,,,,C,3/26/2020 10:00,8b718f1b0e83974f2df3f4d58e19504275854026,2020-03-26T20:00:00Z,,1,2199,2199,2199,30,0,1,180,18,198
+20200326,NC,636,12274,,29,,,,,,,A,3/26/2020 12:36,54c14b8a4b8682a4e195b22c49876da5d2cedf3b,2020-03-26T20:00:00Z,2,,12910,12910,12910,37,1,0,2289,132,2421
+20200326,ND,52,2039,,,10,,,,,,B,3/26/2020 11:37,99d4afdbfd84b3272c93abf3574e54cc5db0b625,2020-03-26T20:00:00Z,0,10,2091,2091,2091,38,0,2,305,13,318
+20200326,NE,73,1584,,,,,,,,,A,3/26/2020 14:00,32db2a0581e793197ce51e654af4bcdfa07dc9fd,2020-03-26T20:00:00Z,0,,1657,1657,1657,31,0,0,280,12,292
+20200326,NH,137,3001,712,,19,,,,,,B,3/25/2020 09:00,67da08b83cbbecbc0e2cd7dabb6acf399db558cc,2020-03-26T20:00:00Z,1,19,3850,3138,3138,33,0,6,645,29,674
+20200326,NJ,6876,13661,,1080,,,,,,,B,3/25/2020 14:00,05d4fd1931db94a24de6cd3951c4ff9b3812dab5,2020-03-26T20:00:00Z,81,,20537,20537,20537,34,19,0,3209,2474,5683
+20200326,NM,112,7681,,,,,,,,,A,3/25/2020 00:00,6c73f9df44f085bc31b888ed0a7f9dccfc66c479,2020-03-26T20:00:00Z,1,,7793,7793,7793,35,0,0,939,12,951
+20200326,NV,420,4697,,,,,,,,,A,3/26/2020 11:00,624cd3f656d1a06af370ea5f21d2eecfd1984f5e,2020-03-26T20:00:00Z,10,,5117,5117,5117,32,4,0,446,99,545
+20200326,NY,37258,84846,,5327,6844,1290,,,,,B,3/26/2020 16:59,19363ab62d6ce0eea5e7c372af2d1c5c9c301cb3,2020-03-26T20:00:00Z,385,6844,122104,122104,122104,36,100,3039,12178,6447,18625
+20200326,OH,867,16449,,,223,,91,,,,B,3/26/2020 14:00,2b95bc867f64d6ac6d7af40ec6b45724a87125bd,2020-03-26T20:00:00Z,15,223,17316,17316,17316,39,5,41,2389,163,2552
+20200326,OK,248,958,,,86,,,,,,A,3/26/2020 08:00,8cdb4330a4bd606b04409e2988b4e31d60348189,2020-03-26T20:00:00Z,7,86,1206,1206,1206,40,2,27,153,84,237
+20200326,OR,327,6953,,,90,,,,,,A,3/26/2020 16:31,5e0bc42adf493acc46f4afe5d67e9ad62be2f1b9,2020-03-26T20:00:00Z,11,90,7280,7280,7280,41,3,29,2603,118,2721
+20200326,PA,1687,16441,,,,,,,,,A,3/26/2020 12:00,9e01f2de1cc50ad13f3477fe1e4efe1e685d7e03,2020-03-26T20:00:00Z,16,,18128,18128,18128,42,5,0,5248,560,5808
+20200326,PR,64,377,335,,,,,,,,A,3/26/2020 07:00,f7e3e0ebcf4d16bedcf305bd1cca17e0b823b961,2020-03-26T20:00:00Z,2,,776,441,441,72,0,0,60,13,73
+20200326,RI,165,1262,181,23,,9,,6,,,B,3/26/2020 00:00,38aac2a020004d3037a1f9d1904e6b8a2bed8044,2020-03-26T20:00:00Z,,,1608,1427,1427,44,0,0,0,33,33
+20200326,SC,456,2307,,,102,,,,,,B,3/26/2020 11:00,63219f8ce772781f68800817aa25c53aaa88e126,2020-03-26T20:00:00Z,9,102,2763,2763,2763,45,2,0,4,32,36
+20200326,SD,46,1973,125,,,,,,,16,A,3/25/2020 13:00,45f68447ca72c5f5b4940bb67724e82d365c3996,2020-03-26T20:00:00Z,1,,2144,2019,2019,46,0,0,1154,5,1159
+20200326,TN,957,13952,,,76,,,,,,A,3/26/2020 15:00,371de36b66b7f6ad704b72e3877b10162fb743b2,2020-03-26T20:00:00Z,3,76,14909,14909,14909,47,0,23,2940,173,3113
+20200326,TX,1396,20028,,,,,,,,,A,3/26/2020 13:00,8d05dc79f19635cc610e7fd2ddc4788cd14b74da,2020-03-26T20:00:00Z,18,,21424,21424,21424,48,6,0,7508,422,7930
+20200326,UT,402,7308,,,,,,,,,A,3/26/2020 15:00,23647ccc0fd8b16eb397b8868f1fdb1bb600895a,2020-03-26T20:00:00Z,1,,7710,7710,7710,49,0,0,817,56,873
+20200326,VA,460,5729,,,65,,,,,,A,3/26/2020 00:00,bf943d1bd8cf8f64a0f890f2ff43fae00959809d,2020-03-26T20:00:00Z,13,65,6189,6189,6189,51,4,6,750,69,819
 20200326,VI,17,55,2,,,,,,,,,3/25/2020 20:30,68df91126b73b1a1139b1542cf7367359b0e5794,2020-03-26T20:00:00Z,,,74,72,72,78,0,0,0,0,0
-20200326,VT,158,1850,,,,,,,,,,3/26/2020 13:00,c8df47a601b19726473bddea55899dc3cd88f825,2020-03-26T20:00:00Z,9,,2008,2008,2008,50,1,0,261,35,296
-20200326,WA,3822,61987,,,,,,,,,,3/25/2020 21:20,378a41a93ee9c6c63b238e8034b361899ef49e7d,2020-03-26T20:00:00Z,183,,65809,65809,65809,53,24,0,4058,483,4541
-20200326,WI,707,11583,,,,,,,,,,3/26/2020 16:00,180a80764049cc08ddd6a2f5f0b4102e7d905296,2020-03-26T20:00:00Z,8,,12290,12290,12290,55,1,0,1494,122,1616
-20200326,WV,51,1031,19,,1,,,,,,,3/25/2020 00:00,76f6eab257788235346675a0d80a341bbd31af34,2020-03-26T20:00:00Z,0,1,1101,1082,1082,54,0,0,272,12,284
-20200326,WY,53,1052,,,,,,,,12,,3/26/2020 00:00,c6cb93bddc23b93033cccaebee82cb41dd63e84f,2020-03-26T20:00:00Z,,,1105,1105,1105,56,0,0,98,9,107
-20200325,AK,42,1649,,,1,,,,,,,3/24/2020 21:00,1177d47fa6cfe50c0ec66e2a09eeb787d6888d54,2020-03-25T20:00:00Z,1,1,1691,1691,1691,02,1,1,663,6,669
-20200325,AL,283,2529,,,,,,,,,,3/25/2020 11:30,22b89b45a7f0692cb0db28ab76620c9a6400e768,2020-03-25T20:00:00Z,0,,2812,2812,2812,01,0,0,423,68,491
-20200325,AR,280,1437,,22,,,,4,,11,,3/25/2020 09:19,d0ac870f6ef4d3eac34adfa9dc1016788de91659,2020-03-25T20:00:00Z,2,,1717,1717,1717,05,2,0,490,62,552
+20200326,VT,158,1850,,,,,,,,,A,3/26/2020 13:00,8fe3e5e35ad52e2bae2c75fb3a526c16222b7f42,2020-03-26T20:00:00Z,9,,2008,2008,2008,50,1,0,261,35,296
+20200326,WA,3822,61987,,,,,,,,,A,3/25/2020 21:20,1bf7f988a9d2aefa00a13300e14a4cbd8ecbc41a,2020-03-26T20:00:00Z,183,,65809,65809,65809,53,24,0,4058,483,4541
+20200326,WI,707,11583,,,,,,,,,A,3/26/2020 16:00,49e2507289a69967ad0d2744866ecb5e5eb39e41,2020-03-26T20:00:00Z,8,,12290,12290,12290,55,1,0,1494,122,1616
+20200326,WV,51,1031,19,,1,,,,,,B,3/25/2020 00:00,6015fb9f08b06f961b5ebf5d37461a49905e0651,2020-03-26T20:00:00Z,0,1,1101,1082,1082,54,0,0,272,12,284
+20200326,WY,53,1052,,,,,,,,12,A,3/26/2020 00:00,44e5c4acd056b9e8f0d107500a3b855aaa444dbf,2020-03-26T20:00:00Z,,,1105,1105,1105,56,0,0,98,9,107
+20200325,AK,42,1649,,,1,,,,,,A,3/24/2020 21:00,5f850377e1ff524049be1a2fa554484ee5ed1ebd,2020-03-25T20:00:00Z,1,1,1691,1691,1691,02,1,1,663,6,669
+20200325,AL,283,2529,,,,,,,,,C,3/25/2020 11:30,3a28cb18d5e1f358152a5200f2e56e65ea7e2ea4,2020-03-25T20:00:00Z,0,,2812,2812,2812,01,0,0,423,68,491
+20200325,AR,280,1437,,22,,,,4,,11,A,3/25/2020 09:19,5510294527d9935541228330f38083c6bc3dd7bf,2020-03-25T20:00:00Z,2,,1717,1717,1717,05,2,0,490,62,552
 20200325,AS,,,,,,,,,,,,3/25/2020 00:00,c9662a3030e18c4d9f556f3e29cd71f4569ca3cc,2020-03-25T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200325,AZ,450,323,53,,,,,,,,,3/24/2020 00:00,2e16c0b835d69f567a9efe432b1f954528352a52,2020-03-25T20:00:00Z,6,,826,773,773,04,1,0,10,93,103
-20200325,CA,2355,15921,48600,,,,,,,,,3/24/2020 00:00,2026f13aa66756d502c289a768e12d5f0e182c8e,2020-03-25T20:00:00Z,53,,66876,18276,18276,06,13,0,2469,253,2722
-20200325,CO,912,6789,,152,84,,,,,,,3/24/2020 18:00,07c593f4b4894163445a8ce6940a51b1ab30a6ab,2020-03-25T20:00:00Z,11,84,7701,7701,7701,08,4,12,1285,192,1477
-20200325,CT,875,5023,,113,,,,,,,,3/25/2020 16:00,6e0a4e4906d07a24e629e37f7b242ae856950806,2020-03-25T20:00:00Z,19,,5898,5898,5898,09,7,0,341,257,598
-20200325,DC,183,1423,3,,,,,,,,,3/24/2020 19:30,032d32a342215a52d95fd9a5c884be84cc2b9d69,2020-03-25T20:00:00Z,2,,1609,1606,1606,11,0,0,228,46,274
-20200325,DE,115,36,,11,,,,,,,,3/25/2020 12:00,d545f20ece52d1c895e9061726d9b32dd93dc0d7,2020-03-25T20:00:00Z,0,,151,151,151,10,0,0,0,24,24
-20200325,FL,1682,15374,1233,,316,,,,,,,3/25/2020 11:00,ae20968ef0d353c6e821e436a4e4cc6cc104ae66,2020-03-25T20:00:00Z,22,316,18289,17056,17056,12,4,57,2247,270,2517
-20200325,GA,1247,4932,,,394,,,,,,,3/25/2020 12:00,5c6d38b42159b4511d860e923c28ca750947d12e,2020-03-25T20:00:00Z,40,394,6179,6179,6179,13,8,394,474,221,695
+20200325,AZ,450,323,53,,,,,,,,B,3/24/2020 00:00,1bd642e7e3ef5b23afd5bfc683849a62877bbc54,2020-03-25T20:00:00Z,6,,826,773,773,04,1,0,10,93,103
+20200325,CA,2355,15921,48600,,,,,,,,B,3/24/2020 00:00,b78e80dc5536bbedc589b11fa46bfff7383e98a8,2020-03-25T20:00:00Z,53,,66876,18276,18276,06,13,0,2469,253,2722
+20200325,CO,912,6789,,152,84,,,,,,A,3/24/2020 18:00,2bc56ea416f84ccae1e877b19ba6fa4ddd915bc2,2020-03-25T20:00:00Z,11,84,7701,7701,7701,08,4,12,1285,192,1477
+20200325,CT,875,5023,,113,,,,,,,A,3/25/2020 16:00,8c0e546f0238f66edb87db4b10b3630f1e651c9b,2020-03-25T20:00:00Z,19,,5898,5898,5898,09,7,0,341,257,598
+20200325,DC,183,1423,3,,,,,,,,A,3/24/2020 19:30,a7c72eaecc3c9556ed11e86afd8935bbd4c5a977,2020-03-25T20:00:00Z,2,,1609,1606,1606,11,0,0,228,46,274
+20200325,DE,115,36,,11,,,,,,,C,3/25/2020 12:00,d845cd68ab8a8172a135e96bea866f76bf2be668,2020-03-25T20:00:00Z,0,,151,151,151,10,0,0,0,24,24
+20200325,FL,1682,15374,1233,,316,,,,,,A,3/25/2020 11:00,af062c117aab7915981396dd17fe6f1b1f243478,2020-03-25T20:00:00Z,22,316,18289,17056,17056,12,4,57,2247,270,2517
+20200325,GA,1247,4932,,,394,,,,,,A,3/25/2020 12:00,171931a034564c83922d49db522295ef8a13eca2,2020-03-25T20:00:00Z,40,394,6179,6179,6179,13,8,394,474,221,695
 20200325,GU,37,233,,10,,,,,,,,3/25/2020 06:45,d8dd5f199cc8fd9926f1529eb1fff2c6a1db24cd,2020-03-25T20:00:00Z,1,,270,270,270,66,0,0,32,5,37
-20200325,HI,90,4357,,,6,,,,,,,3/24/2020 18:00,6791708b73080bd851b5083b940fbe8987cea8fa,2020-03-25T20:00:00Z,,6,4447,4447,4447,15,0,2,768,13,781
-20200325,IA,145,2578,,23,36,,,,,,,3/25/2020 00:00,d331f13e8f54e596a57fcbded38eddc791c220a4,2020-03-25T20:00:00Z,1,36,2723,2723,2723,19,1,9,263,21,284
-20200325,ID,73,1887,,,,,,,,,,3/24/2020 19:00,7c93afa621eff87a80b6aa7319102f6e4c38068e,2020-03-25T20:00:00Z,0,,1960,1960,1960,16,0,0,0,23,23
-20200325,IL,1865,12344,,,,,,,,,,3/25/2020 00:00,1c658e2efe25dfb849a6e10c557f5d5417accc42,2020-03-25T20:00:00Z,19,,14209,14209,14209,17,3,0,2410,330,2740
-20200325,IN,477,2879,,,1,,,,,,,3/25/2020 00:59,67d891b5298bcc0a7b4b549ee962dcd19f9c78e9,2020-03-25T20:00:00Z,14,1,3356,3356,3356,18,2,0,313,112,425
-20200325,KS,126,2360,,,,,,,,,,3/25/2020 12:00,926ccc4534d79d506ec773c527485c73e2819a26,2020-03-25T20:00:00Z,3,,2486,2486,2486,20,1,0,274,28,302
-20200325,KY,157,2865,,,,,,,,,,3/24/2020 17:00,5df6588517a3610454e5430cbe338986549378d1,2020-03-25T20:00:00Z,4,,3022,3022,3022,21,0,0,1103,33,1136
-20200325,LA,1795,9656,,491,,,,163,,,,3/25/2020 13:00,bd026eef6b10481ddc1cce89ef2fbfdaa63984bc,2020-03-25T20:00:00Z,65,,11451,11451,11451,22,19,0,2441,407,2848
-20200325,MA,1739,18079,,,103,,,,,,,3/25/2020 16:00,99002f64bc4394c69d61d9b55fcdbeea56eb7c33,2020-03-25T20:00:00Z,33,103,19818,19818,19818,25,7,9,5365,679,6044
-20200325,MD,423,94,,,,,,,,,,3/25/2020 10:00,8b6ce68a242cf490ad36077879a375ddf9e1223f,2020-03-25T20:00:00Z,4,,517,517,517,24,1,0,0,74,74
-20200325,ME,149,3177,,,,,,,,7,,3/25/2020 11:30,4ec49d71b5092da372efb5ec5026c2bedeaeefe5,2020-03-25T20:00:00Z,,,3326,3326,3326,23,0,0,163,24,187
-20200325,MI,7060,7537,,,,,,,,,,3/25/2020 15:00,051516c324f7d71e078127db3cce086e4613720d,2020-03-25T20:00:00Z,43,,14597,14597,14597,26,19,0,1741,619,2360
-20200325,MN,287,11188,,26,35,,,,,122,,3/25/2020 00:00,ec818ee95fae86ed71703d665efb6de2b0c001ee,2020-03-25T20:00:00Z,1,35,11475,11475,11475,27,0,14,5638,25,5663
-20200325,MO,356,369,,,,,,,,,,3/24/2020 16:00,64c36771d4456849ca558467fd47075103b625bd,2020-03-25T20:00:00Z,8,,725,725,725,29,5,0,0,173,173
+20200325,HI,90,4357,,,6,,,,,,A,3/24/2020 18:00,136c6c25162b2c85c7d303330732213d9da29d07,2020-03-25T20:00:00Z,,6,4447,4447,4447,15,0,2,768,13,781
+20200325,IA,145,2578,,23,36,,,,,,C,3/25/2020 00:00,07987c41c62b24f6e43a640bfab9306982b22ae1,2020-03-25T20:00:00Z,1,36,2723,2723,2723,19,1,9,263,21,284
+20200325,ID,73,1887,,,,,,,,,A,3/24/2020 19:00,7691a16607dbc40bec988af27fca68fb3c807328,2020-03-25T20:00:00Z,0,,1960,1960,1960,16,0,0,0,23,23
+20200325,IL,1865,12344,,,,,,,,,A,3/25/2020 00:00,de7296dbcf66a21feb9d60b7d179967ba619f8a7,2020-03-25T20:00:00Z,19,,14209,14209,14209,17,3,0,2410,330,2740
+20200325,IN,477,2879,,,1,,,,,,B,3/25/2020 00:59,e0514727a9c517b5e5e7c251eaec67648c834efc,2020-03-25T20:00:00Z,14,1,3356,3356,3356,18,2,0,313,112,425
+20200325,KS,126,2360,,,,,,,,,B,3/25/2020 12:00,eff5ae2c80d18f37224e21751ae8abb04d582857,2020-03-25T20:00:00Z,3,,2486,2486,2486,20,1,0,274,28,302
+20200325,KY,157,2865,,,,,,,,,A,3/24/2020 17:00,9e498b0e1f0b9065656aa85dceca3fec2935fad8,2020-03-25T20:00:00Z,4,,3022,3022,3022,21,0,0,1103,33,1136
+20200325,LA,1795,9656,,491,,,,163,,,A,3/25/2020 13:00,8baff56a70fb107ca5d5bb21b467f249cc54aeab,2020-03-25T20:00:00Z,65,,11451,11451,11451,22,19,0,2441,407,2848
+20200325,MA,1739,18079,,,103,,,,,,B,3/25/2020 16:00,8fc0b57aa2284fc9f533074786edff9096721eb1,2020-03-25T20:00:00Z,33,103,19818,19818,19818,25,7,9,5365,679,6044
+20200325,MD,423,94,,,,,,,,,D,3/25/2020 10:00,6c0147642e1ae196ee36c3e0da51510e90183ebb,2020-03-25T20:00:00Z,4,,517,517,517,24,1,0,0,74,74
+20200325,ME,149,3177,,,,,,,,7,A,3/25/2020 11:30,9ded9120137caeb97729277372b43f1a70ef8f4f,2020-03-25T20:00:00Z,,,3326,3326,3326,23,0,0,163,24,187
+20200325,MI,7060,7537,,,,,,,,,D,3/25/2020 15:00,78552b7d4f9bc3b5419ef76d6c750b379272a3a2,2020-03-25T20:00:00Z,43,,14597,14597,14597,26,19,0,1741,619,2360
+20200325,MN,287,11188,,26,35,,,,,122,A,3/25/2020 00:00,1410f75312942bcaa33cb1689d65830d2f216bf1,2020-03-25T20:00:00Z,1,35,11475,11475,11475,27,0,14,5638,25,5663
+20200325,MO,356,369,,,,,,,,,C,3/24/2020 16:00,77c3e4bcd9a89c33db0b0c6bd872a79ed9efa6ea,2020-03-25T20:00:00Z,8,,725,725,725,29,5,0,0,173,173
 20200325,MP,0,,,,,,,,,,,3/24/2020 18:30,2e31c4a48db2f02c03df645f1080fb2d62114660,2020-03-25T20:00:00Z,0,,0,0,0,69,0,0,0,0,0
-20200325,MS,377,1566,,,117,,,,,,,3/24/2020 20:00,a58c2aa6dfc88534bb5478f3f4ef7fa0cde5def8,2020-03-25T20:00:00Z,2,117,1943,1943,1943,28,1,31,14,57,71
-20200325,MT,53,1948,,,,,,,,,,3/25/2020 10:00,e143295fd9d647acd2871f1cb9077b11381015a0,2020-03-25T20:00:00Z,,,2001,2001,2001,30,0,0,305,7,312
-20200325,NC,504,9985,,29,,,,,,,,3/25/2020 16:30,7109bf7cdab91478ed7fa0349f700427b293aff8,2020-03-25T20:00:00Z,1,,10489,10489,10489,37,1,0,1844,106,1950
-20200325,ND,39,1734,,,8,,,,,,,3/25/2020 11:47,74363496459db8dcaa8fd13c9c56c9d004454b6a,2020-03-25T20:00:00Z,0,8,1773,1773,1773,38,0,3,280,5,285
-20200325,NE,61,1304,,,,,,,,,,3/24/2020 00:00,cddf8b681708061b3f7239b45f9f128a732ea315,2020-03-25T20:00:00Z,0,,1365,1365,1365,31,0,0,329,9,338
-20200325,NH,108,2356,804,,13,,,,,,,3/25/2020 13:30,82502bb844fbc1504da0f614a343798bda746718,2020-03-25T20:00:00Z,1,13,3268,2464,2464,33,0,2,909,7,916
-20200325,NJ,4402,10452,,,,,,,,,,3/24/2020 01:30,2a241d2529578aab636ed45faa089a23a765c748,2020-03-25T20:00:00Z,62,,14854,14854,14854,34,18,0,2127,727,2854
-20200325,NM,100,6742,,,,,,,,,,3/24/2020 00:00,b81107d185f2c7a0312dc1244703750e393f2bb0,2020-03-25T20:00:00Z,1,,6842,6842,6842,35,1,0,852,17,869
-20200325,NV,321,4251,,,,,,,,,,3/25/2020 02:59,10e4020871d5320da3a12c48791698f9468f5084,2020-03-25T20:00:00Z,6,,4572,4572,4572,32,2,0,297,43,340
-20200325,NY,30811,72668,,4079,3805,,,,,,,3/25/2020 11:45,51ea6c8b1a99706090be03065fb2494abe7a11db,2020-03-25T20:00:00Z,285,3805,103479,103479,103479,36,75,571,7063,5146,12209
-20200325,OH,704,14060,,,182,,74,,,,,3/25/2020 14:00,4ea5dae3ca5df22702c0f49d6a1858f7a746020a,2020-03-25T20:00:00Z,10,182,14764,14764,14764,39,2,37,13920,140,14060
-20200325,OK,164,805,,,59,,,,,,,3/25/2020 08:00,d93f43124121721b6d869e1c9c0d1aedfdcb54f3,2020-03-25T20:00:00Z,5,59,969,969,969,40,2,34,70,58,128
-20200325,OR,209,4350,,,61,,,,,,,3/24/2020 11:00,e4d2254a867bf926571f250727dc69da861eaee8,2020-03-25T20:00:00Z,8,61,4559,4559,4559,41,0,0,0,0,0
-20200325,PA,1127,11193,,,,,,,,,,3/25/2020 12:00,dfe4f9db09d845e7852261914202c265b91a12cb,2020-03-25T20:00:00Z,11,,12320,12320,12320,42,4,0,2550,276,2826
-20200325,PR,51,317,70,,,,,,,,,3/25/2020 07:00,12eec5736a65b2e3f528f89d04a0f6a925fc4a70,2020-03-25T20:00:00Z,2,,438,368,368,72,0,0,49,12,61
-20200325,RI,132,1262,196,15,,,,,,,,3/25/2020 00:00,643a40ef4f29238c4b83fbae7014f6f9e5798ec9,2020-03-25T20:00:00Z,,,1590,1394,1394,44,0,0,62,8,70
-20200325,SC,424,2303,,,102,,,,,,,3/24/2020 19:30,3e649d1a9b393da2c01b580b722fbbce1b112478,2020-03-25T20:00:00Z,7,102,2727,2727,2727,45,2,102,291,126,417
-20200325,SD,41,819,268,,,,,,,,,3/25/2020 13:00,e216d4b4f2abe78db4591861991716e01b3d8c5b,2020-03-25T20:00:00Z,1,,1128,860,860,46,0,0,29,11,40
-20200325,TN,784,11012,,,53,,,,,,,3/25/2020 15:00,9977b1435a7411739888276c26442c5358028c71,2020-03-25T20:00:00Z,3,53,11796,11796,11796,47,1,53,495,117,612
-20200325,TX,974,12520,,,,,,,,,,3/25/2020 12:30,e6099a04a2196a2f1ace63b5a51689a69eab1cb8,2020-03-25T20:00:00Z,12,,13494,13494,13494,48,3,0,1763,564,2327
-20200325,UT,346,6491,,,,,,,,,,3/25/2020 15:00,12d00a566c978172db28f642705e81e9fdd28ad0,2020-03-25T20:00:00Z,1,,6837,6837,6837,49,0,0,967,47,1014
-20200325,VA,391,4979,,,59,,,,,,,3/25/2020 00:00,ed35f7a345e6387246d5c9cbd2be6a6fc616fb4e,2020-03-25T20:00:00Z,9,59,5370,5370,5370,51,2,14,799,101,900
+20200325,MS,377,1566,,,117,,,,,,B,3/24/2020 20:00,7dfa4d9527fb84f5c29f853ed3707365541a247d,2020-03-25T20:00:00Z,2,117,1943,1943,1943,28,1,31,14,57,71
+20200325,MT,53,1948,,,,,,,,,C,3/25/2020 10:00,8133dfd85159c45052a9b6bb0d24fea0080690d9,2020-03-25T20:00:00Z,,,2001,2001,2001,30,0,0,305,7,312
+20200325,NC,504,9985,,29,,,,,,,A,3/25/2020 16:30,3177426b21c214c8a3f1902738013e2ad3022ad9,2020-03-25T20:00:00Z,1,,10489,10489,10489,37,1,0,1844,106,1950
+20200325,ND,39,1734,,,8,,,,,,B,3/25/2020 11:47,a760a3e145e7656c4403478f7c492704d44732a7,2020-03-25T20:00:00Z,0,8,1773,1773,1773,38,0,3,280,5,285
+20200325,NE,61,1304,,,,,,,,,A,3/24/2020 00:00,1be4f5286d3409d2878e9402bd33116e1217025f,2020-03-25T20:00:00Z,0,,1365,1365,1365,31,0,0,329,9,338
+20200325,NH,108,2356,804,,13,,,,,,B,3/25/2020 13:30,a138c592a02e176a2742497450667766ea2413f7,2020-03-25T20:00:00Z,1,13,3268,2464,2464,33,0,2,909,7,916
+20200325,NJ,4402,10452,,,,,,,,,B,3/24/2020 01:30,83512456afd279745d4313688e0c2833f10313df,2020-03-25T20:00:00Z,62,,14854,14854,14854,34,18,0,2127,727,2854
+20200325,NM,100,6742,,,,,,,,,A,3/24/2020 00:00,dca5f8f0d18de7a779591260584b5b615d2f3446,2020-03-25T20:00:00Z,1,,6842,6842,6842,35,1,0,852,17,869
+20200325,NV,321,4251,,,,,,,,,A,3/25/2020 02:59,a10ecea0bc66ed068349c86eb16140f09300e44a,2020-03-25T20:00:00Z,6,,4572,4572,4572,32,2,0,297,43,340
+20200325,NY,30811,72668,,4079,3805,,,,,,B,3/25/2020 11:45,8416f1590fec27b83e85b39865b220bc4e742f67,2020-03-25T20:00:00Z,285,3805,103479,103479,103479,36,75,571,7063,5146,12209
+20200325,OH,704,14060,,,182,,74,,,,B,3/25/2020 14:00,63295b4f0011c06fd417eee134ea5bdd85fb6059,2020-03-25T20:00:00Z,10,182,14764,14764,14764,39,2,37,13920,140,14060
+20200325,OK,164,805,,,59,,,,,,A,3/25/2020 08:00,dec4aec43b39587f592e50a40b99647befdaeab7,2020-03-25T20:00:00Z,5,59,969,969,969,40,2,34,70,58,128
+20200325,OR,209,4350,,,61,,,,,,A,3/24/2020 11:00,ee2a72dc548151311cc376f37fcf6234ff7087bf,2020-03-25T20:00:00Z,8,61,4559,4559,4559,41,0,0,0,0,0
+20200325,PA,1127,11193,,,,,,,,,A,3/25/2020 12:00,640fcb2d93bda2a7ddbb8adccd66d8a0d3457faa,2020-03-25T20:00:00Z,11,,12320,12320,12320,42,4,0,2550,276,2826
+20200325,PR,51,317,70,,,,,,,,A,3/25/2020 07:00,865cca491840856dc62844c381ef5b5f04b2f3bb,2020-03-25T20:00:00Z,2,,438,368,368,72,0,0,49,12,61
+20200325,RI,132,1262,196,15,,,,,,,B,3/25/2020 00:00,5d06e9807cc63d888fe7069050b2bfba323c3fbf,2020-03-25T20:00:00Z,,,1590,1394,1394,44,0,0,62,8,70
+20200325,SC,424,2303,,,102,,,,,,B,3/24/2020 19:30,9a96cb471fad8ccd06436d9df99dde75592b7fd9,2020-03-25T20:00:00Z,7,102,2727,2727,2727,45,2,102,291,126,417
+20200325,SD,41,819,268,,,,,,,,A,3/25/2020 13:00,cad2c2f0fb178164fbd96e081f007c6e0c1183ca,2020-03-25T20:00:00Z,1,,1128,860,860,46,0,0,29,11,40
+20200325,TN,784,11012,,,53,,,,,,A,3/25/2020 15:00,4e700622fcccb8f4b0f9862a07e7872447a34e0f,2020-03-25T20:00:00Z,3,53,11796,11796,11796,47,1,53,495,117,612
+20200325,TX,974,12520,,,,,,,,,A,3/25/2020 12:30,58e98207985c7f64fa0cbd333ac2014f4ef5375f,2020-03-25T20:00:00Z,12,,13494,13494,13494,48,3,0,1763,564,2327
+20200325,UT,346,6491,,,,,,,,,A,3/25/2020 15:00,53625dbf77101f6953f91be8f21e4c5dc9f8d35d,2020-03-25T20:00:00Z,1,,6837,6837,6837,49,0,0,967,47,1014
+20200325,VA,391,4979,,,59,,,,,,A,3/25/2020 00:00,250d93c8997f6d654743ab56879f8c4819587e56,2020-03-25T20:00:00Z,9,59,5370,5370,5370,51,2,14,799,101,900
 20200325,VI,17,55,2,,,,,,,,,3/24/2020 20:30,7a12eb162aa4dfe687e2e2796ae382384454f217,2020-03-25T20:00:00Z,,,74,72,72,78,0,0,55,0,55
-20200325,VT,123,1589,,,,,,,,,,3/25/2020 13:00,62df0ac904372a2d4c42007b2ce71a80face394e,2020-03-25T20:00:00Z,8,,1712,1712,1712,50,1,0,149,28,177
-20200325,WA,3339,57929,,,,,,,,,,3/24/2020 21:06,279cd9df71f37b4fa954ad6a47a43d4ae29fd0af,2020-03-25T20:00:00Z,159,,61268,61268,61268,53,13,0,4588,462,5050
-20200325,WI,585,10089,,,,,,,,,,3/25/2020 16:00,09dfa4fddeacbd6e3c5fde21c7fd515fdf17c250,2020-03-25T20:00:00Z,7,,10674,10674,10674,55,2,0,1852,128,1980
-20200325,WV,39,759,6,,1,,,,,,,3/24/2020 00:00,b02f572207eb0406709039fd3180c0979ef364a0,2020-03-25T20:00:00Z,0,1,804,798,798,54,0,0,149,19,168
-20200325,WY,44,954,,,,,,,,7,,3/25/2020 12:45,456a35c7013ed4b80a1781d4430c98e09e3961a9,2020-03-25T20:00:00Z,,,998,998,998,56,0,0,244,15,259
-20200324,AK,36,986,,,0,,,,,,,3/23/2020 19:00,0fd3b206cbb54876519c68f6cfa972a34ca1dd00,2020-03-24T20:00:00Z,0,0,1022,1022,1022,02,0,0,40,14,54
-20200324,AL,215,2106,,,,,,,,,,3/24/2020 12:00,7ed42ce606ac1ca8b59aefdaf4e3fd1d77755c31,2020-03-24T20:00:00Z,0,,2321,2321,2321,01,0,0,441,48,489
-20200324,AR,218,947,,22,,,,,,,,3/24/2020 00:00,2d543da2d43d24796ab91bbbea862ed9186c9660,2020-03-24T20:00:00Z,0,,1165,1165,1165,05,0,0,41,44,85
+20200325,VT,123,1589,,,,,,,,,A,3/25/2020 13:00,d64bdb59fb61aee707a0e91d5b705fb674342582,2020-03-25T20:00:00Z,8,,1712,1712,1712,50,1,0,149,28,177
+20200325,WA,3339,57929,,,,,,,,,A,3/24/2020 21:06,1a0fa36f6896408c1a08bbfc8de3fbd7392b1174,2020-03-25T20:00:00Z,159,,61268,61268,61268,53,13,0,4588,462,5050
+20200325,WI,585,10089,,,,,,,,,A,3/25/2020 16:00,d6b29b0f4bec8f540ed2bfa3e9eb7c06c8f902d9,2020-03-25T20:00:00Z,7,,10674,10674,10674,55,2,0,1852,128,1980
+20200325,WV,39,759,6,,1,,,,,,B,3/24/2020 00:00,b95886565bc3bb06aab2728938f794796db9aaa4,2020-03-25T20:00:00Z,0,1,804,798,798,54,0,0,149,19,168
+20200325,WY,44,954,,,,,,,,7,A,3/25/2020 12:45,9bb0d407569a27e94c57602a9ec0a9f7039187d1,2020-03-25T20:00:00Z,,,998,998,998,56,0,0,244,15,259
+20200324,AK,36,986,,,0,,,,,,A,3/23/2020 19:00,ad0bffec84cecd8b2294f21337c9c6bb79b66ded,2020-03-24T20:00:00Z,0,0,1022,1022,1022,02,0,0,40,14,54
+20200324,AL,215,2106,,,,,,,,,C,3/24/2020 12:00,0beac38e505e26f2af4236fa25f2047e9ed14e5a,2020-03-24T20:00:00Z,0,,2321,2321,2321,01,0,0,441,48,489
+20200324,AR,218,947,,22,,,,,,,A,3/24/2020 00:00,1d9cefc002bf7770c5b5aae9a4c76a817a4a890a,2020-03-24T20:00:00Z,0,,1165,1165,1165,05,0,0,41,44,85
 20200324,AS,,,,,,,,,,,,3/24/2020 00:00,ba91d52d754c128b8c527c6061b25fdff76694ba,2020-03-24T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200324,AZ,357,313,22,,,,,,,,,3/24/2020 00:00,66b780530c782f19ea5f1157f08a33c02c7a4ae7,2020-03-24T20:00:00Z,5,,692,670,670,04,3,0,4,92,96
-20200324,CA,2102,13452,12100,,,,,,,,,3/24/2020 00:00,b5706b8ba9a73b35f69fd0847d0b072d33600783,2020-03-24T20:00:00Z,40,,27654,15554,15554,06,13,0,885,369,1254
-20200324,CO,720,5504,,116,72,,,,,,,3/23/2020 18:13,ac0d32eb48ec54773f11174f54f5e9177148187b,2020-03-24T20:00:00Z,7,72,6224,6224,6224,08,1,14,659,129,788
-20200324,CT,618,4682,,71,,,,,,,,3/24/2020 16:00,213a92a2dbb4004f9d79e192e730ba64987a9482,2020-03-24T20:00:00Z,12,,5300,5300,5300,09,2,0,597,203,800
-20200324,DC,137,1195,2,,,,,,,,,3/23/2020 19:30,5d01bcea2e188914e3fd8653dc0ba0c81ccec54a,2020-03-24T20:00:00Z,2,,1334,1332,1332,11,0,0,82,21,103
-20200324,DE,91,36,,,,,,,,,,3/24/2020 10:45,a3c9a5977826862a415d958e34f78c4feec09692,2020-03-24T20:00:00Z,0,,127,127,127,10,0,0,0,23,23
-20200324,FL,1412,13127,1008,,259,,,,,,,3/24/2020 11:00,a5c354de79ec12f6c3a1683ddd10db01ed21abff,2020-03-24T20:00:00Z,18,259,15547,14539,14539,12,4,42,2064,241,2305
-20200324,GA,1026,4458,,,,,,,,,,3/24/2020 12:00,94d945abc6d16545885ec8dd006c53143c44b67b,2020-03-24T20:00:00Z,32,,5484,5484,5484,13,7,0,161,254,415
+20200324,AZ,357,313,22,,,,,,,,B,3/24/2020 00:00,93714762a86e294d0beef71ef1aab1150ac5f9c3,2020-03-24T20:00:00Z,5,,692,670,670,04,3,0,4,92,96
+20200324,CA,2102,13452,12100,,,,,,,,B,3/24/2020 00:00,84aee4eec875915e8a297db205628728135b5c14,2020-03-24T20:00:00Z,40,,27654,15554,15554,06,13,0,885,369,1254
+20200324,CO,720,5504,,116,72,,,,,,A,3/23/2020 18:13,857a6a8cad82254df0586f2ad92767eda1a2b4e7,2020-03-24T20:00:00Z,7,72,6224,6224,6224,08,1,14,659,129,788
+20200324,CT,618,4682,,71,,,,,,,A,3/24/2020 16:00,ab0e283e8b1acbd9926359d1a7e82da8999896cc,2020-03-24T20:00:00Z,12,,5300,5300,5300,09,2,0,597,203,800
+20200324,DC,137,1195,2,,,,,,,,A,3/23/2020 19:30,2fe3a0b82ad7ce77c19a9749e0b6d72f0c3c4d70,2020-03-24T20:00:00Z,2,,1334,1332,1332,11,0,0,82,21,103
+20200324,DE,91,36,,,,,,,,,C,3/24/2020 10:45,c515ef744b28a95f506a7c7341be8db24c39e411,2020-03-24T20:00:00Z,0,,127,127,127,10,0,0,0,23,23
+20200324,FL,1412,13127,1008,,259,,,,,,A,3/24/2020 11:00,e6def059df9ce1c730a997274eac245e2aab49eb,2020-03-24T20:00:00Z,18,259,15547,14539,14539,12,4,42,2064,241,2305
+20200324,GA,1026,4458,,,,,,,,,A,3/24/2020 12:00,78af7f301ca7948f698ab7e1589ed7862ce89f70,2020-03-24T20:00:00Z,32,,5484,5484,5484,13,7,0,161,254,415
 20200324,GU,32,201,,5,,,,,,,,3/24/2020 06:45,aaad6d380b8022fd01fb58b743bbaa425cfb066f,2020-03-24T20:00:00Z,1,,233,233,233,66,0,0,40,3,43
-20200324,HI,77,3589,,,4,,,,,,,3/23/2020 18:00,2bf048d9b52983563fa9dccbeb3de187ccb02aec,2020-03-24T20:00:00Z,,4,3666,3666,3666,15,0,4,634,21,655
-20200324,IA,124,2315,,,27,,,,,,,3/24/2020 00:00,7d1854e6e3347983d5942741733f5d5ced01fd8a,2020-03-24T20:00:00Z,,27,2439,2439,2439,19,0,27,272,19,291
-20200324,ID,50,1887,,,,,,,,,,3/23/2020 19:00,4e1705711db2198cdade504af852180680d9d5e8,2020-03-24T20:00:00Z,0,,1937,1937,1937,16,0,0,578,3,581
-20200324,IL,1535,9934,,,,,,,,,,3/24/2020 00:00,e9dd47e58c14c0b6d0bec377cecf649942608048,2020-03-24T20:00:00Z,16,,11469,11469,11469,17,4,0,1351,262,1613
-20200324,IN,365,2566,,,1,,,,,,,3/24/2020 11:00,63048559814aa33d507b57557932107de24b8dde,2020-03-24T20:00:00Z,12,1,2931,2931,2931,18,5,0,865,106,971
-20200324,KS,98,2086,,,,,,,,,,3/24/2020 12:00,02dade2c3ae5abba6f12ae953f0aefdc633225b8,2020-03-24T20:00:00Z,2,,2184,2184,2184,20,0,0,1669,16,1685
-20200324,KY,124,1762,,,,,,,,,,3/23/2020 17:00,ba65c70278a92a48708d04197963cb32076905a6,2020-03-24T20:00:00Z,4,,1886,1886,1886,21,1,0,0,20,20
-20200324,LA,1388,7215,,271,,,,,,,,3/24/2020 13:00,ba3a397b412c9d6f52ebb3600d732cc900496df9,2020-03-24T20:00:00Z,46,,8603,8603,8603,22,12,0,2439,216,2655
-20200324,MA,1060,12714,,,94,,,,,,,3/24/2020 12:30,a58e293eb5cdbc3973d0e918c1312bcf78760b06,2020-03-24T20:00:00Z,26,94,13774,13774,13774,25,9,15,4451,382,4833
-20200324,MD,349,94,,,,,,,,,,3/24/2020 10:00,15bc3b1c06d7ab479787800c4dd93a8235d14518,2020-03-24T20:00:00Z,3,,443,443,443,24,0,0,0,61,61
-20200324,ME,125,3014,,,,,,,,,,3/24/2020 12:00,6de9c032a2e6f703d3432025312bf2e9863b494a,2020-03-24T20:00:00Z,,,3139,3139,3139,23,0,0,223,18,241
-20200324,MI,6441,5796,,,,,,,,,,3/24/2020 11:00,748aae78c67b5967da8025904ed0a7e724f49129,2020-03-24T20:00:00Z,24,,12237,12237,12237,26,9,0,1099,652,1751
-20200324,MN,262,5550,,,21,,,,,,,3/24/2020 00:00,7a52aec24f3ae8309221d3e8d1b9278b6b83c8b4,2020-03-24T20:00:00Z,1,21,5812,5812,5812,27,0,4,1039,27,1066
-20200324,MO,183,369,,,,,,,,,,3/23/2020 15:00,6dd0493d269d16c6bbb7ca24b1e30b6c0b5cb42e,2020-03-24T20:00:00Z,3,,552,552,552,29,0,0,0,0,0
+20200324,HI,77,3589,,,4,,,,,,A,3/23/2020 18:00,394b72ea9d53d284743894fa2760133503b5ed1c,2020-03-24T20:00:00Z,,4,3666,3666,3666,15,0,4,634,21,655
+20200324,IA,124,2315,,,27,,,,,,C,3/24/2020 00:00,10ce98b3e77c0dd0935d82f050eb97c7c38e27b8,2020-03-24T20:00:00Z,,27,2439,2439,2439,19,0,27,272,19,291
+20200324,ID,50,1887,,,,,,,,,A,3/23/2020 19:00,769a9cb59623485f60d778f25f04d06717970572,2020-03-24T20:00:00Z,0,,1937,1937,1937,16,0,0,578,3,581
+20200324,IL,1535,9934,,,,,,,,,A,3/24/2020 00:00,8c83c1070c8cdc7a0871c8643ac563d1ee04dda5,2020-03-24T20:00:00Z,16,,11469,11469,11469,17,4,0,1351,262,1613
+20200324,IN,365,2566,,,1,,,,,,B,3/24/2020 11:00,4683d94c49ef4b59c87e6ca7f76097b7e193fa5f,2020-03-24T20:00:00Z,12,1,2931,2931,2931,18,5,0,865,106,971
+20200324,KS,98,2086,,,,,,,,,B,3/24/2020 12:00,822db51e8ea8c56f0a348580fbd41d49a7f38a9b,2020-03-24T20:00:00Z,2,,2184,2184,2184,20,0,0,1669,16,1685
+20200324,KY,124,1762,,,,,,,,,A,3/23/2020 17:00,79e01bcfcda37bb6f6552da61ebb6c568744d590,2020-03-24T20:00:00Z,4,,1886,1886,1886,21,1,0,0,20,20
+20200324,LA,1388,7215,,271,,,,,,,A,3/24/2020 13:00,82a3e98716612c5e4b74b1685382feebd71e6af8,2020-03-24T20:00:00Z,46,,8603,8603,8603,22,12,0,2439,216,2655
+20200324,MA,1060,12714,,,94,,,,,,B,3/24/2020 12:30,f64fa88ca121311a73c44c6f81825d2eedd143d1,2020-03-24T20:00:00Z,26,94,13774,13774,13774,25,9,15,4451,382,4833
+20200324,MD,349,94,,,,,,,,,D,3/24/2020 10:00,722cc80779568114ba5bb4546835eb4a72af43a3,2020-03-24T20:00:00Z,3,,443,443,443,24,0,0,0,61,61
+20200324,ME,125,3014,,,,,,,,,A,3/24/2020 12:00,aec5ab38c72838c8c03b42523975db73cdbaa10e,2020-03-24T20:00:00Z,,,3139,3139,3139,23,0,0,223,18,241
+20200324,MI,6441,5796,,,,,,,,,D,3/24/2020 11:00,79741e9b4a2a371cafd36b54d7916057a6ab8373,2020-03-24T20:00:00Z,24,,12237,12237,12237,26,9,0,1099,652,1751
+20200324,MN,262,5550,,,21,,,,,,A,3/24/2020 00:00,eafcae4da89815acd6305bfe51463dfae87e1c94,2020-03-24T20:00:00Z,1,21,5812,5812,5812,27,0,4,1039,27,1066
+20200324,MO,183,369,,,,,,,,,C,3/23/2020 15:00,60a11eb8f416803b66f1e70bd33e71fe87224a99,2020-03-24T20:00:00Z,3,,552,552,552,29,0,0,0,0,0
 20200324,MP,0,,,,,,,,,,,3/23/2020 01:30,976f5806247900c4d1e954b21b55c23b8e92c344,2020-03-24T20:00:00Z,0,,0,0,0,69,0,0,0,0,0
-20200324,MS,320,1552,,,86,,,,,,,3/23/2020 19:00,eb3b4eba6b0647f4feda117b0e98f5e6bbf41fae,2020-03-24T20:00:00Z,1,86,1872,1872,1872,28,0,53,409,71,480
-20200324,MT,46,1643,,,,,,,,,,3/24/2020 10:00,2a9043af25278dfa0fd35ad4945072afb2622862,2020-03-24T20:00:00Z,,,1689,1689,1689,30,0,0,497,12,509
-20200324,NC,398,8141,,,,,,,,,,3/24/2020 09:45,628378c6008424b9cbd12513977fe1f2cac64af9,2020-03-24T20:00:00Z,0,,8539,8539,8539,37,0,0,0,101,101
-20200324,ND,34,1454,,,5,,,,,,,3/24/2020 11:17,42701470d9b2e05b863c4957337dd411a6e345fa,2020-03-24T20:00:00Z,0,5,1488,1488,1488,38,0,1,101,4,105
-20200324,NE,52,975,,,,,,,,,,3/23/2020 00:00,220f7af65422c511d0e3c0b3498b560fc0738d59,2020-03-24T20:00:00Z,0,,1027,1027,1027,31,0,0,619,2,621
-20200324,NH,101,1447,869,,11,,,,,,,3/23/2020 09:00,640346f078c10619fd8de36a14226945fd88e7e7,2020-03-24T20:00:00Z,1,11,2417,1548,1548,33,1,11,73,23,96
-20200324,NJ,3675,8325,45,,,,,,,,,3/24/2020 01:30,08727bbc6d60819df50847f156180e7db8fafd6d,2020-03-24T20:00:00Z,44,,12045,12000,12000,34,17,0,7966,831,8797
-20200324,NM,83,5890,,,,,,,,,,3/23/2020 00:00,e9a283a2983c54c9f41b5c7e42ab50e8c3ae4b40,2020-03-24T20:00:00Z,,,5973,5973,5973,35,0,0,569,18,587
-20200324,NV,278,3954,,,,,,,,,,3/23/2020 14:59,c7f4a9d3509c8f292fe09e8b08f05fef949d32a8,2020-03-24T20:00:00Z,4,,4232,4232,4232,32,0,0,464,33,497
-20200324,NY,25665,65605,,3343,3234,,,,,,,3/24/2020 11:30,3ef9f05d9721e45b3514ec57ac12f9a3a8512dac,2020-03-24T20:00:00Z,210,3234,91270,91270,91270,36,96,599,8191,4790,12981
-20200324,OH,564,140,,,145,,,,,,,3/24/2020 14:00,c3c7ce73e1274e0f9f900467878f835231582cbb,2020-03-24T20:00:00Z,8,145,704,704,704,39,2,41,0,122,122
-20200324,OK,106,735,,,25,,,,,,,3/24/2020 08:00,ea132adb604165a91dd5dd542d6d20cc69910097,2020-03-24T20:00:00Z,3,25,841,841,841,40,1,10,41,25,66
-20200324,OR,209,4350,,,61,,,,,,,3/24/2020 11:00,f717dba89dc44e18a75d410da1e460f2f886dd7a,2020-03-24T20:00:00Z,8,61,4559,4559,4559,41,3,5,701,18,719
-20200324,PA,851,8643,,,,,,,,,,3/24/2020 12:00,6c95d2d2cb397c3f0834556ac447cd98271d0265,2020-03-24T20:00:00Z,7,,9494,9494,9494,42,1,0,2048,207,2255
-20200324,PR,39,268,42,,,,,,,,,3/23/2020 07:00,9457155c980596d063b87e6da90a65bf0ec84439,2020-03-24T20:00:00Z,2,,349,307,307,72,0,0,79,8,87
-20200324,RI,124,1200,77,,,,,,,,,3/24/2020 00:00,e84770f315b5650bcad6c2432bafe71471831cc1,2020-03-24T20:00:00Z,,,1401,1324,1324,44,0,0,57,18,75
-20200324,SC,298,2012,,,,,,,,,,3/23/2020 16:35,2aaceb3d60d118303278431c405da05daee1f7bf,2020-03-24T20:00:00Z,5,,2310,2310,2310,45,0,0,546,0,546
-20200324,SD,30,790,268,,,,,,,,,3/24/2020 12:30,ab7e015ecf3490740024c71525bc3f084fae3bea,2020-03-24T20:00:00Z,1,,1088,820,820,46,0,0,28,2,30
-20200324,TN,667,10517,,,,,,,,,,3/24/2020 15:00,725ff7ebb6cb6fd0b82415a95bbb4309819a7cf9,2020-03-24T20:00:00Z,2,,11184,11184,11184,47,0,0,7245,52,7297
-20200324,TX,410,10757,,,,,,,,,,3/23/2020 21:00,98035ef91581742182b0d4c7c9febf9eff2ef296,2020-03-24T20:00:00Z,9,,11167,11167,11167,48,1,0,1054,58,1112
-20200324,UT,299,5524,,,,,,,,,,3/24/2020 15:00,628b1d9716cd11c75169da9bb0617d0da7808ba4,2020-03-24T20:00:00Z,1,,5823,5823,5823,49,0,0,734,42,776
-20200324,VA,290,4180,,,45,,,,,,,3/24/2020 00:00,0119568b84f8d5690de3e55eee072eea7a7acb10,2020-03-24T20:00:00Z,7,45,4470,4470,4470,51,1,7,737,36,773
+20200324,MS,320,1552,,,86,,,,,,B,3/23/2020 19:00,41ca10d1c0ef99f41ee9e7830ff0647ac806cd19,2020-03-24T20:00:00Z,1,86,1872,1872,1872,28,0,53,409,71,480
+20200324,MT,46,1643,,,,,,,,,C,3/24/2020 10:00,d39ccbf3cb45eee20bc61ffe9d550483eb1bdeb6,2020-03-24T20:00:00Z,,,1689,1689,1689,30,0,0,497,12,509
+20200324,NC,398,8141,,,,,,,,,A,3/24/2020 09:45,151a641a4502a9bff0afadad12d201ba20194222,2020-03-24T20:00:00Z,0,,8539,8539,8539,37,0,0,0,101,101
+20200324,ND,34,1454,,,5,,,,,,B,3/24/2020 11:17,d3e06dfc76164d709e9a584702f432aa4dfd5953,2020-03-24T20:00:00Z,0,5,1488,1488,1488,38,0,1,101,4,105
+20200324,NE,52,975,,,,,,,,,A,3/23/2020 00:00,1d6fe6bf66b605e6b2613fd15e863b56c0a6f4d4,2020-03-24T20:00:00Z,0,,1027,1027,1027,31,0,0,619,2,621
+20200324,NH,101,1447,869,,11,,,,,,B,3/23/2020 09:00,7df1edb98807080ad6a0e86d3888733fbd47b0e7,2020-03-24T20:00:00Z,1,11,2417,1548,1548,33,1,11,73,23,96
+20200324,NJ,3675,8325,45,,,,,,,,B,3/24/2020 01:30,1e853ac82de1b36d2e92ee4fcd68146175f02255,2020-03-24T20:00:00Z,44,,12045,12000,12000,34,17,0,7966,831,8797
+20200324,NM,83,5890,,,,,,,,,A,3/23/2020 00:00,f069ef0e2f5cd10da073cdf2729c50518fa3f4d1,2020-03-24T20:00:00Z,,,5973,5973,5973,35,0,0,569,18,587
+20200324,NV,278,3954,,,,,,,,,A,3/23/2020 14:59,e9135baa8e8438a3113c06117a66af8a8a6a4c22,2020-03-24T20:00:00Z,4,,4232,4232,4232,32,0,0,464,33,497
+20200324,NY,25665,65605,,3343,3234,,,,,,B,3/24/2020 11:30,b08731f515bedc235dd7e90953425c36bf60c91c,2020-03-24T20:00:00Z,210,3234,91270,91270,91270,36,96,599,8191,4790,12981
+20200324,OH,564,140,,,145,,,,,,D,3/24/2020 14:00,b30c6ef605875885739e48b3ead9acda79a2c629,2020-03-24T20:00:00Z,8,145,704,704,704,39,2,41,0,122,122
+20200324,OK,106,735,,,25,,,,,,A,3/24/2020 08:00,9968e2d587a7632553b3fa63dbde368a6f664918,2020-03-24T20:00:00Z,3,25,841,841,841,40,1,10,41,25,66
+20200324,OR,209,4350,,,61,,,,,,A,3/24/2020 11:00,d10760c1234fe2c31823f147ac52eda1d7e5304a,2020-03-24T20:00:00Z,8,61,4559,4559,4559,41,3,5,701,18,719
+20200324,PA,851,8643,,,,,,,,,A,3/24/2020 12:00,c4700dd9300214cbb3bdb952e0b52c3bee1a8fa5,2020-03-24T20:00:00Z,7,,9494,9494,9494,42,1,0,2048,207,2255
+20200324,PR,39,268,42,,,,,,,,A,3/23/2020 07:00,0ed041850e58ad93073822631b4f3a32a7370128,2020-03-24T20:00:00Z,2,,349,307,307,72,0,0,79,8,87
+20200324,RI,124,1200,77,,,,,,,,B,3/24/2020 00:00,25832521d2915d7474ece874e702d6796a89d978,2020-03-24T20:00:00Z,,,1401,1324,1324,44,0,0,57,18,75
+20200324,SC,298,2012,,,,,,,,,B,3/23/2020 16:35,d645c72133962c3ada32573c53f539d6cb619b45,2020-03-24T20:00:00Z,5,,2310,2310,2310,45,0,0,546,0,546
+20200324,SD,30,790,268,,,,,,,,A,3/24/2020 12:30,97d46f70fec94ea950b3e9477c2b8c0ff45c19c1,2020-03-24T20:00:00Z,1,,1088,820,820,46,0,0,28,2,30
+20200324,TN,667,10517,,,,,,,,,A,3/24/2020 15:00,07240399061a62bf7c5d602d9e694522963f2d58,2020-03-24T20:00:00Z,2,,11184,11184,11184,47,0,0,7245,52,7297
+20200324,TX,410,10757,,,,,,,,,A,3/23/2020 21:00,894d8614af5c592964d2a9e576a4231a2583a29d,2020-03-24T20:00:00Z,9,,11167,11167,11167,48,1,0,1054,58,1112
+20200324,UT,299,5524,,,,,,,,,A,3/24/2020 15:00,8ae05d02f9ffad13460fe8e2dc800a640c771a9c,2020-03-24T20:00:00Z,1,,5823,5823,5823,49,0,0,734,42,776
+20200324,VA,290,4180,,,45,,,,,,A,3/24/2020 00:00,e309b6d7793826192fd9f8f3b85fa348a73f9a09,2020-03-24T20:00:00Z,7,45,4470,4470,4470,51,1,7,737,36,773
 20200324,VI,17,,,,,,,,,,,3/23/2020 20:30,c044786248f73e7b9299c77e1f39f1b8bb0ea32b,2020-03-24T20:00:00Z,,,17,17,17,78,0,0,0,0,0
-20200324,VT,95,1440,,,,,,,,,,3/24/2020 13:00,69ee0c68aaa6a3991cfeee2874c13c3e4e0043bc,2020-03-24T20:00:00Z,7,,1535,1535,1535,50,2,0,334,20,354
-20200324,WA,2877,53341,,,,,,,,,,3/23/2020 18:07,79dfb1d0c38189595a2aaee7cbb3db75aaa541dd,2020-03-24T20:00:00Z,146,,56218,56218,56218,53,9,0,4849,381,5230
-20200324,WI,457,8237,,,,,,,,,,3/24/2020 16:00,97ecad8ba674bf4b86396537b376aaea972b7ea8,2020-03-24T20:00:00Z,5,,8694,8694,8694,55,0,0,1187,41,1228
-20200324,WV,20,610,0,,1,,,,,,,3/23/2020 00:00,bbf3e7801e36869fe7f98ac36030bfe0692992ae,2020-03-24T20:00:00Z,0,1,630,630,630,54,0,0,166,4,170
-20200324,WY,29,710,,,,,,,,,,3/24/2020 00:00,243edc8bb3c04aff75353fc858a2874d1bd3183c,2020-03-24T20:00:00Z,,,739,739,739,56,0,0,118,3,121
-20200323,AK,22,946,,,0,,,,,,,3/21/2020 16:30,309e3a85275642280ff4b165355c3632a9756a3f,2020-03-23T20:00:00Z,0,0,968,968,968,02,0,0,0,0,0
-20200323,AL,167,1665,,,,,,,,,,3/23/2020 12:00,de2b1270e2639652eae442e42d23639733d96f30,2020-03-23T20:00:00Z,0,,1832,1832,1832,01,0,0,201,29,230
-20200323,AR,174,906,,13,,,,,,,,3/23/2020 00:00,e8a62fbfb461530d5e04f9d6538a90020b98fd78,2020-03-23T20:00:00Z,0,,1080,1080,1080,05,0,0,195,9,204
+20200324,VT,95,1440,,,,,,,,,A,3/24/2020 13:00,d2577573db0dbf33a6340eedfa75d77503304f87,2020-03-24T20:00:00Z,7,,1535,1535,1535,50,2,0,334,20,354
+20200324,WA,2877,53341,,,,,,,,,A,3/23/2020 18:07,760505dcf3a15f261f9915d2fdfb80a87f78df2f,2020-03-24T20:00:00Z,146,,56218,56218,56218,53,9,0,4849,381,5230
+20200324,WI,457,8237,,,,,,,,,A,3/24/2020 16:00,d97f6818f3499e22260a5756205dcc6b053e1d71,2020-03-24T20:00:00Z,5,,8694,8694,8694,55,0,0,1187,41,1228
+20200324,WV,20,610,0,,1,,,,,,B,3/23/2020 00:00,64e69e21b23b6024aae325a7c0edce6d82e680cc,2020-03-24T20:00:00Z,0,1,630,630,630,54,0,0,166,4,170
+20200324,WY,29,710,,,,,,,,,A,3/24/2020 00:00,513e8a68ce9b6201f75b043ea7f328007f7d7def,2020-03-24T20:00:00Z,,,739,739,739,56,0,0,118,3,121
+20200323,AK,22,946,,,0,,,,,,A,3/21/2020 16:30,a4aea76abb5487074f98bc248438f33cfc1691da,2020-03-23T20:00:00Z,0,0,968,968,968,02,0,0,0,0,0
+20200323,AL,167,1665,,,,,,,,,C,3/23/2020 12:00,8dec022271dbb0c2fb18ed8a405a71687b634fab,2020-03-23T20:00:00Z,0,,1832,1832,1832,01,0,0,201,29,230
+20200323,AR,174,906,,13,,,,,,,A,3/23/2020 00:00,605289cad3f1c12aa6d3cb8d8266410cd437efce,2020-03-23T20:00:00Z,0,,1080,1080,1080,05,0,0,195,9,204
 20200323,AS,,,,,,,,,,,,3/19/2020 00:00,9480353f38b640e6dc50533bca98401333732bc3,2020-03-23T20:00:00Z,0,,0,0,0,60,0,0,0,0,0
-20200323,AZ,265,309,6,,,,,,,,,3/23/2020 00:00,3c23c20b72b43e0998245330686ad0bbf9cdcc4c,2020-03-23T20:00:00Z,2,,580,574,574,04,0,0,27,113,140
-20200323,CA,1733,12567,12100,,,,,,,,,3/23/2020 00:00,964bb586209ba496a3d9f2dca72eafd58546f30d,2020-03-23T20:00:00Z,27,,26400,14300,14300,06,0,0,1263,197,1460
-20200323,CO,591,4845,,74,58,,,,,,,3/22/2020 18:00,4c57891843092a530962bfe6811999528eb78ef8,2020-03-23T20:00:00Z,6,58,5436,5436,5436,08,1,9,770,116,886
-20200323,CT,415,4085,,54,,,,,,,,3/23/2020 16:00,305c4248bc34acd8fe821221ec89e072d2ec8c6c,2020-03-23T20:00:00Z,10,,4500,4500,4500,09,5,0,1208,192,1400
-20200323,DC,116,1113,,,,,,,,,,3/22/2020 19:00,09332b7451e110e268b2890c0cac96f5a47eb908,2020-03-23T20:00:00Z,2,,1229,1229,1229,11,1,0,156,18,174
-20200323,DE,68,36,,,,,,,,,,3/23/2020 11:15,04379656bee85851c606ef0a00f09e70734f4831,2020-03-23T20:00:00Z,0,,104,104,104,10,0,0,0,12,12
-20200323,FL,1171,11063,860,,217,,,,,,,3/23/2020 11:00,08eecc1f8f81ca521a0d324be6fc92819e278468,2020-03-23T20:00:00Z,14,217,13094,12234,12234,12,1,32,3073,341,3414
-20200323,GA,772,4297,,,,,,,,,,3/23/2020 12:00,22c307e45669f61e0b08d0facb0adee93a43686a,2020-03-23T20:00:00Z,25,,5069,5069,5069,13,2,0,877,172,1049
+20200323,AZ,265,309,6,,,,,,,,B,3/23/2020 00:00,fb0b0fc0fbbd5701162bccbcfc89c2266e64587f,2020-03-23T20:00:00Z,2,,580,574,574,04,0,0,27,113,140
+20200323,CA,1733,12567,12100,,,,,,,,B,3/23/2020 00:00,29643721de2a758e3a666f0d4513e881cc132913,2020-03-23T20:00:00Z,27,,26400,14300,14300,06,0,0,1263,197,1460
+20200323,CO,591,4845,,74,58,,,,,,A,3/22/2020 18:00,9d91a34b6e6b537e5c50b13b09972c4292f3e4b8,2020-03-23T20:00:00Z,6,58,5436,5436,5436,08,1,9,770,116,886
+20200323,CT,415,4085,,54,,,,,,,A,3/23/2020 16:00,60eb9321766cf3cfd4a9af4461e355f12b41e5ae,2020-03-23T20:00:00Z,10,,4500,4500,4500,09,5,0,1208,192,1400
+20200323,DC,116,1113,,,,,,,,,A,3/22/2020 19:00,4b7d545f605c86af210680643839d883de10b653,2020-03-23T20:00:00Z,2,,1229,1229,1229,11,1,0,156,18,174
+20200323,DE,68,36,,,,,,,,,C,3/23/2020 11:15,2e3d7939cdc8f95d4b1a238ea76a618f4435312b,2020-03-23T20:00:00Z,0,,104,104,104,10,0,0,0,12,12
+20200323,FL,1171,11063,860,,217,,,,,,A,3/23/2020 11:00,20fd33cb106da648b65d1a89b4d41b604275f461,2020-03-23T20:00:00Z,14,217,13094,12234,12234,12,1,32,3073,341,3414
+20200323,GA,772,4297,,,,,,,,,A,3/23/2020 12:00,f9b3af350aa3b26dcdf08e46a0b8fcf9c87bdbb7,2020-03-23T20:00:00Z,25,,5069,5069,5069,13,2,0,877,172,1049
 20200323,GU,29,161,,,,,,,,,,3/23/2020 06:45,6e0822908c11bf2c12f72623ff358387bedf0ec2,2020-03-23T20:00:00Z,1,,190,190,190,66,0,0,35,2,37
-20200323,HI,56,2955,,,,,,,,,,3/22/2020 18:00,9d95beaf73b0e0aec152c6595585727abf67be28,2020-03-23T20:00:00Z,,,3011,3011,3011,15,0,0,2692,8,2700
-20200323,IA,105,2043,,,,,,,,,,3/23/2020 00:00,aaedd99a5ca8deb3214b2e00364aaf0a842555a5,2020-03-23T20:00:00Z,,,2148,2148,2148,19,0,0,828,15,843
-20200323,ID,47,1309,,,,,,,,,,3/22/2020 19:00,9727f463cf8b2a069948cb7ff33a4f5a840683b5,2020-03-23T20:00:00Z,0,,1356,1356,1356,16,0,0,134,5,139
-20200323,IL,1273,8583,,,,,,,,,,3/23/2020 00:00,600cec4d60bb957420d456b45d6f32fe6a290c79,2020-03-23T20:00:00Z,12,,9856,9856,9856,17,3,0,1312,224,1536
-20200323,IN,259,1701,,,1,,,,,,,3/23/2020 11:00,585bf063141809e0f2ab21b31a4872b2f5434b2e,2020-03-23T20:00:00Z,7,1,1960,1960,1960,18,1,0,408,58,466
-20200323,KS,82,417,,,,,,,,,,3/23/2020 11:00,e638093e6261ae8d8fc19d03678cedbe9f68c270,2020-03-23T20:00:00Z,2,,499,499,499,20,0,0,0,18,18
-20200323,KY,104,1762,,,,,,,,,,3/23/2020 09:00,67089f0545dc3f57ae3c951b3fc4a6db1fc64012,2020-03-23T20:00:00Z,3,,1866,1866,1866,21,0,0,290,5,295
-20200323,LA,1172,4776,,,,,,,,,,3/23/2020 13:00,ddcaaa502f8596fdfc80dfe4631363dc6cb8c05c,2020-03-23T20:00:00Z,34,,5948,5948,5948,22,14,0,2115,335,2450
-20200323,MA,678,8263,,,79,,,,,,,3/23/2020 12:30,c5763805557b59487bbe971c0f27de6a3629c571,2020-03-23T20:00:00Z,17,79,8941,8941,8941,25,6,8,2787,131,2918
-20200323,MD,288,94,,,,,,,,,,3/23/2020 10:00,44f270d1035796d8b703e9b4160824d038bb0821,2020-03-23T20:00:00Z,3,,382,382,382,24,0,0,0,44,44
-20200323,ME,107,2791,,,,,,,,,,3/23/2020 11:30,883bca08321938ebf801914a56b0c86144be49e1,2020-03-23T20:00:00Z,,,2898,2898,2898,23,0,0,527,18,545
-20200323,MI,5789,4697,,,,,,,,,,3/23/2020 11:00,824e8f76c01be37973dc9fa1c41b384d6f023702,2020-03-23T20:00:00Z,15,,10486,10486,10486,26,7,0,985,691,1676
-20200323,MN,235,4511,,,17,,,,,,,3/23/2020 00:00,3483b2a54b63ecd6d1da86b913a06cf184534b25,2020-03-23T20:00:00Z,1,17,4746,4746,4746,27,0,5,0,66,66
-20200323,MO,183,369,,,,,,,,,,3/23/2020 15:00,f79fed81764ce3f392a82bd1d1365528bd1d5620,2020-03-23T20:00:00Z,3,,552,552,552,29,0,0,0,93,93
+20200323,HI,56,2955,,,,,,,,,A,3/22/2020 18:00,63c635fe69e4df167e64b3b43629863eaaf08425,2020-03-23T20:00:00Z,,,3011,3011,3011,15,0,0,2692,8,2700
+20200323,IA,105,2043,,,,,,,,,C,3/23/2020 00:00,34fc79b005d119abcd9ceffcc8c08aa91231d1c9,2020-03-23T20:00:00Z,,,2148,2148,2148,19,0,0,828,15,843
+20200323,ID,47,1309,,,,,,,,,A,3/22/2020 19:00,185c0e4885558751e5a4dc0d1a207e2744e5ded6,2020-03-23T20:00:00Z,0,,1356,1356,1356,16,0,0,134,5,139
+20200323,IL,1273,8583,,,,,,,,,A,3/23/2020 00:00,7015844005c87317e0c37535c8304903b4af38b0,2020-03-23T20:00:00Z,12,,9856,9856,9856,17,3,0,1312,224,1536
+20200323,IN,259,1701,,,1,,,,,,B,3/23/2020 11:00,4806327043321cf60f4af5b1c9583c1993f0418c,2020-03-23T20:00:00Z,7,1,1960,1960,1960,18,1,0,408,58,466
+20200323,KS,82,417,,,,,,,,,B,3/23/2020 11:00,e30731efb5d3903dec024877368f0ed8d4d6770b,2020-03-23T20:00:00Z,2,,499,499,499,20,0,0,0,18,18
+20200323,KY,104,1762,,,,,,,,,A,3/23/2020 09:00,ecb8b56863bc8515ffd33e10ef045bf3ca540647,2020-03-23T20:00:00Z,3,,1866,1866,1866,21,0,0,290,5,295
+20200323,LA,1172,4776,,,,,,,,,B,3/23/2020 13:00,b909e40e1f6f8a390fded287a3d37235c874103b,2020-03-23T20:00:00Z,34,,5948,5948,5948,22,14,0,2115,335,2450
+20200323,MA,678,8263,,,79,,,,,,B,3/23/2020 12:30,7e25fc50045298a3678688fe9a1d57f0fb893475,2020-03-23T20:00:00Z,17,79,8941,8941,8941,25,6,8,2787,131,2918
+20200323,MD,288,94,,,,,,,,,D,3/23/2020 10:00,0d4f8f43f5785f1aed116ce5758d29040de8fc38,2020-03-23T20:00:00Z,3,,382,382,382,24,0,0,0,44,44
+20200323,ME,107,2791,,,,,,,,,A,3/23/2020 11:30,b9593d94a3aaf47b37fdf4aa82f5d1d57d8ccbfd,2020-03-23T20:00:00Z,,,2898,2898,2898,23,0,0,527,18,545
+20200323,MI,5789,4697,,,,,,,,,D,3/23/2020 11:00,c7c08d256b2b151ced5f92ea35972f92a116f24a,2020-03-23T20:00:00Z,15,,10486,10486,10486,26,7,0,985,691,1676
+20200323,MN,235,4511,,,17,,,,,,A,3/23/2020 00:00,4e22f8ce82aedc29b8f8df5fb2b7480832334218,2020-03-23T20:00:00Z,1,17,4746,4746,4746,27,0,5,0,66,66
+20200323,MO,183,369,,,,,,,,,C,3/23/2020 15:00,a33ce32abaef2428aa8f6a3d45fc86c6ddc584b6,2020-03-23T20:00:00Z,3,,552,552,552,29,0,0,0,93,93
 20200323,MP,0,,,,,,,,,,,3/23/2020 01:30,ccda8eb6129360727e49ba43a082b95465002058,2020-03-23T20:00:00Z,0,,0,0,0,69,0,0,0,0,0
-20200323,MS,249,1143,,,33,,,,,,,3/22/2020 19:22,662a772ba19d3d632297cc2122ffadb98200cefb,2020-03-23T20:00:00Z,1,33,1392,1392,1392,28,0,0,29,42,71
-20200323,MT,34,1146,,,,,,,,,,3/23/2020 10:00,64059c8255ca9e293b844e741e4ad95b7a3571d8,2020-03-23T20:00:00Z,,,1180,1180,1180,30,0,0,0,3,3
-20200323,NC,297,8141,,,,,,,,,,3/23/2020 15:00,d68d6b365d1f5b8b07e1f50c337713c8faf25f3f,2020-03-23T20:00:00Z,0,,8438,8438,8438,37,0,0,1958,42,2000
-20200323,ND,30,1353,,,4,,,,,,,3/23/2020 12:11,4dc5e46c8b1aaea55a187a87933250a0a620c06f,2020-03-23T20:00:00Z,0,4,1383,1383,1383,38,0,1,93,2,95
-20200323,NE,50,356,,,,,,,,,,3/21/2020 00:00,d11d53a81d7ddc0e39390f4cd7c3adcfb09a617e,2020-03-23T20:00:00Z,0,,406,406,406,31,0,0,0,2,2
-20200323,NH,78,1374,889,,,,,,,,,3/22/2020 09:00,321d3df937f25ac7b32cae0531bc030de729fe6e,2020-03-23T20:00:00Z,,,2341,1452,1452,33,0,0,186,13,199
-20200323,NJ,2844,359,94,,,,,,,,,3/23/2020 14:00,a01430a37923ff79bb4aac566c9c968936d6e871,2020-03-23T20:00:00Z,27,,3297,3203,3203,34,7,0,32,930,962
-20200323,NM,65,5321,,,,,,,,,,3/22/2020 00:00,bc036e2afe7e97339cba940e37528c8a4ae79510,2020-03-23T20:00:00Z,,,5386,5386,5386,35,0,0,599,8,607
-20200323,NV,245,3490,,,,,,,,,,3/22/2020 14:59,6927ebc2aea4b9f719a144a7748c27d7196883e2,2020-03-23T20:00:00Z,4,,3735,3735,3735,32,2,0,1042,55,1097
-20200323,NY,20875,57414,,2629,2635,,,,,,,3/23/2020 11:36,c110361decdd64813451187853701283f3d6d420,2020-03-23T20:00:00Z,114,2635,78289,78289,78289,36,0,661,11181,5707,16888
-20200323,OH,442,140,,,104,,,,,,,3/23/2020 14:00,4e1b21c1ee99c808baf0cf921f14e61fd425dba9,2020-03-23T20:00:00Z,6,104,582,582,582,39,3,21,0,91,91
-20200323,OK,81,694,102,,15,,,,,,,3/23/2020 08:00,3f3c63f6fbc9b35cc238d7e0ce45db287e5e11ea,2020-03-23T20:00:00Z,2,15,877,775,775,40,0,4,25,14,39
-20200323,OR,191,3649,,,56,,,,,,,3/23/2020 11:00,7397692f8ee03f0cd7889bd26ddabcc675fc241e,2020-03-23T20:00:00Z,5,56,3840,3840,3840,41,1,13,785,30,815
-20200323,PA,644,6595,,,,,,,,,,3/23/2020 15:00,c57766962182312fed4eba9ff367ad90d733176f,2020-03-23T20:00:00Z,6,,7239,7239,7239,42,4,0,1631,165,1796
-20200323,PR,31,189,35,,,,,,,,,3/23/2020 07:00,eeaaed11f39ed94947e1a5af7fe4b00c61f10346,2020-03-23T20:00:00Z,2,,255,220,220,72,1,0,6,8,14
-20200323,RI,106,1143,216,,,,,,,,,3/23/2020 15:25,222f07d138c5875f56b14a9a218a9a7ff129fb4b,2020-03-23T20:00:00Z,,,1465,1249,1249,44,0,0,211,23,234
-20200323,SC,298,1466,,,,,,,,,,3/23/2020 16:35,82bc48086b8d0c7654ee7acad8adaeee6438f015,2020-03-23T20:00:00Z,5,,1764,1764,1764,45,2,0,0,103,103
-20200323,SD,28,762,265,,,,,,,,,3/23/2020 10:00,224d979dd393723a971e7eb02542eaddb799569e,2020-03-23T20:00:00Z,1,,1055,790,790,46,0,0,22,7,29
-20200323,TN,615,3272,,,,,,,,,,3/23/2020 15:00,005641f998da2b13a90f40622c8cc2ebda9bcb09,2020-03-23T20:00:00Z,2,,3887,3887,3887,47,2,0,0,110,110
-20200323,TX,352,9703,,,,,,,,,,3/23/2020 13:00,264e01c2340a429b2fb109a3a6bffa1761c9931c,2020-03-23T20:00:00Z,8,,10055,10055,10055,48,3,0,1281,18,1299
-20200323,UT,257,4790,,,,,,,,,,3/23/2020 15:00,621914edfc5d01314a0fbfe1356c9b5fa970389e,2020-03-23T20:00:00Z,1,,5047,5047,5047,49,0,0,1282,76,1358
-20200323,VA,254,3443,,,38,,,,,,,3/23/2020 00:00,90fcd12ade32b80f60d728be9eaeb530dee91fbf,2020-03-23T20:00:00Z,6,38,3697,3697,3697,51,3,6,325,35,360
+20200323,MS,249,1143,,,33,,,,,,B,3/22/2020 19:22,7d69afc691914fdbfbc4e9627d86b8f152fad170,2020-03-23T20:00:00Z,1,33,1392,1392,1392,28,0,0,29,42,71
+20200323,MT,34,1146,,,,,,,,,C,3/23/2020 10:00,5d38741a904278d7d73291c05fc5d095ff8c2a8e,2020-03-23T20:00:00Z,,,1180,1180,1180,30,0,0,0,3,3
+20200323,NC,297,8141,,,,,,,,,A,3/23/2020 15:00,40dccdf2e6bc35cbc482daa7d74d10cb91213b35,2020-03-23T20:00:00Z,0,,8438,8438,8438,37,0,0,1958,42,2000
+20200323,ND,30,1353,,,4,,,,,,B,3/23/2020 12:11,19c0e58439521d42fafc10b466e4f017ec7716ed,2020-03-23T20:00:00Z,0,4,1383,1383,1383,38,0,1,93,2,95
+20200323,NE,50,356,,,,,,,,,A,3/21/2020 00:00,63f29c5fe556f16a1d7ea1e4cc3de79842288934,2020-03-23T20:00:00Z,0,,406,406,406,31,0,0,0,2,2
+20200323,NH,78,1374,889,,,,,,,,B,3/22/2020 09:00,73fe18c0ece67c5247b6c07b112353ee0c2d6f24,2020-03-23T20:00:00Z,,,2341,1452,1452,33,0,0,186,13,199
+20200323,NJ,2844,359,94,,,,,,,,B,3/23/2020 14:00,db3b289905782ac76c28af1519270af96f74fb35,2020-03-23T20:00:00Z,27,,3297,3203,3203,34,7,0,32,930,962
+20200323,NM,65,5321,,,,,,,,,A,3/22/2020 00:00,dd5da89dd28313023866c789a08e91ca29dc0908,2020-03-23T20:00:00Z,,,5386,5386,5386,35,0,0,599,8,607
+20200323,NV,245,3490,,,,,,,,,A,3/22/2020 14:59,c9a9537f1a92f4aeafedb08c7f247cbc957eaffe,2020-03-23T20:00:00Z,4,,3735,3735,3735,32,2,0,1042,55,1097
+20200323,NY,20875,57414,,2629,2635,,,,,,B,3/23/2020 11:36,13847b3570d018bcf9a9f5cb779f6d72d04267c2,2020-03-23T20:00:00Z,114,2635,78289,78289,78289,36,0,661,11181,5707,16888
+20200323,OH,442,140,,,104,,,,,,D,3/23/2020 14:00,a0ce1ce8a1eabaa945e8054b77fbc4f7969a6c2d,2020-03-23T20:00:00Z,6,104,582,582,582,39,3,21,0,91,91
+20200323,OK,81,694,102,,15,,,,,,A,3/23/2020 08:00,2667e95c36445000a0d792cd9920a5ad67da70ec,2020-03-23T20:00:00Z,2,15,877,775,775,40,0,4,25,14,39
+20200323,OR,191,3649,,,56,,,,,,A,3/23/2020 11:00,8ef1a77c5cf5829330e9b75b359c38d8a6c6e242,2020-03-23T20:00:00Z,5,56,3840,3840,3840,41,1,13,785,30,815
+20200323,PA,644,6595,,,,,,,,,A,3/23/2020 15:00,a0e94f34ae6c0853de6b1b1800c12cd01950c2c8,2020-03-23T20:00:00Z,6,,7239,7239,7239,42,4,0,1631,165,1796
+20200323,PR,31,189,35,,,,,,,,A,3/23/2020 07:00,0d462bd18c338ea8d97c5e5c03b10e97018a8a31,2020-03-23T20:00:00Z,2,,255,220,220,72,1,0,6,8,14
+20200323,RI,106,1143,216,,,,,,,,B,3/23/2020 15:25,95535f310153e2a057f51ca92a440be3e1118389,2020-03-23T20:00:00Z,,,1465,1249,1249,44,0,0,211,23,234
+20200323,SC,298,1466,,,,,,,,,A,3/23/2020 16:35,b9f41965cebbf933b3364de7aeb13c2b0d413b5f,2020-03-23T20:00:00Z,5,,1764,1764,1764,45,2,0,0,103,103
+20200323,SD,28,762,265,,,,,,,,A,3/23/2020 10:00,2d2498b3e5ef70186e8889068d23a885d1979a5c,2020-03-23T20:00:00Z,1,,1055,790,790,46,0,0,22,7,29
+20200323,TN,615,3272,,,,,,,,,B,3/23/2020 15:00,c412fcca3ffe9234c56338745947271fd86c95f4,2020-03-23T20:00:00Z,2,,3887,3887,3887,47,2,0,0,110,110
+20200323,TX,352,9703,,,,,,,,,A,3/23/2020 13:00,07e9dee831230ca7dc26bb043584140a45d7e5aa,2020-03-23T20:00:00Z,8,,10055,10055,10055,48,3,0,1281,18,1299
+20200323,UT,257,4790,,,,,,,,,A,3/23/2020 15:00,99b39eb91e625fb1a66d7d28c7fba037120fc86c,2020-03-23T20:00:00Z,1,,5047,5047,5047,49,0,0,1282,76,1358
+20200323,VA,254,3443,,,38,,,,,,A,3/23/2020 00:00,06332ec93603d7af13fb94a5c76d86b829641592,2020-03-23T20:00:00Z,6,38,3697,3697,3697,51,3,6,325,35,360
 20200323,VI,17,,,,,,,,,,,3/22/2020 20:30,a8bad8e99852a4f0b960d02375b9ddb4aca1194e,2020-03-23T20:00:00Z,,,17,17,17,78,0,0,0,11,11
-20200323,VT,75,1106,,,,,,,,,,3/23/2020 13:00,306d2233396ef6b61583d916d2c13efe9a0ecf58,2020-03-23T20:00:00Z,5,,1181,1181,1181,50,3,0,0,23,23
-20200323,WA,2496,48492,,,,,,,,,,3/22/2020 18:00,130884cc88b29630f1d8b709f8d4f13104c60885,2020-03-23T20:00:00Z,137,,50988,50988,50988,53,11,0,4852,212,5064
-20200323,WI,416,7050,,,,,,,,,,3/23/2020 16:00,f8f8ca4cd6e76c476f4bc4b19cc55c51184af02a,2020-03-23T20:00:00Z,5,,7466,7466,7466,55,1,0,820,31,851
-20200323,WV,16,444,4,,1,,,,,,,3/22/2020 19:00,5862cb6b74296a683f39745df48043beb79a56bd,2020-03-23T20:00:00Z,0,1,464,460,460,54,0,0,59,4,63
-20200323,WY,26,592,,,,,,,,,,3/23/2020 14:00,027dd793ecc1c4eab41ce1c728e495e2128f030b,2020-03-23T20:00:00Z,,,618,618,618,56,0,0,154,2,156
+20200323,VT,75,1106,,,,,,,,,A,3/23/2020 13:00,9126672d675020353baef4045e5fa249ec2e85cd,2020-03-23T20:00:00Z,5,,1181,1181,1181,50,3,0,0,23,23
+20200323,WA,2496,48492,,,,,,,,,A,3/22/2020 18:00,d7e643fc3eb0e371cb0481fc91c11ecd3a9ba867,2020-03-23T20:00:00Z,137,,50988,50988,50988,53,11,0,4852,212,5064
+20200323,WI,416,7050,,,,,,,,,A,3/23/2020 16:00,4f40f488914be1910b8c85b390bf30ceaf63362e,2020-03-23T20:00:00Z,5,,7466,7466,7466,55,1,0,820,31,851
+20200323,WV,16,444,4,,1,,,,,,B,3/22/2020 19:00,69b93dc3791f0b80fbeb826f2d8e8059d737a20e,2020-03-23T20:00:00Z,0,1,464,460,460,54,0,0,59,4,63
+20200323,WY,26,592,,,,,,,,,A,3/23/2020 14:00,250c0c2bc6d30ed66e56adc05be0ea851b8f97a1,2020-03-23T20:00:00Z,,,618,618,618,56,0,0,154,2,156
 20200322,AK,22,946,,,0,,,,,,,3/21/2020 16:30,e669781c62a117ab762f1da8f91c871c513e9e56,2020-03-22T20:00:00Z,0,0,968,968,968,02,0,0,188,8,196
 20200322,AL,138,1464,,,,,,,,,,3/22/2020 10:37,6e25732fb6cbdc929597b28f6adbaace2008c82d,2020-03-22T20:00:00Z,0,,1602,1602,1602,01,0,0,1436,14,1450
 20200322,AR,165,711,119,13,,,,,,,,3/22/2020 13:45,304ea055fd1909c32446df54144c2f17b4207813,2020-03-22T20:00:00Z,0,,995,876,876,05,0,0,144,47,191
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/RECORD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/RECORD	(date 1589417758848)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/RECORD	(date 1589417758848)
@@ -0,0 +1,9 @@
+__pycache__/cycler.cpython-38.pyc,,
+cycler-0.10.0.dist-info/DESCRIPTION.rst,sha256=OCTuuN6LcWulhHS3d5rfjdsQtW22n7HENFRh6jC6ego,10
+cycler-0.10.0.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+cycler-0.10.0.dist-info/METADATA,sha256=aWX1pyo7D2hSDNZ2Q6Zl7DxhUQdpyu1O5uNABnvz000,722
+cycler-0.10.0.dist-info/RECORD,,
+cycler-0.10.0.dist-info/WHEEL,sha256=o2k-Qa-RMNIJmUdIc7KU6VWR_ErNRbWNlxDIpl7lm34,110
+cycler-0.10.0.dist-info/metadata.json,sha256=CCBpg-KQU-VRL1unJcHPWKQeQbB84G0j7-BeCj7YUbU,875
+cycler-0.10.0.dist-info/top_level.txt,sha256=D8BVVDdAAelLb2FOEz7lDpc6-AL21ylKPrMhtG6yzyE,7
+cycler.py,sha256=ed3G39unvVEBrBZVDwnE0FFroRNsOLkbJ_TwIT5CjCU,15959
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/metadata.json	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/metadata.json	(date 1589417757018)
@@ -0,0 +1,1 @@
+{"classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "extensions": {"python.details": {"contacts": [{"email": "matplotlib-users@python.org", "name": "Thomas A Caswell", "role": "author"}], "document_names": {"description": "DESCRIPTION.rst"}, "project_urls": {"Home": "http://github.com/matplotlib/cycler"}}}, "extras": [], "generator": "bdist_wheel (0.29.0)", "keywords": ["cycle", "kwargs"], "license": "BSD", "metadata_version": "2.0", "name": "cycler", "platform": "Cross platform (Linux", "run_requires": [{"requires": ["six"]}], "summary": "Composable style cycles", "version": "0.10.0"}
\ No newline at end of file
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/top_level.txt	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/top_level.txt	(date 1589417757018)
@@ -0,0 +1,1 @@
+cycler
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/WHEEL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/WHEEL	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/WHEEL	(date 1589417757018)
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.29.0)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/INSTALLER
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/INSTALLER	(date 1589417758848)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/INSTALLER	(date 1589417758848)
@@ -0,0 +1,1 @@
+pip
Index: modules/adt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import ctypes\n\n\nclass SeriesArray:\n    def __init__(self, *argv):\n        \"\"\"\n        initial method\n        \"\"\"\n        self._volume = 1\n        self._num_el = 0\n        self._arr = self._create_arr(self._volume)\n        self.name = None\n\n    def _create_arr(self, volume):\n        \"\"\"\n        creates low level array of specified volume\n        :param volume: int\n        :return: ctypes object\n        \"\"\"\n        return (volume * ctypes.py_object)()\n\n    def copy_arr(self):\n        \"\"\"\n        makes a total copy of this array\n        :return: SeriesArray\n        \"\"\"\n        cp_arr = SeriesArray()\n        for i in range(self._num_el):\n            cp_arr.append(self._arr[i])\n        return cp_arr\n\n    def __setitem__(self, index, value):\n        \"\"\"\n        \n        :param index: \n        :param value: \n        :return: \n        \"\"\"\n        if index >= self._num_el or index < 0:\n            raise IndexError('index out of range')\n        self._arr[index] = value\n\n    def __contains__(self, item):\n        \"\"\"\n        checks if array contains specified item\n        :param item: obj\n        :return: boolean\n        \"\"\"\n        for i in range(self._num_el):\n            if self._arr[i] == item:\n                return True\n        else:\n            return False\n\n    def __iter__(self):\n        \"\"\"\n        iterator\n        :return: _Iterator\n        \"\"\"\n        return _Iterator(self._arr, self._num_el)\n\n    def __len__(self):\n        \"\"\"\n        :returns number of elements in array\n        :return: int\n        \"\"\"\n        return self._num_el\n\n    def __getitem__(self, index):\n        \"\"\"\n        :returns the item at specified index\n        :param index: int\n        :return: obj\n        \"\"\"\n        if index >= self._num_el or index < 0:\n            raise IndexError('index out of range')\n        return self._arr[index]\n\n    def _resize(self, volume):\n        \"\"\"\n        resizes the array to specified volume\n        :param volume: int\n        :return: None\n        \"\"\"\n        new_arr = self._create_arr(volume)\n        for i in range(self._num_el):\n            new_arr[i] = self._arr[i]\n        self._arr = new_arr\n        self._volume = volume\n\n    def _isFull(self):\n        \"\"\"\n        checks if array is full\n        :return: boolean\n        \"\"\"\n        return  self._num_el == self._volume\n\n    def append(self, item):\n        \"\"\"\n        appends item to the end of array\n        :param item: obj\n        :return: None\n        \"\"\"\n        if not self._isFull():\n            self._arr[self._num_el] = item\n            self._num_el += 1\n        else:\n            self._resize(self._volume * 2)\n            self.append(item)\n\n    def remove(self, item):\n        \"\"\"\n        removes first instance of specified item\n        :param item: obj\n        :return: None\n        \"\"\"\n        if item not in self._arr:\n            raise ValueError(\"value not found\")\n        for i in range(self._num_el):\n            if self._arr[i] == item:\n                for k in range(i, self._num_el - 1):\n                    self._arr[k] = self._arr[k + 1]\n                self._arr[self._num_el - 1] = None\n                self._num_el -= 1\n                break\n\n\n    def insert(self, item, index):\n        \"\"\"\n        inserts an element at specified index\n        :param item: obj\n        :param index: int\n        :return: None\n        \"\"\"\n        if not isinstance(index, int):\n            raise IndexError('invalid index')\n        if self._isFull():\n            self._resize(self._volume * 2)\n        for i in range(self._num_el, index, -1):\n            self._arr[i] = self._arr[i - 1]\n        self._arr[index] = item\n        self._num_el += 1\n\n    def map(self, func):\n        \"\"\"\n        map method\n        :param func: python function\n        :return: None\n        \"\"\"\n        for i in range(self._num_el):\n            self._arr[i] = func(self._arr[i])\n\n\n    def __str__(self):\n        \"\"\"\n        string representation of array\n        :return: str\n        \"\"\"\n        s = \"\"\n        for i in range(self._num_el):\n            s += str(self._arr[i]) + \", \"\n\n        return \"[\" + s[:-2] + \"]\"\n\n\nclass _Iterator:\n    def __init__(self, arr, num_el):\n        self._num_el = num_el\n        self._arr = arr\n        self._curr_indx = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self._curr_indx < self._num_el:\n            el = self._arr[self._curr_indx]\n            self._curr_indx += 1\n            return el\n        else:\n            raise StopIteration\n\n\nif __name__ == '__main__':\n    a = SeriesArray()\n    a.append(\"1\")\n    a.append(\"\")\n    a.append(\"3\")\n    a.append(\"4\")\n    print(a)\n    print(type(a[1]))\n    a.map(lambda x: int(x) if x.isnumeric() else 0)\n\n    print(a)\n    print(type(a[1]))\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/adt.py	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ modules/adt.py	(date 1589416830210)
@@ -93,7 +93,7 @@
         checks if array is full
         :return: boolean
         """
-        return  self._num_el == self._volume
+        return self._num_el == self._volume
 
     def append(self, item):
         """
@@ -124,7 +124,6 @@
                 self._num_el -= 1
                 break
 
-
     def insert(self, item, index):
         """
         inserts an element at specified index
@@ -150,7 +149,6 @@
         for i in range(self._num_el):
             self._arr[i] = func(self._arr[i])
 
-
     def __str__(self):
         """
         string representation of array
@@ -182,15 +180,4 @@
 
 
 if __name__ == '__main__':
-    a = SeriesArray()
-    a.append("1")
-    a.append("")
-    a.append("3")
-    a.append("4")
-    print(a)
-    print(type(a[1]))
-    a.map(lambda x: int(x) if x.isnumeric() else 0)
-
-    print(a)
-    print(type(a[1]))
-
+    pass
\ No newline at end of file
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/METADATA
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/METADATA	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/METADATA	(date 1589417757018)
@@ -0,0 +1,25 @@
+Metadata-Version: 2.0
+Name: cycler
+Version: 0.10.0
+Summary: Composable style cycles
+Home-page: http://github.com/matplotlib/cycler
+Author: Thomas A Caswell
+Author-email: matplotlib-users@python.org
+License: BSD
+Keywords: cycle kwargs
+Platform: Cross platform (Linux
+Platform: Mac OSX
+Platform: Windows)
+Classifier: Development Status :: 4 - Beta
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 2.6
+Classifier: Programming Language :: Python :: 2.7
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.3
+Classifier: Programming Language :: Python :: 3.4
+Classifier: Programming Language :: Python :: 3.5
+Requires-Dist: six
+
+UNKNOWN
+
+
Index: venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/DESCRIPTION.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/DESCRIPTION.rst	(date 1589417757018)
+++ venv/lib/python3.8/site-packages/cycler-0.10.0.dist-info/DESCRIPTION.rst	(date 1589417757018)
@@ -0,0 +1,3 @@
+UNKNOWN
+
+
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/RECORD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/RECORD	(date 1589417757115)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/RECORD	(date 1589417757115)
@@ -0,0 +1,8 @@
+__pycache__/pyparsing.cpython-38.pyc,,
+pyparsing-2.4.7.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+pyparsing-2.4.7.dist-info/LICENSE,sha256=ENUSChaAWAT_2otojCIL-06POXQbVzIGBNRVowngGXI,1023
+pyparsing-2.4.7.dist-info/METADATA,sha256=Ry40soZZiZrAkSMQT_KU1_1REe6FKa5UWzbT6YA8Mxs,3636
+pyparsing-2.4.7.dist-info/RECORD,,
+pyparsing-2.4.7.dist-info/WHEEL,sha256=kGT74LWyRUZrL4VgLh6_g12IeVl_9u9ZVhadrgXZUEY,110
+pyparsing-2.4.7.dist-info/top_level.txt,sha256=eUOjGzJVhlQ3WS2rFAy2mN3LX_7FKTM5GSJ04jfnLmU,10
+pyparsing.py,sha256=oxX_ZOz8t-eros-UWY7nJgcdUgD-rQ53Ck0qp7_v3Ig,273365
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/top_level.txt	(date 1589417755835)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/top_level.txt	(date 1589417755835)
@@ -0,0 +1,1 @@
+pyparsing
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/WHEEL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/WHEEL	(date 1589417755835)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/WHEEL	(date 1589417755835)
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.34.2)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/INSTALLER
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/INSTALLER	(date 1589417757115)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/INSTALLER	(date 1589417757115)
@@ -0,0 +1,1 @@
+pip
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/METADATA
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/METADATA	(date 1589417755835)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/METADATA	(date 1589417755835)
@@ -0,0 +1,104 @@
+Metadata-Version: 2.1
+Name: pyparsing
+Version: 2.4.7
+Summary: Python parsing module
+Home-page: https://github.com/pyparsing/pyparsing/
+Author: Paul McGuire
+Author-email: ptmcg@users.sourceforge.net
+License: MIT License
+Download-URL: https://pypi.org/project/pyparsing/
+Platform: UNKNOWN
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Intended Audience :: Developers
+Classifier: Intended Audience :: Information Technology
+Classifier: License :: OSI Approved :: MIT License
+Classifier: Operating System :: OS Independent
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 2.6
+Classifier: Programming Language :: Python :: 2.7
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.3
+Classifier: Programming Language :: Python :: 3.4
+Classifier: Programming Language :: Python :: 3.5
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Requires-Python: >=2.6, !=3.0.*, !=3.1.*, !=3.2.*
+
+PyParsing -- A Python Parsing Module
+====================================
+
+|Build Status|
+
+Introduction
+============
+
+The pyparsing module is an alternative approach to creating and
+executing simple grammars, vs. the traditional lex/yacc approach, or the
+use of regular expressions. The pyparsing module provides a library of
+classes that client code uses to construct the grammar directly in
+Python code.
+
+*[Since first writing this description of pyparsing in late 2003, this
+technique for developing parsers has become more widespread, under the
+name Parsing Expression Grammars - PEGs. See more information on PEGs at*
+https://en.wikipedia.org/wiki/Parsing_expression_grammar *.]*
+
+Here is a program to parse ``"Hello, World!"`` (or any greeting of the form
+``"salutation, addressee!"``):
+
+.. code:: python
+
+    from pyparsing import Word, alphas
+    greet = Word(alphas) + "," + Word(alphas) + "!"
+    hello = "Hello, World!"
+    print(hello, "->", greet.parseString(hello))
+
+The program outputs the following::
+
+    Hello, World! -> ['Hello', ',', 'World', '!']
+
+The Python representation of the grammar is quite readable, owing to the
+self-explanatory class names, and the use of '+', '|' and '^' operator
+definitions.
+
+The parsed results returned from ``parseString()`` can be accessed as a
+nested list, a dictionary, or an object with named attributes.
+
+The pyparsing module handles some of the problems that are typically
+vexing when writing text parsers:
+
+- extra or missing whitespace (the above program will also handle ``"Hello,World!"``, ``"Hello , World !"``, etc.)
+- quoted strings
+- embedded comments
+
+The examples directory includes a simple SQL parser, simple CORBA IDL
+parser, a config file parser, a chemical formula parser, and a four-
+function algebraic notation parser, among many others.
+
+Documentation
+=============
+
+There are many examples in the online docstrings of the classes
+and methods in pyparsing. You can find them compiled into online docs
+at https://pyparsing-docs.readthedocs.io/en/latest/. Additional
+documentation resources and project info are listed in the online
+GitHub wiki, at https://github.com/pyparsing/pyparsing/wiki. An
+entire directory of examples is at
+https://github.com/pyparsing/pyparsing/tree/master/examples.
+
+License
+=======
+
+MIT License. See header of pyparsing.py
+
+History
+=======
+
+See CHANGES file.
+
+.. |Build Status| image:: https://travis-ci.org/pyparsing/pyparsing.svg?branch=master
+   :target: https://travis-ci.org/pyparsing/pyparsing
+
+
Index: venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/LICENSE	(date 1589417755835)
+++ venv/lib/python3.8/site-packages/pyparsing-2.4.7.dist-info/LICENSE	(date 1589417755835)
@@ -0,0 +1,18 @@
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/RECORD
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/RECORD	(date 1589417758838)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/RECORD	(date 1589417758838)
@@ -0,0 +1,854 @@
+../../../bin/f2py,sha256=EuQXfCYqZcuER7y1TTokocyyN6Hqa2dNvQ1HKNU-g_s,260
+../../../bin/f2py3,sha256=EuQXfCYqZcuER7y1TTokocyyN6Hqa2dNvQ1HKNU-g_s,260
+../../../bin/f2py3.8,sha256=EuQXfCYqZcuER7y1TTokocyyN6Hqa2dNvQ1HKNU-g_s,260
+numpy-1.18.4.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+numpy-1.18.4.dist-info/LICENSE.txt,sha256=kL0gtRLFMt0qE0tusWLm-rVSSW0Uy3UA-f0l8ZEVikk,45692
+numpy-1.18.4.dist-info/LICENSES_bundled.txt,sha256=ydG_75MZCg1PsYBvcktxRNC4Vc0PcXEi1qn32OyorYo,765
+numpy-1.18.4.dist-info/METADATA,sha256=fASX6zcX8P9zq_EKlzQURRl5mHlnFHfimxmWKcB1PKk,2057
+numpy-1.18.4.dist-info/RECORD,,
+numpy-1.18.4.dist-info/WHEEL,sha256=0wGQBSV-BlYX9ESMZyEiLMpXIYwrZGj6McPYyDp_RjA,108
+numpy-1.18.4.dist-info/entry_points.txt,sha256=S3S3GIPVqHzjU5nh6QOmLYMT7zc_yBAnb0w1hggdhH8,113
+numpy-1.18.4.dist-info/top_level.txt,sha256=4J9lbBMLnAiyxatxh8iRKV5Entd_6-oqbO7pzJjMsPw,6
+numpy.libs/libgfortran-ed201abd.so.3.0.0,sha256=qKqgvlf0fwb_9d8LQ6xwpHV3igVXxOplo0uum9--YQg,1023960
+numpy.libs/libopenblasp-r0-34a18dc3.3.7.so,sha256=WmXtD6m_3OBB-SxOS6u-I8MEnQqQKHeKIoPOH-n2OPc,29724672
+numpy/LICENSE.txt,sha256=kL0gtRLFMt0qE0tusWLm-rVSSW0Uy3UA-f0l8ZEVikk,45692
+numpy/__config__.py,sha256=l-kYBVT3VpoLPbr8_dilDgG-Z1l-VOLtHHFd2vCF8fw,1646
+numpy/__init__.py,sha256=Ited5sCQ_GQpr_n6rXbUxiF6PsLBQHuBs6VZuTdX9iY,8858
+numpy/__pycache__/__config__.cpython-38.pyc,,
+numpy/__pycache__/__init__.cpython-38.pyc,,
+numpy/__pycache__/_distributor_init.cpython-38.pyc,,
+numpy/__pycache__/_globals.cpython-38.pyc,,
+numpy/__pycache__/_pytesttester.cpython-38.pyc,,
+numpy/__pycache__/conftest.cpython-38.pyc,,
+numpy/__pycache__/ctypeslib.cpython-38.pyc,,
+numpy/__pycache__/dual.cpython-38.pyc,,
+numpy/__pycache__/matlib.cpython-38.pyc,,
+numpy/__pycache__/setup.cpython-38.pyc,,
+numpy/__pycache__/version.cpython-38.pyc,,
+numpy/_distributor_init.py,sha256=IgPkSK3H9bgjFeUfWuXhjKrgetQl5ztUW-rTyjGHK3c,331
+numpy/_globals.py,sha256=p8xxERZsxjGPUWV9pMY3jz75NZxDLppGeKaHbYGCDqM,2379
+numpy/_pytesttester.py,sha256=JQAw-aDSd7hl9dPpeIvD7eRbrMppI9sFeYQEgqpTqx8,6980
+numpy/compat/__init__.py,sha256=MHle4gJcrXh1w4SNv0mz5rbUTAjAzHnyO3rtbSW3AUo,498
+numpy/compat/__pycache__/__init__.cpython-38.pyc,,
+numpy/compat/__pycache__/_inspect.cpython-38.pyc,,
+numpy/compat/__pycache__/py3k.cpython-38.pyc,,
+numpy/compat/__pycache__/setup.cpython-38.pyc,,
+numpy/compat/_inspect.py,sha256=xEImUFhm4VAzT2LJj2Va_yDAHJsdy0RwSi1JwOOhykU,7513
+numpy/compat/py3k.py,sha256=EWeA4IONUTXhTcTJ7wEh2xoECE5knqPI1VzEfSTyY_8,7097
+numpy/compat/setup.py,sha256=REJcwNU7EbfwBFS1FHazGJcUhh50_5gYttr3BSczCiM,382
+numpy/compat/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/compat/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/compat/tests/__pycache__/test_compat.cpython-38.pyc,,
+numpy/compat/tests/test_compat.py,sha256=KtCVafV8yN5g90tIIe7T9f5ruAs5Y0DNa64d040Rx5s,542
+numpy/conftest.py,sha256=HHIMNsYUUp2eensC63LtRYy_NZC1su1tbtN26rnrg5E,2749
+numpy/core/__init__.py,sha256=lzp4US3ynVjldEidb4sPwHYCpSNG8W0-pTEzF_NGx8w,4490
+numpy/core/__pycache__/__init__.cpython-38.pyc,,
+numpy/core/__pycache__/_add_newdocs.cpython-38.pyc,,
+numpy/core/__pycache__/_asarray.cpython-38.pyc,,
+numpy/core/__pycache__/_dtype.cpython-38.pyc,,
+numpy/core/__pycache__/_dtype_ctypes.cpython-38.pyc,,
+numpy/core/__pycache__/_exceptions.cpython-38.pyc,,
+numpy/core/__pycache__/_internal.cpython-38.pyc,,
+numpy/core/__pycache__/_methods.cpython-38.pyc,,
+numpy/core/__pycache__/_string_helpers.cpython-38.pyc,,
+numpy/core/__pycache__/_type_aliases.cpython-38.pyc,,
+numpy/core/__pycache__/_ufunc_config.cpython-38.pyc,,
+numpy/core/__pycache__/arrayprint.cpython-38.pyc,,
+numpy/core/__pycache__/cversions.cpython-38.pyc,,
+numpy/core/__pycache__/defchararray.cpython-38.pyc,,
+numpy/core/__pycache__/einsumfunc.cpython-38.pyc,,
+numpy/core/__pycache__/fromnumeric.cpython-38.pyc,,
+numpy/core/__pycache__/function_base.cpython-38.pyc,,
+numpy/core/__pycache__/generate_numpy_api.cpython-38.pyc,,
+numpy/core/__pycache__/getlimits.cpython-38.pyc,,
+numpy/core/__pycache__/machar.cpython-38.pyc,,
+numpy/core/__pycache__/memmap.cpython-38.pyc,,
+numpy/core/__pycache__/multiarray.cpython-38.pyc,,
+numpy/core/__pycache__/numeric.cpython-38.pyc,,
+numpy/core/__pycache__/numerictypes.cpython-38.pyc,,
+numpy/core/__pycache__/overrides.cpython-38.pyc,,
+numpy/core/__pycache__/records.cpython-38.pyc,,
+numpy/core/__pycache__/setup.cpython-38.pyc,,
+numpy/core/__pycache__/setup_common.cpython-38.pyc,,
+numpy/core/__pycache__/shape_base.cpython-38.pyc,,
+numpy/core/__pycache__/umath.cpython-38.pyc,,
+numpy/core/__pycache__/umath_tests.cpython-38.pyc,,
+numpy/core/_add_newdocs.py,sha256=LqccpEMz9ETDG4jXOTrBnol3wUO0hTw0I1JDSOUsUE8,202937
+numpy/core/_asarray.py,sha256=NH0SPZr_pBMKOJgyy6dsfmKOQPy3r31hlzFG5bP1yYA,9940
+numpy/core/_dtype.py,sha256=lhiLEajO4UQ0wGSY52T4KtLdylFfCaAQs-YV6Ru-hNM,10053
+numpy/core/_dtype_ctypes.py,sha256=EiTjqVsDSibpbS8pkvzres86E9er1aFaflsss9N3Uao,3448
+numpy/core/_exceptions.py,sha256=MbGfp_yuOifOpZRppfk-DA9dL07AVv7blO0i63OX8lU,6259
+numpy/core/_internal.py,sha256=pwHot3zvS_5qcO_INVPk7gpM1YkNK1A5K8M1NyF1ghc,26469
+numpy/core/_methods.py,sha256=g8AnOnA3CdC4qe7s7N_pG3OcaW-YKhXmRz8FmLNnpG0,8399
+numpy/core/_multiarray_tests.cpython-38-x86_64-linux-gnu.so,sha256=Wygr_Db1olYPa__SvPSZhK1RxIQAiRhA6PLyNFDb_iY,620903
+numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so,sha256=QkUPzP7ED3b0qxOklwxu_lM4zc4oeS2CG8yftSBA0OM,23240320
+numpy/core/_operand_flag_tests.cpython-38-x86_64-linux-gnu.so,sha256=ZDkxTkC6EtghNEMcpQH1lmgvWsoo-WSzhahdZDodjYo,34347
+numpy/core/_rational_tests.cpython-38-x86_64-linux-gnu.so,sha256=_QacFUQimlAiI0lI-gFyhJxogKqiZyNMvat_hu0GA_U,324033
+numpy/core/_string_helpers.py,sha256=NGGGhaFdU5eGiUAj3GTIBoOgWs4r9aTNlsE2r9NgX6Q,2855
+numpy/core/_struct_ufunc_tests.cpython-38-x86_64-linux-gnu.so,sha256=sP3j1twKmTaOqJO8c1gOzYILtL_ij8TwZiXiHlOBlGY,39771
+numpy/core/_type_aliases.py,sha256=FA2Pz5OKqcLl1QKLJNu-ETHIzQ1ii3LH5pSdHhZkfZA,9181
+numpy/core/_ufunc_config.py,sha256=yQ9RSST7_TagO8EYDZG5g23gz7loX76a0ajCU5HfYRI,14219
+numpy/core/_umath_tests.cpython-38-x86_64-linux-gnu.so,sha256=9zKDi7Odk7P4Xm4kw6DCVsj7M5gerCDBsnwALJLXEt4,94176
+numpy/core/arrayprint.py,sha256=WuIViYKXL-qr000rKTQhss9swe3nsKlG2Jc0mfuiS10,59774
+numpy/core/cversions.py,sha256=ukYNpkei0Coi7DOcbroXuDoXc6kl5odxmcy_39pszA0,413
+numpy/core/defchararray.py,sha256=HJU2o-dQbiwglIwIv8MRSEDB6p4p2PE9Aq67IQ47aEQ,70980
+numpy/core/einsumfunc.py,sha256=94J-3sQQWoCzYGwUlsEIHD6B3Qjv481XUD2jd0KClGY,51271
+numpy/core/fromnumeric.py,sha256=_d9szuykDMfWhYjBl5tIcD81G7KNz9l4PMyvfxyzO64,117694
+numpy/core/function_base.py,sha256=jgKa0iHIzpUUy8T9XXlIEbI8XO0xeh1olG409kdM2qo,18344
+numpy/core/generate_numpy_api.py,sha256=0JBYTvekUeJyhp7QMKtWJSK-L6lVNhev16y0F2qX2pU,7470
+numpy/core/getlimits.py,sha256=X26A-6nrzC1FH1wtCggX-faIw0WMYYkPH1_983h4hCE,18914
+numpy/core/include/numpy/__multiarray_api.h,sha256=SQEcRelzaunap6-uUl3E21qUanrFOBcC1PiQITpVU0Y,61920
+numpy/core/include/numpy/__ufunc_api.h,sha256=fWkLh84HH3fN99gOJoZ10bZEpaO3VGT9aNpTu-2zblI,12179
+numpy/core/include/numpy/_neighborhood_iterator_imp.h,sha256=hNiUJ3gmJRxdjByk5R5jmLeBKpNfaP_29KLHFuTrSIA,1861
+numpy/core/include/numpy/_numpyconfig.h,sha256=bDiTLQ972ZWQBEpx6OM8riS64nSAelKa2kIimnXm_Ss,1010
+numpy/core/include/numpy/arrayobject.h,sha256=SXj-2avTHV8mNWvv7sOYHLKkRKcafDG7_HNpQNot1GE,164
+numpy/core/include/numpy/arrayscalars.h,sha256=vC7QCznlT8vkyvxbIh4QNwi1LR7UkP7GJ1j_0ZiJa1E,3509
+numpy/core/include/numpy/halffloat.h,sha256=ohvyl3Kz3mB1hW3MRzxwPDH-0L9WWM_eKhvYLjtT_2w,1878
+numpy/core/include/numpy/multiarray_api.txt,sha256=qG593ym4jzzsPHIkFfKSTxK1XrrICKTLb9qGIto1fxc,56884
+numpy/core/include/numpy/ndarrayobject.h,sha256=E737J_1YQI-igbXcbA3kdbwsMqTv1aXcy6bp5aE0P_0,11496
+numpy/core/include/numpy/ndarraytypes.h,sha256=Lelck68SVrCPhxTAGURh_AyOth5txewU6xp2f556lLg,65105
+numpy/core/include/numpy/noprefix.h,sha256=YE-lWegAdZKI5lf44AW5jiWbnmO6hircWzj_WMFrLT4,6786
+numpy/core/include/numpy/npy_1_7_deprecated_api.h,sha256=LLeZKLuJADU3RDfT04pu5FCxCBU5cEzY5Q9phR_HL78,4715
+numpy/core/include/numpy/npy_3kcompat.h,sha256=exFgMT6slmo2Zg3bFsY3mKLUrrkg3KU_66gUmu5IYKk,14666
+numpy/core/include/numpy/npy_common.h,sha256=R-LMbpQDZJ4XXKDeXvI58WFKgkEiljDDgDMl6Yk_KTI,37943
+numpy/core/include/numpy/npy_cpu.h,sha256=3frXChwN0Cxca-sAeTTOJCiZ6_2q1EuggUwqEotdXLg,3879
+numpy/core/include/numpy/npy_endian.h,sha256=HHanBydLvLC2anJJySvy6wZ_lYaC_xI6GNwT8cJ78rE,2596
+numpy/core/include/numpy/npy_interrupt.h,sha256=Eyddk806h30jxgymbr44b7eIZKrHXtNzXpPtUPp2Ng8,3439
+numpy/core/include/numpy/npy_math.h,sha256=VFv-sN9Dnm3wmnZoHoGJO5lFyJECbQfipzJgJj1p5vA,23139
+numpy/core/include/numpy/npy_no_deprecated_api.h,sha256=X-wRYdpuwIuerTnBblKjR7Dqsv8rqxn01RFLVWUHvi8,567
+numpy/core/include/numpy/npy_os.h,sha256=cEvEvpD92EeFjsjRelw1dXJaHYL-0yPJDuz3VeSJs4E,817
+numpy/core/include/numpy/numpyconfig.h,sha256=mHTx0sXeXNcaq0wWcP-8hGFUWvoG_2AHFKub59KJGm4,1327
+numpy/core/include/numpy/old_defines.h,sha256=7eiZoi7JrdVT9LXKCoeta5AoIncGa98GcVlWqDrLjwk,6306
+numpy/core/include/numpy/oldnumeric.h,sha256=Yo-LiSzVfDK2YyhlH41ff4gS0m-lv8XjI4JcAzpdy94,708
+numpy/core/include/numpy/random/bitgen.h,sha256=Gfrwd0M0odkpRJXw7QXJgVxb5XCw3iDXacWE_h-F_uM,389
+numpy/core/include/numpy/random/distributions.h,sha256=nbbdQ6X-lsdyzo7bmss4i3kg354GnkYQGGfYld_x6HM,9633
+numpy/core/include/numpy/ufunc_api.txt,sha256=RTz9blLHbWMCWMaiPeJyqt9d93nHJXJT7RiTf-bbMO4,6937
+numpy/core/include/numpy/ufuncobject.h,sha256=GpAJZKRnE08xRy5IOJD8r8i6Xz1nltg-iEMl3Frqsyk,12746
+numpy/core/include/numpy/utils.h,sha256=KqJzngAvarYV3oZQu5fY0ARPVihUP7FsZjdljysaSUk,729
+numpy/core/lib/libnpymath.a,sha256=D4BRZDMjnjBzk6-LUkIbV1Sv768LYbyghLEbeiOaYRU,358064
+numpy/core/lib/npy-pkg-config/mlib.ini,sha256=_LsWV1eStNqwhdiYPa2538GL46dnfVwT4MrI1zbsoFw,147
+numpy/core/lib/npy-pkg-config/npymath.ini,sha256=kamUNrYKAmXqQa8BcNv7D5sLqHh6bnChM0_5rZCsTfY,360
+numpy/core/machar.py,sha256=P8Ae9aOzoTUMWWiAXgE0Uf5Vk837DTODV5ndQLvm5zU,10860
+numpy/core/memmap.py,sha256=RVD10EyH-4jgzrTy3Xc_mXsJrvt-QMGGLmY7Aoqmy7I,11590
+numpy/core/multiarray.py,sha256=7yvhC6SVcF-MGwX5PwsSmV7jMfObe4gldkNI6lqsyvY,53002
+numpy/core/numeric.py,sha256=xV7Lo8i9bcILM4GGrryguiQAWzCuJJdM99CKkLndcQE,71955
+numpy/core/numerictypes.py,sha256=fCQuWSy6vshZHh4YP4oz9n3ysSHl-HSaGMjEzmVVQdY,17918
+numpy/core/overrides.py,sha256=_OoaYi35e6xJ9QCOeMuJlZmuU0efF47pJAXmTgWeHrU,7481
+numpy/core/records.py,sha256=xOCgmcTtTLjBaOYtjae9t-DtvpqFjFJwg_c5ZgHZ0xs,30928
+numpy/core/setup.py,sha256=eVqe4s7YjhH8bSgsGSjXKBF2BZVj5vOeiexbh_M3ibE,42069
+numpy/core/setup_common.py,sha256=z3oR0UKy8sbt0rHq7TEjzwkitQNsfKw7T69LD18qTbY,19365
+numpy/core/shape_base.py,sha256=VXd2RUcUoxp4mcLQWxNszD-ygubCS8xp9ZOHYhnxddY,28964
+numpy/core/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/core/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/core/tests/__pycache__/_locales.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test__exceptions.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_abc.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_api.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_arrayprint.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_datetime.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_defchararray.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_deprecations.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_dtype.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_einsum.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_errstate.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_extint128.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_function_base.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_getlimits.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_half.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_indexerrors.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_indexing.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_issue14735.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_item_selection.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_longdouble.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_machar.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_mem_overlap.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_memmap.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_multiarray.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_nditer.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_numeric.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_numerictypes.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_overrides.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_print.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_records.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalar_ctors.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalar_methods.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalarbuffer.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalarinherit.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalarmath.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_scalarprint.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_shape_base.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_ufunc.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_umath.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_umath_accuracy.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_umath_complex.cpython-38.pyc,,
+numpy/core/tests/__pycache__/test_unicode.cpython-38.pyc,,
+numpy/core/tests/_locales.py,sha256=GQro3bha8c5msgQyvNzmDUrNwqS2cGkKKuN4gg4c6tI,2266
+numpy/core/tests/data/astype_copy.pkl,sha256=lWSzCcvzRB_wpuRGj92spGIw-rNPFcd9hwJaRVvfWdk,716
+numpy/core/tests/data/recarray_from_file.fits,sha256=NA0kliz31FlLnYxv3ppzeruONqNYkuEvts5wzXEeIc4,8640
+numpy/core/tests/data/umath-validation-set-README,sha256=-1JRNN1zx8S1x9l4D0786USSRMNt3Dk0nsOMg6O7CiM,959
+numpy/core/tests/data/umath-validation-set-cos,sha256=qIka8hARvhXZOu9XR3CnGiPnOdrkAaxEgFgEEqus06s,24703
+numpy/core/tests/data/umath-validation-set-exp,sha256=GZn7cZRKAjskJ4l6tcvDF53I3e9zegQH--GPzYib9_g,4703
+numpy/core/tests/data/umath-validation-set-log,sha256=gDbicMaonc26BmtHPoyvunUvXrSFLV9BY8L1QVoH5Dw,4088
+numpy/core/tests/data/umath-validation-set-sin,sha256=fMEynY6dZz18jtuRdpfOJT9KnpRSWd9ilcz0oXMwgCQ,24690
+numpy/core/tests/test__exceptions.py,sha256=8XVPAkXmYh9dHiN5XhQk4D_r_l71cYpejg_ueTscrRI,1495
+numpy/core/tests/test_abc.py,sha256=cpIqt3VFBZLHbuNpO4NuyCGgd--k1zij5aasu7FV77I,2402
+numpy/core/tests/test_api.py,sha256=RIlRUqB_lRM0xcrEAdLRdDRWWk-0O7bUcEJfPCHyNl4,19224
+numpy/core/tests/test_arrayprint.py,sha256=zoNxYH3h7VnMFtU1vt67ujPuRCAQkQ1VmXKhTo0Juqw,34400
+numpy/core/tests/test_datetime.py,sha256=LT_KGIp6AyqAryB289cKW4_xTQ44Egb6JriGNHiB_g8,108148
+numpy/core/tests/test_defchararray.py,sha256=L5EoOBTZVrRU1Vju5IhY8BSUlBOGPzEViKJwyQSlpXo,25481
+numpy/core/tests/test_deprecations.py,sha256=vcbHCQUx7_Um0pPofOLY-3u4AaF1ABIVmZsJBCXnjWw,22466
+numpy/core/tests/test_dtype.py,sha256=gkDXeJFWFcYHu5Sw5b6Wbyl_xbkkssOYdx5EdjLhEHA,49663
+numpy/core/tests/test_einsum.py,sha256=gMWQQ9yfSdEUlY0db4e-I2seD7n99xToiN-g6tB3TBE,44736
+numpy/core/tests/test_errstate.py,sha256=84S9ragkp2xqJ5s8uNEt1-4SGs99t3pkPVMHYc4QL-s,1505
+numpy/core/tests/test_extint128.py,sha256=-0zEInkai1qRhXI0bdHCguU_meD3s6Td4vUIBwirYQI,5709
+numpy/core/tests/test_function_base.py,sha256=r45sHfslz-e8qgn10PT8elVEBjeXEGk7xsaW-s4tjvY,13268
+numpy/core/tests/test_getlimits.py,sha256=2fBK7Slo67kP6bThcN9bOKmeX9gGPQVUE17jGVydoXk,4427
+numpy/core/tests/test_half.py,sha256=83O_R-Frt8mx2-7WEbmoVXLWJ5Dc5SH9n0vyPJ9Wp_I,22301
+numpy/core/tests/test_indexerrors.py,sha256=0Ku3Sy5jcaE3D2KsyDrFTvgQzMv2dyWja3hc4t5-n_k,4857
+numpy/core/tests/test_indexing.py,sha256=0-I5M5NCgDgHM58Myxp1vpOaulm7_s3n4K82_BeDihk,51366
+numpy/core/tests/test_issue14735.py,sha256=JADt-FhIdq6MaVAfVI_ACI9EpfpqylFdDrZ3A95NW1w,728
+numpy/core/tests/test_item_selection.py,sha256=0Ocg_RzeQjNqwIaPhb_Zk0ZlmqSjIBY0lHeef_H9l9U,3579
+numpy/core/tests/test_longdouble.py,sha256=nDoYIpTWuBrNKR8Xp38imMp7Q1pjGsHE1dCT5J19WLA,13115
+numpy/core/tests/test_machar.py,sha256=FrKeGhC7j-z9tApS_uI1E0DUkzieKIdUHMQPfCSM0t8,1141
+numpy/core/tests/test_mem_overlap.py,sha256=AyBz4pm7HhTDdlW2pq9FR1AO0E5QAYdKpBoWbOdSrco,29505
+numpy/core/tests/test_memmap.py,sha256=sFJ6uaf6ior1Hzjg7Y-VYzYPHnuZOYmNczOBa-_GgSY,7607
+numpy/core/tests/test_multiarray.py,sha256=SDfgwGmfH4lAKkCEafEsfX1ERP7tVs4jELXOInzwihI,315998
+numpy/core/tests/test_nditer.py,sha256=VYOj7XD87yjArRSxPThhMeF-Kz5tC3hmav9glLbPkKM,112098
+numpy/core/tests/test_numeric.py,sha256=0SLdicNj0ODq6bh8FpO89FZAHPTs3XpJuI3jrNxMRNs,117625
+numpy/core/tests/test_numerictypes.py,sha256=8C-_WrUHnnRcXyDjAHLevt6FZ8LO51ZVPY-ohP0FVQA,19635
+numpy/core/tests/test_overrides.py,sha256=rkP2O-8MYssKR4y6gKkNxz2LyaYvnCuHn6eOEYtJzsc,14619
+numpy/core/tests/test_print.py,sha256=Q53dqbjQQIlCzRp_1ZY0A-ptP7FlbBZVPeMeMLX0cVg,6876
+numpy/core/tests/test_records.py,sha256=CJu2VaBWsNQrYpCSS0HAV2aKv8Ow0Zfc5taegRslVW0,19651
+numpy/core/tests/test_regression.py,sha256=S8IS6iH19hsT41Ms33Bj1btMAkd2iVz2sXXHS98qcq8,88558
+numpy/core/tests/test_scalar_ctors.py,sha256=kjyYllJHyhMQGT49Xbjjc2tuFHXcQIM-PAZExMWczq8,2294
+numpy/core/tests/test_scalar_methods.py,sha256=n3eNfQ-NS6ODGfJFrww-RSKVm9QzRKeDRp0ae4TzQJ8,4220
+numpy/core/tests/test_scalarbuffer.py,sha256=M-xSWyn2ts_O4d69kWAuEEzupY6AZ6YpLI31Gxlvjn4,3556
+numpy/core/tests/test_scalarinherit.py,sha256=vIZqnyg99o3BsEQQHsiYxzedXIf4wSr9qVwqur_C-VU,1807
+numpy/core/tests/test_scalarmath.py,sha256=U-h1wclwyDaFpoASPrRq6qW2YJ1nAUW__XF6fNUzbjs,28807
+numpy/core/tests/test_scalarprint.py,sha256=SPTkscqlnApyqaOUZ5cgC2rDgGED6hPBtdRkWXxXlbE,15470
+numpy/core/tests/test_shape_base.py,sha256=B4869KCdnSxSTcTmqFhOPU2eRjmzOuG0fwVa3jrGyg8,24993
+numpy/core/tests/test_ufunc.py,sha256=LHGt9_It2-GP79B5dnEE4WhZQjTOxz99gmiVCndcHmA,81054
+numpy/core/tests/test_umath.py,sha256=Yb3SHIavyTSAJoQrNbpW9obBnSkbmosbvOa0b86DYpY,117248
+numpy/core/tests/test_umath_accuracy.py,sha256=GCvLPNmGeVCJcDpYst4Q21_0IkJGygdjMD8mBVlH_H8,2647
+numpy/core/tests/test_umath_complex.py,sha256=zvjC9COuHSZ_6BL3lz2iP7UppkNWL8ThP04fj0eulUQ,19413
+numpy/core/tests/test_unicode.py,sha256=PvWt5NLjgwulCgXakHEKMJ2pSpTLbUWgz9dZExEcSJ8,13656
+numpy/core/umath.py,sha256=KAWy8e3HN7CMF6bPfQ_MCL36bDuU7UeS39tlxaFAeto,1905
+numpy/core/umath_tests.py,sha256=Sr6VQTbH-sOMlXy-tg1-Unht7MKaaV4wtAYR6mQYNbU,455
+numpy/ctypeslib.py,sha256=_y3WO60jLJaHAaDbVj2PNF4jZ4X8EOqih14fvJffOVI,17443
+numpy/distutils/__config__.py,sha256=l-kYBVT3VpoLPbr8_dilDgG-Z1l-VOLtHHFd2vCF8fw,1646
+numpy/distutils/__init__.py,sha256=gsPLMHtEHdGbVbA9_LBfVAjnwo9n0j29aqEkCmehE7Y,1625
+numpy/distutils/__pycache__/__config__.cpython-38.pyc,,
+numpy/distutils/__pycache__/__init__.cpython-38.pyc,,
+numpy/distutils/__pycache__/_shell_utils.cpython-38.pyc,,
+numpy/distutils/__pycache__/ccompiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/compat.cpython-38.pyc,,
+numpy/distutils/__pycache__/conv_template.cpython-38.pyc,,
+numpy/distutils/__pycache__/core.cpython-38.pyc,,
+numpy/distutils/__pycache__/cpuinfo.cpython-38.pyc,,
+numpy/distutils/__pycache__/exec_command.cpython-38.pyc,,
+numpy/distutils/__pycache__/extension.cpython-38.pyc,,
+numpy/distutils/__pycache__/from_template.cpython-38.pyc,,
+numpy/distutils/__pycache__/intelccompiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/lib2def.cpython-38.pyc,,
+numpy/distutils/__pycache__/line_endings.cpython-38.pyc,,
+numpy/distutils/__pycache__/log.cpython-38.pyc,,
+numpy/distutils/__pycache__/mingw32ccompiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/misc_util.cpython-38.pyc,,
+numpy/distutils/__pycache__/msvc9compiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/msvccompiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/npy_pkg_config.cpython-38.pyc,,
+numpy/distutils/__pycache__/numpy_distribution.cpython-38.pyc,,
+numpy/distutils/__pycache__/pathccompiler.cpython-38.pyc,,
+numpy/distutils/__pycache__/setup.cpython-38.pyc,,
+numpy/distutils/__pycache__/system_info.cpython-38.pyc,,
+numpy/distutils/__pycache__/unixccompiler.cpython-38.pyc,,
+numpy/distutils/_shell_utils.py,sha256=kMLOIoimB7PdFRgoVxCIyCFsIl1pP3d0hkm_s3E9XdA,2613
+numpy/distutils/ccompiler.py,sha256=qlwbbVN_0Qsw4gpx8tCyMAy_9a146XHHkJCFRNKKvP8,27660
+numpy/distutils/command/__init__.py,sha256=l5r9aYwIEq1D-JJc8WFUxABk6Ip28FpRK_ok7wSLRZE,1098
+numpy/distutils/command/__pycache__/__init__.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/autodist.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/bdist_rpm.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build_clib.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build_ext.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build_py.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build_scripts.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/build_src.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/config.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/config_compiler.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/develop.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/egg_info.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/install.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/install_clib.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/install_data.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/install_headers.cpython-38.pyc,,
+numpy/distutils/command/__pycache__/sdist.cpython-38.pyc,,
+numpy/distutils/command/autodist.py,sha256=m5BGbaBPrBjbp3U_lGD35BS_yUxjarB9S9wAwTxgGvw,3041
+numpy/distutils/command/bdist_rpm.py,sha256=rhhIyFzkd5NGi6lZaft44EBPZB3zZFRDc75klJYnbw8,775
+numpy/distutils/command/build.py,sha256=0sB5J4vmeEL6CBpvCo8EVVRx9CnM3HYR1fddv7uQIh0,1448
+numpy/distutils/command/build_clib.py,sha256=YaWxa26hf_D7qI2rv-utAPQWFf99UEBfe9uJxT_YT2c,13800
+numpy/distutils/command/build_ext.py,sha256=fiTsl8O8dBODimXtG-RAVHMA764ea_aNo3gvQ_6Nv-4,26434
+numpy/distutils/command/build_py.py,sha256=7TBGLz0va0PW6sEX-aUjsXdzvhuSbJGgIrMim1JTwu4,1210
+numpy/distutils/command/build_scripts.py,sha256=ze19jHBhC3JggKLbL9wgs9I3mG7ls-V2NbykvleNwgQ,1731
+numpy/distutils/command/build_src.py,sha256=4lOovmHAoo_vDC7RkuxZccEyQUjmelxW-J8KL2wEadk,31246
+numpy/distutils/command/config.py,sha256=ZziDEAnaHskht8MYCHA0BSEcHny-byOiDPx_P8YfhZ0,20473
+numpy/distutils/command/config_compiler.py,sha256=SKJTEk_Y_Da-dVYOHAdf4c3yXxjlE1dsr-hJxY0m0PU,4435
+numpy/distutils/command/develop.py,sha256=nYM5yjhKtGKh_3wZwrvEQBLYHKldz64aU-0iSycSkXA,641
+numpy/distutils/command/egg_info.py,sha256=pdiCFQiQuIpf_xmVk9Njl7iowY9CxGn9KRbU-A9eBfg,987
+numpy/distutils/command/install.py,sha256=-y7bHvwoQdDCMGdLONawqnOWKtwQzjp5v-vSpZ7PdYU,3144
+numpy/distutils/command/install_clib.py,sha256=rGCajxbqAZjsYWg3l5B7ZRgcHJzFtYAiUHZH-DO64eU,1465
+numpy/distutils/command/install_data.py,sha256=7iWTw93ty2sBPwHwg_EEhgQhZSZe6SsKdfTS9RbUR9A,914
+numpy/distutils/command/install_headers.py,sha256=NbZwt-Joo80z_1TfxA-mIWXm2L9Mmh4ZLht7HAuveoo,985
+numpy/distutils/command/sdist.py,sha256=tHmlb0RzD8x04dswPXEua9H_b6GuHWY1V3hYkwJDKvA,799
+numpy/distutils/compat.py,sha256=xzkW8JgJgGTmye34QCYTIkLfsXBvmPu4tvgCwXNdiU0,218
+numpy/distutils/conv_template.py,sha256=0BFDE5IToW3sMVMzSRjmgENs2PAKyt7Wnvm2gyFrKnU,9750
+numpy/distutils/core.py,sha256=9GNNyWDTCqfnD7Jp2tzp9vOBVyeJmF8lsgv_xdlt59g,8230
+numpy/distutils/cpuinfo.py,sha256=onN3xteqf2G5IgKwRCYDG0VucoQY8sCTMUJ0nhc5QT0,23013
+numpy/distutils/exec_command.py,sha256=PKHgZ-hESpsBM8vnUhPknPRioAc6hLvsJzcOQoey-zo,10918
+numpy/distutils/extension.py,sha256=hXpEH2aP6ItaqNms1RW6TA1tSi0z37abrFpnyKXcjcA,3495
+numpy/distutils/fcompiler/__init__.py,sha256=-9uYUvrMwdxy0jetB-T-QHSwmWcobNRL5u0Bbj0Sm4w,40157
+numpy/distutils/fcompiler/__pycache__/__init__.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/absoft.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/compaq.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/environment.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/g95.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/gnu.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/hpux.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/ibm.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/intel.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/lahey.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/mips.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/nag.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/none.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/pathf95.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/pg.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/sun.cpython-38.pyc,,
+numpy/distutils/fcompiler/__pycache__/vast.cpython-38.pyc,,
+numpy/distutils/fcompiler/absoft.py,sha256=AKbj5uGr8dpGDLzRIJbdUnXXAtF_5k4JqnqwTWvy-tQ,5565
+numpy/distutils/fcompiler/compaq.py,sha256=SlIcqV82SrmOSVMZCYdSyhtglSl3doAoxDCcjq1hbkE,4109
+numpy/distutils/fcompiler/environment.py,sha256=1AziWo5qkxOFClEnChTFnUMIShtNCwHQa2xidjorjKk,3078
+numpy/distutils/fcompiler/g95.py,sha256=K68RRAvOvyKoh-jsD9J4ZDsHltrGnJ_AllxULhy6iOE,1396
+numpy/distutils/fcompiler/gnu.py,sha256=oHipJDyfisSK9_Kdkv1Av8hDHY3UbLALgWfBO7cXkPA,20804
+numpy/distutils/fcompiler/hpux.py,sha256=xpNfy7vCKWPnJ5M3JPnjMAewKBAfKN5hFX3hvEL2zaM,1419
+numpy/distutils/fcompiler/ibm.py,sha256=3q-AZ3TC3VjRxNyvkeIGN81SDWtHDH9iddfd8hqk4x4,3607
+numpy/distutils/fcompiler/intel.py,sha256=WlsBtvZnLpFke7oTpMCDYFlccNSUWWkB2p422iwQURU,6861
+numpy/distutils/fcompiler/lahey.py,sha256=pJ0-xgtYwyYXgt8JlN8PFeYYEWB3vOmFkNx6UUFXzuM,1393
+numpy/distutils/fcompiler/mips.py,sha256=IxLojWR1oi0VW93PxPpHQXRwZcYffD1dunllQW2w19A,1780
+numpy/distutils/fcompiler/nag.py,sha256=eiTvBopdCgVh5-HDTryVbRrYvf4r_Sqse1mruTt5Blo,2608
+numpy/distutils/fcompiler/none.py,sha256=N6adoFAf8inIQfCDEBzK5cGI3hLIWWpHmQXux8iJDfA,824
+numpy/distutils/fcompiler/pathf95.py,sha256=Xf1JMB30PDSoNpA1Y-vKPRBeNO0XfSi0dvVQvvdjfUQ,1127
+numpy/distutils/fcompiler/pg.py,sha256=G0uNPfedmbkYWfChg1UbxBKqo25RenzSVJN1BUtRDw0,4232
+numpy/distutils/fcompiler/sun.py,sha256=21DQ6Rprr9rEp4pp7Np8kCwOc0Xfqdxa1iX0O-yPJPM,1643
+numpy/distutils/fcompiler/vast.py,sha256=LJ21-WIJsiquLtjdDaNsJqblwN5wuM2FZsYl1R40vN8,1733
+numpy/distutils/from_template.py,sha256=k5PrP9If_X8J5Fsh9vR2h0Tcj2JsZC9EsC2h8fGfaXs,8027
+numpy/distutils/intelccompiler.py,sha256=1qzr6PMxi0UkR0NUY3rt3gqww9GwJ-Gbe91yxQKlieU,4291
+numpy/distutils/lib2def.py,sha256=YyVORDcNVb-Wzn_ibQXIqeQlAdXQQsLY3XfwtvhnLnE,3710
+numpy/distutils/line_endings.py,sha256=jrYG8SnOyMN0lvQim4Kf6ChoHdtaWO0egeTUUHtPoQA,2085
+numpy/distutils/log.py,sha256=6wgjYylV3BPEYc0NV8V3MIeKHxmlj0cP5UsDjTe6YS4,2796
+numpy/distutils/mingw/gfortran_vs2003_hack.c,sha256=cbsN3Lk9Hkwzr9c-yOP2xEBg1_ml1X7nwAMDWxGjzc8,77
+numpy/distutils/mingw32ccompiler.py,sha256=k-2SpajodL5Ey8ZbmiKQpXPhABe7UD0PJilEWbh8gH4,25411
+numpy/distutils/misc_util.py,sha256=DK1mEpnYeSsF70lgCuF7H3a5z3cgVWACAiJqz-dIzrM,84707
+numpy/distutils/msvc9compiler.py,sha256=TuPYjPFp3nYQSIG1goNxuOly7o3VMx-H35POMpycB3k,2258
+numpy/distutils/msvccompiler.py,sha256=7EUlHbgdKBBJG3AzgE94AQeUFnj0HcD6M7_YPN7vdCs,1994
+numpy/distutils/npy_pkg_config.py,sha256=RQZnr78rmA-dMIxOnibBMBMsGqsZUBK3Hnx-J8UQl8I,13152
+numpy/distutils/numpy_distribution.py,sha256=lbnEW1OxWxC_1n2sKd0Q3fC5QnNdFuAkNAlvXF99zIQ,700
+numpy/distutils/pathccompiler.py,sha256=FjNouOTL8u4gLMbJW7GdT0RlsD2nXV1_SEBNZj9QdpQ,779
+numpy/distutils/setup.py,sha256=q3DcCZNkK_jHsC0imocewd4uCKQWWXjkzd4nkBmkMFI,611
+numpy/distutils/system_info.py,sha256=IcYgQX1CzFSspCUMq8yttCa2gPqsk09JhR_QWnpdDys,104759
+numpy/distutils/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/distutils/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_exec_command.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_fcompiler.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_fcompiler_gnu.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_fcompiler_intel.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_fcompiler_nagfor.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_from_template.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_mingw32ccompiler.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_misc_util.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_npy_pkg_config.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_shell_utils.cpython-38.pyc,,
+numpy/distutils/tests/__pycache__/test_system_info.cpython-38.pyc,,
+numpy/distutils/tests/test_exec_command.py,sha256=U__8FXVF4WwYdf6ucgNzgYHGgUOIKhFWG9qoCr2GxGo,7483
+numpy/distutils/tests/test_fcompiler.py,sha256=5-wYZnqXW3RRegDmnQ_dKGIjHWXURz93wxLvGnoT-AQ,1377
+numpy/distutils/tests/test_fcompiler_gnu.py,sha256=O57uCEHeQIS0XF8GloEas3OlaOfmIHDWEtgYS_q3x48,2218
+numpy/distutils/tests/test_fcompiler_intel.py,sha256=fOjd_jv0Od6bZyzFf4YpZMcnFva0OZK7yJV_4Hebb6A,1140
+numpy/distutils/tests/test_fcompiler_nagfor.py,sha256=5-Num0A3cN7_NS3BlAgYt174S-OGOWRLL9rXtv-h_fA,1176
+numpy/distutils/tests/test_from_template.py,sha256=SDYoe0XUpAayyEQDq7ZhrvEEz7U9upJDLYzhcdoVifc,1103
+numpy/distutils/tests/test_mingw32ccompiler.py,sha256=rMC8-IyBOiuZVfAoklV_KnD9qVeB_hFVvb5dStxfk08,1609
+numpy/distutils/tests/test_misc_util.py,sha256=8LIm12X83HmvgmpvJJ9inaU7FlGt287VwDM-rMKCOv4,3316
+numpy/distutils/tests/test_npy_pkg_config.py,sha256=wa0QMQ9JAye87t2gDbFaBHp0HGpNFgwxJrJ30ZrHvNk,2639
+numpy/distutils/tests/test_shell_utils.py,sha256=we9P8AvjCQky1NRDP3sXAJnNUek7rDmMR4Ar9cg9iSk,2030
+numpy/distutils/tests/test_system_info.py,sha256=gb99F0iX4pbKhjxCcdiby0bvFMzPwuUGlSj_VXnfpWk,8548
+numpy/distutils/unixccompiler.py,sha256=M7Hn3ANMo8iP-sZtSAebI3RCLp0ViRYxawAbck0hlQM,5177
+numpy/doc/__init__.py,sha256=BDpxTM0iw2F4thjBkYqjIXX57F5KfIaH8xMd67N6Jh0,574
+numpy/doc/__pycache__/__init__.cpython-38.pyc,,
+numpy/doc/__pycache__/basics.cpython-38.pyc,,
+numpy/doc/__pycache__/broadcasting.cpython-38.pyc,,
+numpy/doc/__pycache__/byteswapping.cpython-38.pyc,,
+numpy/doc/__pycache__/constants.cpython-38.pyc,,
+numpy/doc/__pycache__/creation.cpython-38.pyc,,
+numpy/doc/__pycache__/dispatch.cpython-38.pyc,,
+numpy/doc/__pycache__/glossary.cpython-38.pyc,,
+numpy/doc/__pycache__/indexing.cpython-38.pyc,,
+numpy/doc/__pycache__/internals.cpython-38.pyc,,
+numpy/doc/__pycache__/misc.cpython-38.pyc,,
+numpy/doc/__pycache__/structured_arrays.cpython-38.pyc,,
+numpy/doc/__pycache__/subclassing.cpython-38.pyc,,
+numpy/doc/__pycache__/ufuncs.cpython-38.pyc,,
+numpy/doc/basics.py,sha256=bWasRQIE2QkLs-1MEhr_l1TQC_ZDZ4vnUUdxYkgz8wc,11252
+numpy/doc/broadcasting.py,sha256=eh6Gs3wGnc4Qpuw59qAa1wH-oIl6YtIjPEutyLsfIPQ,5595
+numpy/doc/byteswapping.py,sha256=OaEr35v3R__QWWETIlYKfqIyf_qtUm_qxityFIQ0Zrc,5375
+numpy/doc/constants.py,sha256=_n8_OUw7ZKKod6Ho7jtC_J-tSg1pZOBfMO2avPIz_88,9291
+numpy/doc/creation.py,sha256=6FUALDWgqPWObcW-ZHDQMAnfo42I60rRR9pDpwb4-YE,5496
+numpy/doc/dispatch.py,sha256=wLLHuxD4g552N3ot5M6uucEatFUaw3WmYVUa7Sdv-sI,10012
+numpy/doc/glossary.py,sha256=sj5-0X9pjaQEmaTCHAzsqIcVJL_T201E1Ex8v90QiAc,14777
+numpy/doc/indexing.py,sha256=gF3w0dZp7tCx0vKkOSELIBdNGfL1gPZqfiW3T_vj_4Q,16119
+numpy/doc/internals.py,sha256=xYp6lv4yyV0ZIo_qCvLCAWxDa0rhu7FNrTmpXY1isO4,9669
+numpy/doc/misc.py,sha256=JWJqyiYL2qoSMVAb0QC8w_Pm5l7ZLxx2Z9D5ilgU4Uo,6191
+numpy/doc/structured_arrays.py,sha256=28B7iMDrJvM1vjEHou73gXjRcldI5MAz7r4CaEouxmk,26509
+numpy/doc/subclassing.py,sha256=Ha0H-lWMEDWGBWEeP3ZAy_SYfXaImvoUhoDr6f-hYW8,28624
+numpy/doc/ufuncs.py,sha256=xYcK2hwnAUwVgOAmVouIOKXpZuG0LHRd5CYXzNBbv84,5425
+numpy/dual.py,sha256=q17Lo5-3Y4_wNOkg7c7eqno9EdTTtvnz4XpF75HK2fw,1877
+numpy/f2py/__init__.py,sha256=jpo2CzWHgtnMcy0VWSlXR0ucIB_ZVE0ATInpDOReWFE,3138
+numpy/f2py/__main__.py,sha256=mnksAcMyLdK0So_DseQn0zalhnA7LflS7hHvo7QCVjU,134
+numpy/f2py/__pycache__/__init__.cpython-38.pyc,,
+numpy/f2py/__pycache__/__main__.cpython-38.pyc,,
+numpy/f2py/__pycache__/__version__.cpython-38.pyc,,
+numpy/f2py/__pycache__/auxfuncs.cpython-38.pyc,,
+numpy/f2py/__pycache__/capi_maps.cpython-38.pyc,,
+numpy/f2py/__pycache__/cb_rules.cpython-38.pyc,,
+numpy/f2py/__pycache__/cfuncs.cpython-38.pyc,,
+numpy/f2py/__pycache__/common_rules.cpython-38.pyc,,
+numpy/f2py/__pycache__/crackfortran.cpython-38.pyc,,
+numpy/f2py/__pycache__/diagnose.cpython-38.pyc,,
+numpy/f2py/__pycache__/f2py2e.cpython-38.pyc,,
+numpy/f2py/__pycache__/f2py_testing.cpython-38.pyc,,
+numpy/f2py/__pycache__/f90mod_rules.cpython-38.pyc,,
+numpy/f2py/__pycache__/func2subr.cpython-38.pyc,,
+numpy/f2py/__pycache__/rules.cpython-38.pyc,,
+numpy/f2py/__pycache__/setup.cpython-38.pyc,,
+numpy/f2py/__pycache__/use_rules.cpython-38.pyc,,
+numpy/f2py/__version__.py,sha256=rEHB9hlWmpryhNa0EmMnlAlDCGI4GXILC9CZUEV3Wew,254
+numpy/f2py/auxfuncs.py,sha256=mDvaBo3Y8tYpXLZfq8DCv6UZ3-2JqWc_iNBZRxGesb0,21826
+numpy/f2py/capi_maps.py,sha256=buQRyA-zNXc5Azt6GLxqHTDw74gQb68BDStb7kYLs4A,31676
+numpy/f2py/cb_rules.py,sha256=un1xn8goj4jFL8FzxRwWSAzpr0CVcvwObVUKdIGJyaA,22946
+numpy/f2py/cfuncs.py,sha256=QqWwxZwW9Xk23673dI-RC6mfKVME34DCccHx4EAigTQ,45459
+numpy/f2py/common_rules.py,sha256=N2XFecZU_9iHjuL4Ehs0p92vJUcGBTSvAG4zi4zTwNE,5032
+numpy/f2py/crackfortran.py,sha256=onGQnPhpE8DyP4L4XinwHbdPwhXavetgPbKS3SG-REQ,128945
+numpy/f2py/diagnose.py,sha256=VNuNTGnQaXn9Fn2jlueYt47634CvLQSaAWJWy_Nxwnw,5295
+numpy/f2py/f2py2e.py,sha256=F9gKsZ1fI8h4lsNaBs_iqC92znNlZQMU6VjVC-AyZkA,24415
+numpy/f2py/f2py_testing.py,sha256=8rkBjUsNhBavpoBgi_bqDS8H8tBdd5BR8hrE6ENsIAo,1523
+numpy/f2py/f90mod_rules.py,sha256=YFK4MPkGHBxshAInbcapnumX3qlu0h6ya6GQpS8zWLk,9850
+numpy/f2py/func2subr.py,sha256=Oy12rqUa1vcXvzR6g8yx8jSYDwfKt5Jqiebf1QaWX1o,9224
+numpy/f2py/rules.py,sha256=sBUGQuWBmhEgCfcqCZuUmc-p433gVAbWim2wXl6z950,59120
+numpy/f2py/setup.py,sha256=bE-1KTXhPIAoAt4HXHW92chzNQc691AMpki3DQCQYAI,2434
+numpy/f2py/src/fortranobject.c,sha256=aoRy0d0vzgC6wJOAOYEadH5jExZKtTSMUeOO5HXirpA,36256
+numpy/f2py/src/fortranobject.h,sha256=ltMxueNeETQtEYSA_E7bpRtF8Jj1xuOBS-YNhjBMfOw,5227
+numpy/f2py/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/f2py/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_array_from_pyobj.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_assumed_shape.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_block_docstring.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_callback.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_common.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_compile_function.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_kind.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_mixed.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_parameter.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_quoted_character.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_return_character.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_return_complex.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_return_integer.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_return_logical.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_return_real.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_semicolon_split.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_size.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/test_string.cpython-38.pyc,,
+numpy/f2py/tests/__pycache__/util.cpython-38.pyc,,
+numpy/f2py/tests/src/array_from_pyobj/wrapmodule.c,sha256=8x5-BYpwiT0fYXwMpwyvu8IaESE1ABIWJNXOkk81QMk,7768
+numpy/f2py/tests/src/assumed_shape/.f2py_f2cmap,sha256=But9r9m4iL7EGq_haMW8IiQ4VivH0TgUozxX4pPvdpE,29
+numpy/f2py/tests/src/assumed_shape/foo_free.f90,sha256=oBwbGSlbr9MkFyhVO2aldjc01dr9GHrMrSiRQek8U64,460
+numpy/f2py/tests/src/assumed_shape/foo_mod.f90,sha256=rfzw3QdI-eaDSl-hslCgGpd5tHftJOVhXvb21Y9Gf6M,499
+numpy/f2py/tests/src/assumed_shape/foo_use.f90,sha256=rmT9k4jP9Ru1PLcGqepw9Jc6P9XNXM0axY7o4hi9lUw,269
+numpy/f2py/tests/src/assumed_shape/precision.f90,sha256=r08JeTVmTTExA-hYZ6HzaxVwBn1GMbPAuuwBhBDtJUk,130
+numpy/f2py/tests/src/common/block.f,sha256=GQ0Pd-VMX3H3a-__f2SuosSdwNXHpBqoGnQDjf8aG9g,224
+numpy/f2py/tests/src/kind/foo.f90,sha256=zIHpw1KdkWbTzbXb73hPbCg4N2Htj3XL8DIwM7seXpo,347
+numpy/f2py/tests/src/mixed/foo.f,sha256=90zmbSHloY1XQYcPb8B5d9bv9mCZx8Z8AMTtgDwJDz8,85
+numpy/f2py/tests/src/mixed/foo_fixed.f90,sha256=pxKuPzxF3Kn5khyFq9ayCsQiolxB3SaNtcWaK5j6Rv4,179
+numpy/f2py/tests/src/mixed/foo_free.f90,sha256=fIQ71wrBc00JUAVUj_r3QF9SdeNniBiMw6Ly7CGgPWU,139
+numpy/f2py/tests/src/parameter/constant_both.f90,sha256=-bBf2eqHb-uFxgo6Q7iAtVUUQzrGFqzhHDNaxwSICfQ,1939
+numpy/f2py/tests/src/parameter/constant_compound.f90,sha256=re7pfzcuaquiOia53UT7qNNrTYu2euGKOF4IhoLmT6g,469
+numpy/f2py/tests/src/parameter/constant_integer.f90,sha256=nEmMLitKoSAG7gBBEQLWumogN-KS3DBZOAZJWcSDnFw,612
+numpy/f2py/tests/src/parameter/constant_non_compound.f90,sha256=IcxESVLKJUZ1k9uYKoSb8Hfm9-O_4rVnlkiUU2diy8Q,609
+numpy/f2py/tests/src/parameter/constant_real.f90,sha256=quNbDsM1Ts2rN4WtPO67S9Xi_8l2cXabWRO00CPQSSQ,610
+numpy/f2py/tests/src/regression/inout.f90,sha256=CpHpgMrf0bqA1W3Ozo3vInDz0RP904S7LkpdAH6ODck,277
+numpy/f2py/tests/src/size/foo.f90,sha256=IlFAQazwBRr3zyT7v36-tV0-fXtB1d7WFp6S1JVMstg,815
+numpy/f2py/tests/src/string/char.f90,sha256=ihr_BH9lY7eXcQpHHDQhFoKcbu7VMOX5QP2Tlr7xlaM,618
+numpy/f2py/tests/test_array_from_pyobj.py,sha256=gLSX9JuF_8NNboUQRzRF3IYC7pWJ06Mw8m6sy2wQvCQ,22083
+numpy/f2py/tests/test_assumed_shape.py,sha256=zS_LgeakxCOrb4t5m74pX86eBbBo9GhgF4Pnh2lXDig,1650
+numpy/f2py/tests/test_block_docstring.py,sha256=ld1G4pBEi8F4GrkYDpNBJKJdlfDANNI6tiKfBQS9I6w,647
+numpy/f2py/tests/test_callback.py,sha256=iRV0nslbJKovMmXPZed-w9QhNJYZfEo07p_8qneDDbU,3986
+numpy/f2py/tests/test_common.py,sha256=tLmi1JrfwFdTcBlUInxTn04f6Hf8eSB00sWRoKJvHrM,868
+numpy/f2py/tests/test_compile_function.py,sha256=WvOcUNqmRhf4KjplgcP-5s5a03020qhgfcjrhoGeaUk,4500
+numpy/f2py/tests/test_kind.py,sha256=G6u6EWjVHenmPju3RQCa9bSeCJGDul3VyXFgp2_Yc7w,1078
+numpy/f2py/tests/test_mixed.py,sha256=jojC-g_G21G-ACCqlYFuOxZokx8iHikBcmxQWEdWSSc,902
+numpy/f2py/tests/test_parameter.py,sha256=_wX-gM-XGxA_mfDBM8np9NLjYiCF6LJbglwKf09JbdM,3976
+numpy/f2py/tests/test_quoted_character.py,sha256=Q0oDtl3STQqzSap5VYPpfzJJ72NtQchm6Vg-bwuoBl4,1029
+numpy/f2py/tests/test_regression.py,sha256=lPQUKx5RrVtGhyIvIcWS5GgA_CgQypabuuna-Q1z3hs,764
+numpy/f2py/tests/test_return_character.py,sha256=4a_JeEtY1AkT-Q-01iaZyqWLDGmZGW17d88JNFZoXTc,3864
+numpy/f2py/tests/test_return_complex.py,sha256=FO4oflCncNIft36R3Fe9uiyDtryiB-_d2PLMH3x64I4,4779
+numpy/f2py/tests/test_return_integer.py,sha256=cyyAbyHUepwYeyXlgIa2FD4B7A2dHnpp2jwx8ZDQiZQ,4749
+numpy/f2py/tests/test_return_logical.py,sha256=u3dazkOU1oz9kZKYXBd2GWaEr02MYfjGdLrb7kT8MiY,4974
+numpy/f2py/tests/test_return_real.py,sha256=QVRKzeO44ZuIlV8EycmtXaHT_i0rnX2bi3rOh7py4GM,5619
+numpy/f2py/tests/test_semicolon_split.py,sha256=v7YFx-oTbXUZZ4qjdblCYeVVtkD1YYa4CbuEf2LTOLs,1580
+numpy/f2py/tests/test_size.py,sha256=GV7S4tl8FhK60T_EpX86yVQo_bMVTdyOTB8fGVIQ24o,1352
+numpy/f2py/tests/test_string.py,sha256=LTQC9AFVsUAuJVFuH3Wltl-NfFIilVl0KvBNnEgdnmo,676
+numpy/f2py/tests/util.py,sha256=Wa3lwxZYuwByUkuWYq8phvikYypQehRzKOXd_0vYPPg,9764
+numpy/f2py/use_rules.py,sha256=L6nTSJnxougQ2PVAzR7s-1spidcfDp9tzLIFAJe3gUI,3652
+numpy/fft/__init__.py,sha256=zhieVvDXjjfIEHlZo_ta3OH6qFANuy_Wl1Arh1crX28,7587
+numpy/fft/__pycache__/__init__.cpython-38.pyc,,
+numpy/fft/__pycache__/_pocketfft.cpython-38.pyc,,
+numpy/fft/__pycache__/helper.cpython-38.pyc,,
+numpy/fft/__pycache__/setup.cpython-38.pyc,,
+numpy/fft/_pocketfft.py,sha256=TRYWW7fZB_ubxOwmRYE-Ok14N-ryllJh1W3gMzd1Ha0,47832
+numpy/fft/_pocketfft_internal.cpython-38-x86_64-linux-gnu.so,sha256=sGsW9TgVqHqlZia0aCZS6zT_rtgMoX6-9wJSHuwDvfs,386800
+numpy/fft/helper.py,sha256=vrKPnvFngxaag3nQA-OWzB9qsQctBk6vXaKsuQVMU0k,6271
+numpy/fft/setup.py,sha256=XT8tvC_P5KUDyBgP5S6KWc63-Fmu_L86c2u-KDLWqxo,542
+numpy/fft/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/fft/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/fft/tests/__pycache__/test_helper.cpython-38.pyc,,
+numpy/fft/tests/__pycache__/test_pocketfft.cpython-38.pyc,,
+numpy/fft/tests/test_helper.py,sha256=Stwrak0FqjR3Wn41keelozyF_M45PL3jdhF3PjZVyIA,6326
+numpy/fft/tests/test_pocketfft.py,sha256=3rWWfY23nJyv7X_CUc8JWAGxTtug1_97scsjbFaujEg,9789
+numpy/lib/__init__.py,sha256=OcdEAprMAoTSp8psgeWH9jmZnh1QbkT29uY7Z4qcFzQ,1899
+numpy/lib/__pycache__/__init__.cpython-38.pyc,,
+numpy/lib/__pycache__/_datasource.cpython-38.pyc,,
+numpy/lib/__pycache__/_iotools.cpython-38.pyc,,
+numpy/lib/__pycache__/_version.cpython-38.pyc,,
+numpy/lib/__pycache__/arraypad.cpython-38.pyc,,
+numpy/lib/__pycache__/arraysetops.cpython-38.pyc,,
+numpy/lib/__pycache__/arrayterator.cpython-38.pyc,,
+numpy/lib/__pycache__/financial.cpython-38.pyc,,
+numpy/lib/__pycache__/format.cpython-38.pyc,,
+numpy/lib/__pycache__/function_base.cpython-38.pyc,,
+numpy/lib/__pycache__/histograms.cpython-38.pyc,,
+numpy/lib/__pycache__/index_tricks.cpython-38.pyc,,
+numpy/lib/__pycache__/mixins.cpython-38.pyc,,
+numpy/lib/__pycache__/nanfunctions.cpython-38.pyc,,
+numpy/lib/__pycache__/npyio.cpython-38.pyc,,
+numpy/lib/__pycache__/polynomial.cpython-38.pyc,,
+numpy/lib/__pycache__/recfunctions.cpython-38.pyc,,
+numpy/lib/__pycache__/scimath.cpython-38.pyc,,
+numpy/lib/__pycache__/setup.cpython-38.pyc,,
+numpy/lib/__pycache__/shape_base.cpython-38.pyc,,
+numpy/lib/__pycache__/stride_tricks.cpython-38.pyc,,
+numpy/lib/__pycache__/twodim_base.cpython-38.pyc,,
+numpy/lib/__pycache__/type_check.cpython-38.pyc,,
+numpy/lib/__pycache__/ufunclike.cpython-38.pyc,,
+numpy/lib/__pycache__/user_array.cpython-38.pyc,,
+numpy/lib/__pycache__/utils.cpython-38.pyc,,
+numpy/lib/_datasource.py,sha256=jYNwX7pKyn-N9KzpSmrfKWbT5dXci7-VtDk4pL-vCDs,25521
+numpy/lib/_iotools.py,sha256=Nkv-GMaSyzHfkZvLSJLLQ-8uyMRsdyy6seM-Mn0gqCs,32738
+numpy/lib/_version.py,sha256=BIGo2hWBan0Qxt5C3JoPi4TXLPUv0T-FU9366Qu_5XY,4972
+numpy/lib/arraypad.py,sha256=VNvHoD3NvnxbQ1rzujmVDWRGMt4bX-4-87g0wDaVvxA,31386
+numpy/lib/arraysetops.py,sha256=7iWnvYY9aUmr0J4aVqFf3hHH1G9gC-kUClD5KZbGmo8,24231
+numpy/lib/arrayterator.py,sha256=FTXwwzs5xzPxpUbZmE3J0ChjgesJD9TiqBA_bCI05SI,7207
+numpy/lib/financial.py,sha256=YfHWv9em4_ZQg4m-AWSKJPcT43lilBQWzcX52c_q0j8,31590
+numpy/lib/format.py,sha256=QzW9kEcjjmDw8mPmEQk8_2NlcCxfb_lljy8ro_KxGf4,31632
+numpy/lib/function_base.py,sha256=5FwWTpP_ShwjjdgXQQOzeq5I04WvYUyow3YgcS5qXRY,156177
+numpy/lib/histograms.py,sha256=zSYkRkTfX_3PsDIdzarTimVChFxKooPxV0LYOkldY6g,39967
+numpy/lib/index_tricks.py,sha256=dW4TEm_KcPtBYB9EQWCFKogVai3kXkPOgeVVIeBRlJo,29706
+numpy/lib/mixins.py,sha256=6huDUGjzCFoeKrCS2pGnMPoQxpgWyoriIJ3xVwoqugQ,7233
+numpy/lib/nanfunctions.py,sha256=QPtwAIWQDv1IEilpyaKlpVSlqikn0djbMeXAhFJsc0E,58955
+numpy/lib/npyio.py,sha256=6Cwwet8pQusDj1msyv5qjI6lxLzgD5E2Iuvtlu6Zj0s,88031
+numpy/lib/polynomial.py,sha256=urWjdZ8dAvkFDKR-vkSImJIskhTXe9XlVCly0aCX7vM,40755
+numpy/lib/recfunctions.py,sha256=2hsE8JD4RI-HHL7dPG7ku6c9zFBeSJ2-7Z17Q3NiodI,56875
+numpy/lib/scimath.py,sha256=hulwijLlO0q230XOrD5SRjlTY-9O7c1u68CeNjTgNl8,14789
+numpy/lib/setup.py,sha256=os9eV9wSzwTQlfxeoQ33gYQ4wOj1_6EvqcROc8PyGbE,379
+numpy/lib/shape_base.py,sha256=2G5a_-b-8iRG9liNMc4yabCPKHniN9QHQC0HgATA4QE,38204
+numpy/lib/stride_tricks.py,sha256=rwTBZ3o0AS2KxwOLGLDmk_5w6EVUi-X1P9sDXpM7yqM,9291
+numpy/lib/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/lib/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test__datasource.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test__iotools.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test__version.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_arraypad.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_arraysetops.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_arrayterator.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_financial.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_format.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_function_base.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_histograms.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_index_tricks.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_io.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_mixins.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_nanfunctions.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_packbits.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_polynomial.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_recfunctions.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_shape_base.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_stride_tricks.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_twodim_base.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_type_check.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_ufunclike.cpython-38.pyc,,
+numpy/lib/tests/__pycache__/test_utils.cpython-38.pyc,,
+numpy/lib/tests/data/py2-objarr.npy,sha256=F4cyUC-_TB9QSFLAo2c7c44rC6NUYIgrfGx9PqWPSKk,258
+numpy/lib/tests/data/py2-objarr.npz,sha256=xo13HBT0FbFZ2qvZz0LWGDb3SuQASSaXh7rKfVcJjx4,366
+numpy/lib/tests/data/py3-objarr.npy,sha256=pTTVh8ezp-lwAK3fkgvdKU8Arp5NMKznVD-M6Ex_uA0,341
+numpy/lib/tests/data/py3-objarr.npz,sha256=qQR0gS57e9ta16d_vCQjaaKM74gPdlwCPkp55P-qrdw,449
+numpy/lib/tests/data/python3.npy,sha256=X0ad3hAaLGXig9LtSHAo-BgOvLlFfPYMnZuVIxRmj-0,96
+numpy/lib/tests/data/win64python2.npy,sha256=agOcgHVYFJrV-nrRJDbGnUnF4ZTPYXuSeF-Mtg7GMpc,96
+numpy/lib/tests/test__datasource.py,sha256=5LwfmvIysaLHlCYkmsj46S7YRF2zRG4BmKSjjJr6fdE,11463
+numpy/lib/tests/test__iotools.py,sha256=P0FnwqfgYV4Nj9oEnwGm-vXYTS0A_5FRZNxFzvsL2qg,13885
+numpy/lib/tests/test__version.py,sha256=eCeeSqb8G3WNtCgkM3XGz9Zszyye-KFDlNQ7EY2J_UY,2055
+numpy/lib/tests/test_arraypad.py,sha256=5MNlIBrm3iLnJz0YPMvfmtTdG4utCBiNu_k0klKDgBA,54140
+numpy/lib/tests/test_arraysetops.py,sha256=M-pzWVCkCuFi0a8OpUOoXYz7OxMLud5dLPLRmo7cMyk,22367
+numpy/lib/tests/test_arrayterator.py,sha256=run7iWWbvoHGGsDv_uB6G8QENFzOCSgUIxAMVp7ZMu4,1357
+numpy/lib/tests/test_financial.py,sha256=NZ3Q_wXZr6YBBkK2uElV0Q7ko9GQdN6TEvScQTuXWpc,18390
+numpy/lib/tests/test_format.py,sha256=xd-EyPq4B2sL6wNNK1MnaSD6SefZuV6AtDHELri5pe8,38984
+numpy/lib/tests/test_function_base.py,sha256=0Jnax_jByCwTG2tLP35i2-2gwSuhUx0tYAVicUOBxg0,123208
+numpy/lib/tests/test_histograms.py,sha256=zljzM6vpMhE7pskptqxeC_sYMGlUW5k2GUJ2AZyY5oo,33761
+numpy/lib/tests/test_index_tricks.py,sha256=sVyE_b2FyXEe_FFUVcw2zCjb_d5F8DBvWvm8g3qpLOs,18454
+numpy/lib/tests/test_io.py,sha256=gn5UPy6466E8lVsWFhEGVIHPocVtAc_5OR_1H4VzzJ0,100409
+numpy/lib/tests/test_mixins.py,sha256=YNIKF716Jz7V8FJ8Zzww_F6laTD8j3A6SBxCXqt6rAQ,7233
+numpy/lib/tests/test_nanfunctions.py,sha256=qJAl3wlw4hrRmBwsIn-9iAfsVyXngGJ-P6tvpFKXaF4,38207
+numpy/lib/tests/test_packbits.py,sha256=D0lwihTICKvUm9LTIIs7R16kVK-yZddeCAGnJk6TkEM,17612
+numpy/lib/tests/test_polynomial.py,sha256=NhCF2nGmc43KraPfR6LCBD8M-i-xZKwIsLYPFXNi0WE,10087
+numpy/lib/tests/test_recfunctions.py,sha256=K65UOmcZNUtLGgvI_8gzktZn2Q_B6mC6oA6c7ZG2Ztc,41335
+numpy/lib/tests/test_regression.py,sha256=JeWbMHmGCoVeFtMvd30SVZCpXD9sxnRaI1Dy2wpr5iA,8483
+numpy/lib/tests/test_shape_base.py,sha256=3iwnWAGnerQp4B5Bx-_vTx00E7ZVzjMw6_eqj6H7wdY,24513
+numpy/lib/tests/test_stride_tricks.py,sha256=KCC5XRbKzOXvWo3Pboj9oJ9b0Fw3dCh7bY0HLAOP0_8,17110
+numpy/lib/tests/test_twodim_base.py,sha256=gcrJ43TvAKVqTdWGDx9Dcs79oZtiT6lswS3FVcpt3QQ,18504
+numpy/lib/tests/test_type_check.py,sha256=c9RaZtw85vqRVzsOV1lAgdmFm9V5VgRRfpn-X8Fcv3E,15398
+numpy/lib/tests/test_ufunclike.py,sha256=DdOvBcFD33OFUMsxhnGso7q18M1NAlG-2Zn1gWlu3XM,3352
+numpy/lib/tests/test_utils.py,sha256=4v1ZRTeBbdje3MpnRCVNtRJLEUgpT2qJblUMVB1C89A,3456
+numpy/lib/twodim_base.py,sha256=UIeJOwE6p-EjgUS0L9kJa1aZAQIZqUkmZtqArE7h5WY,27642
+numpy/lib/type_check.py,sha256=fYWhY6IsmBebOIk2XlJZ7ZfhyVO98Q8LtqYlFKIrNDI,19776
+numpy/lib/ufunclike.py,sha256=CB_OBC_pbhtNbuheM-21DIxMArdXIhiyaaSOMN42ZvA,7294
+numpy/lib/user_array.py,sha256=7nJPlDfP-04Lcq8iH_cqBbSEsx5cHCcj-2Py-oh-5t0,7817
+numpy/lib/utils.py,sha256=0yugAVeRUsElIahjKs53RkAxNEAGVCtf7ohKHS41tKA,34082
+numpy/linalg/__init__.py,sha256=qD8UCWbi9l_ik7PQIqw9ChnXo1_3CSZre18px1wIA-s,1825
+numpy/linalg/__pycache__/__init__.cpython-38.pyc,,
+numpy/linalg/__pycache__/linalg.cpython-38.pyc,,
+numpy/linalg/__pycache__/setup.cpython-38.pyc,,
+numpy/linalg/_umath_linalg.cpython-38-x86_64-linux-gnu.so,sha256=wNWmkNabB6jHc14JDdkon5bWLXudMlcx0pfoB20HLfg,884672
+numpy/linalg/lapack_lite.cpython-38-x86_64-linux-gnu.so,sha256=z4DbbprVq5jNIMEQr2_rkX8ZY2DGPHiyJvaZOBgxAg8,108880
+numpy/linalg/linalg.py,sha256=QbOcm4NDesoEAl7LpPXo23orid-lY2_fITxD3MCj1RI,86274
+numpy/linalg/setup.py,sha256=vTut50wTnLpnWl6i-P1BY2EjikVHrnhwOgpNAF-Lgig,2003
+numpy/linalg/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/linalg/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/linalg/tests/__pycache__/test_build.cpython-38.pyc,,
+numpy/linalg/tests/__pycache__/test_deprecations.cpython-38.pyc,,
+numpy/linalg/tests/__pycache__/test_linalg.cpython-38.pyc,,
+numpy/linalg/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/linalg/tests/test_build.py,sha256=xKcJ8JmGk-zTqxxMhDX5GFsw-ptn8uwOUOcxaTUuPHc,1704
+numpy/linalg/tests/test_deprecations.py,sha256=eGYDVF3rmGQyDEMGOc-p_zc84Cx1I3jQPyaJe7xOvEc,706
+numpy/linalg/tests/test_linalg.py,sha256=jhwNPXFJN9PLeRmoZwGZ9SBGEkXDvm60pXJJYCLJNFc,72621
+numpy/linalg/tests/test_regression.py,sha256=zz7lprqDg7yU-z1d6AOdCDH3Tjqgw82QGiaPM7peixY,5671
+numpy/ma/__init__.py,sha256=fcmMCElT3MmCkjIGVhXyEAbjuWe_j1NVUiE65eAMvy0,1470
+numpy/ma/__pycache__/__init__.cpython-38.pyc,,
+numpy/ma/__pycache__/bench.cpython-38.pyc,,
+numpy/ma/__pycache__/core.cpython-38.pyc,,
+numpy/ma/__pycache__/extras.cpython-38.pyc,,
+numpy/ma/__pycache__/mrecords.cpython-38.pyc,,
+numpy/ma/__pycache__/setup.cpython-38.pyc,,
+numpy/ma/__pycache__/testutils.cpython-38.pyc,,
+numpy/ma/__pycache__/timer_comparison.cpython-38.pyc,,
+numpy/ma/bench.py,sha256=q3y_e1wpHVEdg0iIxrBshWVt2LOFfYi6q-eIJ3RSVrU,4942
+numpy/ma/core.py,sha256=ljE2IcaC0KvnBp6M_F1pxPJfCCuLkdIk2RVXUxgZvHk,260311
+numpy/ma/extras.py,sha256=-egPiF1vXSRRb3m5sbLG-tU0c8sVV2ODdxj3p1Ws8Bk,58651
+numpy/ma/mrecords.py,sha256=0kbmSJKEbyHQEjqWiFZy64PaUfstRERbewwnWdyW8e8,26822
+numpy/ma/setup.py,sha256=zkieH8BeiGVXl3Wlt_WeP9kciZlyAZY20DDu4SGk4b4,429
+numpy/ma/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/ma/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_core.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_deprecations.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_extras.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_mrecords.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_old_ma.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/ma/tests/__pycache__/test_subclassing.cpython-38.pyc,,
+numpy/ma/tests/test_core.py,sha256=5tiE3vmxdFBV4SXK9cPftUwfPlj8hEhNZ4ydq6EatqM,196581
+numpy/ma/tests/test_deprecations.py,sha256=StN-maPV6dwIPn1LmJ_Fd9l_Ysrbzvl8BZy6zYeUru8,2340
+numpy/ma/tests/test_extras.py,sha256=tw6htO0iACppdtcQ5Hc6fLVNlXWcxO72nCp7QKjUjn0,66087
+numpy/ma/tests/test_mrecords.py,sha256=G46t_9Kzo7wNv1N_Lb3zG4s6LMuXVir1NtMKDaKVdn8,19960
+numpy/ma/tests/test_old_ma.py,sha256=5Wned1evtBm2k1yFjcAnrKTvDjIL2Vatma1cH7ks1Tg,32373
+numpy/ma/tests/test_regression.py,sha256=Kq1OAjXuAyTv0J7UcWmQNd-nk8aFcU-5Vu84HPPK2Fs,3156
+numpy/ma/tests/test_subclassing.py,sha256=l4srPFjFT0jR51e9hbumLCawR9sqQ4cdH4QwY1t6Xek,12966
+numpy/ma/testutils.py,sha256=meyy8_0sx4g2sebsVO1PrFSc6ogLzEU7vjOuu2VjY1U,10365
+numpy/ma/timer_comparison.py,sha256=BCWzBW_z6M3k3Mfe-7ThiPEBF4a12J4ZXGIxFxXkY9c,15548
+numpy/matlib.py,sha256=CgnA_dNYnxFMqfwycoimMgGzjICJC1u6XRpwPEyPvXI,9757
+numpy/matrixlib/__init__.py,sha256=W-2bi7zuMWQY5U1ikwfaBPubrcYkbxzPzzIeYz3RYPA,284
+numpy/matrixlib/__pycache__/__init__.cpython-38.pyc,,
+numpy/matrixlib/__pycache__/defmatrix.cpython-38.pyc,,
+numpy/matrixlib/__pycache__/setup.cpython-38.pyc,,
+numpy/matrixlib/defmatrix.py,sha256=r_rYp4ODTS9Rdw8EBIa0wS7NJ99ygDCzzGUPnI2ziMY,30713
+numpy/matrixlib/setup.py,sha256=7DS-rWnyWlLTuOj31UuhkyW8QhLQ7KD5wirtWT_DUhc,437
+numpy/matrixlib/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/matrixlib/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_defmatrix.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_interaction.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_masked_matrix.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_matrix_linalg.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_multiarray.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_numeric.cpython-38.pyc,,
+numpy/matrixlib/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/matrixlib/tests/test_defmatrix.py,sha256=FRkFPpDpgUEzEAgShORCVhPOuqclxBftHyEW5z2oV4o,15315
+numpy/matrixlib/tests/test_interaction.py,sha256=y0ldcMIKCeT_tRo_uON6Cvxuff-M4MxmqnzA0kDFHYU,12179
+numpy/matrixlib/tests/test_masked_matrix.py,sha256=jbmuf5BQjsae6kXZtH8XJ8TI5JJYDIZ0PZhGKBbxnmY,8925
+numpy/matrixlib/tests/test_matrix_linalg.py,sha256=XYsAcC02YgvlfqAQOLY2hOuggeRlRhkztNsLYWGb4QQ,2125
+numpy/matrixlib/tests/test_multiarray.py,sha256=jM-cFU_ktanoyJ0ScRYv5xwohhE3pKpVhBBtd31b-IQ,628
+numpy/matrixlib/tests/test_numeric.py,sha256=YPq5f11MUAV6WcLQbl8xKWcm17lMj9SJ09mamqGCpxA,515
+numpy/matrixlib/tests/test_regression.py,sha256=ou1TP5bFNpjRaL2-zQxzS11ChwvAkCVp3k71SBtOO9M,1001
+numpy/polynomial/__init__.py,sha256=boBgsbz2Rr49pBTyGNT3TnLRTPSauyjBNeCVGek7oUM,1134
+numpy/polynomial/__pycache__/__init__.cpython-38.pyc,,
+numpy/polynomial/__pycache__/_polybase.cpython-38.pyc,,
+numpy/polynomial/__pycache__/chebyshev.cpython-38.pyc,,
+numpy/polynomial/__pycache__/hermite.cpython-38.pyc,,
+numpy/polynomial/__pycache__/hermite_e.cpython-38.pyc,,
+numpy/polynomial/__pycache__/laguerre.cpython-38.pyc,,
+numpy/polynomial/__pycache__/legendre.cpython-38.pyc,,
+numpy/polynomial/__pycache__/polynomial.cpython-38.pyc,,
+numpy/polynomial/__pycache__/polyutils.cpython-38.pyc,,
+numpy/polynomial/__pycache__/setup.cpython-38.pyc,,
+numpy/polynomial/_polybase.py,sha256=HOIXM-w5L_TVFdWR72K_RtidpR8zHqNARoeVwf6gor8,33093
+numpy/polynomial/chebyshev.py,sha256=5pr-j0wWlKnNki-vaM2gV7Sni9FXtaomVMhYH01pw_I,63287
+numpy/polynomial/hermite.py,sha256=jTv8jCvVA5_bQ6AqLo5yF8n1-8mWpT_M1vET2BlKSdY,52671
+numpy/polynomial/hermite_e.py,sha256=03sKE5Osr1DIVUL3eMKmzKU0GGKUk7lEJM5K2_LRXG0,52853
+numpy/polynomial/laguerre.py,sha256=CSbhTmnKKIYGMLoahlQbFpPIvAvXQ8aQ6lQzy9ySmic,51106
+numpy/polynomial/legendre.py,sha256=4TjHkvFH8gPA2P_ncR0GyBYjp4YF5nYWVjmkkWa6DyE,52507
+numpy/polynomial/polynomial.py,sha256=_A6i4ZQKeOVy_g4Wui6f8ubbWbd0tPDpNS5VCbvqtEs,48706
+numpy/polynomial/polyutils.py,sha256=gvkAyz9vYqVAqu-X9NIVmXnZ3Lap0wGkWUHdHue3ktI,23243
+numpy/polynomial/setup.py,sha256=PKIUV6Jh7_0jBboPp3IHPmp6LWVs4tbIkdu_FtmI_5U,385
+numpy/polynomial/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/polynomial/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_chebyshev.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_classes.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_hermite.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_hermite_e.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_laguerre.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_legendre.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_polynomial.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_polyutils.cpython-38.pyc,,
+numpy/polynomial/tests/__pycache__/test_printing.cpython-38.pyc,,
+numpy/polynomial/tests/test_chebyshev.py,sha256=Vda4vCJtdIAPs0tsbXexnw4kaaou30FjZ0gQxNxOcz8,20716
+numpy/polynomial/tests/test_classes.py,sha256=18hEEMQHB3o1roK4nlPrawv9pFif2gur6lkEBoxZAFg,20370
+numpy/polynomial/tests/test_hermite.py,sha256=3zU7T69fuFvn5gDOG34SCnyDm_pVvTVlcpUMlhoU2V0,18755
+numpy/polynomial/tests/test_hermite_e.py,sha256=06gCjnh0s-1h7jWpmJyjQdfzAK_4kywto7hHuQ7NmJQ,19089
+numpy/polynomial/tests/test_laguerre.py,sha256=O5zxZQ5GIOZrx4b0ttCUoDxmb3ifhwDRcq--hYyt3zU,17689
+numpy/polynomial/tests/test_legendre.py,sha256=2y8xF4PdU-uS7OjuIzMC6DAeVc9mlW83xj_N4NSGhSY,18453
+numpy/polynomial/tests/test_polynomial.py,sha256=MD4xxU3yWSbMK9B5wpYLQOeWZj0mH7g9p9ifMVhPQF4,20080
+numpy/polynomial/tests/test_polyutils.py,sha256=GzRz3leypd2UrWE-EwuIWL0lbbj6ks6Mjli3tozDN9U,3081
+numpy/polynomial/tests/test_printing.py,sha256=_7O-05q3JEjdxmuzBdWxligQVdC6qGygKmbhfiYW9KQ,2067
+numpy/random/__init__.pxd,sha256=-E4OlHPfdF_aLa7hXIZzBBBkTIK86tR9qXnKMeUnhcg,432
+numpy/random/__init__.py,sha256=yX9S3EpGEUAnSiwoBrccxFZngr5pLmbEx6dgLPH1r5s,7527
+numpy/random/__pycache__/__init__.cpython-38.pyc,,
+numpy/random/__pycache__/_pickle.cpython-38.pyc,,
+numpy/random/__pycache__/setup.cpython-38.pyc,,
+numpy/random/_bit_generator.cpython-38-x86_64-linux-gnu.so,sha256=K-eCfc3YeiQ2YEgkppPJjsXTNsACU3U9VvD36jnCLx0,1090036
+numpy/random/_bit_generator.pxd,sha256=nZRRH1h_FhR-YTE_Y0kJ5n_JyuFxFHA4II_K0sqNH3k,1005
+numpy/random/_bounded_integers.cpython-38-x86_64-linux-gnu.so,sha256=XTt234egsb8iHl99duP6YYPQlEQo-apoJWBIbrEhV9M,3739859
+numpy/random/_bounded_integers.pxd,sha256=hcoucPH5hkFEM2nm12zYO-5O_Rt8RujEXT5YWuAzl1Q,1669
+numpy/random/_common.cpython-38-x86_64-linux-gnu.so,sha256=zhkMUcSy63pb5i7imft2orJ1kdeUwNm0EcP7G6tyZNw,1644969
+numpy/random/_common.pxd,sha256=jJSsc_MpqkizibG03OLe7gRN3DMfwGMjDkbG-utvDKM,4690
+numpy/random/_examples/cffi/__pycache__/extending.cpython-38.pyc,,
+numpy/random/_examples/cffi/__pycache__/parse.cpython-38.pyc,,
+numpy/random/_examples/cffi/extending.py,sha256=xSla3zWqxi6Hj48EvnYfD3WHfE189VvC4XsKu4_T_Iw,880
+numpy/random/_examples/cffi/parse.py,sha256=v0eB67u_SgfqSflvuB31YqHUZWh6XscNcLKaCn7fCaw,1515
+numpy/random/_examples/cython/__pycache__/setup.cpython-38.pyc,,
+numpy/random/_examples/cython/extending.pyx,sha256=8nSM_iELliQYfp0Hj9VzD2XZAfaRdo7iJTNP5gLRn-k,2292
+numpy/random/_examples/cython/extending_distributions.pyx,sha256=o6Pd8XP7jvMaZeLaJZTN9Vp0_5rm4M_xF16GmJE-6yw,2332
+numpy/random/_examples/cython/setup.py,sha256=68K-GEXqTLGxXyMOttMH6nwMN6zcvLjY-lWrVml2jPk,1042
+numpy/random/_examples/numba/__pycache__/extending.cpython-38.pyc,,
+numpy/random/_examples/numba/__pycache__/extending_distributions.cpython-38.pyc,,
+numpy/random/_examples/numba/extending.py,sha256=L-ELWpGbqBC2WSiWHFatfTnRxu2a66x7vKIoU2zDx_U,1977
+numpy/random/_examples/numba/extending_distributions.py,sha256=Jnr9aWkHyIWygNbdae32GVURK-5T9BTGhuExRpvve98,2034
+numpy/random/_generator.cpython-38-x86_64-linux-gnu.so,sha256=U2VNNED1ts5WrvqDFUH9tbXqDp6QALofBUygE8unmPk,4391120
+numpy/random/_mt19937.cpython-38-x86_64-linux-gnu.so,sha256=UPdkonmOXlGOdsCYRCg87lm6yv4O1QtnTs6VPMvzVA0,512526
+numpy/random/_pcg64.cpython-38-x86_64-linux-gnu.so,sha256=kITSwq244WjrplcgbcE0QaBr3dnKNSa8kQwTP2ZPUhI,414262
+numpy/random/_philox.cpython-38-x86_64-linux-gnu.so,sha256=czcsniL5mulmeXouzeOS-K9JM2TpGcAk4EUghcHA7jU,455246
+numpy/random/_pickle.py,sha256=QJRCkyDVi7xJEx-XMcYlMoLwi2dPoz8jD_6NFo1nU-4,2247
+numpy/random/_sfc64.cpython-38-x86_64-linux-gnu.so,sha256=0K7rhvXanD5WddB1BC1KFb4ZCLokg4QvQImYV3EMS8Q,271670
+numpy/random/mtrand.cpython-38-x86_64-linux-gnu.so,sha256=2ds3KmhnSgzyjOIE3puMcE_tg22-Rcn81rCvXwJBxE0,3412253
+numpy/random/setup.py,sha256=OvadBHJDLR-VmfF0Ls598MMpP9kMfzkdtrei-sEpK4Q,5715
+numpy/random/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/random/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_direct.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_extending.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_generator_mt19937.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_generator_mt19937_regressions.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_random.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_randomstate.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_randomstate_regression.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_regression.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_seed_sequence.cpython-38.pyc,,
+numpy/random/tests/__pycache__/test_smoke.cpython-38.pyc,,
+numpy/random/tests/data/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/random/tests/data/__pycache__/__init__.cpython-38.pyc,,
+numpy/random/tests/data/mt19937-testset-1.csv,sha256=Xkef402AVB-eZgYQkVtoxERHkxffCA9Jyt_oMbtJGwY,15844
+numpy/random/tests/data/mt19937-testset-2.csv,sha256=nsBEQNnff-aFjHYK4thjvUK4xSXDSfv5aTbcE59pOkE,15825
+numpy/random/tests/data/pcg64-testset-1.csv,sha256=xB00DpknGUTTCxDr9L6aNo9Hs-sfzEMbUSS4t11TTfE,23839
+numpy/random/tests/data/pcg64-testset-2.csv,sha256=NTdzTKvG2U7_WyU_IoQUtMzU3kEvDH39CgnR6VzhTkw,23845
+numpy/random/tests/data/philox-testset-1.csv,sha256=SedRaIy5zFadmk71nKrGxCFZ6BwKz8g1A9-OZp3IkkY,23852
+numpy/random/tests/data/philox-testset-2.csv,sha256=dWECt-sbfvaSiK8-Ygp5AqyjoN5i26VEOrXqg01rk3g,23838
+numpy/random/tests/data/sfc64-testset-1.csv,sha256=iHs6iX6KR8bxGwKk-3tedAdMPz6ZW8slDSUECkAqC8Q,23840
+numpy/random/tests/data/sfc64-testset-2.csv,sha256=FIDIDFCaPZfWUSxsJMAe58hPNmMrU27kCd9FhCEYt_k,23833
+numpy/random/tests/test_direct.py,sha256=RHMSKQifz7vqhjn0z5rpJl_AlDLVSli-ldC6jKcwJP0,14435
+numpy/random/tests/test_extending.py,sha256=22-9bT9yMONuqb4r_5G-jV7QS_V1nN_rddEAs3X2aq4,1822
+numpy/random/tests/test_generator_mt19937.py,sha256=ZgjzfDXR9KzF2q-xCGJxlqatTE9ZO3zZ1bdeUVMJYE0,98381
+numpy/random/tests/test_generator_mt19937_regressions.py,sha256=ldeCEO3N6dCAGA1g8YnqEwRTQAiv6tBuY9xuAELJNCQ,5834
+numpy/random/tests/test_random.py,sha256=5py03naIZ5p3hqDIGLZMiF6a7o4FIZR6eqvV4KfFSKo,67510
+numpy/random/tests/test_randomstate.py,sha256=X0cv2K64VEoydwSeKdgYGlEZBZU4KtAk4RKkw9CksM4,79520
+numpy/random/tests/test_randomstate_regression.py,sha256=6nW_U3uLq3JbiIaNX0PstGgqHk8fhDiblDkmOvF2Huc,7707
+numpy/random/tests/test_regression.py,sha256=_M-We4kY74tXPonJjWN7rMXF5SoxHMapl1zM08-6p0w,5683
+numpy/random/tests/test_seed_sequence.py,sha256=-fvOA-gzi_hOugmzJfXxL0GNmfAvuAbiwDCuLggqrNY,2379
+numpy/random/tests/test_smoke.py,sha256=VOCrUBqDsJFu9yQ02DArd-NV5p3eTphY-NX3WwnyewU,27891
+numpy/setup.py,sha256=lsyhnRXfo0ybq63nVUX8HnYhQ1mI0bSic-mk-lK3wnc,920
+numpy/testing/__init__.py,sha256=MHRK5eimwrC9RE723HlOcOQGxu5HAmQ-qwlcVX1sZ1k,632
+numpy/testing/__pycache__/__init__.cpython-38.pyc,,
+numpy/testing/__pycache__/print_coercion_tables.cpython-38.pyc,,
+numpy/testing/__pycache__/setup.cpython-38.pyc,,
+numpy/testing/__pycache__/utils.cpython-38.pyc,,
+numpy/testing/_private/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/testing/_private/__pycache__/__init__.cpython-38.pyc,,
+numpy/testing/_private/__pycache__/decorators.cpython-38.pyc,,
+numpy/testing/_private/__pycache__/noseclasses.cpython-38.pyc,,
+numpy/testing/_private/__pycache__/nosetester.cpython-38.pyc,,
+numpy/testing/_private/__pycache__/parameterized.cpython-38.pyc,,
+numpy/testing/_private/__pycache__/utils.cpython-38.pyc,,
+numpy/testing/_private/decorators.py,sha256=JSIBsQH4t1rdMcr1-Cf2jBJ6CXzIGEFyZoWxUJuXI7M,9015
+numpy/testing/_private/noseclasses.py,sha256=nYtV16KcoqAcHswfYO-u6bRIrDBvCvpqjCNfl7zk-SA,14601
+numpy/testing/_private/nosetester.py,sha256=S1nEtDBvNT87Zrt8XmuSVIBWpanJwjtD1YiRlcf7eoA,20515
+numpy/testing/_private/parameterized.py,sha256=PQnCG1Ul0aE9MBTDL9lJ-DOMgsahDfpMn5Xhqld1KWk,18285
+numpy/testing/_private/utils.py,sha256=_na6o-vYzN8eDMww86X49m8ciCa3G_lZlDH7IEQLdyQ,84689
+numpy/testing/print_coercion_tables.py,sha256=qIIxBkc4f2aCKiUY6EsShxQzRrBkFEb4TB7KaQuTl58,2809
+numpy/testing/setup.py,sha256=9PnlgcejccUBzaGPi9Po-ElhmuQMAmWCBRdvCDwiKYw,676
+numpy/testing/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/testing/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/testing/tests/__pycache__/test_decorators.cpython-38.pyc,,
+numpy/testing/tests/__pycache__/test_doctesting.cpython-38.pyc,,
+numpy/testing/tests/__pycache__/test_utils.cpython-38.pyc,,
+numpy/testing/tests/test_decorators.py,sha256=mkMCPSPJdrKxQl93u0QlIEdp5JS0tCzgLHXuoYDDvzs,6001
+numpy/testing/tests/test_doctesting.py,sha256=sKBXwuRZwMFSiem3R9egBzzSUB81kkpw9y-Y07iqU2M,1413
+numpy/testing/tests/test_utils.py,sha256=sB8vinI9-74VO9il6mf3a7k4OXh0HFp3dSVQk6br5JM,54774
+numpy/testing/utils.py,sha256=5-ntGTS7ux_T1sowuhRT5bwerhsCmgUfkMB-JJqPOOM,1298
+numpy/tests/__init__.py,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+numpy/tests/__pycache__/__init__.cpython-38.pyc,,
+numpy/tests/__pycache__/test_ctypeslib.cpython-38.pyc,,
+numpy/tests/__pycache__/test_matlib.cpython-38.pyc,,
+numpy/tests/__pycache__/test_numpy_version.cpython-38.pyc,,
+numpy/tests/__pycache__/test_public_api.cpython-38.pyc,,
+numpy/tests/__pycache__/test_reloading.cpython-38.pyc,,
+numpy/tests/__pycache__/test_scripts.cpython-38.pyc,,
+numpy/tests/__pycache__/test_warnings.cpython-38.pyc,,
+numpy/tests/test_ctypeslib.py,sha256=Fy_dBd80RrBufyeXISkBu6kS3X700qOD5ob0pDjRssg,12276
+numpy/tests/test_matlib.py,sha256=WKILeEOe3NdKP_XAy-uCs4VEi7r_ghQ7NUhIgH1LzoM,2158
+numpy/tests/test_numpy_version.py,sha256=VtTTZAPnsJ8xtKLy1qYqIwrpcjTtqJ9xP9qP5-p8DbU,647
+numpy/tests/test_public_api.py,sha256=Cfv9zpw_M9XElubxmNs_d1lwgo3ErVdGI1ttHpjHHEM,15532
+numpy/tests/test_reloading.py,sha256=k_J-pWB1mO4XoSAqOZ-qgpsn5It6yXgcRvNs1wxbcoY,1298
+numpy/tests/test_scripts.py,sha256=SxlQPb8EttfP4V5iGJyXMBtDWTS3EcYVBN-JWDTtSy4,1637
+numpy/tests/test_warnings.py,sha256=38bAtHc0P2uZ8c2Y9TQse3k6KBtPnvix8Q7OlF3WgZw,2594
+numpy/version.py,sha256=4Gik0bam6OHPU5KRNL5OlqoELwdJw_4SjmuBL5i3_0I,294
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/top_level.txt	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/top_level.txt	(date 1589417756792)
@@ -0,0 +1,1 @@
+numpy
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/WHEEL
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/WHEEL	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/WHEEL	(date 1589417756792)
@@ -0,0 +1,5 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.34.2)
+Root-Is-Purelib: false
+Tag: cp38-cp38-manylinux1_x86_64
+
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/INSTALLER
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/INSTALLER	(date 1589417758835)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/INSTALLER	(date 1589417758835)
@@ -0,0 +1,1 @@
+pip
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/METADATA
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/METADATA	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/METADATA	(date 1589417756792)
@@ -0,0 +1,56 @@
+Metadata-Version: 2.1
+Name: numpy
+Version: 1.18.4
+Summary: NumPy is the fundamental package for array computing with Python.
+Home-page: https://www.numpy.org
+Author: Travis E. Oliphant et al.
+Maintainer: NumPy Developers
+Maintainer-email: numpy-discussion@python.org
+License: BSD
+Download-URL: https://pypi.python.org/pypi/numpy
+Project-URL: Bug Tracker, https://github.com/numpy/numpy/issues
+Project-URL: Documentation, https://docs.scipy.org/doc/numpy/
+Project-URL: Source Code, https://github.com/numpy/numpy
+Platform: Windows
+Platform: Linux
+Platform: Solaris
+Platform: Mac OS-X
+Platform: Unix
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Intended Audience :: Science/Research
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved
+Classifier: Programming Language :: C
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.5
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Classifier: Programming Language :: Python :: 3 :: Only
+Classifier: Programming Language :: Python :: Implementation :: CPython
+Classifier: Topic :: Software Development
+Classifier: Topic :: Scientific/Engineering
+Classifier: Operating System :: Microsoft :: Windows
+Classifier: Operating System :: POSIX
+Classifier: Operating System :: Unix
+Classifier: Operating System :: MacOS
+Requires-Python: >=3.5
+
+It provides:
+
+- a powerful N-dimensional array object
+- sophisticated (broadcasting) functions
+- tools for integrating C/C++ and Fortran code
+- useful linear algebra, Fourier transform, and random number capabilities
+- and much more
+
+Besides its obvious scientific uses, NumPy can also be used as an efficient
+multi-dimensional container of generic data. Arbitrary data-types can be
+defined. This allows NumPy to seamlessly and speedily integrate with a wide
+variety of databases.
+
+All NumPy wheels distributed on PyPI are BSD licensed.
+
+
+
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/entry_points.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/entry_points.txt	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/entry_points.txt	(date 1589417756792)
@@ -0,0 +1,5 @@
+[console_scripts]
+f2py = numpy.f2py.f2py2e:main
+f2py3 = numpy.f2py.f2py2e:main
+f2py3.8 = numpy.f2py.f2py2e:main
+
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSE.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSE.txt	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSE.txt	(date 1589417756792)
@@ -0,0 +1,910 @@
+Copyright (c) 2005-2019, NumPy Developers.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+    * Redistributions of source code must retain the above copyright
+       notice, this list of conditions and the following disclaimer.
+
+    * Redistributions in binary form must reproduce the above
+       copyright notice, this list of conditions and the following
+       disclaimer in the documentation and/or other materials provided
+       with the distribution.
+
+    * Neither the name of the NumPy Developers nor the names of any
+       contributors may be used to endorse or promote products derived
+       from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+----
+
+This binary distribution of NumPy also bundles the following software:
+
+
+Name: OpenBLAS
+Files: .libs/libopenb*.so
+Description: bundled as a dynamically linked library
+Availability: https://github.com/xianyi/OpenBLAS/
+License: 3-clause BSD
+  Copyright (c) 2011-2014, The OpenBLAS Project
+  All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+
+     1. Redistributions of source code must retain the above copyright
+        notice, this list of conditions and the following disclaimer.
+
+     2. Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimer in
+        the documentation and/or other materials provided with the
+        distribution.
+     3. Neither the name of the OpenBLAS project nor the names of
+        its contributors may be used to endorse or promote products
+        derived from this software without specific prior written
+        permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+
+Name: LAPACK
+Files: .libs/libopenb*.so
+Description: bundled in OpenBLAS
+Availability: https://github.com/xianyi/OpenBLAS/
+License 3-clause BSD
+  Copyright (c) 1992-2013 The University of Tennessee and The University
+                          of Tennessee Research Foundation.  All rights
+                          reserved.
+  Copyright (c) 2000-2013 The University of California Berkeley. All
+                          rights reserved.
+  Copyright (c) 2006-2013 The University of Colorado Denver.  All rights
+                          reserved.
+
+  $COPYRIGHT$
+
+  Additional copyrights may follow
+
+  $HEADER$
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are
+  met:
+
+  - Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+  - Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer listed
+    in this license in the documentation and/or other materials
+    provided with the distribution.
+
+  - Neither the name of the copyright holders nor the names of its
+    contributors may be used to endorse or promote products derived from
+    this software without specific prior written permission.
+
+  The copyright holders provide no reassurances that the source code
+  provided does not infringe any patent, copyright, or any other
+  intellectual property rights of third parties.  The copyright holders
+  disclaim any liability to any recipient for claims brought against
+  recipient by any third party for infringement of that parties
+  intellectual property rights.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+
+Name: GCC runtime library
+Files: .libs/libgfortran*.so
+Description: dynamically linked to files compiled with gcc
+Availability: https://gcc.gnu.org/viewcvs/gcc/
+License: GPLv3 + runtime exception
+  Copyright (C) 2002-2017 Free Software Foundation, Inc.
+
+  Libgfortran is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 3, or (at your option)
+  any later version.
+
+  Libgfortran is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  Under Section 7 of GPL version 3, you are granted additional
+  permissions described in the GCC Runtime Library Exception, version
+  3.1, as published by the Free Software Foundation.
+
+  You should have received a copy of the GNU General Public License and
+  a copy of the GCC Runtime Library Exception along with this program;
+  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+  <http://www.gnu.org/licenses/>.
+
+----
+
+Full text of license texts referred to above follows (that they are
+listed below does not necessarily imply the conditions apply to the
+present binary release):
+
+----
+
+GCC RUNTIME LIBRARY EXCEPTION
+
+Version 3.1, 31 March 2009
+
+Copyright (C) 2009 Free Software Foundation, Inc. <http://fsf.org/>
+
+Everyone is permitted to copy and distribute verbatim copies of this
+license document, but changing it is not allowed.
+
+This GCC Runtime Library Exception ("Exception") is an additional
+permission under section 7 of the GNU General Public License, version
+3 ("GPLv3"). It applies to a given file (the "Runtime Library") that
+bears a notice placed by the copyright holder of the file stating that
+the file is governed by GPLv3 along with this Exception.
+
+When you use GCC to compile a program, GCC may combine portions of
+certain GCC header files and runtime libraries with the compiled
+program. The purpose of this Exception is to allow compilation of
+non-GPL (including proprietary) programs to use, in this way, the
+header files and runtime libraries covered by this Exception.
+
+0. Definitions.
+
+A file is an "Independent Module" if it either requires the Runtime
+Library for execution after a Compilation Process, or makes use of an
+interface provided by the Runtime Library, but is not otherwise based
+on the Runtime Library.
+
+"GCC" means a version of the GNU Compiler Collection, with or without
+modifications, governed by version 3 (or a specified later version) of
+the GNU General Public License (GPL) with the option of using any
+subsequent versions published by the FSF.
+
+"GPL-compatible Software" is software whose conditions of propagation,
+modification and use would permit combination with GCC in accord with
+the license of GCC.
+
+"Target Code" refers to output from any compiler for a real or virtual
+target processor architecture, in executable form or suitable for
+input to an assembler, loader, linker and/or execution
+phase. Notwithstanding that, Target Code does not include data in any
+format that is used as a compiler intermediate representation, or used
+for producing a compiler intermediate representation.
+
+The "Compilation Process" transforms code entirely represented in
+non-intermediate languages designed for human-written code, and/or in
+Java Virtual Machine byte code, into Target Code. Thus, for example,
+use of source code generators and preprocessors need not be considered
+part of the Compilation Process, since the Compilation Process can be
+understood as starting with the output of the generators or
+preprocessors.
+
+A Compilation Process is "Eligible" if it is done using GCC, alone or
+with other GPL-compatible software, or if it is done without using any
+work based on GCC. For example, using non-GPL-compatible Software to
+optimize any GCC intermediate representations would not qualify as an
+Eligible Compilation Process.
+
+1. Grant of Additional Permission.
+
+You have permission to propagate a work of Target Code formed by
+combining the Runtime Library with Independent Modules, even if such
+propagation would otherwise violate the terms of GPLv3, provided that
+all Target Code was generated by Eligible Compilation Processes. You
+may then convey such a combination under terms of your choice,
+consistent with the licensing of the Independent Modules.
+
+2. No Weakening of GCC Copyleft.
+
+The availability of this Exception does not imply any general
+presumption that third-party software is unaffected by the copyleft
+requirements of the license of GCC.
+
+----
+
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
Index: venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSES_bundled.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSES_bundled.txt	(date 1589417756792)
+++ venv/lib/python3.8/site-packages/numpy-1.18.4.dist-info/LICENSES_bundled.txt	(date 1589417756792)
@@ -0,0 +1,27 @@
+The NumPy repository and source distributions bundle several libraries that are
+compatibly licensed.  We list these here.
+
+Name: Numpydoc
+Files: doc/sphinxext/numpydoc/*
+License: 2-clause BSD
+  For details, see doc/sphinxext/LICENSE.txt
+
+Name: scipy-sphinx-theme
+Files: doc/scipy-sphinx-theme/*
+License: 3-clause BSD, PSF and Apache 2.0
+  For details, see doc/scipy-sphinx-theme/LICENSE.txt
+
+Name: lapack-lite
+Files: numpy/linalg/lapack_lite/*
+License: 3-clause BSD
+  For details, see numpy/linalg/lapack_lite/LICENSE.txt
+
+Name: tempita
+Files: tools/npy_tempita/*
+License: BSD derived
+  For details, see tools/npy_tempita/license.txt
+
+Name: dragon4
+Files: numpy/core/src/multiarray/dragon4.c
+License: MIT
+  For license text, see numpy/core/src/multiarray/dragon4.c
Index: venv/lib/python3.8/site-packages/mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.svg	(date 1589417755545)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/tests/baseline_images/test_axes_grid1/divider_append_axes.svg	(date 1589417755545)
@@ -0,0 +1,3449 @@
+<?xml version="1.0" encoding="utf-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
+  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<!-- Created with matplotlib (http://matplotlib.org/) -->
+<svg height="432pt" version="1.1" viewBox="0 0 576 432" width="576pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+ <defs>
+  <style type="text/css">
+*{stroke-linecap:butt;stroke-linejoin:round;}
+  </style>
+ </defs>
+ <g id="figure_1">
+  <g id="patch_1">
+   <path d="M 0 432 
+L 576 432 
+L 576 0 
+L 0 0 
+z
+" style="fill:#ffffff;"/>
+  </g>
+  <g id="axes_1">
+   <g id="patch_2">
+    <path d="M 165.6 295.2 
+L 424.8 295.2 
+L 424.8 136.8 
+L 165.6 136.8 
+z
+" style="fill:#ffffff;"/>
+   </g>
+   <g id="PathCollection_1">
+    <defs>
+     <path d="M 0 2.236068 
+C 0.593012 2.236068 1.161816 2.000462 1.581139 1.581139 
+C 2.000462 1.161816 2.236068 0.593012 2.236068 0 
+C 2.236068 -0.593012 2.000462 -1.161816 1.581139 -1.581139 
+C 1.161816 -2.000462 0.593012 -2.236068 0 -2.236068 
+C -0.593012 -2.236068 -1.161816 -2.000462 -1.581139 -1.581139 
+C -2.000462 -1.161816 -2.236068 -0.593012 -2.236068 0 
+C -2.236068 0.593012 -2.000462 1.161816 -1.581139 1.581139 
+C -1.161816 2.000462 -0.593012 2.236068 0 2.236068 
+z
+" id="m2304b15ba4" style="stroke:#000000;"/>
+    </defs>
+    <g clip-path="url(#p6a5c938135)">
+     <use style="fill:#0000ff;stroke:#000000;" x="352.355296" xlink:href="#m2304b15ba4" y="204.991939"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.165094" xlink:href="#m2304b15ba4" y="198.329017"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.911111" xlink:href="#m2304b15ba4" y="224.361834"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="367.80494" xlink:href="#m2304b15ba4" y="213.926662"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="355.708879" xlink:href="#m2304b15ba4" y="211.484544"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.536197" xlink:href="#m2304b15ba4" y="212.010697"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.982865" xlink:href="#m2304b15ba4" y="205.292683"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.296026" xlink:href="#m2304b15ba4" y="251.997937"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.855709" xlink:href="#m2304b15ba4" y="216.976617"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.503391" xlink:href="#m2304b15ba4" y="211.267135"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.867012" xlink:href="#m2304b15ba4" y="235.806541"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="342.318462" xlink:href="#m2304b15ba4" y="182.855083"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="319.857622" xlink:href="#m2304b15ba4" y="212.801127"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.142271" xlink:href="#m2304b15ba4" y="185.044586"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.581169" xlink:href="#m2304b15ba4" y="231.652356"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.011048" xlink:href="#m2304b15ba4" y="233.964542"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="343.608162" xlink:href="#m2304b15ba4" y="211.559806"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.552872" xlink:href="#m2304b15ba4" y="249.23803"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.343394" xlink:href="#m2304b15ba4" y="211.743681"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.527298" xlink:href="#m2304b15ba4" y="214.075059"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="212.48313" xlink:href="#m2304b15ba4" y="195.889827"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.377242" xlink:href="#m2304b15ba4" y="202.119381"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.207733" xlink:href="#m2304b15ba4" y="224.266052"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.153853" xlink:href="#m2304b15ba4" y="237.730434"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="368.74005" xlink:href="#m2304b15ba4" y="182.096357"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="248.078552" xlink:href="#m2304b15ba4" y="231.683877"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.682576" xlink:href="#m2304b15ba4" y="236.701386"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.135243" xlink:href="#m2304b15ba4" y="237.48015"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="344.862047" xlink:href="#m2304b15ba4" y="193.877355"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="342.807224" xlink:href="#m2304b15ba4" y="226.274224"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.220297" xlink:href="#m2304b15ba4" y="230.923348"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.452466" xlink:href="#m2304b15ba4" y="213.273741"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.435742" xlink:href="#m2304b15ba4" y="220.097505"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="231.022194" xlink:href="#m2304b15ba4" y="229.42629"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.927646" xlink:href="#m2304b15ba4" y="201.070969"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.265707" xlink:href="#m2304b15ba4" y="194.906753"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="335.061418" xlink:href="#m2304b15ba4" y="196.490713"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="334.157107" xlink:href="#m2304b15ba4" y="200.814991"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.650611" xlink:href="#m2304b15ba4" y="208.028014"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.405391" xlink:href="#m2304b15ba4" y="251.162582"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.226884" xlink:href="#m2304b15ba4" y="182.948834"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.191419" xlink:href="#m2304b15ba4" y="210.020614"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="239.916846" xlink:href="#m2304b15ba4" y="203.958503"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="358.405123" xlink:href="#m2304b15ba4" y="193.923746"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.687269" xlink:href="#m2304b15ba4" y="187.61962"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.006393" xlink:href="#m2304b15ba4" y="207.715719"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="254.60943" xlink:href="#m2304b15ba4" y="207.376186"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.390688" xlink:href="#m2304b15ba4" y="227.864641"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.90971" xlink:href="#m2304b15ba4" y="215.344823"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.307215" xlink:href="#m2304b15ba4" y="232.912393"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.186883" xlink:href="#m2304b15ba4" y="230.254823"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.735641" xlink:href="#m2304b15ba4" y="233.692773"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.649914" xlink:href="#m2304b15ba4" y="219.089273"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.947517" xlink:href="#m2304b15ba4" y="195.227955"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.286896" xlink:href="#m2304b15ba4" y="153.214699"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.077953" xlink:href="#m2304b15ba4" y="212.247907"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.355158" xlink:href="#m2304b15ba4" y="242.698579"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.000089" xlink:href="#m2304b15ba4" y="190.95333"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.647964" xlink:href="#m2304b15ba4" y="221.955521"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.447186" xlink:href="#m2304b15ba4" y="229.08005"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.412281" xlink:href="#m2304b15ba4" y="211.84498"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.550478" xlink:href="#m2304b15ba4" y="240.564367"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.85406" xlink:href="#m2304b15ba4" y="211.595229"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="239.268444" xlink:href="#m2304b15ba4" y="217.749835"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.948607" xlink:href="#m2304b15ba4" y="214.052117"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.182298" xlink:href="#m2304b15ba4" y="208.447958"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.381574" xlink:href="#m2304b15ba4" y="214.663653"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.194145" xlink:href="#m2304b15ba4" y="215.676506"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.803533" xlink:href="#m2304b15ba4" y="210.370573"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.883031" xlink:href="#m2304b15ba4" y="207.775068"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.822534" xlink:href="#m2304b15ba4" y="236.423353"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.379046" xlink:href="#m2304b15ba4" y="244.313827"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="332.116582" xlink:href="#m2304b15ba4" y="217.220433"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.191643" xlink:href="#m2304b15ba4" y="244.368163"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.235869" xlink:href="#m2304b15ba4" y="214.266877"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.012153" xlink:href="#m2304b15ba4" y="197.412812"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.986172" xlink:href="#m2304b15ba4" y="203.979189"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.445271" xlink:href="#m2304b15ba4" y="236.753774"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.105698" xlink:href="#m2304b15ba4" y="233.033197"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.019757" xlink:href="#m2304b15ba4" y="209.499634"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.449145" xlink:href="#m2304b15ba4" y="223.945697"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="324.386778" xlink:href="#m2304b15ba4" y="222.269775"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.287463" xlink:href="#m2304b15ba4" y="204.181252"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="245.425705" xlink:href="#m2304b15ba4" y="235.548277"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="343.419371" xlink:href="#m2304b15ba4" y="223.944447"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="356.626809" xlink:href="#m2304b15ba4" y="231.841633"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="333.392458" xlink:href="#m2304b15ba4" y="236.653964"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.370435" xlink:href="#m2304b15ba4" y="232.970148"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.507615" xlink:href="#m2304b15ba4" y="202.586249"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="329.364236" xlink:href="#m2304b15ba4" y="214.973956"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.137067" xlink:href="#m2304b15ba4" y="233.40738"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="334.80722" xlink:href="#m2304b15ba4" y="220.575812"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.948109" xlink:href="#m2304b15ba4" y="248.448385"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.843105" xlink:href="#m2304b15ba4" y="230.519594"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.746271" xlink:href="#m2304b15ba4" y="173.438424"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.092971" xlink:href="#m2304b15ba4" y="217.786828"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.540201" xlink:href="#m2304b15ba4" y="201.513153"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="353.062204" xlink:href="#m2304b15ba4" y="217.29667"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.311952" xlink:href="#m2304b15ba4" y="209.106249"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.224455" xlink:href="#m2304b15ba4" y="202.86749"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="356.214083" xlink:href="#m2304b15ba4" y="237.871409"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.532606" xlink:href="#m2304b15ba4" y="216.612538"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="254.036286" xlink:href="#m2304b15ba4" y="184.738469"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.608453" xlink:href="#m2304b15ba4" y="231.750911"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.190802" xlink:href="#m2304b15ba4" y="227.215509"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="358.173326" xlink:href="#m2304b15ba4" y="222.092287"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.798745" xlink:href="#m2304b15ba4" y="210.673323"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.982464" xlink:href="#m2304b15ba4" y="205.606626"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="357.503322" xlink:href="#m2304b15ba4" y="190.905249"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="343.168679" xlink:href="#m2304b15ba4" y="206.109935"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="355.70891" xlink:href="#m2304b15ba4" y="217.228652"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="324.555847" xlink:href="#m2304b15ba4" y="191.068491"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.296288" xlink:href="#m2304b15ba4" y="202.058602"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="357.086104" xlink:href="#m2304b15ba4" y="245.614454"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.516691" xlink:href="#m2304b15ba4" y="165.977909"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.199587" xlink:href="#m2304b15ba4" y="180.955557"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.890964" xlink:href="#m2304b15ba4" y="219.330642"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.177673" xlink:href="#m2304b15ba4" y="208.51738"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.096172" xlink:href="#m2304b15ba4" y="189.777697"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.079496" xlink:href="#m2304b15ba4" y="219.409576"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.396187" xlink:href="#m2304b15ba4" y="201.539035"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="259.579414" xlink:href="#m2304b15ba4" y="194.129346"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.862917" xlink:href="#m2304b15ba4" y="236.093553"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.174903" xlink:href="#m2304b15ba4" y="227.926171"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.696001" xlink:href="#m2304b15ba4" y="197.756114"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.351841" xlink:href="#m2304b15ba4" y="206.875873"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.101025" xlink:href="#m2304b15ba4" y="197.708828"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="355.116145" xlink:href="#m2304b15ba4" y="218.624847"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.98235" xlink:href="#m2304b15ba4" y="221.722303"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.401763" xlink:href="#m2304b15ba4" y="255.573062"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.254719" xlink:href="#m2304b15ba4" y="238.690808"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.671674" xlink:href="#m2304b15ba4" y="215.068091"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.351622" xlink:href="#m2304b15ba4" y="199.673767"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.23131" xlink:href="#m2304b15ba4" y="205.482668"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.598587" xlink:href="#m2304b15ba4" y="218.539191"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.116439" xlink:href="#m2304b15ba4" y="221.381077"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.881542" xlink:href="#m2304b15ba4" y="211.699843"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.45112" xlink:href="#m2304b15ba4" y="214.451419"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.030617" xlink:href="#m2304b15ba4" y="188.189999"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="259.784807" xlink:href="#m2304b15ba4" y="213.100473"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="246.883254" xlink:href="#m2304b15ba4" y="245.32867"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.436291" xlink:href="#m2304b15ba4" y="241.196651"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.600221" xlink:href="#m2304b15ba4" y="185.928565"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.775019" xlink:href="#m2304b15ba4" y="239.188977"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="372.413891" xlink:href="#m2304b15ba4" y="200.86295"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.801135" xlink:href="#m2304b15ba4" y="221.31378"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.62456" xlink:href="#m2304b15ba4" y="219.361214"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="331.391328" xlink:href="#m2304b15ba4" y="218.655829"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="252.5646" xlink:href="#m2304b15ba4" y="191.816578"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.244659" xlink:href="#m2304b15ba4" y="219.818268"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.988972" xlink:href="#m2304b15ba4" y="216.659722"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="350.712304" xlink:href="#m2304b15ba4" y="246.309909"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.069944" xlink:href="#m2304b15ba4" y="211.907528"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.423391" xlink:href="#m2304b15ba4" y="205.485358"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.010138" xlink:href="#m2304b15ba4" y="211.264918"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.703304" xlink:href="#m2304b15ba4" y="188.321654"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="331.703004" xlink:href="#m2304b15ba4" y="214.907607"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.210219" xlink:href="#m2304b15ba4" y="210.080246"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.022016" xlink:href="#m2304b15ba4" y="183.359621"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.014631" xlink:href="#m2304b15ba4" y="246.690281"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.063749" xlink:href="#m2304b15ba4" y="225.025342"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="357.716839" xlink:href="#m2304b15ba4" y="187.762057"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.961234" xlink:href="#m2304b15ba4" y="197.464643"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.03666" xlink:href="#m2304b15ba4" y="202.568074"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.495889" xlink:href="#m2304b15ba4" y="199.513515"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.55736" xlink:href="#m2304b15ba4" y="209.524089"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.793023" xlink:href="#m2304b15ba4" y="183.694371"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="245.149416" xlink:href="#m2304b15ba4" y="208.520368"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="333.692165" xlink:href="#m2304b15ba4" y="211.250631"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.468941" xlink:href="#m2304b15ba4" y="212.852618"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.035826" xlink:href="#m2304b15ba4" y="212.181294"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.526776" xlink:href="#m2304b15ba4" y="238.908942"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.961312" xlink:href="#m2304b15ba4" y="200.740674"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.106771" xlink:href="#m2304b15ba4" y="218.582707"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.690532" xlink:href="#m2304b15ba4" y="179.926081"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.283662" xlink:href="#m2304b15ba4" y="217.497879"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.169527" xlink:href="#m2304b15ba4" y="207.665818"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.858587" xlink:href="#m2304b15ba4" y="211.117277"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.440747" xlink:href="#m2304b15ba4" y="228.386029"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.766325" xlink:href="#m2304b15ba4" y="196.355691"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.730597" xlink:href="#m2304b15ba4" y="178.27974"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="250.651578" xlink:href="#m2304b15ba4" y="216.292589"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.346764" xlink:href="#m2304b15ba4" y="221.94948"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="223.161738" xlink:href="#m2304b15ba4" y="223.029569"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.457499" xlink:href="#m2304b15ba4" y="253.468765"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="243.293332" xlink:href="#m2304b15ba4" y="219.5207"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="259.41798" xlink:href="#m2304b15ba4" y="211.030237"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.890149" xlink:href="#m2304b15ba4" y="195.115793"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.238159" xlink:href="#m2304b15ba4" y="196.991055"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="345.193673" xlink:href="#m2304b15ba4" y="224.246682"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="253.311436" xlink:href="#m2304b15ba4" y="221.481095"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.852448" xlink:href="#m2304b15ba4" y="193.746675"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.927237" xlink:href="#m2304b15ba4" y="219.434585"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.353771" xlink:href="#m2304b15ba4" y="226.098585"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.154164" xlink:href="#m2304b15ba4" y="188.428135"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.641899" xlink:href="#m2304b15ba4" y="195.455804"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.206014" xlink:href="#m2304b15ba4" y="215.627923"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.881535" xlink:href="#m2304b15ba4" y="227.756793"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="365.288845" xlink:href="#m2304b15ba4" y="255.83523"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.503506" xlink:href="#m2304b15ba4" y="204.323869"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.238508" xlink:href="#m2304b15ba4" y="233.748121"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.444115" xlink:href="#m2304b15ba4" y="254.862094"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.828971" xlink:href="#m2304b15ba4" y="184.620554"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.430545" xlink:href="#m2304b15ba4" y="203.170238"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.940261" xlink:href="#m2304b15ba4" y="238.552362"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.810624" xlink:href="#m2304b15ba4" y="240.045147"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.411834" xlink:href="#m2304b15ba4" y="198.754957"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.287799" xlink:href="#m2304b15ba4" y="233.383818"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.269557" xlink:href="#m2304b15ba4" y="190.336233"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.019927" xlink:href="#m2304b15ba4" y="203.794106"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="324.689797" xlink:href="#m2304b15ba4" y="205.375389"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.47787" xlink:href="#m2304b15ba4" y="207.98703"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.677026" xlink:href="#m2304b15ba4" y="212.209273"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.088021" xlink:href="#m2304b15ba4" y="198.565878"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.599941" xlink:href="#m2304b15ba4" y="224.990791"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.91439" xlink:href="#m2304b15ba4" y="214.298151"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.648539" xlink:href="#m2304b15ba4" y="201.111458"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.484516" xlink:href="#m2304b15ba4" y="204.852804"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="368.40161" xlink:href="#m2304b15ba4" y="239.660739"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.830868" xlink:href="#m2304b15ba4" y="225.908111"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.227382" xlink:href="#m2304b15ba4" y="210.994491"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.99019" xlink:href="#m2304b15ba4" y="224.078691"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.17949" xlink:href="#m2304b15ba4" y="180.86176"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.8" xlink:href="#m2304b15ba4" y="223.784433"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="245.278177" xlink:href="#m2304b15ba4" y="219.211925"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.249689" xlink:href="#m2304b15ba4" y="200.765282"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.270812" xlink:href="#m2304b15ba4" y="209.455452"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.722666" xlink:href="#m2304b15ba4" y="218.876434"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="275.846959" xlink:href="#m2304b15ba4" y="230.978572"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.491336" xlink:href="#m2304b15ba4" y="210.030022"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.060427" xlink:href="#m2304b15ba4" y="195.42589"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.216436" xlink:href="#m2304b15ba4" y="206.513915"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.611288" xlink:href="#m2304b15ba4" y="231.408034"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.680021" xlink:href="#m2304b15ba4" y="181.611856"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.739689" xlink:href="#m2304b15ba4" y="244.642242"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.510818" xlink:href="#m2304b15ba4" y="247.337176"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="343.621299" xlink:href="#m2304b15ba4" y="196.980967"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="228.132485" xlink:href="#m2304b15ba4" y="211.528359"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.010783" xlink:href="#m2304b15ba4" y="226.880071"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.13182" xlink:href="#m2304b15ba4" y="237.7517"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.54704" xlink:href="#m2304b15ba4" y="170.048163"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.328393" xlink:href="#m2304b15ba4" y="213.681601"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.894669" xlink:href="#m2304b15ba4" y="205.422817"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.551576" xlink:href="#m2304b15ba4" y="209.705875"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.18798" xlink:href="#m2304b15ba4" y="207.390802"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="240.897477" xlink:href="#m2304b15ba4" y="205.30613"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="332.535543" xlink:href="#m2304b15ba4" y="201.498005"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.179642" xlink:href="#m2304b15ba4" y="223.429404"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.846998" xlink:href="#m2304b15ba4" y="221.774511"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="247.687852" xlink:href="#m2304b15ba4" y="250.472252"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.082502" xlink:href="#m2304b15ba4" y="231.450027"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.54447" xlink:href="#m2304b15ba4" y="210.631967"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.799282" xlink:href="#m2304b15ba4" y="195.308537"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="284.853759" xlink:href="#m2304b15ba4" y="204.139017"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.605856" xlink:href="#m2304b15ba4" y="222.745708"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.709872" xlink:href="#m2304b15ba4" y="241.010824"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.690645" xlink:href="#m2304b15ba4" y="270.991711"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="250.379008" xlink:href="#m2304b15ba4" y="193.195667"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="243.912796" xlink:href="#m2304b15ba4" y="227.666734"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.976292" xlink:href="#m2304b15ba4" y="224.879607"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.68096" xlink:href="#m2304b15ba4" y="213.394835"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.77915" xlink:href="#m2304b15ba4" y="243.830089"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="275.879425" xlink:href="#m2304b15ba4" y="222.925687"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.49682" xlink:href="#m2304b15ba4" y="175.935255"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="232.464534" xlink:href="#m2304b15ba4" y="205.993339"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.316427" xlink:href="#m2304b15ba4" y="208.886867"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.174069" xlink:href="#m2304b15ba4" y="247.333391"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.064876" xlink:href="#m2304b15ba4" y="171.576682"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.127288" xlink:href="#m2304b15ba4" y="244.171339"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.355765" xlink:href="#m2304b15ba4" y="177.93797"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.129102" xlink:href="#m2304b15ba4" y="257.878109"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="205.367995" xlink:href="#m2304b15ba4" y="188.173764"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="358.571559" xlink:href="#m2304b15ba4" y="183.962525"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.839024" xlink:href="#m2304b15ba4" y="232.323301"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.061962" xlink:href="#m2304b15ba4" y="207.632909"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.533111" xlink:href="#m2304b15ba4" y="205.159885"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.197234" xlink:href="#m2304b15ba4" y="232.113131"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.438232" xlink:href="#m2304b15ba4" y="244.692529"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="229.405823" xlink:href="#m2304b15ba4" y="242.090803"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="362.089569" xlink:href="#m2304b15ba4" y="205.288037"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.618483" xlink:href="#m2304b15ba4" y="217.685289"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.253596" xlink:href="#m2304b15ba4" y="227.17316"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.777585" xlink:href="#m2304b15ba4" y="196.857993"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="344.978617" xlink:href="#m2304b15ba4" y="205.940255"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.477536" xlink:href="#m2304b15ba4" y="230.958162"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.92654" xlink:href="#m2304b15ba4" y="239.78379"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.333791" xlink:href="#m2304b15ba4" y="205.639418"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="334.441107" xlink:href="#m2304b15ba4" y="226.644151"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.550109" xlink:href="#m2304b15ba4" y="214.035744"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.379818" xlink:href="#m2304b15ba4" y="184.78928"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.849963" xlink:href="#m2304b15ba4" y="206.053901"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.614721" xlink:href="#m2304b15ba4" y="233.072887"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="369.846901" xlink:href="#m2304b15ba4" y="212.818908"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.855487" xlink:href="#m2304b15ba4" y="234.86237"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.79523" xlink:href="#m2304b15ba4" y="184.151261"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="332.03528" xlink:href="#m2304b15ba4" y="227.119259"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.366289" xlink:href="#m2304b15ba4" y="211.896039"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.087699" xlink:href="#m2304b15ba4" y="209.906895"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.257851" xlink:href="#m2304b15ba4" y="212.846841"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.189811" xlink:href="#m2304b15ba4" y="254.779269"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="252.86853" xlink:href="#m2304b15ba4" y="244.639137"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="348.923434" xlink:href="#m2304b15ba4" y="224.956535"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.371485" xlink:href="#m2304b15ba4" y="209.67525"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.162226" xlink:href="#m2304b15ba4" y="218.728028"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.790812" xlink:href="#m2304b15ba4" y="234.95152"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.272679" xlink:href="#m2304b15ba4" y="242.698802"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.970026" xlink:href="#m2304b15ba4" y="223.950839"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.566353" xlink:href="#m2304b15ba4" y="225.275826"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.67825" xlink:href="#m2304b15ba4" y="205.845838"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.029821" xlink:href="#m2304b15ba4" y="222.461106"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.868069" xlink:href="#m2304b15ba4" y="204.066388"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.118899" xlink:href="#m2304b15ba4" y="227.774065"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.690844" xlink:href="#m2304b15ba4" y="221.067962"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.526041" xlink:href="#m2304b15ba4" y="222.891318"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.729894" xlink:href="#m2304b15ba4" y="231.490866"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.256991" xlink:href="#m2304b15ba4" y="203.622651"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.833645" xlink:href="#m2304b15ba4" y="232.109201"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.904855" xlink:href="#m2304b15ba4" y="226.328502"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.203305" xlink:href="#m2304b15ba4" y="217.447769"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.723309" xlink:href="#m2304b15ba4" y="241.688117"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.884818" xlink:href="#m2304b15ba4" y="222.433712"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.859027" xlink:href="#m2304b15ba4" y="230.083866"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.09433" xlink:href="#m2304b15ba4" y="223.685453"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.334351" xlink:href="#m2304b15ba4" y="217.186574"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.70169" xlink:href="#m2304b15ba4" y="231.83829"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.081731" xlink:href="#m2304b15ba4" y="220.3575"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.091589" xlink:href="#m2304b15ba4" y="190.088359"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="368.317841" xlink:href="#m2304b15ba4" y="216.510811"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.367711" xlink:href="#m2304b15ba4" y="193.323809"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.761647" xlink:href="#m2304b15ba4" y="209.13941"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="319.408902" xlink:href="#m2304b15ba4" y="200.67162"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.678183" xlink:href="#m2304b15ba4" y="231.334288"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.253396" xlink:href="#m2304b15ba4" y="213.922838"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.842267" xlink:href="#m2304b15ba4" y="213.348524"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="209.042819" xlink:href="#m2304b15ba4" y="228.12999"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.844753" xlink:href="#m2304b15ba4" y="232.292001"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="238.309145" xlink:href="#m2304b15ba4" y="245.507255"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.810277" xlink:href="#m2304b15ba4" y="186.376435"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.038047" xlink:href="#m2304b15ba4" y="235.253577"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="348.969446" xlink:href="#m2304b15ba4" y="189.344823"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="329.819705" xlink:href="#m2304b15ba4" y="225.256365"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.5103" xlink:href="#m2304b15ba4" y="233.077367"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.914061" xlink:href="#m2304b15ba4" y="203.674121"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.863892" xlink:href="#m2304b15ba4" y="228.4976"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.914107" xlink:href="#m2304b15ba4" y="204.744513"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.116482" xlink:href="#m2304b15ba4" y="222.589673"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.383929" xlink:href="#m2304b15ba4" y="206.487595"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.277205" xlink:href="#m2304b15ba4" y="235.170084"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.944097" xlink:href="#m2304b15ba4" y="199.539249"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.528804" xlink:href="#m2304b15ba4" y="206.338141"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.441737" xlink:href="#m2304b15ba4" y="234.209084"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="248.615556" xlink:href="#m2304b15ba4" y="163.669873"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="339.410832" xlink:href="#m2304b15ba4" y="205.305564"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.861846" xlink:href="#m2304b15ba4" y="170.648752"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.065687" xlink:href="#m2304b15ba4" y="184.314697"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.313466" xlink:href="#m2304b15ba4" y="219.738929"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="235.484547" xlink:href="#m2304b15ba4" y="224.162981"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.713642" xlink:href="#m2304b15ba4" y="223.988492"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.659152" xlink:href="#m2304b15ba4" y="252.234565"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.299609" xlink:href="#m2304b15ba4" y="229.777535"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.830012" xlink:href="#m2304b15ba4" y="211.114033"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.322177" xlink:href="#m2304b15ba4" y="185.78604"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.391887" xlink:href="#m2304b15ba4" y="231.300883"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.214865" xlink:href="#m2304b15ba4" y="198.535279"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.6919" xlink:href="#m2304b15ba4" y="240.801348"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.414073" xlink:href="#m2304b15ba4" y="227.609136"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.022827" xlink:href="#m2304b15ba4" y="225.061284"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.406876" xlink:href="#m2304b15ba4" y="208.638141"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.525433" xlink:href="#m2304b15ba4" y="206.945269"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.652433" xlink:href="#m2304b15ba4" y="196.945633"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.286311" xlink:href="#m2304b15ba4" y="200.737428"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.022795" xlink:href="#m2304b15ba4" y="211.185269"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.468853" xlink:href="#m2304b15ba4" y="208.270774"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.117542" xlink:href="#m2304b15ba4" y="184.547092"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.803637" xlink:href="#m2304b15ba4" y="226.116338"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.200312" xlink:href="#m2304b15ba4" y="200.660379"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.043389" xlink:href="#m2304b15ba4" y="251.80125"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="244.311802" xlink:href="#m2304b15ba4" y="207.855582"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.496321" xlink:href="#m2304b15ba4" y="225.568341"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.717797" xlink:href="#m2304b15ba4" y="215.949091"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="240.181371" xlink:href="#m2304b15ba4" y="195.406292"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.747887" xlink:href="#m2304b15ba4" y="212.740053"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="222.119719" xlink:href="#m2304b15ba4" y="198.473287"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.070778" xlink:href="#m2304b15ba4" y="186.819457"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.45163" xlink:href="#m2304b15ba4" y="208.295939"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="241.522431" xlink:href="#m2304b15ba4" y="192.813387"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.269452" xlink:href="#m2304b15ba4" y="222.465907"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="247.512546" xlink:href="#m2304b15ba4" y="216.162556"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="348.599572" xlink:href="#m2304b15ba4" y="226.347864"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.520979" xlink:href="#m2304b15ba4" y="195.349044"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.580205" xlink:href="#m2304b15ba4" y="207.800991"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.985327" xlink:href="#m2304b15ba4" y="226.043242"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.748811" xlink:href="#m2304b15ba4" y="212.937557"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.826236" xlink:href="#m2304b15ba4" y="195.376946"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.744469" xlink:href="#m2304b15ba4" y="216.777506"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.527652" xlink:href="#m2304b15ba4" y="234.78887"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.996735" xlink:href="#m2304b15ba4" y="213.388147"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="332.1717" xlink:href="#m2304b15ba4" y="255.215199"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="342.71715" xlink:href="#m2304b15ba4" y="200.778341"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.822683" xlink:href="#m2304b15ba4" y="224.342286"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="275.803612" xlink:href="#m2304b15ba4" y="225.292353"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="259.044938" xlink:href="#m2304b15ba4" y="198.661226"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.039887" xlink:href="#m2304b15ba4" y="243.030225"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.743887" xlink:href="#m2304b15ba4" y="177.447447"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="237.899354" xlink:href="#m2304b15ba4" y="225.508792"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.71761" xlink:href="#m2304b15ba4" y="226.360369"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.590442" xlink:href="#m2304b15ba4" y="195.77975"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.109189" xlink:href="#m2304b15ba4" y="201.967834"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.204261" xlink:href="#m2304b15ba4" y="167.465652"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.032189" xlink:href="#m2304b15ba4" y="220.181878"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="248.332276" xlink:href="#m2304b15ba4" y="218.384051"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.129654" xlink:href="#m2304b15ba4" y="245.290456"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.184692" xlink:href="#m2304b15ba4" y="222.575625"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.63568" xlink:href="#m2304b15ba4" y="230.28434"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="351.340166" xlink:href="#m2304b15ba4" y="224.885587"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.377836" xlink:href="#m2304b15ba4" y="250.534918"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.21473" xlink:href="#m2304b15ba4" y="183.11997"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.802802" xlink:href="#m2304b15ba4" y="244.048749"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="344.447833" xlink:href="#m2304b15ba4" y="271.483615"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="350.914694" xlink:href="#m2304b15ba4" y="239.530804"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.315966" xlink:href="#m2304b15ba4" y="227.956023"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.064077" xlink:href="#m2304b15ba4" y="238.76117"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="227.33486" xlink:href="#m2304b15ba4" y="194.25359"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="299.20859" xlink:href="#m2304b15ba4" y="218.729216"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.984535" xlink:href="#m2304b15ba4" y="215.497365"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.244085" xlink:href="#m2304b15ba4" y="203.914243"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.754693" xlink:href="#m2304b15ba4" y="210.336952"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="206.43446" xlink:href="#m2304b15ba4" y="196.624368"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.754289" xlink:href="#m2304b15ba4" y="237.967656"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.944901" xlink:href="#m2304b15ba4" y="226.840858"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.074204" xlink:href="#m2304b15ba4" y="202.813851"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.292242" xlink:href="#m2304b15ba4" y="266.184178"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.354417" xlink:href="#m2304b15ba4" y="243.228653"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.17065" xlink:href="#m2304b15ba4" y="206.080354"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.736212" xlink:href="#m2304b15ba4" y="225.508931"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.400077" xlink:href="#m2304b15ba4" y="197.465071"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.819377" xlink:href="#m2304b15ba4" y="199.97823"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.371482" xlink:href="#m2304b15ba4" y="239.722239"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.1383" xlink:href="#m2304b15ba4" y="207.94819"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.73563" xlink:href="#m2304b15ba4" y="192.206382"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.394581" xlink:href="#m2304b15ba4" y="213.080799"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.634775" xlink:href="#m2304b15ba4" y="235.353805"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.415843" xlink:href="#m2304b15ba4" y="198.588079"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.495091" xlink:href="#m2304b15ba4" y="203.418594"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.576981" xlink:href="#m2304b15ba4" y="205.256306"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.470518" xlink:href="#m2304b15ba4" y="201.82441"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.020266" xlink:href="#m2304b15ba4" y="275.293335"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.946571" xlink:href="#m2304b15ba4" y="198.557436"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.842815" xlink:href="#m2304b15ba4" y="180.19899"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.623387" xlink:href="#m2304b15ba4" y="207.354558"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.030038" xlink:href="#m2304b15ba4" y="212.183966"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.77603" xlink:href="#m2304b15ba4" y="202.210514"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.205423" xlink:href="#m2304b15ba4" y="209.303136"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.242703" xlink:href="#m2304b15ba4" y="203.094731"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.180494" xlink:href="#m2304b15ba4" y="215.970874"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="360.681811" xlink:href="#m2304b15ba4" y="231.180756"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.0088" xlink:href="#m2304b15ba4" y="235.88559"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="223.873302" xlink:href="#m2304b15ba4" y="235.764196"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.657326" xlink:href="#m2304b15ba4" y="243.186243"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.560445" xlink:href="#m2304b15ba4" y="237.141292"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.432383" xlink:href="#m2304b15ba4" y="181.126931"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.485913" xlink:href="#m2304b15ba4" y="201.068906"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.970259" xlink:href="#m2304b15ba4" y="228.375542"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.075365" xlink:href="#m2304b15ba4" y="223.729775"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.908739" xlink:href="#m2304b15ba4" y="213.771361"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="373.363499" xlink:href="#m2304b15ba4" y="228.979792"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.079658" xlink:href="#m2304b15ba4" y="214.663166"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.502997" xlink:href="#m2304b15ba4" y="200.603438"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="221.048711" xlink:href="#m2304b15ba4" y="216.707706"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.348095" xlink:href="#m2304b15ba4" y="209.346888"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="229.868425" xlink:href="#m2304b15ba4" y="198.447468"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.72167" xlink:href="#m2304b15ba4" y="221.388209"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.268275" xlink:href="#m2304b15ba4" y="210.361146"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.204814" xlink:href="#m2304b15ba4" y="222.125676"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="351.539475" xlink:href="#m2304b15ba4" y="216.564872"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="327.418378" xlink:href="#m2304b15ba4" y="222.429659"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.940035" xlink:href="#m2304b15ba4" y="226.471623"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.60963" xlink:href="#m2304b15ba4" y="212.560505"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="331.766448" xlink:href="#m2304b15ba4" y="204.782403"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.270431" xlink:href="#m2304b15ba4" y="213.103172"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.193553" xlink:href="#m2304b15ba4" y="206.125206"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.553818" xlink:href="#m2304b15ba4" y="230.611049"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.756071" xlink:href="#m2304b15ba4" y="239.833957"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.452109" xlink:href="#m2304b15ba4" y="207.742539"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.148111" xlink:href="#m2304b15ba4" y="202.379948"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="209.157941" xlink:href="#m2304b15ba4" y="215.012826"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="344.23183" xlink:href="#m2304b15ba4" y="189.308892"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.121479" xlink:href="#m2304b15ba4" y="198.027564"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.719192" xlink:href="#m2304b15ba4" y="162.924697"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.344448" xlink:href="#m2304b15ba4" y="219.976009"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.830097" xlink:href="#m2304b15ba4" y="235.777206"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.861835" xlink:href="#m2304b15ba4" y="230.654708"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.849213" xlink:href="#m2304b15ba4" y="227.196857"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.255912" xlink:href="#m2304b15ba4" y="206.574579"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="382.557659" xlink:href="#m2304b15ba4" y="258.729758"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.804841" xlink:href="#m2304b15ba4" y="189.89269"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.862884" xlink:href="#m2304b15ba4" y="220.738073"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.53882" xlink:href="#m2304b15ba4" y="220.886512"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.215443" xlink:href="#m2304b15ba4" y="237.370995"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.677506" xlink:href="#m2304b15ba4" y="218.261666"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.600531" xlink:href="#m2304b15ba4" y="215.737853"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.09055" xlink:href="#m2304b15ba4" y="218.41451"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.721638" xlink:href="#m2304b15ba4" y="209.286627"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.611408" xlink:href="#m2304b15ba4" y="227.674714"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.942599" xlink:href="#m2304b15ba4" y="233.737152"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.366901" xlink:href="#m2304b15ba4" y="205.143103"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.302641" xlink:href="#m2304b15ba4" y="214.046384"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="244.404326" xlink:href="#m2304b15ba4" y="212.095815"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.995283" xlink:href="#m2304b15ba4" y="195.03126"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.36627" xlink:href="#m2304b15ba4" y="236.246775"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="324.206433" xlink:href="#m2304b15ba4" y="232.933761"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="339.748836" xlink:href="#m2304b15ba4" y="191.107051"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="252.036342" xlink:href="#m2304b15ba4" y="245.36109"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="231.41656" xlink:href="#m2304b15ba4" y="241.92636"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.814175" xlink:href="#m2304b15ba4" y="199.806336"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.896534" xlink:href="#m2304b15ba4" y="211.283636"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.357565" xlink:href="#m2304b15ba4" y="213.916404"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="329.154298" xlink:href="#m2304b15ba4" y="217.814856"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.410661" xlink:href="#m2304b15ba4" y="215.380903"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="351.662468" xlink:href="#m2304b15ba4" y="217.82382"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.987576" xlink:href="#m2304b15ba4" y="189.162234"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.616233" xlink:href="#m2304b15ba4" y="223.883333"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="240.72853" xlink:href="#m2304b15ba4" y="219.195196"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.397328" xlink:href="#m2304b15ba4" y="180.469914"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.044622" xlink:href="#m2304b15ba4" y="215.455308"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.405464" xlink:href="#m2304b15ba4" y="171.806075"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.550456" xlink:href="#m2304b15ba4" y="218.078598"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="340.959418" xlink:href="#m2304b15ba4" y="188.925183"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="218.425384" xlink:href="#m2304b15ba4" y="248.775812"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.195295" xlink:href="#m2304b15ba4" y="212.95784"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="222.636828" xlink:href="#m2304b15ba4" y="247.372577"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.208569" xlink:href="#m2304b15ba4" y="199.279805"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="334.885806" xlink:href="#m2304b15ba4" y="240.014783"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.301338" xlink:href="#m2304b15ba4" y="210.381363"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="253.738071" xlink:href="#m2304b15ba4" y="221.587478"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.232029" xlink:href="#m2304b15ba4" y="238.932423"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.722688" xlink:href="#m2304b15ba4" y="248.063328"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.295269" xlink:href="#m2304b15ba4" y="226.118601"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.626142" xlink:href="#m2304b15ba4" y="181.535537"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.639798" xlink:href="#m2304b15ba4" y="221.811004"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.116754" xlink:href="#m2304b15ba4" y="197.839013"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.042214" xlink:href="#m2304b15ba4" y="217.129449"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.358558" xlink:href="#m2304b15ba4" y="198.64081"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="344.391662" xlink:href="#m2304b15ba4" y="252.172845"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.737488" xlink:href="#m2304b15ba4" y="223.983128"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.819711" xlink:href="#m2304b15ba4" y="197.201771"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.133593" xlink:href="#m2304b15ba4" y="219.232448"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="212.282417" xlink:href="#m2304b15ba4" y="217.711815"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="333.476667" xlink:href="#m2304b15ba4" y="224.523146"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.726318" xlink:href="#m2304b15ba4" y="193.242288"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.511286" xlink:href="#m2304b15ba4" y="210.109216"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.320812" xlink:href="#m2304b15ba4" y="215.128359"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.735967" xlink:href="#m2304b15ba4" y="203.26752"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.52993" xlink:href="#m2304b15ba4" y="204.353146"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.231965" xlink:href="#m2304b15ba4" y="211.790776"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.250204" xlink:href="#m2304b15ba4" y="185.368776"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="218.600768" xlink:href="#m2304b15ba4" y="217.193693"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.858827" xlink:href="#m2304b15ba4" y="210.493995"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.527216" xlink:href="#m2304b15ba4" y="228.730461"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.525022" xlink:href="#m2304b15ba4" y="213.027719"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="360.364716" xlink:href="#m2304b15ba4" y="184.562322"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.755108" xlink:href="#m2304b15ba4" y="228.736501"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.520258" xlink:href="#m2304b15ba4" y="238.445138"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="237.477363" xlink:href="#m2304b15ba4" y="196.264159"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="271.578953" xlink:href="#m2304b15ba4" y="218.94557"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.56846" xlink:href="#m2304b15ba4" y="214.099117"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.694149" xlink:href="#m2304b15ba4" y="216.893243"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.187124" xlink:href="#m2304b15ba4" y="214.43339"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.479544" xlink:href="#m2304b15ba4" y="199.159492"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.274936" xlink:href="#m2304b15ba4" y="232.614659"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.902534" xlink:href="#m2304b15ba4" y="236.033127"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="235.916411" xlink:href="#m2304b15ba4" y="214.317631"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.398985" xlink:href="#m2304b15ba4" y="247.807506"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.080038" xlink:href="#m2304b15ba4" y="243.18646"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.312106" xlink:href="#m2304b15ba4" y="179.039674"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.410975" xlink:href="#m2304b15ba4" y="201.002127"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.097701" xlink:href="#m2304b15ba4" y="216.199118"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.966694" xlink:href="#m2304b15ba4" y="191.487463"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.95385" xlink:href="#m2304b15ba4" y="236.603865"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="331.911788" xlink:href="#m2304b15ba4" y="222.248942"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="231.961547" xlink:href="#m2304b15ba4" y="203.655619"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.819508" xlink:href="#m2304b15ba4" y="198.364701"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.2704" xlink:href="#m2304b15ba4" y="205.844246"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.632624" xlink:href="#m2304b15ba4" y="266.316528"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.240368" xlink:href="#m2304b15ba4" y="235.168026"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.95134" xlink:href="#m2304b15ba4" y="206.554052"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.170834" xlink:href="#m2304b15ba4" y="223.04784"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.630741" xlink:href="#m2304b15ba4" y="165.703414"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.486596" xlink:href="#m2304b15ba4" y="197.654146"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="196.504965" xlink:href="#m2304b15ba4" y="204.949979"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.803305" xlink:href="#m2304b15ba4" y="238.115601"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.424992" xlink:href="#m2304b15ba4" y="216.698875"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.086871" xlink:href="#m2304b15ba4" y="211.224162"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.077213" xlink:href="#m2304b15ba4" y="193.669884"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.597676" xlink:href="#m2304b15ba4" y="198.553604"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.487231" xlink:href="#m2304b15ba4" y="195.546814"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.970935" xlink:href="#m2304b15ba4" y="234.293458"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.1779" xlink:href="#m2304b15ba4" y="188.039396"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.062929" xlink:href="#m2304b15ba4" y="243.332529"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.413713" xlink:href="#m2304b15ba4" y="226.611108"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="244.966089" xlink:href="#m2304b15ba4" y="207.470732"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.72113" xlink:href="#m2304b15ba4" y="218.967854"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.602461" xlink:href="#m2304b15ba4" y="235.91953"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.914542" xlink:href="#m2304b15ba4" y="232.266687"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.646802" xlink:href="#m2304b15ba4" y="246.655436"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.082132" xlink:href="#m2304b15ba4" y="205.466902"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.620143" xlink:href="#m2304b15ba4" y="191.040737"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="241.393326" xlink:href="#m2304b15ba4" y="217.987791"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.930791" xlink:href="#m2304b15ba4" y="223.926907"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.915619" xlink:href="#m2304b15ba4" y="245.151994"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="238.747659" xlink:href="#m2304b15ba4" y="197.918602"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="252.974935" xlink:href="#m2304b15ba4" y="172.216174"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.805891" xlink:href="#m2304b15ba4" y="251.589625"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="324.216014" xlink:href="#m2304b15ba4" y="237.055972"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.92616" xlink:href="#m2304b15ba4" y="229.455942"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.314283" xlink:href="#m2304b15ba4" y="227.173495"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.452531" xlink:href="#m2304b15ba4" y="211.49855"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.879785" xlink:href="#m2304b15ba4" y="184.037859"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="336.865882" xlink:href="#m2304b15ba4" y="196.029774"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="246.373252" xlink:href="#m2304b15ba4" y="205.553572"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.117328" xlink:href="#m2304b15ba4" y="230.333788"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.82291" xlink:href="#m2304b15ba4" y="238.168639"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.934011" xlink:href="#m2304b15ba4" y="231.776151"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.407109" xlink:href="#m2304b15ba4" y="185.348277"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.045233" xlink:href="#m2304b15ba4" y="217.222517"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.471243" xlink:href="#m2304b15ba4" y="224.847358"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.14019" xlink:href="#m2304b15ba4" y="219.638363"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="349.338554" xlink:href="#m2304b15ba4" y="199.672559"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.38129" xlink:href="#m2304b15ba4" y="241.994424"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.155125" xlink:href="#m2304b15ba4" y="187.985492"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.931511" xlink:href="#m2304b15ba4" y="212.90177"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.393825" xlink:href="#m2304b15ba4" y="220.283611"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.303792" xlink:href="#m2304b15ba4" y="207.231647"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.204145" xlink:href="#m2304b15ba4" y="211.675738"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.496749" xlink:href="#m2304b15ba4" y="222.81509"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.265771" xlink:href="#m2304b15ba4" y="221.003671"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.456645" xlink:href="#m2304b15ba4" y="233.203478"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.380891" xlink:href="#m2304b15ba4" y="203.003463"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.778426" xlink:href="#m2304b15ba4" y="226.533477"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="339.262333" xlink:href="#m2304b15ba4" y="234.933917"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.271623" xlink:href="#m2304b15ba4" y="212.715902"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="339.510151" xlink:href="#m2304b15ba4" y="189.683003"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.71488" xlink:href="#m2304b15ba4" y="216.957224"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.92271" xlink:href="#m2304b15ba4" y="228.040405"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.738792" xlink:href="#m2304b15ba4" y="208.002859"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.319178" xlink:href="#m2304b15ba4" y="177.653093"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.53751" xlink:href="#m2304b15ba4" y="244.747729"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.857901" xlink:href="#m2304b15ba4" y="208.432385"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="275.738695" xlink:href="#m2304b15ba4" y="211.939285"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="345.492679" xlink:href="#m2304b15ba4" y="193.001631"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.495705" xlink:href="#m2304b15ba4" y="196.379998"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="220.012745" xlink:href="#m2304b15ba4" y="219.69684"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.476004" xlink:href="#m2304b15ba4" y="249.353442"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.049316" xlink:href="#m2304b15ba4" y="200.030037"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.50972" xlink:href="#m2304b15ba4" y="232.536815"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.770672" xlink:href="#m2304b15ba4" y="234.74546"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.02027" xlink:href="#m2304b15ba4" y="193.262659"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="252.483974" xlink:href="#m2304b15ba4" y="234.034837"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.18919" xlink:href="#m2304b15ba4" y="188.223674"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.562048" xlink:href="#m2304b15ba4" y="209.350275"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.979194" xlink:href="#m2304b15ba4" y="209.681456"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="254.276585" xlink:href="#m2304b15ba4" y="209.916157"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.860647" xlink:href="#m2304b15ba4" y="248.440788"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.371835" xlink:href="#m2304b15ba4" y="251.172495"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.679442" xlink:href="#m2304b15ba4" y="211.73205"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.161451" xlink:href="#m2304b15ba4" y="204.753454"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.441091" xlink:href="#m2304b15ba4" y="214.364302"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.165909" xlink:href="#m2304b15ba4" y="232.266383"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="230.263411" xlink:href="#m2304b15ba4" y="215.625342"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.410799" xlink:href="#m2304b15ba4" y="217.624276"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.518932" xlink:href="#m2304b15ba4" y="234.95173"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="234.139419" xlink:href="#m2304b15ba4" y="195.923351"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="232.15922" xlink:href="#m2304b15ba4" y="250.259466"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.625815" xlink:href="#m2304b15ba4" y="204.3429"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.31211" xlink:href="#m2304b15ba4" y="208.390397"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.935239" xlink:href="#m2304b15ba4" y="196.007705"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.776997" xlink:href="#m2304b15ba4" y="235.905175"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.15148" xlink:href="#m2304b15ba4" y="213.992138"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="341.304665" xlink:href="#m2304b15ba4" y="173.010934"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.033205" xlink:href="#m2304b15ba4" y="202.890929"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.038554" xlink:href="#m2304b15ba4" y="214.008492"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="331.631182" xlink:href="#m2304b15ba4" y="205.324607"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="319.674821" xlink:href="#m2304b15ba4" y="214.293699"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.304" xlink:href="#m2304b15ba4" y="172.620219"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.930577" xlink:href="#m2304b15ba4" y="196.524003"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="203.360434" xlink:href="#m2304b15ba4" y="217.695176"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="363.784029" xlink:href="#m2304b15ba4" y="211.003838"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="243.00754" xlink:href="#m2304b15ba4" y="223.7378"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.041114" xlink:href="#m2304b15ba4" y="192.044967"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="372.336149" xlink:href="#m2304b15ba4" y="243.840874"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.910687" xlink:href="#m2304b15ba4" y="247.773823"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.955586" xlink:href="#m2304b15ba4" y="187.117448"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="246.522351" xlink:href="#m2304b15ba4" y="173.368228"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="237.603591" xlink:href="#m2304b15ba4" y="206.727563"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.94043" xlink:href="#m2304b15ba4" y="213.767789"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.540291" xlink:href="#m2304b15ba4" y="202.9861"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.981518" xlink:href="#m2304b15ba4" y="228.81166"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.453783" xlink:href="#m2304b15ba4" y="212.609378"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.61414" xlink:href="#m2304b15ba4" y="215.229608"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.254701" xlink:href="#m2304b15ba4" y="203.594028"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="248.383938" xlink:href="#m2304b15ba4" y="246.848371"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.978407" xlink:href="#m2304b15ba4" y="226.039288"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.647116" xlink:href="#m2304b15ba4" y="199.269087"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.666283" xlink:href="#m2304b15ba4" y="229.376758"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.808217" xlink:href="#m2304b15ba4" y="235.668555"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="364.281771" xlink:href="#m2304b15ba4" y="175.566971"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.540842" xlink:href="#m2304b15ba4" y="215.245264"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.062916" xlink:href="#m2304b15ba4" y="227.462579"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="336.188522" xlink:href="#m2304b15ba4" y="249.508935"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.052503" xlink:href="#m2304b15ba4" y="201.558942"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.360548" xlink:href="#m2304b15ba4" y="202.157104"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.231185" xlink:href="#m2304b15ba4" y="221.91544"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.639016" xlink:href="#m2304b15ba4" y="237.824158"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.791134" xlink:href="#m2304b15ba4" y="216.486079"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.220159" xlink:href="#m2304b15ba4" y="232.54995"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.91848" xlink:href="#m2304b15ba4" y="234.653453"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.178219" xlink:href="#m2304b15ba4" y="218.043612"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.155459" xlink:href="#m2304b15ba4" y="236.81753"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.306015" xlink:href="#m2304b15ba4" y="211.116351"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.297682" xlink:href="#m2304b15ba4" y="203.961748"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.665385" xlink:href="#m2304b15ba4" y="232.624722"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.666515" xlink:href="#m2304b15ba4" y="243.091253"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.159186" xlink:href="#m2304b15ba4" y="185.086664"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.710132" xlink:href="#m2304b15ba4" y="234.617351"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="243.300512" xlink:href="#m2304b15ba4" y="229.066866"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.455337" xlink:href="#m2304b15ba4" y="211.78226"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.977635" xlink:href="#m2304b15ba4" y="204.132486"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="335.483548" xlink:href="#m2304b15ba4" y="221.075074"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.530639" xlink:href="#m2304b15ba4" y="206.876272"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="314.227204" xlink:href="#m2304b15ba4" y="223.939526"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.826391" xlink:href="#m2304b15ba4" y="235.229179"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.768354" xlink:href="#m2304b15ba4" y="187.758926"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.75643" xlink:href="#m2304b15ba4" y="166.728856"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.119085" xlink:href="#m2304b15ba4" y="182.419803"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="376.109293" xlink:href="#m2304b15ba4" y="213.192229"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="222.451579" xlink:href="#m2304b15ba4" y="179.69798"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.473877" xlink:href="#m2304b15ba4" y="208.95707"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="253.580506" xlink:href="#m2304b15ba4" y="225.450268"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.819271" xlink:href="#m2304b15ba4" y="206.765684"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.188737" xlink:href="#m2304b15ba4" y="217.868972"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.044822" xlink:href="#m2304b15ba4" y="235.46574"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.25764" xlink:href="#m2304b15ba4" y="233.786775"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="352.061551" xlink:href="#m2304b15ba4" y="200.119376"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.891175" xlink:href="#m2304b15ba4" y="252.561333"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.391249" xlink:href="#m2304b15ba4" y="204.038093"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="313.207498" xlink:href="#m2304b15ba4" y="248.265755"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.535318" xlink:href="#m2304b15ba4" y="257.999294"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.529094" xlink:href="#m2304b15ba4" y="252.409163"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="236.094084" xlink:href="#m2304b15ba4" y="177.058073"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.036767" xlink:href="#m2304b15ba4" y="219.885433"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.235313" xlink:href="#m2304b15ba4" y="214.285653"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="241.364215" xlink:href="#m2304b15ba4" y="187.89875"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.721527" xlink:href="#m2304b15ba4" y="197.503241"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="350.156283" xlink:href="#m2304b15ba4" y="243.551804"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.71861" xlink:href="#m2304b15ba4" y="198.793674"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.813552" xlink:href="#m2304b15ba4" y="212.353211"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.926483" xlink:href="#m2304b15ba4" y="222.765226"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="272.276815" xlink:href="#m2304b15ba4" y="215.51904"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.488442" xlink:href="#m2304b15ba4" y="190.659722"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="244.429371" xlink:href="#m2304b15ba4" y="233.542136"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="280.577782" xlink:href="#m2304b15ba4" y="208.062464"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.80829" xlink:href="#m2304b15ba4" y="216.191213"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.628456" xlink:href="#m2304b15ba4" y="251.583859"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.997433" xlink:href="#m2304b15ba4" y="231.884613"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.527473" xlink:href="#m2304b15ba4" y="212.174372"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="259.465839" xlink:href="#m2304b15ba4" y="190.312627"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.905008" xlink:href="#m2304b15ba4" y="196.173646"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.824652" xlink:href="#m2304b15ba4" y="204.175192"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="355.126756" xlink:href="#m2304b15ba4" y="232.142458"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.261" xlink:href="#m2304b15ba4" y="180.335963"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.031861" xlink:href="#m2304b15ba4" y="211.738239"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.89178" xlink:href="#m2304b15ba4" y="235.926037"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="265.420724" xlink:href="#m2304b15ba4" y="219.621519"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.445225" xlink:href="#m2304b15ba4" y="198.254281"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.372211" xlink:href="#m2304b15ba4" y="215.849174"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="237.160987" xlink:href="#m2304b15ba4" y="198.440079"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.301796" xlink:href="#m2304b15ba4" y="194.14686"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="284.911604" xlink:href="#m2304b15ba4" y="208.069492"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="242.309485" xlink:href="#m2304b15ba4" y="232.982512"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.024853" xlink:href="#m2304b15ba4" y="213.317998"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="343.455133" xlink:href="#m2304b15ba4" y="215.105716"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.090241" xlink:href="#m2304b15ba4" y="179.184943"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="315.026441" xlink:href="#m2304b15ba4" y="248.201174"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.735506" xlink:href="#m2304b15ba4" y="218.669485"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.651507" xlink:href="#m2304b15ba4" y="227.565052"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.009766" xlink:href="#m2304b15ba4" y="209.364909"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.341066" xlink:href="#m2304b15ba4" y="264.263774"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.893167" xlink:href="#m2304b15ba4" y="193.924494"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.143104" xlink:href="#m2304b15ba4" y="215.72778"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.858614" xlink:href="#m2304b15ba4" y="252.525083"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.644984" xlink:href="#m2304b15ba4" y="223.15004"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.577275" xlink:href="#m2304b15ba4" y="203.942546"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.12421" xlink:href="#m2304b15ba4" y="247.510668"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.72404" xlink:href="#m2304b15ba4" y="215.9362"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.369295" xlink:href="#m2304b15ba4" y="236.937978"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.074274" xlink:href="#m2304b15ba4" y="227.008504"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.6166" xlink:href="#m2304b15ba4" y="215.47058"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.30199" xlink:href="#m2304b15ba4" y="212.367685"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.440909" xlink:href="#m2304b15ba4" y="225.320701"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.309147" xlink:href="#m2304b15ba4" y="210.598631"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="340.921975" xlink:href="#m2304b15ba4" y="199.804043"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="320.660044" xlink:href="#m2304b15ba4" y="221.522503"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.337988" xlink:href="#m2304b15ba4" y="187.654958"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.524568" xlink:href="#m2304b15ba4" y="187.048159"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.685731" xlink:href="#m2304b15ba4" y="224.488301"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.328612" xlink:href="#m2304b15ba4" y="228.629243"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.336898" xlink:href="#m2304b15ba4" y="248.950625"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.351372" xlink:href="#m2304b15ba4" y="218.506073"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="240.501347" xlink:href="#m2304b15ba4" y="223.196068"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.556102" xlink:href="#m2304b15ba4" y="200.574786"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.947327" xlink:href="#m2304b15ba4" y="245.8913"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="316.099791" xlink:href="#m2304b15ba4" y="221.49235"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="327.983695" xlink:href="#m2304b15ba4" y="196.818861"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.882386" xlink:href="#m2304b15ba4" y="230.46107"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.375682" xlink:href="#m2304b15ba4" y="231.094758"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="351.44248" xlink:href="#m2304b15ba4" y="244.649419"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.566108" xlink:href="#m2304b15ba4" y="164.112638"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="349.694264" xlink:href="#m2304b15ba4" y="230.799969"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.576219" xlink:href="#m2304b15ba4" y="241.746867"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.943896" xlink:href="#m2304b15ba4" y="231.916238"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="294.838882" xlink:href="#m2304b15ba4" y="231.331043"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.572564" xlink:href="#m2304b15ba4" y="221.333918"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.059231" xlink:href="#m2304b15ba4" y="199.65763"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="276.045667" xlink:href="#m2304b15ba4" y="221.906799"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.565863" xlink:href="#m2304b15ba4" y="234.271902"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.793588" xlink:href="#m2304b15ba4" y="244.736502"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.893138" xlink:href="#m2304b15ba4" y="215.567224"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="367.320596" xlink:href="#m2304b15ba4" y="215.157726"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="339.620044" xlink:href="#m2304b15ba4" y="185.687539"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.681079" xlink:href="#m2304b15ba4" y="214.169535"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.725776" xlink:href="#m2304b15ba4" y="217.960365"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="327.506623" xlink:href="#m2304b15ba4" y="236.802946"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.191499" xlink:href="#m2304b15ba4" y="222.057861"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.943613" xlink:href="#m2304b15ba4" y="224.681794"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.871028" xlink:href="#m2304b15ba4" y="223.32925"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.299763" xlink:href="#m2304b15ba4" y="234.993257"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.714415" xlink:href="#m2304b15ba4" y="205.341074"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="284.648309" xlink:href="#m2304b15ba4" y="218.820419"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.442034" xlink:href="#m2304b15ba4" y="219.966999"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.290885" xlink:href="#m2304b15ba4" y="249.938113"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.962481" xlink:href="#m2304b15ba4" y="206.225847"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.218442" xlink:href="#m2304b15ba4" y="206.357097"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.71016" xlink:href="#m2304b15ba4" y="232.614762"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="364.337331" xlink:href="#m2304b15ba4" y="196.395597"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.367862" xlink:href="#m2304b15ba4" y="243.022213"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.941075" xlink:href="#m2304b15ba4" y="216.433024"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="319.685985" xlink:href="#m2304b15ba4" y="221.369905"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.732103" xlink:href="#m2304b15ba4" y="242.080061"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.910033" xlink:href="#m2304b15ba4" y="212.243888"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.263003" xlink:href="#m2304b15ba4" y="182.289111"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="211.517389" xlink:href="#m2304b15ba4" y="214.660842"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="257.812008" xlink:href="#m2304b15ba4" y="225.167831"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.926036" xlink:href="#m2304b15ba4" y="207.148922"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="251.350201" xlink:href="#m2304b15ba4" y="213.906744"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="261.742363" xlink:href="#m2304b15ba4" y="215.45031"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.049354" xlink:href="#m2304b15ba4" y="224.425736"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="241.967924" xlink:href="#m2304b15ba4" y="187.844884"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.043274" xlink:href="#m2304b15ba4" y="206.964005"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.857247" xlink:href="#m2304b15ba4" y="226.467679"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.023129" xlink:href="#m2304b15ba4" y="218.138476"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="332.595563" xlink:href="#m2304b15ba4" y="230.669161"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.789143" xlink:href="#m2304b15ba4" y="228.044165"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.882409" xlink:href="#m2304b15ba4" y="228.686369"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.422324" xlink:href="#m2304b15ba4" y="238.45937"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.567526" xlink:href="#m2304b15ba4" y="200.609916"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.257668" xlink:href="#m2304b15ba4" y="221.762621"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.481279" xlink:href="#m2304b15ba4" y="205.028274"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.20354" xlink:href="#m2304b15ba4" y="229.268493"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="250.787377" xlink:href="#m2304b15ba4" y="217.195177"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.247155" xlink:href="#m2304b15ba4" y="230.078604"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="330.236584" xlink:href="#m2304b15ba4" y="201.75057"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.743418" xlink:href="#m2304b15ba4" y="220.918702"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.380656" xlink:href="#m2304b15ba4" y="230.471297"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.746633" xlink:href="#m2304b15ba4" y="248.505724"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.859928" xlink:href="#m2304b15ba4" y="210.541802"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="260.816398" xlink:href="#m2304b15ba4" y="230.026024"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="287.991745" xlink:href="#m2304b15ba4" y="216.312428"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.370995" xlink:href="#m2304b15ba4" y="225.736256"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.850919" xlink:href="#m2304b15ba4" y="197.107046"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="237.066972" xlink:href="#m2304b15ba4" y="205.225934"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.177357" xlink:href="#m2304b15ba4" y="207.145201"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="263.946752" xlink:href="#m2304b15ba4" y="228.199198"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="297.140588" xlink:href="#m2304b15ba4" y="206.767457"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.314253" xlink:href="#m2304b15ba4" y="182.046334"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="270.50749" xlink:href="#m2304b15ba4" y="232.477283"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="266.435924" xlink:href="#m2304b15ba4" y="212.587685"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.539313" xlink:href="#m2304b15ba4" y="248.654496"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.169245" xlink:href="#m2304b15ba4" y="188.308471"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.985914" xlink:href="#m2304b15ba4" y="223.87866"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.231501" xlink:href="#m2304b15ba4" y="200.504938"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="274.231322" xlink:href="#m2304b15ba4" y="250.119919"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.500808" xlink:href="#m2304b15ba4" y="180.40872"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.345235" xlink:href="#m2304b15ba4" y="223.066056"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="289.519749" xlink:href="#m2304b15ba4" y="205.195985"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.129796" xlink:href="#m2304b15ba4" y="213.0138"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="359.933777" xlink:href="#m2304b15ba4" y="221.058322"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.447802" xlink:href="#m2304b15ba4" y="182.621312"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="245.252568" xlink:href="#m2304b15ba4" y="248.631315"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="379.259357" xlink:href="#m2304b15ba4" y="210.08547"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.109354" xlink:href="#m2304b15ba4" y="197.969216"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="247.839861" xlink:href="#m2304b15ba4" y="216.591151"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.056552" xlink:href="#m2304b15ba4" y="218.339782"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.108455" xlink:href="#m2304b15ba4" y="218.825217"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.366094" xlink:href="#m2304b15ba4" y="240.307201"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.603974" xlink:href="#m2304b15ba4" y="215.245078"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="354.256245" xlink:href="#m2304b15ba4" y="205.848193"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="278.300818" xlink:href="#m2304b15ba4" y="214.641735"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="256.816154" xlink:href="#m2304b15ba4" y="221.391067"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.326466" xlink:href="#m2304b15ba4" y="225.696555"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.261636" xlink:href="#m2304b15ba4" y="221.530074"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="268.713224" xlink:href="#m2304b15ba4" y="191.096664"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="249.796348" xlink:href="#m2304b15ba4" y="257.315373"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="328.5862" xlink:href="#m2304b15ba4" y="215.206585"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="228.866715" xlink:href="#m2304b15ba4" y="222.489547"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="255.457458" xlink:href="#m2304b15ba4" y="187.175003"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.545255" xlink:href="#m2304b15ba4" y="214.901254"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="293.406577" xlink:href="#m2304b15ba4" y="186.598473"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.64843" xlink:href="#m2304b15ba4" y="258.053022"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.631258" xlink:href="#m2304b15ba4" y="206.900219"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.250109" xlink:href="#m2304b15ba4" y="210.454854"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="253.12255" xlink:href="#m2304b15ba4" y="188.467427"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="336.544841" xlink:href="#m2304b15ba4" y="248.498702"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="338.130455" xlink:href="#m2304b15ba4" y="219.069709"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="301.852775" xlink:href="#m2304b15ba4" y="214.692007"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="296.662342" xlink:href="#m2304b15ba4" y="225.816751"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="371.003844" xlink:href="#m2304b15ba4" y="191.911761"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.243576" xlink:href="#m2304b15ba4" y="222.705907"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.789706" xlink:href="#m2304b15ba4" y="175.711702"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.009192" xlink:href="#m2304b15ba4" y="195.127277"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="342.870831" xlink:href="#m2304b15ba4" y="197.173493"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="346.805772" xlink:href="#m2304b15ba4" y="204.92588"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="286.822247" xlink:href="#m2304b15ba4" y="237.061173"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="305.189932" xlink:href="#m2304b15ba4" y="224.535707"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="250.550096" xlink:href="#m2304b15ba4" y="204.659523"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.091974" xlink:href="#m2304b15ba4" y="202.584371"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.974591" xlink:href="#m2304b15ba4" y="190.11776"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="262.578651" xlink:href="#m2304b15ba4" y="225.255332"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="349.683086" xlink:href="#m2304b15ba4" y="233.031037"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.529912" xlink:href="#m2304b15ba4" y="198.989737"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="277.975969" xlink:href="#m2304b15ba4" y="232.030606"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="307.053501" xlink:href="#m2304b15ba4" y="198.708426"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="337.249539" xlink:href="#m2304b15ba4" y="192.245224"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="310.78813" xlink:href="#m2304b15ba4" y="206.96817"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="384.603106" xlink:href="#m2304b15ba4" y="223.080065"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.780758" xlink:href="#m2304b15ba4" y="215.186572"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.582413" xlink:href="#m2304b15ba4" y="204.249375"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.129462" xlink:href="#m2304b15ba4" y="215.798327"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="341.6956" xlink:href="#m2304b15ba4" y="172.473732"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="311.634542" xlink:href="#m2304b15ba4" y="235.615284"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="291.434158" xlink:href="#m2304b15ba4" y="235.852838"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.50137" xlink:href="#m2304b15ba4" y="235.342529"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.119968" xlink:href="#m2304b15ba4" y="227.673682"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="340.603573" xlink:href="#m2304b15ba4" y="259.142844"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="281.90363" xlink:href="#m2304b15ba4" y="228.467078"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="312.337773" xlink:href="#m2304b15ba4" y="228.935037"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.175188" xlink:href="#m2304b15ba4" y="214.445422"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="323.178037" xlink:href="#m2304b15ba4" y="207.727548"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.125979" xlink:href="#m2304b15ba4" y="240.556283"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="371.231364" xlink:href="#m2304b15ba4" y="198.178926"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="253.75518" xlink:href="#m2304b15ba4" y="180.315604"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.356145" xlink:href="#m2304b15ba4" y="220.124045"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="325.594198" xlink:href="#m2304b15ba4" y="184.827449"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.814155" xlink:href="#m2304b15ba4" y="212.060008"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="322.091552" xlink:href="#m2304b15ba4" y="176.623108"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="279.126284" xlink:href="#m2304b15ba4" y="193.877787"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="292.776319" xlink:href="#m2304b15ba4" y="246.965312"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="295.596316" xlink:href="#m2304b15ba4" y="215.631178"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="346.044012" xlink:href="#m2304b15ba4" y="195.124365"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="317.5699" xlink:href="#m2304b15ba4" y="215.395178"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="321.012176" xlink:href="#m2304b15ba4" y="216.730294"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="273.883195" xlink:href="#m2304b15ba4" y="190.858658"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="326.591797" xlink:href="#m2304b15ba4" y="230.055113"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="302.508846" xlink:href="#m2304b15ba4" y="215.653191"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="340.208308" xlink:href="#m2304b15ba4" y="209.59221"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="360.455549" xlink:href="#m2304b15ba4" y="222.609061"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.260789" xlink:href="#m2304b15ba4" y="216.398556"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.035779" xlink:href="#m2304b15ba4" y="200.654539"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="267.204942" xlink:href="#m2304b15ba4" y="207.429815"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.548024" xlink:href="#m2304b15ba4" y="232.012607"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.822375" xlink:href="#m2304b15ba4" y="237.861655"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="306.847943" xlink:href="#m2304b15ba4" y="231.624223"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="290.516035" xlink:href="#m2304b15ba4" y="215.975281"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.484183" xlink:href="#m2304b15ba4" y="219.166808"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="329.692558" xlink:href="#m2304b15ba4" y="232.472758"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="264.812681" xlink:href="#m2304b15ba4" y="227.843379"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.232698" xlink:href="#m2304b15ba4" y="246.096778"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="282.047488" xlink:href="#m2304b15ba4" y="207.726497"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="318.66954" xlink:href="#m2304b15ba4" y="216.792371"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="340.082474" xlink:href="#m2304b15ba4" y="240.943789"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="285.379617" xlink:href="#m2304b15ba4" y="215.433314"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="309.489466" xlink:href="#m2304b15ba4" y="189.416084"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="300.992889" xlink:href="#m2304b15ba4" y="230.65073"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="269.298714" xlink:href="#m2304b15ba4" y="189.960274"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="303.001515" xlink:href="#m2304b15ba4" y="222.404458"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="304.567504" xlink:href="#m2304b15ba4" y="212.083002"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="308.577015" xlink:href="#m2304b15ba4" y="214.064534"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="288.771876" xlink:href="#m2304b15ba4" y="188.249836"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="298.251831" xlink:href="#m2304b15ba4" y="212.86301"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="258.017405" xlink:href="#m2304b15ba4" y="238.609648"/>
+     <use style="fill:#0000ff;stroke:#000000;" x="283.597104" xlink:href="#m2304b15ba4" y="241.957213"/>
+    </g>
+   </g>
+   <g id="patch_3">
+    <path d="M 165.6 295.2 
+L 165.6 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_4">
+    <path d="M 424.8 295.2 
+L 424.8 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_5">
+    <path d="M 165.6 295.2 
+L 424.8 295.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_6">
+    <path d="M 165.6 136.8 
+L 424.8 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="matplotlib.axis_1">
+    <g id="xtick_1">
+     <g id="line2d_1">
+      <defs>
+       <path d="M 0 0 
+L 0 -4 
+" id="m65919c46d2" style="stroke:#000000;stroke-width:0.5;"/>
+      </defs>
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_2">
+      <defs>
+       <path d="M 0 0 
+L 0 4 
+" id="m944088aca0" style="stroke:#000000;stroke-width:0.5;"/>
+      </defs>
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_2">
+     <g id="line2d_3">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_4">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_3">
+     <g id="line2d_5">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_6">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_4">
+     <g id="line2d_7">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_8">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_5">
+     <g id="line2d_9">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_10">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_6">
+     <g id="line2d_11">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_12">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_7">
+     <g id="line2d_13">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_14">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_8">
+     <g id="line2d_15">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_16">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_9">
+     <g id="line2d_17">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_18">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+    </g>
+   </g>
+   <g id="matplotlib.axis_2">
+    <g id="ytick_1">
+     <g id="line2d_19">
+      <defs>
+       <path d="M 0 0 
+L 4 0 
+" id="mfc881a183f" style="stroke:#000000;stroke-width:0.5;"/>
+      </defs>
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_20">
+      <defs>
+       <path d="M 0 0 
+L -4 0 
+" id="mfd8b7fccfc" style="stroke:#000000;stroke-width:0.5;"/>
+      </defs>
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="295.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_2">
+     <g id="line2d_21">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="275.4"/>
+      </g>
+     </g>
+     <g id="line2d_22">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="275.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_3">
+     <g id="line2d_23">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="255.6"/>
+      </g>
+     </g>
+     <g id="line2d_24">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="255.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_4">
+     <g id="line2d_25">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="235.8"/>
+      </g>
+     </g>
+     <g id="line2d_26">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="235.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_5">
+     <g id="line2d_27">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="216"/>
+      </g>
+     </g>
+     <g id="line2d_28">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="216"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_6">
+     <g id="line2d_29">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="196.2"/>
+      </g>
+     </g>
+     <g id="line2d_30">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="196.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_7">
+     <g id="line2d_31">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="176.4"/>
+      </g>
+     </g>
+     <g id="line2d_32">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="176.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_8">
+     <g id="line2d_33">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="156.6"/>
+      </g>
+     </g>
+     <g id="line2d_34">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="156.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_9">
+     <g id="line2d_35">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="136.8"/>
+      </g>
+     </g>
+     <g id="line2d_36">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="136.8"/>
+      </g>
+     </g>
+    </g>
+   </g>
+  </g>
+  <g id="axes_2">
+   <g id="patch_7">
+    <path d="M 165.6 388.8 
+L 424.8 388.8 
+L 424.8 302.4 
+L 165.6 302.4 
+z
+" style="fill:#ffffff;"/>
+   </g>
+   <g id="patch_8">
+    <path clip-path="url(#pab60c96b6f)" d="M 189.9 302.4 
+L 198 302.4 
+L 198 303.12 
+L 189.9 303.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_9">
+    <path clip-path="url(#pab60c96b6f)" d="M 198 302.4 
+L 206.1 302.4 
+L 206.1 303.84 
+L 198 303.84 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_10">
+    <path clip-path="url(#pab60c96b6f)" d="M 206.1 302.4 
+L 214.2 302.4 
+L 214.2 306.72 
+L 206.1 306.72 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_11">
+    <path clip-path="url(#pab60c96b6f)" d="M 214.2 302.4 
+L 222.3 302.4 
+L 222.3 306 
+L 214.2 306 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_12">
+    <path clip-path="url(#pab60c96b6f)" d="M 222.3 302.4 
+L 230.4 302.4 
+L 230.4 309.6 
+L 222.3 309.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_13">
+    <path clip-path="url(#pab60c96b6f)" d="M 230.4 302.4 
+L 238.5 302.4 
+L 238.5 313.2 
+L 230.4 313.2 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_14">
+    <path clip-path="url(#pab60c96b6f)" d="M 238.5 302.4 
+L 246.6 302.4 
+L 246.6 324.72 
+L 238.5 324.72 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_15">
+    <path clip-path="url(#pab60c96b6f)" d="M 246.6 302.4 
+L 254.7 302.4 
+L 254.7 329.76 
+L 246.6 329.76 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_16">
+    <path clip-path="url(#pab60c96b6f)" d="M 254.7 302.4 
+L 262.8 302.4 
+L 262.8 339.84 
+L 254.7 339.84 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_17">
+    <path clip-path="url(#pab60c96b6f)" d="M 262.8 302.4 
+L 270.9 302.4 
+L 270.9 357.12 
+L 262.8 357.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_18">
+    <path clip-path="url(#pab60c96b6f)" d="M 270.9 302.4 
+L 279 302.4 
+L 279 362.88 
+L 270.9 362.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_19">
+    <path clip-path="url(#pab60c96b6f)" d="M 279 302.4 
+L 287.1 302.4 
+L 287.1 376.56 
+L 279 376.56 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_20">
+    <path clip-path="url(#pab60c96b6f)" d="M 287.1 302.4 
+L 295.2 302.4 
+L 295.2 375.12 
+L 287.1 375.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_21">
+    <path clip-path="url(#pab60c96b6f)" d="M 295.2 302.4 
+L 303.3 302.4 
+L 303.3 371.52 
+L 295.2 371.52 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_22">
+    <path clip-path="url(#pab60c96b6f)" d="M 303.3 302.4 
+L 311.4 302.4 
+L 311.4 379.44 
+L 303.3 379.44 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_23">
+    <path clip-path="url(#pab60c96b6f)" d="M 311.4 302.4 
+L 319.5 302.4 
+L 319.5 344.88 
+L 311.4 344.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_24">
+    <path clip-path="url(#pab60c96b6f)" d="M 319.5 302.4 
+L 327.6 302.4 
+L 327.6 354.96 
+L 319.5 354.96 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_25">
+    <path clip-path="url(#pab60c96b6f)" d="M 327.6 302.4 
+L 335.7 302.4 
+L 335.7 332.64 
+L 327.6 332.64 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_26">
+    <path clip-path="url(#pab60c96b6f)" d="M 335.7 302.4 
+L 343.8 302.4 
+L 343.8 329.04 
+L 335.7 329.04 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_27">
+    <path clip-path="url(#pab60c96b6f)" d="M 343.8 302.4 
+L 351.9 302.4 
+L 351.9 318.24 
+L 343.8 318.24 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_28">
+    <path clip-path="url(#pab60c96b6f)" d="M 351.9 302.4 
+L 360 302.4 
+L 360 314.64 
+L 351.9 314.64 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_29">
+    <path clip-path="url(#pab60c96b6f)" d="M 360 302.4 
+L 368.1 302.4 
+L 368.1 309.6 
+L 360 309.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_30">
+    <path clip-path="url(#pab60c96b6f)" d="M 368.1 302.4 
+L 376.2 302.4 
+L 376.2 309.6 
+L 368.1 309.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_31">
+    <path clip-path="url(#pab60c96b6f)" d="M 376.2 302.4 
+L 384.3 302.4 
+L 384.3 303.84 
+L 376.2 303.84 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_32">
+    <path clip-path="url(#pab60c96b6f)" d="M 384.3 302.4 
+L 392.4 302.4 
+L 392.4 303.12 
+L 384.3 303.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_33">
+    <path clip-path="url(#pab60c96b6f)" d="M 392.4 302.4 
+L 400.5 302.4 
+L 400.5 302.4 
+L 392.4 302.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_34">
+    <path d="M 165.6 388.8 
+L 165.6 302.4 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_35">
+    <path d="M 424.8 388.8 
+L 424.8 302.4 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_36">
+    <path d="M 165.6 388.8 
+L 424.8 388.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_37">
+    <path d="M 165.6 302.4 
+L 424.8 302.4 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="matplotlib.axis_3">
+    <g id="xtick_10">
+     <g id="line2d_37">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_38">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_11">
+     <g id="line2d_39">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_40">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_12">
+     <g id="line2d_41">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_42">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_13">
+     <g id="line2d_43">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_44">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_14">
+     <g id="line2d_45">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_46">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_15">
+     <g id="line2d_47">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_48">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_16">
+     <g id="line2d_49">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_50">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_17">
+     <g id="line2d_51">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_52">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_18">
+     <g id="line2d_53">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m65919c46d2" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_54">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m944088aca0" y="302.4"/>
+      </g>
+     </g>
+    </g>
+   </g>
+   <g id="matplotlib.axis_4">
+    <g id="ytick_10">
+     <g id="line2d_55">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="302.4"/>
+      </g>
+     </g>
+     <g id="line2d_56">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="302.4"/>
+      </g>
+     </g>
+     <g id="text_1">
+      <!-- 0 -->
+      <defs>
+       <path d="M 31.78125 66.40625 
+Q 24.171875 66.40625 20.328125 58.90625 
+Q 16.5 51.421875 16.5 36.375 
+Q 16.5 21.390625 20.328125 13.890625 
+Q 24.171875 6.390625 31.78125 6.390625 
+Q 39.453125 6.390625 43.28125 13.890625 
+Q 47.125 21.390625 47.125 36.375 
+Q 47.125 51.421875 43.28125 58.90625 
+Q 39.453125 66.40625 31.78125 66.40625 
+M 31.78125 74.21875 
+Q 44.046875 74.21875 50.515625 64.515625 
+Q 56.984375 54.828125 56.984375 36.375 
+Q 56.984375 17.96875 50.515625 8.265625 
+Q 44.046875 -1.421875 31.78125 -1.421875 
+Q 19.53125 -1.421875 13.0625 8.265625 
+Q 6.59375 17.96875 6.59375 36.375 
+Q 6.59375 54.828125 13.0625 64.515625 
+Q 19.53125 74.21875 31.78125 74.21875 
+" id="DejaVuSans-30"/>
+      </defs>
+      <g transform="translate(153.965 306.959063)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_11">
+     <g id="line2d_57">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="316.8"/>
+      </g>
+     </g>
+     <g id="line2d_58">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="316.8"/>
+      </g>
+     </g>
+     <g id="text_2">
+      <!-- 20 -->
+      <defs>
+       <path d="M 19.1875 8.296875 
+L 53.609375 8.296875 
+L 53.609375 0 
+L 7.328125 0 
+L 7.328125 8.296875 
+Q 12.9375 14.109375 22.625 23.890625 
+Q 32.328125 33.6875 34.8125 36.53125 
+Q 39.546875 41.84375 41.421875 45.53125 
+Q 43.3125 49.21875 43.3125 52.78125 
+Q 43.3125 58.59375 39.234375 62.25 
+Q 35.15625 65.921875 28.609375 65.921875 
+Q 23.96875 65.921875 18.8125 64.3125 
+Q 13.671875 62.703125 7.8125 59.421875 
+L 7.8125 69.390625 
+Q 13.765625 71.78125 18.9375 73 
+Q 24.125 74.21875 28.421875 74.21875 
+Q 39.75 74.21875 46.484375 68.546875 
+Q 53.21875 62.890625 53.21875 53.421875 
+Q 53.21875 48.921875 51.53125 44.890625 
+Q 49.859375 40.875 45.40625 35.40625 
+Q 44.1875 33.984375 37.640625 27.21875 
+Q 31.109375 20.453125 19.1875 8.296875 
+" id="DejaVuSans-32"/>
+      </defs>
+      <g transform="translate(146.33 321.359063)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-32"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_12">
+     <g id="line2d_59">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="331.2"/>
+      </g>
+     </g>
+     <g id="line2d_60">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="331.2"/>
+      </g>
+     </g>
+     <g id="text_3">
+      <!-- 40 -->
+      <defs>
+       <path d="M 37.796875 64.3125 
+L 12.890625 25.390625 
+L 37.796875 25.390625 
+z
+M 35.203125 72.90625 
+L 47.609375 72.90625 
+L 47.609375 25.390625 
+L 58.015625 25.390625 
+L 58.015625 17.1875 
+L 47.609375 17.1875 
+L 47.609375 0 
+L 37.796875 0 
+L 37.796875 17.1875 
+L 4.890625 17.1875 
+L 4.890625 26.703125 
+z
+" id="DejaVuSans-34"/>
+      </defs>
+      <g transform="translate(146.33 335.759063)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-34"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_13">
+     <g id="line2d_61">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="345.6"/>
+      </g>
+     </g>
+     <g id="line2d_62">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="345.6"/>
+      </g>
+     </g>
+     <g id="text_4">
+      <!-- 60 -->
+      <defs>
+       <path d="M 33.015625 40.375 
+Q 26.375 40.375 22.484375 35.828125 
+Q 18.609375 31.296875 18.609375 23.390625 
+Q 18.609375 15.53125 22.484375 10.953125 
+Q 26.375 6.390625 33.015625 6.390625 
+Q 39.65625 6.390625 43.53125 10.953125 
+Q 47.40625 15.53125 47.40625 23.390625 
+Q 47.40625 31.296875 43.53125 35.828125 
+Q 39.65625 40.375 33.015625 40.375 
+M 52.59375 71.296875 
+L 52.59375 62.3125 
+Q 48.875 64.0625 45.09375 64.984375 
+Q 41.3125 65.921875 37.59375 65.921875 
+Q 27.828125 65.921875 22.671875 59.328125 
+Q 17.53125 52.734375 16.796875 39.40625 
+Q 19.671875 43.65625 24.015625 45.921875 
+Q 28.375 48.1875 33.59375 48.1875 
+Q 44.578125 48.1875 50.953125 41.515625 
+Q 57.328125 34.859375 57.328125 23.390625 
+Q 57.328125 12.15625 50.6875 5.359375 
+Q 44.046875 -1.421875 33.015625 -1.421875 
+Q 20.359375 -1.421875 13.671875 8.265625 
+Q 6.984375 17.96875 6.984375 36.375 
+Q 6.984375 53.65625 15.1875 63.9375 
+Q 23.390625 74.21875 37.203125 74.21875 
+Q 40.921875 74.21875 44.703125 73.484375 
+Q 48.484375 72.75 52.59375 71.296875 
+" id="DejaVuSans-36"/>
+      </defs>
+      <g transform="translate(146.33 350.159063)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-36"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_14">
+     <g id="line2d_63">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="360"/>
+      </g>
+     </g>
+     <g id="line2d_64">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="360"/>
+      </g>
+     </g>
+     <g id="text_5">
+      <!-- 80 -->
+      <defs>
+       <path d="M 31.78125 34.625 
+Q 24.75 34.625 20.71875 30.859375 
+Q 16.703125 27.09375 16.703125 20.515625 
+Q 16.703125 13.921875 20.71875 10.15625 
+Q 24.75 6.390625 31.78125 6.390625 
+Q 38.8125 6.390625 42.859375 10.171875 
+Q 46.921875 13.96875 46.921875 20.515625 
+Q 46.921875 27.09375 42.890625 30.859375 
+Q 38.875 34.625 31.78125 34.625 
+M 21.921875 38.8125 
+Q 15.578125 40.375 12.03125 44.71875 
+Q 8.5 49.078125 8.5 55.328125 
+Q 8.5 64.0625 14.71875 69.140625 
+Q 20.953125 74.21875 31.78125 74.21875 
+Q 42.671875 74.21875 48.875 69.140625 
+Q 55.078125 64.0625 55.078125 55.328125 
+Q 55.078125 49.078125 51.53125 44.71875 
+Q 48 40.375 41.703125 38.8125 
+Q 48.828125 37.15625 52.796875 32.3125 
+Q 56.78125 27.484375 56.78125 20.515625 
+Q 56.78125 9.90625 50.3125 4.234375 
+Q 43.84375 -1.421875 31.78125 -1.421875 
+Q 19.734375 -1.421875 13.25 4.234375 
+Q 6.78125 9.90625 6.78125 20.515625 
+Q 6.78125 27.484375 10.78125 32.3125 
+Q 14.796875 37.15625 21.921875 38.8125 
+M 18.3125 54.390625 
+Q 18.3125 48.734375 21.84375 45.5625 
+Q 25.390625 42.390625 31.78125 42.390625 
+Q 38.140625 42.390625 41.71875 45.5625 
+Q 45.3125 48.734375 45.3125 54.390625 
+Q 45.3125 60.0625 41.71875 63.234375 
+Q 38.140625 66.40625 31.78125 66.40625 
+Q 25.390625 66.40625 21.84375 63.234375 
+Q 18.3125 60.0625 18.3125 54.390625 
+" id="DejaVuSans-38"/>
+      </defs>
+      <g transform="translate(146.33 364.559062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-38"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_15">
+     <g id="line2d_65">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="374.4"/>
+      </g>
+     </g>
+     <g id="line2d_66">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="374.4"/>
+      </g>
+     </g>
+     <g id="text_6">
+      <!-- 100 -->
+      <defs>
+       <path d="M 12.40625 8.296875 
+L 28.515625 8.296875 
+L 28.515625 63.921875 
+L 10.984375 60.40625 
+L 10.984375 69.390625 
+L 28.421875 72.90625 
+L 38.28125 72.90625 
+L 38.28125 8.296875 
+L 54.390625 8.296875 
+L 54.390625 0 
+L 12.40625 0 
+z
+" id="DejaVuSans-31"/>
+      </defs>
+      <g transform="translate(138.695 378.959063)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_16">
+     <g id="line2d_67">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="388.8"/>
+      </g>
+     </g>
+     <g id="line2d_68">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="388.8"/>
+      </g>
+     </g>
+     <g id="text_7">
+      <!-- 120 -->
+      <g transform="translate(138.695 393.359062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-32"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+   </g>
+  </g>
+  <g id="axes_3">
+   <g id="patch_38">
+    <path d="M 432 295.2 
+L 518.4 295.2 
+L 518.4 136.8 
+L 432 136.8 
+z
+" style="fill:#ffffff;"/>
+   </g>
+   <g id="patch_39">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 280.35 
+L 432 280.35 
+L 432 275.4 
+L 432 275.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_40">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 275.4 
+L 433.851429 275.4 
+L 433.851429 270.45 
+L 432 270.45 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_41">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 270.45 
+L 433.234286 270.45 
+L 433.234286 265.5 
+L 432 265.5 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_42">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 265.5 
+L 432.617143 265.5 
+L 432.617143 260.55 
+L 432 260.55 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_43">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 260.55 
+L 436.32 260.55 
+L 436.32 255.6 
+L 432 255.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_44">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 255.6 
+L 441.874286 255.6 
+L 441.874286 250.65 
+L 432 250.65 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_45">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 250.65 
+L 451.748571 250.65 
+L 451.748571 245.7 
+L 432 245.7 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_46">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 245.7 
+L 456.068571 245.7 
+L 456.068571 240.75 
+L 432 240.75 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_47">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 240.75 
+L 462.24 240.75 
+L 462.24 235.8 
+L 432 235.8 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_48">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 235.8 
+L 480.137143 235.8 
+L 480.137143 230.85 
+L 432 230.85 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_49">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 230.85 
+L 476.434286 230.85 
+L 476.434286 225.9 
+L 432 225.9 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_50">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 225.9 
+L 490.628571 225.9 
+L 490.628571 220.95 
+L 432 220.95 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_51">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 220.95 
+L 487.542857 220.95 
+L 487.542857 216 
+L 432 216 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_52">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 216 
+L 510.377143 216 
+L 510.377143 211.05 
+L 432 211.05 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_53">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 211.05 
+L 484.457143 211.05 
+L 484.457143 206.1 
+L 432 206.1 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_54">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 206.1 
+L 480.754286 206.1 
+L 480.754286 201.15 
+L 432 201.15 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_55">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 201.15 
+L 477.668571 201.15 
+L 477.668571 196.2 
+L 432 196.2 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_56">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 196.2 
+L 456.685714 196.2 
+L 456.685714 191.25 
+L 432 191.25 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_57">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 191.25 
+L 458.537143 191.25 
+L 458.537143 186.3 
+L 432 186.3 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_58">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 186.3 
+L 449.897143 186.3 
+L 449.897143 181.35 
+L 432 181.35 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_59">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 181.35 
+L 443.108571 181.35 
+L 443.108571 176.4 
+L 432 176.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_60">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 176.4 
+L 438.788571 176.4 
+L 438.788571 171.45 
+L 432 171.45 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_61">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 171.45 
+L 434.468571 171.45 
+L 434.468571 166.5 
+L 432 166.5 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_62">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 166.5 
+L 435.085714 166.5 
+L 435.085714 161.55 
+L 432 161.55 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_63">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 161.55 
+L 432 161.55 
+L 432 156.6 
+L 432 156.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_64">
+    <path clip-path="url(#pf7b964ab62)" d="M 432 156.6 
+L 432.617143 156.6 
+L 432.617143 151.65 
+L 432 151.65 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_65">
+    <path d="M 432 295.2 
+L 432 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_66">
+    <path d="M 518.4 295.2 
+L 518.4 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_67">
+    <path d="M 432 295.2 
+L 518.4 295.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_68">
+    <path d="M 432 136.8 
+L 518.4 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="matplotlib.axis_5">
+    <g id="xtick_19">
+     <g id="line2d_69">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_70">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_8">
+      <!-- 0 -->
+      <g transform="translate(428.1825 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_20">
+     <g id="line2d_71">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="444.342857" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_72">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="444.342857" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_9">
+      <!-- 20 -->
+      <g transform="translate(436.707857 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-32"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_21">
+     <g id="line2d_73">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="456.685714" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_74">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="456.685714" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_10">
+      <!-- 40 -->
+      <g transform="translate(449.050714 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-34"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_22">
+     <g id="line2d_75">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="469.028571" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_76">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="469.028571" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_11">
+      <!-- 60 -->
+      <g transform="translate(461.393571 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-36"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_23">
+     <g id="line2d_77">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="481.371429" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_78">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="481.371429" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_12">
+      <!-- 80 -->
+      <g transform="translate(473.736429 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-38"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_24">
+     <g id="line2d_79">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="493.714286" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_80">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="493.714286" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_13">
+      <!-- 100 -->
+      <g transform="translate(482.261786 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_25">
+     <g id="line2d_81">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="506.057143" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_82">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="506.057143" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_14">
+      <!-- 120 -->
+      <g transform="translate(494.604643 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-32"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_26">
+     <g id="line2d_83">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_84">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_15">
+      <!-- 140 -->
+      <g transform="translate(506.9475 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-34"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+   </g>
+   <g id="matplotlib.axis_6">
+    <g id="ytick_17">
+     <g id="line2d_85">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_86">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="295.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_18">
+     <g id="line2d_87">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="275.4"/>
+      </g>
+     </g>
+     <g id="line2d_88">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="275.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_19">
+     <g id="line2d_89">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="255.6"/>
+      </g>
+     </g>
+     <g id="line2d_90">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="255.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_20">
+     <g id="line2d_91">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="235.8"/>
+      </g>
+     </g>
+     <g id="line2d_92">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="235.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_21">
+     <g id="line2d_93">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="216"/>
+      </g>
+     </g>
+     <g id="line2d_94">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="216"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_22">
+     <g id="line2d_95">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="196.2"/>
+      </g>
+     </g>
+     <g id="line2d_96">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="196.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_23">
+     <g id="line2d_97">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="176.4"/>
+      </g>
+     </g>
+     <g id="line2d_98">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="176.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_24">
+     <g id="line2d_99">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="156.6"/>
+      </g>
+     </g>
+     <g id="line2d_100">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="156.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_25">
+     <g id="line2d_101">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="432" xlink:href="#mfc881a183f" y="136.8"/>
+      </g>
+     </g>
+     <g id="line2d_102">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="518.4" xlink:href="#mfd8b7fccfc" y="136.8"/>
+      </g>
+     </g>
+    </g>
+   </g>
+  </g>
+  <g id="axes_4">
+   <g id="patch_69">
+    <path d="M 72 295.2 
+L 158.4 295.2 
+L 158.4 136.8 
+L 72 136.8 
+z
+" style="fill:#ffffff;"/>
+   </g>
+   <g id="patch_70">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 280.35 
+L 158.4 280.35 
+L 158.4 275.4 
+L 158.4 275.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_71">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 275.4 
+L 156.548571 275.4 
+L 156.548571 270.45 
+L 158.4 270.45 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_72">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 270.45 
+L 157.165714 270.45 
+L 157.165714 265.5 
+L 158.4 265.5 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_73">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 265.5 
+L 157.782857 265.5 
+L 157.782857 260.55 
+L 158.4 260.55 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_74">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 260.55 
+L 154.08 260.55 
+L 154.08 255.6 
+L 158.4 255.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_75">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 255.6 
+L 148.525714 255.6 
+L 148.525714 250.65 
+L 158.4 250.65 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_76">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 250.65 
+L 138.651429 250.65 
+L 138.651429 245.7 
+L 158.4 245.7 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_77">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 245.7 
+L 134.331429 245.7 
+L 134.331429 240.75 
+L 158.4 240.75 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_78">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 240.75 
+L 128.16 240.75 
+L 128.16 235.8 
+L 158.4 235.8 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_79">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 235.8 
+L 110.262857 235.8 
+L 110.262857 230.85 
+L 158.4 230.85 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_80">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 230.85 
+L 113.965714 230.85 
+L 113.965714 225.9 
+L 158.4 225.9 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_81">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 225.9 
+L 99.771429 225.9 
+L 99.771429 220.95 
+L 158.4 220.95 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_82">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 220.95 
+L 102.857143 220.95 
+L 102.857143 216 
+L 158.4 216 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_83">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 216 
+L 80.022857 216 
+L 80.022857 211.05 
+L 158.4 211.05 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_84">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 211.05 
+L 105.942857 211.05 
+L 105.942857 206.1 
+L 158.4 206.1 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_85">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 206.1 
+L 109.645714 206.1 
+L 109.645714 201.15 
+L 158.4 201.15 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_86">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 201.15 
+L 112.731429 201.15 
+L 112.731429 196.2 
+L 158.4 196.2 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_87">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 196.2 
+L 133.714286 196.2 
+L 133.714286 191.25 
+L 158.4 191.25 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_88">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 191.25 
+L 131.862857 191.25 
+L 131.862857 186.3 
+L 158.4 186.3 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_89">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 186.3 
+L 140.502857 186.3 
+L 140.502857 181.35 
+L 158.4 181.35 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_90">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 181.35 
+L 147.291429 181.35 
+L 147.291429 176.4 
+L 158.4 176.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_91">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 176.4 
+L 151.611429 176.4 
+L 151.611429 171.45 
+L 158.4 171.45 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_92">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 171.45 
+L 155.931429 171.45 
+L 155.931429 166.5 
+L 158.4 166.5 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_93">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 166.5 
+L 155.314286 166.5 
+L 155.314286 161.55 
+L 158.4 161.55 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_94">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 161.55 
+L 158.4 161.55 
+L 158.4 156.6 
+L 158.4 156.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_95">
+    <path clip-path="url(#pd8aeb74a4f)" d="M 158.4 156.6 
+L 157.782857 156.6 
+L 157.782857 151.65 
+L 158.4 151.65 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_96">
+    <path d="M 72 295.2 
+L 72 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_97">
+    <path d="M 158.4 295.2 
+L 158.4 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_98">
+    <path d="M 72 295.2 
+L 158.4 295.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_99">
+    <path d="M 72 136.8 
+L 158.4 136.8 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="matplotlib.axis_7">
+    <g id="xtick_27">
+     <g id="line2d_103">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_104">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_16">
+      <!-- 0 -->
+      <g transform="translate(154.5825 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_28">
+     <g id="line2d_105">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="146.057143" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_106">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="146.057143" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_17">
+      <!-- 20 -->
+      <g transform="translate(138.422143 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-32"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_29">
+     <g id="line2d_107">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="133.714286" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_108">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="133.714286" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_18">
+      <!-- 40 -->
+      <g transform="translate(126.079286 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-34"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_30">
+     <g id="line2d_109">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="121.371429" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_110">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="121.371429" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_19">
+      <!-- 60 -->
+      <g transform="translate(113.736429 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-36"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_31">
+     <g id="line2d_111">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="109.028571" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_112">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="109.028571" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_20">
+      <!-- 80 -->
+      <g transform="translate(101.393571 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-38"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_32">
+     <g id="line2d_113">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="96.685714" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_114">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="96.685714" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_21">
+      <!-- 100 -->
+      <g transform="translate(85.233214 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_33">
+     <g id="line2d_115">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="84.342857" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_116">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="84.342857" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_22">
+      <!-- 120 -->
+      <g transform="translate(72.890357 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-32"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_34">
+     <g id="line2d_117">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#m65919c46d2" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_118">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#m944088aca0" y="136.8"/>
+      </g>
+     </g>
+     <g id="text_23">
+      <!-- 140 -->
+      <g transform="translate(60.5475 308.318125)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-34"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+   </g>
+   <g id="matplotlib.axis_8">
+    <g id="ytick_26">
+     <g id="line2d_119">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="295.2"/>
+      </g>
+     </g>
+     <g id="line2d_120">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="295.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_27">
+     <g id="line2d_121">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="275.4"/>
+      </g>
+     </g>
+     <g id="line2d_122">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="275.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_28">
+     <g id="line2d_123">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="255.6"/>
+      </g>
+     </g>
+     <g id="line2d_124">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="255.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_29">
+     <g id="line2d_125">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="235.8"/>
+      </g>
+     </g>
+     <g id="line2d_126">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="235.8"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_30">
+     <g id="line2d_127">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="216"/>
+      </g>
+     </g>
+     <g id="line2d_128">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="216"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_31">
+     <g id="line2d_129">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="196.2"/>
+      </g>
+     </g>
+     <g id="line2d_130">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="196.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_32">
+     <g id="line2d_131">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="176.4"/>
+      </g>
+     </g>
+     <g id="line2d_132">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="176.4"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_33">
+     <g id="line2d_133">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="156.6"/>
+      </g>
+     </g>
+     <g id="line2d_134">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="156.6"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_34">
+     <g id="line2d_135">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="72" xlink:href="#mfc881a183f" y="136.8"/>
+      </g>
+     </g>
+     <g id="line2d_136">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="158.4" xlink:href="#mfd8b7fccfc" y="136.8"/>
+      </g>
+     </g>
+    </g>
+   </g>
+  </g>
+  <g id="axes_5">
+   <g id="patch_100">
+    <path d="M 165.6 129.6 
+L 424.8 129.6 
+L 424.8 43.2 
+L 165.6 43.2 
+z
+" style="fill:#ffffff;"/>
+   </g>
+   <g id="patch_101">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 189.9 129.6 
+L 198 129.6 
+L 198 128.88 
+L 189.9 128.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_102">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 198 129.6 
+L 206.1 129.6 
+L 206.1 128.16 
+L 198 128.16 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_103">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 206.1 129.6 
+L 214.2 129.6 
+L 214.2 125.28 
+L 206.1 125.28 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_104">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 214.2 129.6 
+L 222.3 129.6 
+L 222.3 126 
+L 214.2 126 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_105">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 222.3 129.6 
+L 230.4 129.6 
+L 230.4 122.4 
+L 222.3 122.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_106">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 230.4 129.6 
+L 238.5 129.6 
+L 238.5 118.8 
+L 230.4 118.8 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_107">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 238.5 129.6 
+L 246.6 129.6 
+L 246.6 107.28 
+L 238.5 107.28 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_108">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 246.6 129.6 
+L 254.7 129.6 
+L 254.7 102.24 
+L 246.6 102.24 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_109">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 254.7 129.6 
+L 262.8 129.6 
+L 262.8 92.16 
+L 254.7 92.16 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_110">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 262.8 129.6 
+L 270.9 129.6 
+L 270.9 74.88 
+L 262.8 74.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_111">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 270.9 129.6 
+L 279 129.6 
+L 279 69.12 
+L 270.9 69.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_112">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 279 129.6 
+L 287.1 129.6 
+L 287.1 55.44 
+L 279 55.44 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_113">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 287.1 129.6 
+L 295.2 129.6 
+L 295.2 56.88 
+L 287.1 56.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_114">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 295.2 129.6 
+L 303.3 129.6 
+L 303.3 60.48 
+L 295.2 60.48 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_115">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 303.3 129.6 
+L 311.4 129.6 
+L 311.4 52.56 
+L 303.3 52.56 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_116">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 311.4 129.6 
+L 319.5 129.6 
+L 319.5 87.12 
+L 311.4 87.12 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_117">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 319.5 129.6 
+L 327.6 129.6 
+L 327.6 77.04 
+L 319.5 77.04 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_118">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 327.6 129.6 
+L 335.7 129.6 
+L 335.7 99.36 
+L 327.6 99.36 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_119">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 335.7 129.6 
+L 343.8 129.6 
+L 343.8 102.96 
+L 335.7 102.96 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_120">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 343.8 129.6 
+L 351.9 129.6 
+L 351.9 113.76 
+L 343.8 113.76 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_121">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 351.9 129.6 
+L 360 129.6 
+L 360 117.36 
+L 351.9 117.36 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_122">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 360 129.6 
+L 368.1 129.6 
+L 368.1 122.4 
+L 360 122.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_123">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 368.1 129.6 
+L 376.2 129.6 
+L 376.2 122.4 
+L 368.1 122.4 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_124">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 376.2 129.6 
+L 384.3 129.6 
+L 384.3 128.16 
+L 376.2 128.16 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_125">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 384.3 129.6 
+L 392.4 129.6 
+L 392.4 128.88 
+L 384.3 128.88 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_126">
+    <path clip-path="url(#p5f9e3f3ed3)" d="M 392.4 129.6 
+L 400.5 129.6 
+L 400.5 129.6 
+L 392.4 129.6 
+z
+" style="fill:#0000ff;stroke:#000000;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_127">
+    <path d="M 165.6 129.6 
+L 165.6 43.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_128">
+    <path d="M 424.8 129.6 
+L 424.8 43.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_129">
+    <path d="M 165.6 129.6 
+L 424.8 129.6 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="patch_130">
+    <path d="M 165.6 43.2 
+L 424.8 43.2 
+" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;"/>
+   </g>
+   <g id="matplotlib.axis_9">
+    <g id="xtick_35">
+     <g id="line2d_137">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_138">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_36">
+     <g id="line2d_139">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_140">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="198" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_37">
+     <g id="line2d_141">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_142">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="230.4" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_38">
+     <g id="line2d_143">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_144">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="262.8" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_39">
+     <g id="line2d_145">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_146">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="295.2" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_40">
+     <g id="line2d_147">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_148">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="327.6" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_41">
+     <g id="line2d_149">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_150">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="360" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_42">
+     <g id="line2d_151">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_152">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="392.4" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+    <g id="xtick_43">
+     <g id="line2d_153">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m65919c46d2" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_154">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#m944088aca0" y="43.2"/>
+      </g>
+     </g>
+    </g>
+   </g>
+   <g id="matplotlib.axis_10">
+    <g id="ytick_35">
+     <g id="line2d_155">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="129.6"/>
+      </g>
+     </g>
+     <g id="line2d_156">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="129.6"/>
+      </g>
+     </g>
+     <g id="text_24">
+      <!-- 0 -->
+      <g transform="translate(153.965 134.159062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_36">
+     <g id="line2d_157">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="115.2"/>
+      </g>
+     </g>
+     <g id="line2d_158">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="115.2"/>
+      </g>
+     </g>
+     <g id="text_25">
+      <!-- 20 -->
+      <g transform="translate(146.33 119.759062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-32"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_37">
+     <g id="line2d_159">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="100.8"/>
+      </g>
+     </g>
+     <g id="line2d_160">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="100.8"/>
+      </g>
+     </g>
+     <g id="text_26">
+      <!-- 40 -->
+      <g transform="translate(146.33 105.359062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-34"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_38">
+     <g id="line2d_161">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="86.4"/>
+      </g>
+     </g>
+     <g id="line2d_162">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="86.4"/>
+      </g>
+     </g>
+     <g id="text_27">
+      <!-- 60 -->
+      <g transform="translate(146.33 90.959062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-36"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_39">
+     <g id="line2d_163">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="72"/>
+      </g>
+     </g>
+     <g id="line2d_164">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="72"/>
+      </g>
+     </g>
+     <g id="text_28">
+      <!-- 80 -->
+      <g transform="translate(146.33 76.559062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-38"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_40">
+     <g id="line2d_165">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="57.6"/>
+      </g>
+     </g>
+     <g id="line2d_166">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="57.6"/>
+      </g>
+     </g>
+     <g id="text_29">
+      <!-- 100 -->
+      <g transform="translate(138.695 62.159062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-30"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+    <g id="ytick_41">
+     <g id="line2d_167">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="165.6" xlink:href="#mfc881a183f" y="43.2"/>
+      </g>
+     </g>
+     <g id="line2d_168">
+      <g>
+       <use style="stroke:#000000;stroke-width:0.5;" x="424.8" xlink:href="#mfd8b7fccfc" y="43.2"/>
+      </g>
+     </g>
+     <g id="text_30">
+      <!-- 120 -->
+      <g transform="translate(138.695 47.759062)scale(0.12 -0.12)">
+       <use xlink:href="#DejaVuSans-31"/>
+       <use x="63.623047" xlink:href="#DejaVuSans-32"/>
+       <use x="127.246094" xlink:href="#DejaVuSans-30"/>
+      </g>
+     </g>
+    </g>
+   </g>
+  </g>
+ </g>
+ <defs>
+  <clipPath id="p6a5c938135">
+   <rect height="158.4" width="259.2" x="165.6" y="136.8"/>
+  </clipPath>
+  <clipPath id="pab60c96b6f">
+   <rect height="86.4" width="259.2" x="165.6" y="302.4"/>
+  </clipPath>
+  <clipPath id="pf7b964ab62">
+   <rect height="158.4" width="86.4" x="432" y="136.8"/>
+  </clipPath>
+  <clipPath id="pd8aeb74a4f">
+   <rect height="158.4" width="86.4" x="72" y="136.8"/>
+  </clipPath>
+  <clipPath id="p5f9e3f3ed3">
+   <rect height="86.4" width="259.2" x="165.6" y="43.2"/>
+  </clipPath>
+ </defs>
+</svg>
Index: venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/proj3d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/proj3d.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/proj3d.py	(date 1589417755515)
@@ -0,0 +1,239 @@
+"""
+Various transforms used for by the 3D code
+"""
+
+import numpy as np
+import numpy.linalg as linalg
+
+from matplotlib import cbook
+
+
+@cbook.deprecated("3.1")
+def line2d(p0, p1):
+    """
+    Return 2D equation of line in the form ax+by+c = 0
+    """
+    # x + x1  = 0
+    x0, y0 = p0[:2]
+    x1, y1 = p1[:2]
+    #
+    if x0 == x1:
+        a = -1
+        b = 0
+        c = x1
+    elif y0 == y1:
+        a = 0
+        b = 1
+        c = -y1
+    else:
+        a = y0 - y1
+        b = x0 - x1
+        c = x0*y1 - x1*y0
+    return a, b, c
+
+
+@cbook.deprecated("3.1")
+def line2d_dist(l, p):
+    """
+    Distance from line to point
+    line is a tuple of coefficients a, b, c
+    """
+    a, b, c = l
+    x0, y0 = p
+    return abs((a*x0 + b*y0 + c) / np.hypot(a, b))
+
+
+def _line2d_seg_dist(p1, p2, p0):
+    """distance(s) from line defined by p1 - p2 to point(s) p0
+
+    p0[0] = x(s)
+    p0[1] = y(s)
+
+    intersection point p = p1 + u*(p2-p1)
+    and intersection point lies within segment if u is between 0 and 1
+    """
+
+    x21 = p2[0] - p1[0]
+    y21 = p2[1] - p1[1]
+    x01 = np.asarray(p0[0]) - p1[0]
+    y01 = np.asarray(p0[1]) - p1[1]
+
+    u = (x01*x21 + y01*y21) / (x21**2 + y21**2)
+    u = np.clip(u, 0, 1)
+    d = np.hypot(x01 - u*x21, y01 - u*y21)
+
+    return d
+
+
+@cbook.deprecated("3.1")
+def line2d_seg_dist(p1, p2, p0):
+    """distance(s) from line defined by p1 - p2 to point(s) p0
+
+    p0[0] = x(s)
+    p0[1] = y(s)
+
+    intersection point p = p1 + u*(p2-p1)
+    and intersection point lies within segment if u is between 0 and 1
+    """
+    return _line2d_seg_dist(p1, p2, p0)
+
+
+@cbook.deprecated("3.1", alternative="np.linalg.norm")
+def mod(v):
+    """3d vector length"""
+    return np.sqrt(v[0]**2+v[1]**2+v[2]**2)
+
+
+def world_transformation(xmin, xmax,
+                         ymin, ymax,
+                         zmin, zmax):
+    dx, dy, dz = (xmax-xmin), (ymax-ymin), (zmax-zmin)
+    return np.array([[1/dx, 0,    0,    -xmin/dx],
+                     [0,    1/dy, 0,    -ymin/dy],
+                     [0,    0,    1/dz, -zmin/dz],
+                     [0,    0,    0,    1]])
+
+
+def view_transformation(E, R, V):
+    n = (E - R)
+    ## new
+#    n /= np.linalg.norm(n)
+#    u = np.cross(V, n)
+#    u /= np.linalg.norm(u)
+#    v = np.cross(n, u)
+#    Mr = np.diag([1.] * 4)
+#    Mt = np.diag([1.] * 4)
+#    Mr[:3,:3] = u, v, n
+#    Mt[:3,-1] = -E
+    ## end new
+
+    ## old
+    n = n / np.linalg.norm(n)
+    u = np.cross(V, n)
+    u = u / np.linalg.norm(u)
+    v = np.cross(n, u)
+    Mr = [[u[0], u[1], u[2], 0],
+          [v[0], v[1], v[2], 0],
+          [n[0], n[1], n[2], 0],
+          [0,    0,    0,    1]]
+    #
+    Mt = [[1, 0, 0, -E[0]],
+          [0, 1, 0, -E[1]],
+          [0, 0, 1, -E[2]],
+          [0, 0, 0, 1]]
+    ## end old
+
+    return np.dot(Mr, Mt)
+
+
+def persp_transformation(zfront, zback):
+    a = (zfront+zback)/(zfront-zback)
+    b = -2*(zfront*zback)/(zfront-zback)
+    return np.array([[1, 0, 0, 0],
+                     [0, 1, 0, 0],
+                     [0, 0, a, b],
+                     [0, 0, -1, 0]])
+
+
+def ortho_transformation(zfront, zback):
+    # note: w component in the resulting vector will be (zback-zfront), not 1
+    a = -(zfront + zback)
+    b = -(zfront - zback)
+    return np.array([[2, 0, 0, 0],
+                     [0, 2, 0, 0],
+                     [0, 0, -2, 0],
+                     [0, 0, a, b]])
+
+
+def _proj_transform_vec(vec, M):
+    vecw = np.dot(M, vec)
+    w = vecw[3]
+    # clip here..
+    txs, tys, tzs = vecw[0]/w, vecw[1]/w, vecw[2]/w
+    return txs, tys, tzs
+
+
+@cbook.deprecated("3.1")
+def proj_transform_vec(vec, M):
+    return _proj_transform_vec(vec, M)
+
+
+def _proj_transform_vec_clip(vec, M):
+    vecw = np.dot(M, vec)
+    w = vecw[3]
+    # clip here.
+    txs, tys, tzs = vecw[0] / w, vecw[1] / w, vecw[2] / w
+    tis = (0 <= vecw[0]) & (vecw[0] <= 1) & (0 <= vecw[1]) & (vecw[1] <= 1)
+    if np.any(tis):
+        tis = vecw[1] < 1
+    return txs, tys, tzs, tis
+
+
+@cbook.deprecated("3.1")
+def proj_transform_vec_clip(vec, M):
+    return _proj_transform_vec_clip(vec, M)
+
+
+def inv_transform(xs, ys, zs, M):
+    iM = linalg.inv(M)
+    vec = _vec_pad_ones(xs, ys, zs)
+    vecr = np.dot(iM, vec)
+    try:
+        vecr = vecr / vecr[3]
+    except OverflowError:
+        pass
+    return vecr[0], vecr[1], vecr[2]
+
+
+def _vec_pad_ones(xs, ys, zs):
+    return np.array([xs, ys, zs, np.ones_like(xs)])
+
+
+@cbook.deprecated("3.1")
+def vec_pad_ones(xs, ys, zs):
+    return _vec_pad_ones(xs, ys, zs)
+
+
+def proj_transform(xs, ys, zs, M):
+    """
+    Transform the points by the projection matrix
+    """
+    vec = _vec_pad_ones(xs, ys, zs)
+    return _proj_transform_vec(vec, M)
+
+
+transform = proj_transform
+
+
+def proj_transform_clip(xs, ys, zs, M):
+    """
+    Transform the points by the projection matrix
+    and return the clipping result
+    returns txs, tys, tzs, tis
+    """
+    vec = _vec_pad_ones(xs, ys, zs)
+    return _proj_transform_vec_clip(vec, M)
+
+
+def proj_points(points, M):
+    return np.column_stack(proj_trans_points(points, M))
+
+
+def proj_trans_points(points, M):
+    xs, ys, zs = zip(*points)
+    return proj_transform(xs, ys, zs, M)
+
+
+@cbook.deprecated("3.1")
+def proj_trans_clip_points(points, M):
+    xs, ys, zs = zip(*points)
+    return proj_transform_clip(xs, ys, zs, M)
+
+
+def rot_x(V, alpha):
+    cosa, sina = np.cos(alpha), np.sin(alpha)
+    M1 = np.array([[1, 0, 0, 0],
+                   [0, cosa, -sina, 0],
+                   [0, sina, cosa, 0],
+                   [0, 0, 0, 1]])
+    return np.dot(M1, V)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/art3d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/art3d.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/art3d.py	(date 1589417755515)
@@ -0,0 +1,854 @@
+# art3d.py, original mplot3d version by John Porter
+# Parts rewritten by Reinier Heeres <reinier@heeres.eu>
+# Minor additions by Ben Axelrod <baxelrod@coroware.com>
+
+"""
+Module containing 3D artist code and functions to convert 2D
+artists into 3D versions which can be added to an Axes3D.
+"""
+
+import math
+
+import numpy as np
+
+from matplotlib import (
+    artist, cbook, colors as mcolors, lines, text as mtext, path as mpath)
+from matplotlib.collections import (
+    LineCollection, PolyCollection, PatchCollection, PathCollection)
+from matplotlib.colors import Normalize
+from matplotlib.patches import Patch
+from . import proj3d
+
+
+def _norm_angle(a):
+    """Return the given angle normalized to -180 < *a* <= 180 degrees."""
+    a = (a + 360) % 360
+    if a > 180:
+        a = a - 360
+    return a
+
+
+@cbook.deprecated("3.1")
+def norm_angle(a):
+    """Return the given angle normalized to -180 < *a* <= 180 degrees."""
+    return _norm_angle(a)
+
+
+def _norm_text_angle(a):
+    """Return the given angle normalized to -90 < *a* <= 90 degrees."""
+    a = (a + 180) % 180
+    if a > 90:
+        a = a - 180
+    return a
+
+
+@cbook.deprecated("3.1")
+def norm_text_angle(a):
+    """Return the given angle normalized to -90 < *a* <= 90 degrees."""
+    return _norm_text_angle(a)
+
+
+def get_dir_vector(zdir):
+    """
+    Return a direction vector.
+
+    Parameters
+    ----------
+    zdir : {'x', 'y', 'z', None, 3-tuple}
+        The direction. Possible values are:
+        - 'x': equivalent to (1, 0, 0)
+        - 'y': equivalent to (0, 1, 0)
+        - 'z': equivalent to (0, 0, 1)
+        - *None*: equivalent to (0, 0, 0)
+        - an iterable (x, y, z) is returned unchanged.
+
+    Returns
+    -------
+    x, y, z : array-like
+        The direction vector. This is either a numpy.array or *zdir* itself if
+        *zdir* is already a length-3 iterable.
+
+    """
+    if zdir == 'x':
+        return np.array((1, 0, 0))
+    elif zdir == 'y':
+        return np.array((0, 1, 0))
+    elif zdir == 'z':
+        return np.array((0, 0, 1))
+    elif zdir is None:
+        return np.array((0, 0, 0))
+    elif np.iterable(zdir) and len(zdir) == 3:
+        return zdir
+    else:
+        raise ValueError("'x', 'y', 'z', None or vector of length 3 expected")
+
+
+class Text3D(mtext.Text):
+    """
+    Text object with 3D position and direction.
+
+    Parameters
+    ----------
+    x, y, z
+        The position of the text.
+    text : str
+        The text string to display.
+    zdir : {'x', 'y', 'z', None, 3-tuple}
+        The direction of the text. See `.get_dir_vector` for a description of
+        the values.
+
+    Other Parameters
+    ----------------
+    **kwargs
+         All other parameters are passed on to `~matplotlib.text.Text`.
+   """
+
+    def __init__(self, x=0, y=0, z=0, text='', zdir='z', **kwargs):
+        mtext.Text.__init__(self, x, y, text, **kwargs)
+        self.set_3d_properties(z, zdir)
+
+    def set_3d_properties(self, z=0, zdir='z'):
+        x, y = self.get_position()
+        self._position3d = np.array((x, y, z))
+        self._dir_vec = get_dir_vector(zdir)
+        self.stale = True
+
+    @artist.allow_rasterization
+    def draw(self, renderer):
+        proj = proj3d.proj_trans_points(
+            [self._position3d, self._position3d + self._dir_vec], renderer.M)
+        dx = proj[0][1] - proj[0][0]
+        dy = proj[1][1] - proj[1][0]
+        angle = math.degrees(math.atan2(dy, dx))
+        self.set_position((proj[0][0], proj[1][0]))
+        self.set_rotation(_norm_text_angle(angle))
+        mtext.Text.draw(self, renderer)
+        self.stale = False
+
+    def get_tightbbox(self, renderer):
+        # Overwriting the 2d Text behavior which is not valid for 3d.
+        # For now, just return None to exclude from layout calculation.
+        return None
+
+
+def text_2d_to_3d(obj, z=0, zdir='z'):
+    """Convert a Text to a Text3D object."""
+    obj.__class__ = Text3D
+    obj.set_3d_properties(z, zdir)
+
+
+class Line3D(lines.Line2D):
+    """
+    3D line object.
+    """
+
+    def __init__(self, xs, ys, zs, *args, **kwargs):
+        """
+        Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.
+        """
+        lines.Line2D.__init__(self, [], [], *args, **kwargs)
+        self._verts3d = xs, ys, zs
+
+    def set_3d_properties(self, zs=0, zdir='z'):
+        xs = self.get_xdata()
+        ys = self.get_ydata()
+
+        try:
+            # If *zs* is a list or array, then this will fail and
+            # just proceed to juggle_axes().
+            zs = np.full_like(xs, fill_value=float(zs))
+        except TypeError:
+            pass
+        self._verts3d = juggle_axes(xs, ys, zs, zdir)
+        self.stale = True
+
+    def set_data_3d(self, *args):
+        """
+        Set the x, y and z data
+
+        Parameters
+        ----------
+        x : array-like
+            The x-data to be plotted.
+        y : array-like
+            The y-data to be plotted.
+        z : array-like
+            The z-data to be plotted.
+
+        Notes
+        -----
+        Accepts x, y, z arguments or a single array-like (x, y, z)
+        """
+        if len(args) == 1:
+            self._verts3d = args[0]
+        else:
+            self._verts3d = args
+        self.stale = True
+
+    def get_data_3d(self):
+        """
+        Get the current data
+
+        Returns
+        -------
+        verts3d : length-3 tuple or array-likes
+            The current data as a tuple or array-likes.
+        """
+        return self._verts3d
+
+    @artist.allow_rasterization
+    def draw(self, renderer):
+        xs3d, ys3d, zs3d = self._verts3d
+        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
+        self.set_data(xs, ys)
+        lines.Line2D.draw(self, renderer)
+        self.stale = False
+
+
+def line_2d_to_3d(line, zs=0, zdir='z'):
+    """Convert a 2D line to 3D."""
+
+    line.__class__ = Line3D
+    line.set_3d_properties(zs, zdir)
+
+
+def _path_to_3d_segment(path, zs=0, zdir='z'):
+    """Convert a path to a 3D segment."""
+
+    zs = np.broadcast_to(zs, len(path))
+    pathsegs = path.iter_segments(simplify=False, curves=False)
+    seg = [(x, y, z) for (((x, y), code), z) in zip(pathsegs, zs)]
+    seg3d = [juggle_axes(x, y, z, zdir) for (x, y, z) in seg]
+    return seg3d
+
+
+@cbook.deprecated("3.1")
+def path_to_3d_segment(path, zs=0, zdir='z'):
+    """Convert a path to a 3D segment."""
+    return _path_to_3d_segment(path, zs=zs, zdir=zdir)
+
+
+def _paths_to_3d_segments(paths, zs=0, zdir='z'):
+    """Convert paths from a collection object to 3D segments."""
+
+    zs = np.broadcast_to(zs, len(paths))
+    segs = [_path_to_3d_segment(path, pathz, zdir)
+            for path, pathz in zip(paths, zs)]
+    return segs
+
+
+@cbook.deprecated("3.1")
+def paths_to_3d_segments(paths, zs=0, zdir='z'):
+    """Convert paths from a collection object to 3D segments."""
+    return _paths_to_3d_segments(paths, zs=zs, zdir=zdir)
+
+
+def _path_to_3d_segment_with_codes(path, zs=0, zdir='z'):
+    """Convert a path to a 3D segment with path codes."""
+
+    zs = np.broadcast_to(zs, len(path))
+    pathsegs = path.iter_segments(simplify=False, curves=False)
+    seg_codes = [((x, y, z), code) for ((x, y), code), z in zip(pathsegs, zs)]
+    if seg_codes:
+        seg, codes = zip(*seg_codes)
+        seg3d = [juggle_axes(x, y, z, zdir) for (x, y, z) in seg]
+    else:
+        seg3d = []
+        codes = []
+    return seg3d, list(codes)
+
+
+@cbook.deprecated("3.1")
+def path_to_3d_segment_with_codes(path, zs=0, zdir='z'):
+    """Convert a path to a 3D segment with path codes."""
+    return _path_to_3d_segment_with_codes(path, zs=zs, zdir=zdir)
+
+
+def _paths_to_3d_segments_with_codes(paths, zs=0, zdir='z'):
+    """
+    Convert paths from a collection object to 3D segments with path codes.
+    """
+
+    zs = np.broadcast_to(zs, len(paths))
+    segments_codes = [_path_to_3d_segment_with_codes(path, pathz, zdir)
+                      for path, pathz in zip(paths, zs)]
+    if segments_codes:
+        segments, codes = zip(*segments_codes)
+    else:
+        segments, codes = [], []
+    return list(segments), list(codes)
+
+
+@cbook.deprecated("3.1")
+def paths_to_3d_segments_with_codes(paths, zs=0, zdir='z'):
+    """
+    Convert paths from a collection object to 3D segments with path codes.
+    """
+    return _paths_to_3d_segments_with_codes(paths, zs=zs, zdir=zdir)
+
+
+class Line3DCollection(LineCollection):
+    """
+    A collection of 3D lines.
+    """
+
+    def set_sort_zpos(self, val):
+        """Set the position to use for z-sorting."""
+        self._sort_zpos = val
+        self.stale = True
+
+    def set_segments(self, segments):
+        """
+        Set 3D segments.
+        """
+        self._segments3d = np.asanyarray(segments)
+        LineCollection.set_segments(self, [])
+
+    def do_3d_projection(self, renderer):
+        """
+        Project the points according to renderer matrix.
+        """
+        xyslist = [
+            proj3d.proj_trans_points(points, renderer.M) for points in
+            self._segments3d]
+        segments_2d = [np.column_stack([xs, ys]) for xs, ys, zs in xyslist]
+        LineCollection.set_segments(self, segments_2d)
+
+        # FIXME
+        minz = 1e9
+        for xs, ys, zs in xyslist:
+            minz = min(minz, min(zs))
+        return minz
+
+    @artist.allow_rasterization
+    def draw(self, renderer, project=False):
+        if project:
+            self.do_3d_projection(renderer)
+        LineCollection.draw(self, renderer)
+
+
+def line_collection_2d_to_3d(col, zs=0, zdir='z'):
+    """Convert a LineCollection to a Line3DCollection object."""
+    segments3d = _paths_to_3d_segments(col.get_paths(), zs, zdir)
+    col.__class__ = Line3DCollection
+    col.set_segments(segments3d)
+
+
+class Patch3D(Patch):
+    """
+    3D patch object.
+    """
+
+    def __init__(self, *args, zs=(), zdir='z', **kwargs):
+        Patch.__init__(self, *args, **kwargs)
+        self.set_3d_properties(zs, zdir)
+
+    def set_3d_properties(self, verts, zs=0, zdir='z'):
+        zs = np.broadcast_to(zs, len(verts))
+        self._segment3d = [juggle_axes(x, y, z, zdir)
+                           for ((x, y), z) in zip(verts, zs)]
+        self._facecolor3d = Patch.get_facecolor(self)
+
+    def get_path(self):
+        return self._path2d
+
+    def get_facecolor(self):
+        return self._facecolor2d
+
+    def do_3d_projection(self, renderer):
+        s = self._segment3d
+        xs, ys, zs = zip(*s)
+        vxs, vys, vzs, vis = proj3d.proj_transform_clip(xs, ys, zs, renderer.M)
+        self._path2d = mpath.Path(np.column_stack([vxs, vys]))
+        # FIXME: coloring
+        self._facecolor2d = self._facecolor3d
+        return min(vzs)
+
+
+class PathPatch3D(Patch3D):
+    """
+    3D PathPatch object.
+    """
+
+    def __init__(self, path, *, zs=(), zdir='z', **kwargs):
+        Patch.__init__(self, **kwargs)
+        self.set_3d_properties(path, zs, zdir)
+
+    def set_3d_properties(self, path, zs=0, zdir='z'):
+        Patch3D.set_3d_properties(self, path.vertices, zs=zs, zdir=zdir)
+        self._code3d = path.codes
+
+    def do_3d_projection(self, renderer):
+        s = self._segment3d
+        xs, ys, zs = zip(*s)
+        vxs, vys, vzs, vis = proj3d.proj_transform_clip(xs, ys, zs, renderer.M)
+        self._path2d = mpath.Path(np.column_stack([vxs, vys]), self._code3d)
+        # FIXME: coloring
+        self._facecolor2d = self._facecolor3d
+        return min(vzs)
+
+
+def _get_patch_verts(patch):
+    """Return a list of vertices for the path of a patch."""
+    trans = patch.get_patch_transform()
+    path = patch.get_path()
+    polygons = path.to_polygons(trans)
+    if len(polygons):
+        return polygons[0]
+    else:
+        return []
+
+
+@cbook.deprecated("3.1")
+def get_patch_verts(patch):
+    """Return a list of vertices for the path of a patch."""
+    return _get_patch_verts(patch)
+
+
+def patch_2d_to_3d(patch, z=0, zdir='z'):
+    """Convert a Patch to a Patch3D object."""
+    verts = _get_patch_verts(patch)
+    patch.__class__ = Patch3D
+    patch.set_3d_properties(verts, z, zdir)
+
+
+def pathpatch_2d_to_3d(pathpatch, z=0, zdir='z'):
+    """Convert a PathPatch to a PathPatch3D object."""
+    path = pathpatch.get_path()
+    trans = pathpatch.get_patch_transform()
+
+    mpath = trans.transform_path(path)
+    pathpatch.__class__ = PathPatch3D
+    pathpatch.set_3d_properties(mpath, z, zdir)
+
+
+class Patch3DCollection(PatchCollection):
+    """
+    A collection of 3D patches.
+    """
+
+    def __init__(self, *args, zs=0, zdir='z', depthshade=True, **kwargs):
+        """
+        Create a collection of flat 3D patches with its normal vector
+        pointed in *zdir* direction, and located at *zs* on the *zdir*
+        axis. 'zs' can be a scalar or an array-like of the same length as
+        the number of patches in the collection.
+
+        Constructor arguments are the same as for
+        :class:`~matplotlib.collections.PatchCollection`. In addition,
+        keywords *zs=0* and *zdir='z'* are available.
+
+        Also, the keyword argument "depthshade" is available to
+        indicate whether or not to shade the patches in order to
+        give the appearance of depth (default is *True*).
+        This is typically desired in scatter plots.
+        """
+        self._depthshade = depthshade
+        super().__init__(*args, **kwargs)
+        self.set_3d_properties(zs, zdir)
+
+    def set_sort_zpos(self, val):
+        """Set the position to use for z-sorting."""
+        self._sort_zpos = val
+        self.stale = True
+
+    def set_3d_properties(self, zs, zdir):
+        # Force the collection to initialize the face and edgecolors
+        # just in case it is a scalarmappable with a colormap.
+        self.update_scalarmappable()
+        offsets = self.get_offsets()
+        if len(offsets) > 0:
+            xs, ys = offsets.T
+        else:
+            xs = []
+            ys = []
+        self._offsets3d = juggle_axes(xs, ys, np.atleast_1d(zs), zdir)
+        self._facecolor3d = self.get_facecolor()
+        self._edgecolor3d = self.get_edgecolor()
+        self.stale = True
+
+    def do_3d_projection(self, renderer):
+        xs, ys, zs = self._offsets3d
+        vxs, vys, vzs, vis = proj3d.proj_transform_clip(xs, ys, zs, renderer.M)
+
+        fcs = (_zalpha(self._facecolor3d, vzs) if self._depthshade else
+               self._facecolor3d)
+        fcs = mcolors.to_rgba_array(fcs, self._alpha)
+        self.set_facecolors(fcs)
+
+        ecs = (_zalpha(self._edgecolor3d, vzs) if self._depthshade else
+               self._edgecolor3d)
+        ecs = mcolors.to_rgba_array(ecs, self._alpha)
+        self.set_edgecolors(ecs)
+        PatchCollection.set_offsets(self, np.column_stack([vxs, vys]))
+
+        if vzs.size > 0:
+            return min(vzs)
+        else:
+            return np.nan
+
+
+class Path3DCollection(PathCollection):
+    """
+    A collection of 3D paths.
+    """
+
+    def __init__(self, *args, zs=0, zdir='z', depthshade=True, **kwargs):
+        """
+        Create a collection of flat 3D paths with its normal vector
+        pointed in *zdir* direction, and located at *zs* on the *zdir*
+        axis. 'zs' can be a scalar or an array-like of the same length as
+        the number of paths in the collection.
+
+        Constructor arguments are the same as for
+        :class:`~matplotlib.collections.PathCollection`. In addition,
+        keywords *zs=0* and *zdir='z'* are available.
+
+        Also, the keyword argument "depthshade" is available to
+        indicate whether or not to shade the patches in order to
+        give the appearance of depth (default is *True*).
+        This is typically desired in scatter plots.
+        """
+        self._depthshade = depthshade
+        super().__init__(*args, **kwargs)
+        self.set_3d_properties(zs, zdir)
+
+    def set_sort_zpos(self, val):
+        """Set the position to use for z-sorting."""
+        self._sort_zpos = val
+        self.stale = True
+
+    def set_3d_properties(self, zs, zdir):
+        # Force the collection to initialize the face and edgecolors
+        # just in case it is a scalarmappable with a colormap.
+        self.update_scalarmappable()
+        offsets = self.get_offsets()
+        if len(offsets) > 0:
+            xs, ys = offsets.T
+        else:
+            xs = []
+            ys = []
+        self._offsets3d = juggle_axes(xs, ys, np.atleast_1d(zs), zdir)
+        self._facecolor3d = self.get_facecolor()
+        self._edgecolor3d = self.get_edgecolor()
+        self.stale = True
+
+    def do_3d_projection(self, renderer):
+        xs, ys, zs = self._offsets3d
+        vxs, vys, vzs, vis = proj3d.proj_transform_clip(xs, ys, zs, renderer.M)
+
+        fcs = (_zalpha(self._facecolor3d, vzs) if self._depthshade else
+               self._facecolor3d)
+        fcs = mcolors.to_rgba_array(fcs, self._alpha)
+        self.set_facecolors(fcs)
+
+        ecs = (_zalpha(self._edgecolor3d, vzs) if self._depthshade else
+               self._edgecolor3d)
+        ecs = mcolors.to_rgba_array(ecs, self._alpha)
+        self.set_edgecolors(ecs)
+        PathCollection.set_offsets(self, np.column_stack([vxs, vys]))
+
+        return np.min(vzs) if vzs.size else np.nan
+
+
+def patch_collection_2d_to_3d(col, zs=0, zdir='z', depthshade=True):
+    """
+    Convert a :class:`~matplotlib.collections.PatchCollection` into a
+    :class:`Patch3DCollection` object
+    (or a :class:`~matplotlib.collections.PathCollection` into a
+    :class:`Path3DCollection` object).
+
+    Parameters
+    ----------
+    za
+        The location or locations to place the patches in the collection along
+        the *zdir* axis. Default: 0.
+    zdir
+        The axis in which to place the patches. Default: "z".
+    depthshade
+        Whether to shade the patches to give a sense of depth. Default: *True*.
+
+    """
+    if isinstance(col, PathCollection):
+        col.__class__ = Path3DCollection
+    elif isinstance(col, PatchCollection):
+        col.__class__ = Patch3DCollection
+    col._depthshade = depthshade
+    col.set_3d_properties(zs, zdir)
+
+
+class Poly3DCollection(PolyCollection):
+    """
+    A collection of 3D polygons.
+
+    .. note::
+        **Filling of 3D polygons**
+
+        There is no simple definition of the enclosed surface of a 3D polygon
+        unless the polygon is planar.
+
+        In practice, Matplotlib performs the filling on the 2D projection of
+        the polygon. This gives a correct filling appearance only for planar
+        polygons. For all other polygons, you'll find orientations in which
+        the edges of the polygon intersect in the projection. This will lead
+        to an incorrect visualization of the 3D area.
+
+        If you need filled areas, it is recommended to create them via
+        `~mpl_toolkits.mplot3d.axes3d.Axes3D.plot_trisurf`, which creates a
+        triangulation and thus generates consistent surfaces.
+    """
+
+    def __init__(self, verts, *args, zsort='average', **kwargs):
+        """
+        Parameters
+        ----------
+        verts : list of array-like Nx3
+            Each element describes a polygon as a sequnce of ``N_i`` points
+            ``(x, y, z)``.
+        zsort : {'average', 'min', 'max'}, default: 'average'
+            The calculation method for the z-order.
+            See `~.Poly3DCollection.set_zsort` for details.
+        *args, **kwargs
+            All other parameters are forwarded to `.PolyCollection`.
+
+        Notes
+        -----
+        Note that this class does a bit of magic with the _facecolors
+        and _edgecolors properties.
+        """
+        super().__init__(verts, *args, **kwargs)
+        self.set_zsort(zsort)
+        self._codes3d = None
+
+    _zsort_functions = {
+        'average': np.average,
+        'min': np.min,
+        'max': np.max,
+    }
+
+    def set_zsort(self, zsort):
+        """
+        Sets the calculation method for the z-order.
+
+        Parameters
+        ----------
+        zsort : {'average', 'min', 'max'}
+            The function applied on the z-coordinates of the vertices in the
+            viewer's coordinate system, to determine the z-order.  *True* is
+            deprecated and equivalent to 'average'.
+        """
+        if zsort is True:
+            cbook.warn_deprecated(
+                "3.1", message="Passing True to mean 'average' for set_zsort "
+                "is deprecated and support will be removed in Matplotlib 3.3; "
+                "pass 'average' instead.")
+            zsort = 'average'
+        self._zsortfunc = self._zsort_functions[zsort]
+        self._sort_zpos = None
+        self.stale = True
+
+    def get_vector(self, segments3d):
+        """Optimize points for projection."""
+        if len(segments3d):
+            xs, ys, zs = np.row_stack(segments3d).T
+        else:  # row_stack can't stack zero arrays.
+            xs, ys, zs = [], [], []
+        ones = np.ones(len(xs))
+        self._vec = np.array([xs, ys, zs, ones])
+
+        indices = [0, *np.cumsum([len(segment) for segment in segments3d])]
+        self._segslices = [*map(slice, indices[:-1], indices[1:])]
+
+    def set_verts(self, verts, closed=True):
+        """Set 3D vertices."""
+        self.get_vector(verts)
+        # 2D verts will be updated at draw time
+        PolyCollection.set_verts(self, [], False)
+        self._closed = closed
+
+    def set_verts_and_codes(self, verts, codes):
+        """Sets 3D vertices with path codes."""
+        # set vertices with closed=False to prevent PolyCollection from
+        # setting path codes
+        self.set_verts(verts, closed=False)
+        # and set our own codes instead.
+        self._codes3d = codes
+
+    def set_3d_properties(self):
+        # Force the collection to initialize the face and edgecolors
+        # just in case it is a scalarmappable with a colormap.
+        self.update_scalarmappable()
+        self._sort_zpos = None
+        self.set_zsort('average')
+        self._facecolors3d = PolyCollection.get_facecolor(self)
+        self._edgecolors3d = PolyCollection.get_edgecolor(self)
+        self._alpha3d = PolyCollection.get_alpha(self)
+        self.stale = True
+
+    def set_sort_zpos(self, val):
+        """Set the position to use for z-sorting."""
+        self._sort_zpos = val
+        self.stale = True
+
+    def do_3d_projection(self, renderer):
+        """
+        Perform the 3D projection for this object.
+        """
+        # FIXME: This may no longer be needed?
+        if self._A is not None:
+            self.update_scalarmappable()
+            self._facecolors3d = self._facecolors
+
+        txs, tys, tzs = proj3d._proj_transform_vec(self._vec, renderer.M)
+        xyzlist = [(txs[sl], tys[sl], tzs[sl]) for sl in self._segslices]
+
+        # This extra fuss is to re-order face / edge colors
+        cface = self._facecolors3d
+        cedge = self._edgecolors3d
+        if len(cface) != len(xyzlist):
+            cface = cface.repeat(len(xyzlist), axis=0)
+        if len(cedge) != len(xyzlist):
+            if len(cedge) == 0:
+                cedge = cface
+            else:
+                cedge = cedge.repeat(len(xyzlist), axis=0)
+
+        # sort by depth (furthest drawn first)
+        z_segments_2d = sorted(
+            ((self._zsortfunc(zs), np.column_stack([xs, ys]), fc, ec, idx)
+             for idx, ((xs, ys, zs), fc, ec)
+             in enumerate(zip(xyzlist, cface, cedge))),
+            key=lambda x: x[0], reverse=True)
+
+        segments_2d = [s for z, s, fc, ec, idx in z_segments_2d]
+        if self._codes3d is not None:
+            codes = [self._codes3d[idx] for z, s, fc, ec, idx in z_segments_2d]
+            PolyCollection.set_verts_and_codes(self, segments_2d, codes)
+        else:
+            PolyCollection.set_verts(self, segments_2d, self._closed)
+
+        self._facecolors2d = [fc for z, s, fc, ec, idx in z_segments_2d]
+        if len(self._edgecolors3d) == len(cface):
+            self._edgecolors2d = [ec for z, s, fc, ec, idx in z_segments_2d]
+        else:
+            self._edgecolors2d = self._edgecolors3d
+
+        # Return zorder value
+        if self._sort_zpos is not None:
+            zvec = np.array([[0], [0], [self._sort_zpos], [1]])
+            ztrans = proj3d._proj_transform_vec(zvec, renderer.M)
+            return ztrans[2][0]
+        elif tzs.size > 0:
+            # FIXME: Some results still don't look quite right.
+            #        In particular, examine contourf3d_demo2.py
+            #        with az = -54 and elev = -45.
+            return np.min(tzs)
+        else:
+            return np.nan
+
+    def set_facecolor(self, colors):
+        PolyCollection.set_facecolor(self, colors)
+        self._facecolors3d = PolyCollection.get_facecolor(self)
+
+    def set_edgecolor(self, colors):
+        PolyCollection.set_edgecolor(self, colors)
+        self._edgecolors3d = PolyCollection.get_edgecolor(self)
+
+    def set_alpha(self, alpha):
+        # docstring inherited
+        artist.Artist.set_alpha(self, alpha)
+        try:
+            self._facecolors3d = mcolors.to_rgba_array(
+                self._facecolors3d, self._alpha)
+        except (AttributeError, TypeError, IndexError):
+            pass
+        try:
+            self._edgecolors = mcolors.to_rgba_array(
+                    self._edgecolors3d, self._alpha)
+        except (AttributeError, TypeError, IndexError):
+            pass
+        self.stale = True
+
+    def get_facecolor(self):
+        return self._facecolors2d
+
+    def get_edgecolor(self):
+        return self._edgecolors2d
+
+
+def poly_collection_2d_to_3d(col, zs=0, zdir='z'):
+    """Convert a PolyCollection to a Poly3DCollection object."""
+    segments_3d, codes = _paths_to_3d_segments_with_codes(
+            col.get_paths(), zs, zdir)
+    col.__class__ = Poly3DCollection
+    col.set_verts_and_codes(segments_3d, codes)
+    col.set_3d_properties()
+
+
+def juggle_axes(xs, ys, zs, zdir):
+    """
+    Reorder coordinates so that 2D xs, ys can be plotted in the plane
+    orthogonal to zdir. zdir is normally x, y or z. However, if zdir
+    starts with a '-' it is interpreted as a compensation for rotate_axes.
+    """
+    if zdir == 'x':
+        return zs, xs, ys
+    elif zdir == 'y':
+        return xs, zs, ys
+    elif zdir[0] == '-':
+        return rotate_axes(xs, ys, zs, zdir)
+    else:
+        return xs, ys, zs
+
+
+def rotate_axes(xs, ys, zs, zdir):
+    """
+    Reorder coordinates so that the axes are rotated with zdir along
+    the original z axis. Prepending the axis with a '-' does the
+    inverse transform, so zdir can be x, -x, y, -y, z or -z
+    """
+    if zdir == 'x':
+        return ys, zs, xs
+    elif zdir == '-x':
+        return zs, xs, ys
+
+    elif zdir == 'y':
+        return zs, xs, ys
+    elif zdir == '-y':
+        return ys, zs, xs
+
+    else:
+        return xs, ys, zs
+
+
+def _get_colors(c, num):
+    """Stretch the color argument to provide the required number *num*."""
+    return np.broadcast_to(
+        mcolors.to_rgba_array(c) if len(c) else [0, 0, 0, 0],
+        (num, 4))
+
+
+@cbook.deprecated("3.1")
+def get_colors(c, num):
+    """Stretch the color argument to provide the required number *num*."""
+    return _get_colors(c, num)
+
+
+def _zalpha(colors, zs):
+    """Modify the alphas of the color list according to depth."""
+    # FIXME: This only works well if the points for *zs* are well-spaced
+    #        in all three dimensions. Otherwise, at certain orientations,
+    #        the min and max zs are very close together.
+    #        Should really normalize against the viewing depth.
+    if len(zs) == 0:
+        return np.zeros((0, 4))
+    norm = Normalize(min(zs), max(zs))
+    sats = 1 - norm(zs) * 0.7
+    rgba = np.broadcast_to(mcolors.to_rgba_array(colors), (len(zs), 4))
+    return np.column_stack([rgba[:, :3], rgba[:, 3] * sats])
+
+
+@cbook.deprecated("3.1")
+def zalpha(colors, zs):
+    """Modify the alphas of the color list according to depth."""
+    return _zalpha(colors, zs)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/__init__.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/__init__.py	(date 1589417755515)
@@ -0,0 +1,1 @@
+from .axes3d import Axes3D
Index: venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axis3d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axis3d.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axis3d.py	(date 1589417755515)
@@ -0,0 +1,439 @@
+# axis3d.py, original mplot3d version by John Porter
+# Created: 23 Sep 2005
+# Parts rewritten by Reinier Heeres <reinier@heeres.eu>
+
+import numpy as np
+
+from matplotlib import (
+    artist, cbook, lines as mlines, axis as maxis, patches as mpatches,
+    rcParams)
+from . import art3d, proj3d
+
+
+@cbook.deprecated("3.1")
+def get_flip_min_max(coord, index, mins, maxs):
+    if coord[index] == mins[index]:
+        return maxs[index]
+    else:
+        return mins[index]
+
+
+def move_from_center(coord, centers, deltas, axmask=(True, True, True)):
+    """
+    For each coordinate where *axmask* is True, move *coord* away from
+    *centers* by *deltas*.
+    """
+    coord = np.asarray(coord)
+    return coord + axmask * np.copysign(1, coord - centers) * deltas
+
+
+def tick_update_position(tick, tickxs, tickys, labelpos):
+    '''Update tick line and label position and style.'''
+
+    tick.label1.set_position(labelpos)
+    tick.label2.set_position(labelpos)
+    tick.tick1line.set_visible(True)
+    tick.tick2line.set_visible(False)
+    tick.tick1line.set_linestyle('-')
+    tick.tick1line.set_marker('')
+    tick.tick1line.set_data(tickxs, tickys)
+    tick.gridline.set_data(0, 0)
+
+
+class Axis(maxis.XAxis):
+    """An Axis class for the 3D plots."""
+    # These points from the unit cube make up the x, y and z-planes
+    _PLANES = (
+        (0, 3, 7, 4), (1, 2, 6, 5),     # yz planes
+        (0, 1, 5, 4), (3, 2, 6, 7),     # xz planes
+        (0, 1, 2, 3), (4, 5, 6, 7),     # xy planes
+    )
+
+    # Some properties for the axes
+    _AXINFO = {
+        'x': {'i': 0, 'tickdir': 1, 'juggled': (1, 0, 2),
+            'color': (0.95, 0.95, 0.95, 0.5)},
+        'y': {'i': 1, 'tickdir': 0, 'juggled': (0, 1, 2),
+            'color': (0.90, 0.90, 0.90, 0.5)},
+        'z': {'i': 2, 'tickdir': 0, 'juggled': (0, 2, 1),
+            'color': (0.925, 0.925, 0.925, 0.5)},
+    }
+
+    def __init__(self, adir, v_intervalx, d_intervalx, axes, *args,
+                 rotate_label=None, **kwargs):
+        # adir identifies which axes this is
+        self.adir = adir
+
+        # This is a temporary member variable.
+        # Do not depend on this existing in future releases!
+        self._axinfo = self._AXINFO[adir].copy()
+        if rcParams['_internal.classic_mode']:
+            self._axinfo.update(
+                {'label': {'va': 'center',
+                           'ha': 'center'},
+                 'tick': {'inward_factor': 0.2,
+                          'outward_factor': 0.1,
+                          'linewidth': rcParams['lines.linewidth']},
+                 'axisline': {'linewidth': 0.75,
+                              'color': (0, 0, 0, 1)},
+                 'grid': {'color': (0.9, 0.9, 0.9, 1),
+                          'linewidth': 1.0,
+                          'linestyle': '-'},
+                 })
+        else:
+            self._axinfo.update(
+                {'label': {'va': 'center',
+                           'ha': 'center'},
+                 'tick': {'inward_factor': 0.2,
+                          'outward_factor': 0.1,
+                          'linewidth': rcParams.get(
+                              adir + 'tick.major.width',
+                              rcParams['xtick.major.width'])},
+                 'axisline': {'linewidth': rcParams['axes.linewidth'],
+                              'color': rcParams['axes.edgecolor']},
+                 'grid': {'color': rcParams['grid.color'],
+                          'linewidth': rcParams['grid.linewidth'],
+                          'linestyle': rcParams['grid.linestyle']},
+                 })
+
+        maxis.XAxis.__init__(self, axes, *args, **kwargs)
+
+        # data and viewing intervals for this direction
+        self.d_interval = d_intervalx
+        self.v_interval = v_intervalx
+        self.set_rotate_label(rotate_label)
+
+    def init3d(self):
+        self.line = mlines.Line2D(
+            xdata=(0, 0), ydata=(0, 0),
+            linewidth=self._axinfo['axisline']['linewidth'],
+            color=self._axinfo['axisline']['color'],
+            antialiased=True)
+
+        # Store dummy data in Polygon object
+        self.pane = mpatches.Polygon(
+            np.array([[0, 0], [0, 1], [1, 0], [0, 0]]),
+            closed=False, alpha=0.8, facecolor='k', edgecolor='k')
+        self.set_pane_color(self._axinfo['color'])
+
+        self.axes._set_artist_props(self.line)
+        self.axes._set_artist_props(self.pane)
+        self.gridlines = art3d.Line3DCollection([])
+        self.axes._set_artist_props(self.gridlines)
+        self.axes._set_artist_props(self.label)
+        self.axes._set_artist_props(self.offsetText)
+        # Need to be able to place the label at the correct location
+        self.label._transform = self.axes.transData
+        self.offsetText._transform = self.axes.transData
+
+    @cbook.deprecated("3.1")
+    def get_tick_positions(self):
+        majorLocs = self.major.locator()
+        majorLabels = self.major.formatter.format_ticks(majorLocs)
+        return majorLabels, majorLocs
+
+    def get_major_ticks(self, numticks=None):
+        ticks = maxis.XAxis.get_major_ticks(self, numticks)
+        for t in ticks:
+            t.tick1line.set_transform(self.axes.transData)
+            t.tick2line.set_transform(self.axes.transData)
+            t.gridline.set_transform(self.axes.transData)
+            t.label1.set_transform(self.axes.transData)
+            t.label2.set_transform(self.axes.transData)
+        return ticks
+
+    def set_pane_pos(self, xys):
+        xys = np.asarray(xys)
+        xys = xys[:, :2]
+        self.pane.xy = xys
+        self.stale = True
+
+    def set_pane_color(self, color):
+        '''Set pane color to a RGBA tuple.'''
+        self._axinfo['color'] = color
+        self.pane.set_edgecolor(color)
+        self.pane.set_facecolor(color)
+        self.pane.set_alpha(color[-1])
+        self.stale = True
+
+    def set_rotate_label(self, val):
+        '''
+        Whether to rotate the axis label: True, False or None.
+        If set to None the label will be rotated if longer than 4 chars.
+        '''
+        self._rotate_label = val
+        self.stale = True
+
+    def get_rotate_label(self, text):
+        if self._rotate_label is not None:
+            return self._rotate_label
+        else:
+            return len(text) > 4
+
+    def _get_coord_info(self, renderer):
+        mins, maxs = np.array([
+            self.axes.get_xbound(),
+            self.axes.get_ybound(),
+            self.axes.get_zbound(),
+        ]).T
+        centers = (maxs + mins) / 2.
+        deltas = (maxs - mins) / 12.
+        mins = mins - deltas / 4.
+        maxs = maxs + deltas / 4.
+
+        vals = mins[0], maxs[0], mins[1], maxs[1], mins[2], maxs[2]
+        tc = self.axes.tunit_cube(vals, renderer.M)
+        avgz = [tc[p1][2] + tc[p2][2] + tc[p3][2] + tc[p4][2]
+                for p1, p2, p3, p4 in self._PLANES]
+        highs = np.array([avgz[2*i] < avgz[2*i+1] for i in range(3)])
+
+        return mins, maxs, centers, deltas, tc, highs
+
+    def draw_pane(self, renderer):
+        renderer.open_group('pane3d', gid=self.get_gid())
+
+        mins, maxs, centers, deltas, tc, highs = self._get_coord_info(renderer)
+
+        info = self._axinfo
+        index = info['i']
+        if not highs[index]:
+            plane = self._PLANES[2 * index]
+        else:
+            plane = self._PLANES[2 * index + 1]
+        xys = [tc[p] for p in plane]
+        self.set_pane_pos(xys)
+        self.pane.draw(renderer)
+
+        renderer.close_group('pane3d')
+
+    @artist.allow_rasterization
+    def draw(self, renderer):
+        self.label._transform = self.axes.transData
+        renderer.open_group('axis3d', gid=self.get_gid())
+
+        ticks = self._update_ticks()
+
+        info = self._axinfo
+        index = info['i']
+
+        mins, maxs, centers, deltas, tc, highs = self._get_coord_info(renderer)
+
+        # Determine grid lines
+        minmax = np.where(highs, maxs, mins)
+        maxmin = np.where(highs, mins, maxs)
+
+        # Draw main axis line
+        juggled = info['juggled']
+        edgep1 = minmax.copy()
+        edgep1[juggled[0]] = maxmin[juggled[0]]
+
+        edgep2 = edgep1.copy()
+        edgep2[juggled[1]] = maxmin[juggled[1]]
+        pep = np.asarray(
+            proj3d.proj_trans_points([edgep1, edgep2], renderer.M))
+        centpt = proj3d.proj_transform(*centers, renderer.M)
+        self.line.set_data(pep[0], pep[1])
+        self.line.draw(renderer)
+
+        # Grid points where the planes meet
+        xyz0 = np.tile(minmax, (len(ticks), 1))
+        xyz0[:, index] = [tick.get_loc() for tick in ticks]
+
+        # Draw labels
+        # The transAxes transform is used because the Text object
+        # rotates the text relative to the display coordinate system.
+        # Therefore, if we want the labels to remain parallel to the
+        # axis regardless of the aspect ratio, we need to convert the
+        # edge points of the plane to display coordinates and calculate
+        # an angle from that.
+        # TODO: Maybe Text objects should handle this themselves?
+        dx, dy = (self.axes.transAxes.transform([pep[0:2, 1]]) -
+                  self.axes.transAxes.transform([pep[0:2, 0]]))[0]
+
+        lxyz = 0.5 * (edgep1 + edgep2)
+
+        # A rough estimate; points are ambiguous since 3D plots rotate
+        ax_scale = self.axes.bbox.size / self.figure.bbox.size
+        ax_inches = np.multiply(ax_scale, self.figure.get_size_inches())
+        ax_points_estimate = sum(72. * ax_inches)
+        deltas_per_point = 48 / ax_points_estimate
+        default_offset = 21.
+        labeldeltas = (
+            (self.labelpad + default_offset) * deltas_per_point * deltas)
+        axmask = [True, True, True]
+        axmask[index] = False
+        lxyz = move_from_center(lxyz, centers, labeldeltas, axmask)
+        tlx, tly, tlz = proj3d.proj_transform(*lxyz, renderer.M)
+        self.label.set_position((tlx, tly))
+        if self.get_rotate_label(self.label.get_text()):
+            angle = art3d._norm_text_angle(np.rad2deg(np.arctan2(dy, dx)))
+            self.label.set_rotation(angle)
+        self.label.set_va(info['label']['va'])
+        self.label.set_ha(info['label']['ha'])
+        self.label.draw(renderer)
+
+        # Draw Offset text
+
+        # Which of the two edge points do we want to
+        # use for locating the offset text?
+        if juggled[2] == 2:
+            outeredgep = edgep1
+            outerindex = 0
+        else:
+            outeredgep = edgep2
+            outerindex = 1
+
+        pos = move_from_center(outeredgep, centers, labeldeltas, axmask)
+        olx, oly, olz = proj3d.proj_transform(*pos, renderer.M)
+        self.offsetText.set_text(self.major.formatter.get_offset())
+        self.offsetText.set_position((olx, oly))
+        angle = art3d._norm_text_angle(np.rad2deg(np.arctan2(dy, dx)))
+        self.offsetText.set_rotation(angle)
+        # Must set rotation mode to "anchor" so that
+        # the alignment point is used as the "fulcrum" for rotation.
+        self.offsetText.set_rotation_mode('anchor')
+
+        #----------------------------------------------------------------------
+        # Note: the following statement for determining the proper alignment of
+        # the offset text. This was determined entirely by trial-and-error
+        # and should not be in any way considered as "the way".  There are
+        # still some edge cases where alignment is not quite right, but this
+        # seems to be more of a geometry issue (in other words, I might be
+        # using the wrong reference points).
+        #
+        # (TT, FF, TF, FT) are the shorthand for the tuple of
+        #   (centpt[info['tickdir']] <= pep[info['tickdir'], outerindex],
+        #    centpt[index] <= pep[index, outerindex])
+        #
+        # Three-letters (e.g., TFT, FTT) are short-hand for the array of bools
+        # from the variable 'highs'.
+        # ---------------------------------------------------------------------
+        if centpt[info['tickdir']] > pep[info['tickdir'], outerindex]:
+            # if FT and if highs has an even number of Trues
+            if (centpt[index] <= pep[index, outerindex]
+                    and np.count_nonzero(highs) % 2 == 0):
+                # Usually, this means align right, except for the FTT case,
+                # in which offset for axis 1 and 2 are aligned left.
+                if highs.tolist() == [False, True, True] and index in (1, 2):
+                    align = 'left'
+                else:
+                    align = 'right'
+            else:
+                # The FF case
+                align = 'left'
+        else:
+            # if TF and if highs has an even number of Trues
+            if (centpt[index] > pep[index, outerindex]
+                    and np.count_nonzero(highs) % 2 == 0):
+                # Usually mean align left, except if it is axis 2
+                if index == 2:
+                    align = 'right'
+                else:
+                    align = 'left'
+            else:
+                # The TT case
+                align = 'right'
+
+        self.offsetText.set_va('center')
+        self.offsetText.set_ha(align)
+        self.offsetText.draw(renderer)
+
+        if self.axes._draw_grid and len(ticks):
+            # Grid lines go from the end of one plane through the plane
+            # intersection (at xyz0) to the end of the other plane.  The first
+            # point (0) differs along dimension index-2 and the last (2) along
+            # dimension index-1.
+            lines = np.stack([xyz0, xyz0, xyz0], axis=1)
+            lines[:, 0, index - 2] = maxmin[index - 2]
+            lines[:, 2, index - 1] = maxmin[index - 1]
+            self.gridlines.set_segments(lines)
+            self.gridlines.set_color(info['grid']['color'])
+            self.gridlines.set_linewidth(info['grid']['linewidth'])
+            self.gridlines.set_linestyle(info['grid']['linestyle'])
+            self.gridlines.draw(renderer, project=True)
+
+        # Draw ticks
+        tickdir = info['tickdir']
+        tickdelta = deltas[tickdir]
+        if highs[tickdir]:
+            ticksign = 1
+        else:
+            ticksign = -1
+
+        for tick in ticks:
+            # Get tick line positions
+            pos = edgep1.copy()
+            pos[index] = tick.get_loc()
+            pos[tickdir] = (
+                edgep1[tickdir]
+                + info['tick']['outward_factor'] * ticksign * tickdelta)
+            x1, y1, z1 = proj3d.proj_transform(*pos, renderer.M)
+            pos[tickdir] = (
+                edgep1[tickdir]
+                - info['tick']['inward_factor'] * ticksign * tickdelta)
+            x2, y2, z2 = proj3d.proj_transform(*pos, renderer.M)
+
+            # Get position of label
+            default_offset = 8.  # A rough estimate
+            labeldeltas = (
+                (tick.get_pad() + default_offset) * deltas_per_point * deltas)
+
+            axmask = [True, True, True]
+            axmask[index] = False
+            pos[tickdir] = edgep1[tickdir]
+            pos = move_from_center(pos, centers, labeldeltas, axmask)
+            lx, ly, lz = proj3d.proj_transform(*pos, renderer.M)
+
+            tick_update_position(tick, (x1, x2), (y1, y2), (lx, ly))
+            tick.tick1line.set_linewidth(info['tick']['linewidth'])
+            tick.draw(renderer)
+
+        renderer.close_group('axis3d')
+        self.stale = False
+
+    # TODO: Get this to work properly when mplot3d supports
+    #       the transforms framework.
+    def get_tightbbox(self, renderer):
+        # Currently returns None so that Axis.get_tightbbox
+        # doesn't return junk info.
+        return None
+
+    @property
+    def d_interval(self):
+        return self.get_data_interval()
+
+    @d_interval.setter
+    def d_interval(self, minmax):
+        return self.set_data_interval(*minmax)
+
+    @property
+    def v_interval(self):
+        return self.get_view_interval()
+
+    @v_interval.setter
+    def v_interval(self, minmax):
+        return self.set_view_interval(*minmax)
+
+
+# Use classes to look at different data limits
+
+
+class XAxis(Axis):
+    get_view_interval, set_view_interval = maxis._make_getset_interval(
+        "view", "xy_viewLim", "intervalx")
+    get_data_interval, set_data_interval = maxis._make_getset_interval(
+        "data", "xy_dataLim", "intervalx")
+
+
+class YAxis(Axis):
+    get_view_interval, set_view_interval = maxis._make_getset_interval(
+        "view", "xy_viewLim", "intervaly")
+    get_data_interval, set_data_interval = maxis._make_getset_interval(
+        "data", "xy_dataLim", "intervaly")
+
+
+class ZAxis(Axis):
+    get_view_interval, set_view_interval = maxis._make_getset_interval(
+        "view", "zz_viewLim", "intervalx")
+    get_data_interval, set_data_interval = maxis._make_getset_interval(
+        "data", "zz_dataLim", "intervalx")
Index: venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py	(date 1589417755515)
@@ -0,0 +1,2864 @@
+"""
+axes3d.py, original mplot3d version by John Porter
+Created: 23 Sep 2005
+
+Parts fixed by Reinier Heeres <reinier@heeres.eu>
+Minor additions by Ben Axelrod <baxelrod@coroware.com>
+Significant updates and revisions by Ben Root <ben.v.root@gmail.com>
+
+Module containing Axes3D, an object which can plot 3D objects on a
+2D matplotlib figure.
+"""
+
+from collections import defaultdict
+from functools import reduce
+import math
+
+import numpy as np
+
+from matplotlib import artist
+import matplotlib.axes as maxes
+import matplotlib.cbook as cbook
+import matplotlib.collections as mcoll
+import matplotlib.colors as mcolors
+import matplotlib.docstring as docstring
+import matplotlib.scale as mscale
+from matplotlib.axes import Axes, rcParams
+from matplotlib.colors import Normalize, LightSource
+from matplotlib.transforms import Bbox
+from matplotlib.tri.triangulation import Triangulation
+
+from . import art3d
+from . import proj3d
+from . import axis3d
+
+
+@cbook.deprecated("3.2", alternative="Bbox.unit()")
+def unit_bbox():
+    box = Bbox(np.array([[0, 0], [1, 1]]))
+    return box
+
+
+class Axes3D(Axes):
+    """
+    3D axes object.
+    """
+    name = '3d'
+    _shared_z_axes = cbook.Grouper()
+
+    @docstring.dedent_interpd
+    def __init__(
+            self, fig, rect=None, *args,
+            azim=-60, elev=30, zscale=None, sharez=None, proj_type='persp',
+            **kwargs):
+        """
+        Parameters
+        ----------
+        fig : Figure
+            The parent figure.
+        rect : (float, float, float, float)
+            The ``(left, bottom, width, height)`` axes position.
+        azim : float, optional
+            Azimuthal viewing angle, defaults to -60.
+        elev : float, optional
+            Elevation viewing angle, defaults to 30.
+        zscale : %(scale_type)s, optional
+            The z scale.  Note that currently, only a linear scale is
+            supported.
+        sharez : Axes3D, optional
+            Other axes to share z-limits with.
+        proj_type : {'persp', 'ortho'}
+            The projection type, default 'persp'.
+
+        Notes
+        -----
+        .. versionadded:: 1.2.1
+            The *sharez* parameter.
+        """
+
+        if rect is None:
+            rect = [0.0, 0.0, 1.0, 1.0]
+        self._cids = []
+
+        self.initial_azim = azim
+        self.initial_elev = elev
+        self.set_proj_type(proj_type)
+
+        self.xy_viewLim = Bbox.unit()
+        self.zz_viewLim = Bbox.unit()
+        self.xy_dataLim = Bbox.unit()
+        self.zz_dataLim = Bbox.unit()
+        # inhibit autoscale_view until the axes are defined
+        # they can't be defined until Axes.__init__ has been called
+        self.view_init(self.initial_elev, self.initial_azim)
+        self._ready = 0
+
+        self._sharez = sharez
+        if sharez is not None:
+            self._shared_z_axes.join(self, sharez)
+            self._adjustable = 'datalim'
+
+        super().__init__(fig, rect, frameon=True, *args, **kwargs)
+        # Disable drawing of axes by base class
+        super().set_axis_off()
+        # Enable drawing of axes by Axes3D class
+        self.set_axis_on()
+        self.M = None
+
+        # func used to format z -- fall back on major formatters
+        self.fmt_zdata = None
+
+        if zscale is not None:
+            self.set_zscale(zscale)
+
+        if self.zaxis is not None:
+            self._zcid = self.zaxis.callbacks.connect(
+                'units finalize', lambda: self._on_units_changed(scalez=True))
+        else:
+            self._zcid = None
+
+        self._ready = 1
+        self.mouse_init()
+        self.set_top_view()
+
+        self.patch.set_linewidth(0)
+        # Calculate the pseudo-data width and height
+        pseudo_bbox = self.transLimits.inverted().transform([(0, 0), (1, 1)])
+        self._pseudo_w, self._pseudo_h = pseudo_bbox[1] - pseudo_bbox[0]
+
+        self.figure.add_axes(self)
+
+        # mplot3d currently manages its own spines and needs these turned off
+        # for bounding box calculations
+        for k in self.spines.keys():
+            self.spines[k].set_visible(False)
+
+    def set_axis_off(self):
+        self._axis3don = False
+        self.stale = True
+
+    def set_axis_on(self):
+        self._axis3don = True
+        self.stale = True
+
+    def convert_zunits(self, z):
+        """
+        For artists in an axes, if the zaxis has units support,
+        convert *z* using zaxis unit type
+
+        .. versionadded:: 1.2.1
+
+        """
+        return self.zaxis.convert_units(z)
+
+    def _process_unit_info(self, xdata=None, ydata=None, zdata=None,
+                           kwargs=None):
+        """
+        Look for unit *kwargs* and update the axis instances as necessary
+
+        """
+        super()._process_unit_info(xdata=xdata, ydata=ydata, kwargs=kwargs)
+
+        if self.xaxis is None or self.yaxis is None or self.zaxis is None:
+            return
+
+        if zdata is not None:
+            # we only need to update if there is nothing set yet.
+            if not self.zaxis.have_units():
+                self.zaxis.update_units(xdata)
+
+        # process kwargs 2nd since these will override default units
+        if kwargs is not None:
+            zunits = kwargs.pop('zunits', self.zaxis.units)
+            if zunits != self.zaxis.units:
+                self.zaxis.set_units(zunits)
+                # If the units being set imply a different converter,
+                # we need to update.
+                if zdata is not None:
+                    self.zaxis.update_units(zdata)
+
+    def set_top_view(self):
+        # this happens to be the right view for the viewing coordinates
+        # moved up and to the left slightly to fit labels and axes
+        xdwl = 0.95 / self.dist
+        xdw = 0.9 / self.dist
+        ydwl = 0.95 / self.dist
+        ydw = 0.9 / self.dist
+        # This is purposely using the 2D Axes's set_xlim and set_ylim,
+        # because we are trying to place our viewing pane.
+        super().set_xlim(-xdwl, xdw, auto=None)
+        super().set_ylim(-ydwl, ydw, auto=None)
+
+    def _init_axis(self):
+        '''Init 3D axes; overrides creation of regular X/Y axes'''
+        self.xaxis = axis3d.XAxis('x', self.xy_viewLim.intervalx,
+                                  self.xy_dataLim.intervalx, self)
+        self.yaxis = axis3d.YAxis('y', self.xy_viewLim.intervaly,
+                                  self.xy_dataLim.intervaly, self)
+        self.zaxis = axis3d.ZAxis('z', self.zz_viewLim.intervalx,
+                                  self.zz_dataLim.intervalx, self)
+        for ax in self.xaxis, self.yaxis, self.zaxis:
+            ax.init3d()
+
+    def get_zaxis(self):
+        '''Return the ``ZAxis`` (`~.axis3d.Axis`) instance.'''
+        return self.zaxis
+
+    @cbook.deprecated("3.1", alternative="xaxis", pending=True)
+    @property
+    def w_xaxis(self):
+        return self.xaxis
+
+    @cbook.deprecated("3.1", alternative="yaxis", pending=True)
+    @property
+    def w_yaxis(self):
+        return self.yaxis
+
+    @cbook.deprecated("3.1", alternative="zaxis", pending=True)
+    @property
+    def w_zaxis(self):
+        return self.zaxis
+
+    def _get_axis_list(self):
+        return super()._get_axis_list() + (self.zaxis, )
+
+    def unit_cube(self, vals=None):
+        minx, maxx, miny, maxy, minz, maxz = vals or self.get_w_lims()
+        return [(minx, miny, minz),
+                (maxx, miny, minz),
+                (maxx, maxy, minz),
+                (minx, maxy, minz),
+                (minx, miny, maxz),
+                (maxx, miny, maxz),
+                (maxx, maxy, maxz),
+                (minx, maxy, maxz)]
+
+    def tunit_cube(self, vals=None, M=None):
+        if M is None:
+            M = self.M
+        xyzs = self.unit_cube(vals)
+        tcube = proj3d.proj_points(xyzs, M)
+        return tcube
+
+    def tunit_edges(self, vals=None, M=None):
+        tc = self.tunit_cube(vals, M)
+        edges = [(tc[0], tc[1]),
+                 (tc[1], tc[2]),
+                 (tc[2], tc[3]),
+                 (tc[3], tc[0]),
+
+                 (tc[0], tc[4]),
+                 (tc[1], tc[5]),
+                 (tc[2], tc[6]),
+                 (tc[3], tc[7]),
+
+                 (tc[4], tc[5]),
+                 (tc[5], tc[6]),
+                 (tc[6], tc[7]),
+                 (tc[7], tc[4])]
+        return edges
+
+    @artist.allow_rasterization
+    def draw(self, renderer):
+        # draw the background patch
+        self.patch.draw(renderer)
+        self._frameon = False
+
+        # first, set the aspect
+        # this is duplicated from `axes._base._AxesBase.draw`
+        # but must be called before any of the artist are drawn as
+        # it adjusts the view limits and the size of the bounding box
+        # of the axes
+        locator = self.get_axes_locator()
+        if locator:
+            pos = locator(self, renderer)
+            self.apply_aspect(pos)
+        else:
+            self.apply_aspect()
+
+        # add the projection matrix to the renderer
+        self.M = self.get_proj()
+        renderer.M = self.M
+        renderer.vvec = self.vvec
+        renderer.eye = self.eye
+        renderer.get_axis_position = self.get_axis_position
+
+        # Calculate projection of collections and patches and zorder them.
+        # Make sure they are drawn above the grids.
+        zorder_offset = max(axis.get_zorder()
+                            for axis in self._get_axis_list()) + 1
+        for i, col in enumerate(
+                sorted(self.collections,
+                       key=lambda col: col.do_3d_projection(renderer),
+                       reverse=True)):
+            col.zorder = zorder_offset + i
+        for i, patch in enumerate(
+                sorted(self.patches,
+                       key=lambda patch: patch.do_3d_projection(renderer),
+                       reverse=True)):
+            patch.zorder = zorder_offset + i
+
+        if self._axis3don:
+            # Draw panes first
+            for axis in self._get_axis_list():
+                axis.draw_pane(renderer)
+            # Then axes
+            for axis in self._get_axis_list():
+                axis.draw(renderer)
+
+        # Then rest
+        super().draw(renderer)
+
+    def get_axis_position(self):
+        vals = self.get_w_lims()
+        tc = self.tunit_cube(vals, self.M)
+        xhigh = tc[1][2] > tc[2][2]
+        yhigh = tc[3][2] > tc[2][2]
+        zhigh = tc[0][2] > tc[2][2]
+        return xhigh, yhigh, zhigh
+
+    def _on_units_changed(self, scalex=False, scaley=False, scalez=False):
+        """
+        Callback for processing changes to axis units.
+
+        Currently forces updates of data limits and view limits.
+        """
+        self.relim()
+        self.autoscale_view(scalex=scalex, scaley=scaley, scalez=scalez)
+
+    def update_datalim(self, xys, **kwargs):
+        pass
+
+    def get_autoscale_on(self):
+        """
+        Get whether autoscaling is applied for all axes on plot commands
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        return super().get_autoscale_on() and self.get_autoscalez_on()
+
+    def get_autoscalez_on(self):
+        """
+        Get whether autoscaling for the z-axis is applied on plot commands
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        return self._autoscaleZon
+
+    def set_autoscale_on(self, b):
+        """
+        Set whether autoscaling is applied on plot commands
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+
+        Parameters
+        ----------
+        b : bool
+        """
+        super().set_autoscale_on(b)
+        self.set_autoscalez_on(b)
+
+    def set_autoscalez_on(self, b):
+        """
+        Set whether autoscaling for the z-axis is applied on plot commands
+
+        .. versionadded:: 1.1.0
+
+        Parameters
+        ----------
+        b : bool
+        """
+        self._autoscaleZon = b
+
+    def set_zmargin(self, m):
+        """
+        Set padding of Z data limits prior to autoscaling.
+
+        *m* times the data interval will be added to each
+        end of that interval before it is used in autoscaling.
+
+        accepts: float in range 0 to 1
+
+        .. versionadded:: 1.1.0
+        """
+        if m < 0 or m > 1:
+            raise ValueError("margin must be in range 0 to 1")
+        self._zmargin = m
+        self.stale = True
+
+    def margins(self, *margins, x=None, y=None, z=None, tight=True):
+        """
+        Convenience method to set or retrieve autoscaling margins.
+
+        Call signatures::
+
+            margins()
+
+        returns xmargin, ymargin, zmargin
+
+        ::
+
+            margins(margin)
+
+            margins(xmargin, ymargin, zmargin)
+
+            margins(x=xmargin, y=ymargin, z=zmargin)
+
+            margins(..., tight=False)
+
+        All forms above set the xmargin, ymargin and zmargin
+        parameters. All keyword parameters are optional.  A single
+        positional argument specifies xmargin, ymargin and zmargin.
+        Passing both positional and keyword arguments for xmargin,
+        ymargin, and/or zmargin is invalid.
+
+        The *tight* parameter
+        is passed to :meth:`autoscale_view`, which is executed after
+        a margin is changed; the default here is *True*, on the
+        assumption that when margins are specified, no additional
+        padding to match tick marks is usually desired.  Setting
+        *tight* to *None* will preserve the previous setting.
+
+        Specifying any margin changes only the autoscaling; for example,
+        if *xmargin* is not None, then *xmargin* times the X data
+        interval will be added to each end of that interval before
+        it is used in autoscaling.
+
+        .. versionadded:: 1.1.0
+        """
+        if margins and x is not None and y is not None and z is not None:
+            raise TypeError('Cannot pass both positional and keyword '
+                            'arguments for x, y, and/or z.')
+        elif len(margins) == 1:
+            x = y = z = margins[0]
+        elif len(margins) == 3:
+            x, y, z = margins
+        elif margins:
+            raise TypeError('Must pass a single positional argument for all '
+                            'margins, or one for each margin (x, y, z).')
+
+        if x is None and y is None and z is None:
+            if tight is not True:
+                cbook._warn_external(f'ignoring tight={tight!r} in get mode')
+            return self._xmargin, self._ymargin, self._zmargin
+
+        if x is not None:
+            self.set_xmargin(x)
+        if y is not None:
+            self.set_ymargin(y)
+        if z is not None:
+            self.set_zmargin(z)
+
+        self.autoscale_view(
+            tight=tight, scalex=(x is not None), scaley=(y is not None),
+            scalez=(z is not None)
+        )
+
+    def autoscale(self, enable=True, axis='both', tight=None):
+        """
+        Convenience method for simple axis view autoscaling.
+        See :meth:`matplotlib.axes.Axes.autoscale` for full explanation.
+        Note that this function behaves the same, but for all
+        three axes.  Therefore, 'z' can be passed for *axis*,
+        and 'both' applies to all three axes.
+
+        .. versionadded:: 1.1.0
+        """
+        if enable is None:
+            scalex = True
+            scaley = True
+            scalez = True
+        else:
+            if axis in ['x', 'both']:
+                self._autoscaleXon = scalex = bool(enable)
+            else:
+                scalex = False
+            if axis in ['y', 'both']:
+                self._autoscaleYon = scaley = bool(enable)
+            else:
+                scaley = False
+            if axis in ['z', 'both']:
+                self._autoscaleZon = scalez = bool(enable)
+            else:
+                scalez = False
+        self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley,
+                            scalez=scalez)
+
+    def auto_scale_xyz(self, X, Y, Z=None, had_data=None):
+        # This updates the bounding boxes as to keep a record as to what the
+        # minimum sized rectangular volume holds the data.
+        X = np.reshape(X, -1)
+        Y = np.reshape(Y, -1)
+        self.xy_dataLim.update_from_data_xy(
+            np.column_stack([X, Y]), not had_data)
+        if Z is not None:
+            Z = np.reshape(Z, -1)
+            self.zz_dataLim.update_from_data_xy(
+                np.column_stack([Z, Z]), not had_data)
+        # Let autoscale_view figure out how to use this data.
+        self.autoscale_view()
+
+    def autoscale_view(self, tight=None, scalex=True, scaley=True,
+                       scalez=True):
+        """
+        Autoscale the view limits using the data limits.
+        See :meth:`matplotlib.axes.Axes.autoscale_view` for documentation.
+        Note that this function applies to the 3D axes, and as such
+        adds the *scalez* to the function arguments.
+
+        .. versionchanged:: 1.1.0
+            Function signature was changed to better match the 2D version.
+            *tight* is now explicitly a kwarg and placed first.
+
+        .. versionchanged:: 1.2.1
+            This is now fully functional.
+
+        """
+        if not self._ready:
+            return
+
+        # This method looks at the rectangular volume (see above)
+        # of data and decides how to scale the view portal to fit it.
+        if tight is None:
+            # if image data only just use the datalim
+            _tight = self._tight or (
+                len(self.images) > 0
+                and len(self.lines) == len(self.patches) == 0)
+        else:
+            _tight = self._tight = bool(tight)
+
+        if scalex and self._autoscaleXon:
+            self._shared_x_axes.clean()
+            x0, x1 = self.xy_dataLim.intervalx
+            xlocator = self.xaxis.get_major_locator()
+            x0, x1 = xlocator.nonsingular(x0, x1)
+            if self._xmargin > 0:
+                delta = (x1 - x0) * self._xmargin
+                x0 -= delta
+                x1 += delta
+            if not _tight:
+                x0, x1 = xlocator.view_limits(x0, x1)
+            self.set_xbound(x0, x1)
+
+        if scaley and self._autoscaleYon:
+            self._shared_y_axes.clean()
+            y0, y1 = self.xy_dataLim.intervaly
+            ylocator = self.yaxis.get_major_locator()
+            y0, y1 = ylocator.nonsingular(y0, y1)
+            if self._ymargin > 0:
+                delta = (y1 - y0) * self._ymargin
+                y0 -= delta
+                y1 += delta
+            if not _tight:
+                y0, y1 = ylocator.view_limits(y0, y1)
+            self.set_ybound(y0, y1)
+
+        if scalez and self._autoscaleZon:
+            self._shared_z_axes.clean()
+            z0, z1 = self.zz_dataLim.intervalx
+            zlocator = self.zaxis.get_major_locator()
+            z0, z1 = zlocator.nonsingular(z0, z1)
+            if self._zmargin > 0:
+                delta = (z1 - z0) * self._zmargin
+                z0 -= delta
+                z1 += delta
+            if not _tight:
+                z0, z1 = zlocator.view_limits(z0, z1)
+            self.set_zbound(z0, z1)
+
+    def get_w_lims(self):
+        '''Get 3D world limits.'''
+        minx, maxx = self.get_xlim3d()
+        miny, maxy = self.get_ylim3d()
+        minz, maxz = self.get_zlim3d()
+        return minx, maxx, miny, maxy, minz, maxz
+
+    def set_xlim3d(self, left=None, right=None, emit=True, auto=False,
+                   *, xmin=None, xmax=None):
+        """
+        Set 3D x limits.
+
+        See :meth:`matplotlib.axes.Axes.set_xlim` for full documentation.
+
+        """
+        if right is None and np.iterable(left):
+            left, right = left
+        if xmin is not None:
+            cbook.warn_deprecated('3.0', name='`xmin`',
+                                  alternative='`left`', obj_type='argument')
+            if left is not None:
+                raise TypeError('Cannot pass both `xmin` and `left`')
+            left = xmin
+        if xmax is not None:
+            cbook.warn_deprecated('3.0', name='`xmax`',
+                                  alternative='`right`', obj_type='argument')
+            if right is not None:
+                raise TypeError('Cannot pass both `xmax` and `right`')
+            right = xmax
+
+        self._process_unit_info(xdata=(left, right))
+        left = self._validate_converted_limits(left, self.convert_xunits)
+        right = self._validate_converted_limits(right, self.convert_xunits)
+
+        old_left, old_right = self.get_xlim()
+        if left is None:
+            left = old_left
+        if right is None:
+            right = old_right
+
+        if left == right:
+            cbook._warn_external(
+                f"Attempting to set identical left == right == {left} results "
+                f"in singular transformations; automatically expanding.")
+        reverse = left > right
+        left, right = self.xaxis.get_major_locator().nonsingular(left, right)
+        left, right = self.xaxis.limit_range_for_scale(left, right)
+        # cast to bool to avoid bad interaction between python 3.8 and np.bool_
+        left, right = sorted([left, right], reverse=bool(reverse))
+        self.xy_viewLim.intervalx = (left, right)
+
+        if auto is not None:
+            self._autoscaleXon = bool(auto)
+
+        if emit:
+            self.callbacks.process('xlim_changed', self)
+            # Call all of the other x-axes that are shared with this one
+            for other in self._shared_x_axes.get_siblings(self):
+                if other is not self:
+                    other.set_xlim(self.xy_viewLim.intervalx,
+                                   emit=False, auto=auto)
+                    if other.figure != self.figure:
+                        other.figure.canvas.draw_idle()
+        self.stale = True
+        return left, right
+    set_xlim = set_xlim3d
+
+    def set_ylim3d(self, bottom=None, top=None, emit=True, auto=False,
+                   *, ymin=None, ymax=None):
+        """
+        Set 3D y limits.
+
+        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation.
+
+        """
+        if top is None and np.iterable(bottom):
+            bottom, top = bottom
+        if ymin is not None:
+            cbook.warn_deprecated('3.0', name='`ymin`',
+                                  alternative='`bottom`', obj_type='argument')
+            if bottom is not None:
+                raise TypeError('Cannot pass both `ymin` and `bottom`')
+            bottom = ymin
+        if ymax is not None:
+            cbook.warn_deprecated('3.0', name='`ymax`',
+                                  alternative='`top`', obj_type='argument')
+            if top is not None:
+                raise TypeError('Cannot pass both `ymax` and `top`')
+            top = ymax
+
+        self._process_unit_info(ydata=(bottom, top))
+        bottom = self._validate_converted_limits(bottom, self.convert_yunits)
+        top = self._validate_converted_limits(top, self.convert_yunits)
+
+        old_bottom, old_top = self.get_ylim()
+        if bottom is None:
+            bottom = old_bottom
+        if top is None:
+            top = old_top
+
+        if bottom == top:
+            cbook._warn_external(
+                f"Attempting to set identical bottom == top == {bottom} "
+                f"results in singular transformations; automatically "
+                f"expanding.")
+        swapped = bottom > top
+        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
+        bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
+        if swapped:
+            bottom, top = top, bottom
+        self.xy_viewLim.intervaly = (bottom, top)
+
+        if auto is not None:
+            self._autoscaleYon = bool(auto)
+
+        if emit:
+            self.callbacks.process('ylim_changed', self)
+            # Call all of the other y-axes that are shared with this one
+            for other in self._shared_y_axes.get_siblings(self):
+                if other is not self:
+                    other.set_ylim(self.xy_viewLim.intervaly,
+                                   emit=False, auto=auto)
+                    if other.figure != self.figure:
+                        other.figure.canvas.draw_idle()
+        self.stale = True
+        return bottom, top
+    set_ylim = set_ylim3d
+
+    def set_zlim3d(self, bottom=None, top=None, emit=True, auto=False,
+                   *, zmin=None, zmax=None):
+        """
+        Set 3D z limits.
+
+        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation
+
+        """
+        if top is None and np.iterable(bottom):
+            bottom, top = bottom
+        if zmin is not None:
+            cbook.warn_deprecated('3.0', name='`zmin`',
+                                  alternative='`bottom`', obj_type='argument')
+            if bottom is not None:
+                raise TypeError('Cannot pass both `zmin` and `bottom`')
+            bottom = zmin
+        if zmax is not None:
+            cbook.warn_deprecated('3.0', name='`zmax`',
+                                  alternative='`top`', obj_type='argument')
+            if top is not None:
+                raise TypeError('Cannot pass both `zmax` and `top`')
+            top = zmax
+
+        self._process_unit_info(zdata=(bottom, top))
+        bottom = self._validate_converted_limits(bottom, self.convert_zunits)
+        top = self._validate_converted_limits(top, self.convert_zunits)
+
+        old_bottom, old_top = self.get_zlim()
+        if bottom is None:
+            bottom = old_bottom
+        if top is None:
+            top = old_top
+
+        if bottom == top:
+            cbook._warn_external(
+                f"Attempting to set identical bottom == top == {bottom} "
+                f"results in singular transformations; automatically "
+                f"expanding.")
+        swapped = bottom > top
+        bottom, top = self.zaxis.get_major_locator().nonsingular(bottom, top)
+        bottom, top = self.zaxis.limit_range_for_scale(bottom, top)
+        if swapped:
+            bottom, top = top, bottom
+        self.zz_viewLim.intervalx = (bottom, top)
+
+        if auto is not None:
+            self._autoscaleZon = bool(auto)
+
+        if emit:
+            self.callbacks.process('zlim_changed', self)
+            # Call all of the other y-axes that are shared with this one
+            for other in self._shared_z_axes.get_siblings(self):
+                if other is not self:
+                    other.set_zlim(self.zz_viewLim.intervalx,
+                                   emit=False, auto=auto)
+                    if other.figure != self.figure:
+                        other.figure.canvas.draw_idle()
+        self.stale = True
+        return bottom, top
+    set_zlim = set_zlim3d
+
+    def get_xlim3d(self):
+        return tuple(self.xy_viewLim.intervalx)
+    get_xlim3d.__doc__ = maxes.Axes.get_xlim.__doc__
+    get_xlim = get_xlim3d
+    if get_xlim.__doc__ is not None:
+        get_xlim.__doc__ += """
+        .. versionchanged:: 1.1.0
+            This function now correctly refers to the 3D x-limits
+        """
+
+    def get_ylim3d(self):
+        return tuple(self.xy_viewLim.intervaly)
+    get_ylim3d.__doc__ = maxes.Axes.get_ylim.__doc__
+    get_ylim = get_ylim3d
+    if get_ylim.__doc__ is not None:
+        get_ylim.__doc__ += """
+        .. versionchanged:: 1.1.0
+            This function now correctly refers to the 3D y-limits.
+        """
+
+    def get_zlim3d(self):
+        '''Get 3D z limits.'''
+        return tuple(self.zz_viewLim.intervalx)
+    get_zlim = get_zlim3d
+
+    def get_zscale(self):
+        """
+        Return the zaxis scale string %s
+
+        """ % (", ".join(mscale.get_scale_names()))
+        return self.zaxis.get_scale()
+
+    # We need to slightly redefine these to pass scalez=False
+    # to their calls of autoscale_view.
+
+    def set_xscale(self, value, **kwargs):
+        self.xaxis._set_scale(value, **kwargs)
+        self.autoscale_view(scaley=False, scalez=False)
+        self._update_transScale()
+        self.stale = True
+
+    def set_yscale(self, value, **kwargs):
+        self.yaxis._set_scale(value, **kwargs)
+        self.autoscale_view(scalex=False, scalez=False)
+        self._update_transScale()
+        self.stale = True
+
+    def set_zscale(self, value, **kwargs):
+        self.zaxis._set_scale(value, **kwargs)
+        self.autoscale_view(scalex=False, scaley=False)
+        self._update_transScale()
+        self.stale = True
+
+    set_xscale.__doc__, set_yscale.__doc__, set_zscale.__doc__ = map(
+        """
+        Set the {}-axis scale.
+
+        Parameters
+        ----------
+        value : {{"linear"}}
+            The axis scale type to apply.  3D axes currently only support
+            linear scales; other scales yield nonsensical results.
+
+        **kwargs
+            Keyword arguments are nominally forwarded to the scale class, but
+            none of them is applicable for linear scales.
+        """.format,
+        ["x", "y", "z"])
+
+    def set_zticks(self, *args, **kwargs):
+        """
+        Set z-axis tick locations.
+        See :meth:`matplotlib.axes.Axes.set_yticks` for more details.
+
+        .. note::
+            Minor ticks are not supported.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.set_ticks(*args, **kwargs)
+
+    @cbook._make_keyword_only("3.2", "minor")
+    def get_zticks(self, minor=False):
+        """
+        Return the z ticks as a list of locations
+        See :meth:`matplotlib.axes.Axes.get_yticks` for more details.
+
+        .. note::
+            Minor ticks are not supported.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.get_ticklocs(minor=minor)
+
+    def get_zmajorticklabels(self):
+        """
+        Get the ztick labels as a list of Text instances
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.get_majorticklabels()
+
+    def get_zminorticklabels(self):
+        """
+        Get the ztick labels as a list of Text instances
+
+        .. note::
+            Minor ticks are not supported. This function was added
+            only for completeness.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.get_minorticklabels()
+
+    def set_zticklabels(self, *args, **kwargs):
+        """
+        Set z-axis tick labels.
+        See :meth:`matplotlib.axes.Axes.set_yticklabels` for more details.
+
+        .. note::
+            Minor ticks are not supported by Axes3D objects.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.set_ticklabels(*args, **kwargs)
+
+    def get_zticklabels(self, minor=False):
+        """
+        Get ztick labels as a list of Text instances.
+        See :meth:`matplotlib.axes.Axes.get_yticklabels` for more details.
+
+        .. note::
+            Minor ticks are not supported.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.get_ticklabels(minor=minor)
+
+    def zaxis_date(self, tz=None):
+        """
+        Sets up z-axis ticks and labels that treat the z data as dates.
+
+        *tz* is a timezone string or :class:`tzinfo` instance.
+        Defaults to rc value.
+
+        .. note::
+            This function is merely provided for completeness.
+            Axes3D objects do not officially support dates for ticks,
+            and so this may or may not work as expected.
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        self.zaxis.axis_date(tz)
+
+    def get_zticklines(self):
+        """
+        Get ztick lines as a list of Line2D instances.
+        Note that this function is provided merely for completeness.
+        These lines are re-calculated as the display changes.
+
+        .. versionadded:: 1.1.0
+        """
+        return self.zaxis.get_ticklines()
+
+    def clabel(self, *args, **kwargs):
+        """
+        This function is currently not implemented for 3D axes.
+        Returns *None*.
+        """
+        return None
+
+    def view_init(self, elev=None, azim=None):
+        """
+        Set the elevation and azimuth of the axes in degrees (not radians).
+
+        This can be used to rotate the axes programmatically.
+
+        'elev' stores the elevation angle in the z plane (in degrees).
+        'azim' stores the azimuth angle in the (x, y) plane (in degrees).
+
+        if elev or azim are None (default), then the initial value
+        is used which was specified in the :class:`Axes3D` constructor.
+        """
+
+        self.dist = 10
+
+        if elev is None:
+            self.elev = self.initial_elev
+        else:
+            self.elev = elev
+
+        if azim is None:
+            self.azim = self.initial_azim
+        else:
+            self.azim = azim
+
+    def set_proj_type(self, proj_type):
+        """
+        Set the projection type.
+
+        Parameters
+        ----------
+        proj_type : {'persp', 'ortho'}
+        """
+        self._projection = cbook._check_getitem({
+            'persp': proj3d.persp_transformation,
+            'ortho': proj3d.ortho_transformation,
+        }, proj_type=proj_type)
+
+    def get_proj(self):
+        """
+        Create the projection matrix from the current viewing position.
+
+        elev stores the elevation angle in the z plane
+        azim stores the azimuth angle in the (x, y) plane
+
+        dist is the distance of the eye viewing point from the object point.
+        """
+        relev, razim = np.pi * self.elev/180, np.pi * self.azim/180
+
+        xmin, xmax = self.get_xlim3d()
+        ymin, ymax = self.get_ylim3d()
+        zmin, zmax = self.get_zlim3d()
+
+        # transform to uniform world coordinates 0-1, 0-1, 0-1
+        worldM = proj3d.world_transformation(xmin, xmax,
+                                             ymin, ymax,
+                                             zmin, zmax)
+
+        # look into the middle of the new coordinates
+        R = np.array([0.5, 0.5, 0.5])
+
+        xp = R[0] + np.cos(razim) * np.cos(relev) * self.dist
+        yp = R[1] + np.sin(razim) * np.cos(relev) * self.dist
+        zp = R[2] + np.sin(relev) * self.dist
+        E = np.array((xp, yp, zp))
+
+        self.eye = E
+        self.vvec = R - E
+        self.vvec = self.vvec / np.linalg.norm(self.vvec)
+
+        if abs(relev) > np.pi/2:
+            # upside down
+            V = np.array((0, 0, -1))
+        else:
+            V = np.array((0, 0, 1))
+        zfront, zback = -self.dist, self.dist
+
+        viewM = proj3d.view_transformation(E, R, V)
+        projM = self._projection(zfront, zback)
+        M0 = np.dot(viewM, worldM)
+        M = np.dot(projM, M0)
+        return M
+
+    def mouse_init(self, rotate_btn=1, zoom_btn=3):
+        """
+        Initializes mouse button callbacks to enable 3D rotation of the axes.
+        Also optionally sets the mouse buttons for 3D rotation and zooming.
+
+        Parameters
+        ----------
+        rotate_btn : int or list of int
+            The mouse button or buttons to use for 3D rotation of the axes;
+            defaults to 1.
+        zoom_btn : int or list of int
+            The mouse button or buttons to use to zoom the 3D axes; defaults to
+            3.
+        """
+        self.button_pressed = None
+        self._cids = [
+            self.figure.canvas.mpl_connect(
+                'motion_notify_event', self._on_move),
+            self.figure.canvas.mpl_connect(
+                'button_press_event', self._button_press),
+            self.figure.canvas.mpl_connect(
+                'button_release_event', self._button_release),
+        ]
+        # coerce scalars into array-like, then convert into
+        # a regular list to avoid comparisons against None
+        # which breaks in recent versions of numpy.
+        self._rotate_btn = np.atleast_1d(rotate_btn).tolist()
+        self._zoom_btn = np.atleast_1d(zoom_btn).tolist()
+
+    def can_zoom(self):
+        """
+        Return *True* if this axes supports the zoom box button functionality.
+
+        3D axes objects do not use the zoom box button.
+        """
+        return False
+
+    def can_pan(self):
+        """
+        Return *True* if this axes supports the pan/zoom button functionality.
+
+        3D axes objects do not use the pan/zoom button.
+        """
+        return False
+
+    def cla(self):
+        # docstring inherited.
+
+        super().cla()
+        self.zaxis.cla()
+
+        if self._sharez is not None:
+            self.zaxis.major = self._sharez.zaxis.major
+            self.zaxis.minor = self._sharez.zaxis.minor
+            z0, z1 = self._sharez.get_zlim()
+            self.set_zlim(z0, z1, emit=False, auto=None)
+            self.zaxis._set_scale(self._sharez.zaxis.get_scale())
+        else:
+            self.zaxis._set_scale('linear')
+            try:
+                self.set_zlim(0, 1)
+            except TypeError:
+                pass
+
+        self._autoscaleZon = True
+        self._zmargin = 0
+
+        self.grid(rcParams['axes3d.grid'])
+
+    def disable_mouse_rotation(self):
+        """Disable mouse button callbacks."""
+        # Disconnect the various events we set.
+        for cid in self._cids:
+            self.figure.canvas.mpl_disconnect(cid)
+        self._cids = []
+
+    def _button_press(self, event):
+        if event.inaxes == self:
+            self.button_pressed = event.button
+            self.sx, self.sy = event.xdata, event.ydata
+
+    def _button_release(self, event):
+        self.button_pressed = None
+
+    def format_zdata(self, z):
+        """
+        Return *z* string formatted.  This function will use the
+        :attr:`fmt_zdata` attribute if it is callable, else will fall
+        back on the zaxis major formatter
+        """
+        try:
+            return self.fmt_zdata(z)
+        except (AttributeError, TypeError):
+            func = self.zaxis.get_major_formatter().format_data_short
+            val = func(z)
+            return val
+
+    def format_coord(self, xd, yd):
+        """
+        Given the 2D view coordinates attempt to guess a 3D coordinate.
+        Looks for the nearest edge to the point and then assumes that
+        the point is at the same z location as the nearest point on the edge.
+        """
+
+        if self.M is None:
+            return ''
+
+        if self.button_pressed in self._rotate_btn:
+            return 'azimuth={:.0f} deg, elevation={:.0f} deg '.format(
+                self.azim, self.elev)
+            # ignore xd and yd and display angles instead
+
+        # nearest edge
+        p0, p1 = min(self.tunit_edges(),
+                     key=lambda edge: proj3d._line2d_seg_dist(
+                         edge[0], edge[1], (xd, yd)))
+
+        # scale the z value to match
+        x0, y0, z0 = p0
+        x1, y1, z1 = p1
+        d0 = np.hypot(x0-xd, y0-yd)
+        d1 = np.hypot(x1-xd, y1-yd)
+        dt = d0+d1
+        z = d1/dt * z0 + d0/dt * z1
+
+        x, y, z = proj3d.inv_transform(xd, yd, z, self.M)
+
+        xs = self.format_xdata(x)
+        ys = self.format_ydata(y)
+        zs = self.format_zdata(z)
+        return 'x=%s, y=%s, z=%s' % (xs, ys, zs)
+
+    def _on_move(self, event):
+        """Mouse moving
+
+        button-1 rotates by default.  Can be set explicitly in mouse_init().
+        button-3 zooms by default.  Can be set explicitly in mouse_init().
+        """
+
+        if not self.button_pressed:
+            return
+
+        if self.M is None:
+            return
+
+        x, y = event.xdata, event.ydata
+        # In case the mouse is out of bounds.
+        if x is None:
+            return
+
+        dx, dy = x - self.sx, y - self.sy
+        w = self._pseudo_w
+        h = self._pseudo_h
+        self.sx, self.sy = x, y
+
+        # Rotation
+        if self.button_pressed in self._rotate_btn:
+            # rotate viewing point
+            # get the x and y pixel coords
+            if dx == 0 and dy == 0:
+                return
+            self.elev = art3d._norm_angle(self.elev - (dy/h)*180)
+            self.azim = art3d._norm_angle(self.azim - (dx/w)*180)
+            self.get_proj()
+            self.stale = True
+            self.figure.canvas.draw_idle()
+
+#        elif self.button_pressed == 2:
+            # pan view
+            # project xv, yv, zv -> xw, yw, zw
+            # pan
+#            pass
+
+        # Zoom
+        elif self.button_pressed in self._zoom_btn:
+            # zoom view
+            # hmmm..this needs some help from clipping....
+            minx, maxx, miny, maxy, minz, maxz = self.get_w_lims()
+            df = 1-((h - dy)/h)
+            dx = (maxx-minx)*df
+            dy = (maxy-miny)*df
+            dz = (maxz-minz)*df
+            self.set_xlim3d(minx - dx, maxx + dx)
+            self.set_ylim3d(miny - dy, maxy + dy)
+            self.set_zlim3d(minz - dz, maxz + dz)
+            self.get_proj()
+            self.figure.canvas.draw_idle()
+
+    def set_zlabel(self, zlabel, fontdict=None, labelpad=None, **kwargs):
+        '''
+        Set zlabel.  See doc for :meth:`set_ylabel` for description.
+        '''
+        if labelpad is not None:
+            self.zaxis.labelpad = labelpad
+        return self.zaxis.set_label_text(zlabel, fontdict, **kwargs)
+
+    def get_zlabel(self):
+        """
+        Get the z-label text string.
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        label = self.zaxis.get_label()
+        return label.get_text()
+
+    # Axes rectangle characteristics
+
+    def get_frame_on(self):
+        """Get whether the 3D axes panels are drawn."""
+        return self._frameon
+
+    def set_frame_on(self, b):
+        """
+        Set whether the 3D axes panels are drawn.
+
+        Parameters
+        ----------
+        b : bool
+        """
+        self._frameon = bool(b)
+        self.stale = True
+
+    def grid(self, b=True, **kwargs):
+        '''
+        Set / unset 3D grid.
+
+        .. note::
+
+            Currently, this function does not behave the same as
+            :meth:`matplotlib.axes.Axes.grid`, but it is intended to
+            eventually support that behavior.
+
+        .. versionadded:: 1.1.0
+        '''
+        # TODO: Operate on each axes separately
+        if len(kwargs):
+            b = True
+        self._draw_grid = b
+        self.stale = True
+
+    def locator_params(self, axis='both', tight=None, **kwargs):
+        """
+        Convenience method for controlling tick locators.
+
+        See :meth:`matplotlib.axes.Axes.locator_params` for full
+        documentation.  Note that this is for Axes3D objects,
+        therefore, setting *axis* to 'both' will result in the
+        parameters being set for all three axes.  Also, *axis*
+        can also take a value of 'z' to apply parameters to the
+        z axis.
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        _x = axis in ['x', 'both']
+        _y = axis in ['y', 'both']
+        _z = axis in ['z', 'both']
+        if _x:
+            self.xaxis.get_major_locator().set_params(**kwargs)
+        if _y:
+            self.yaxis.get_major_locator().set_params(**kwargs)
+        if _z:
+            self.zaxis.get_major_locator().set_params(**kwargs)
+        self.autoscale_view(tight=tight, scalex=_x, scaley=_y, scalez=_z)
+
+    def tick_params(self, axis='both', **kwargs):
+        """
+        Convenience method for changing the appearance of ticks and
+        tick labels.
+
+        See :meth:`matplotlib.axes.Axes.tick_params` for more complete
+        documentation.
+
+        The only difference is that setting *axis* to 'both' will
+        mean that the settings are applied to all three axes. Also,
+        the *axis* parameter also accepts a value of 'z', which
+        would mean to apply to only the z-axis.
+
+        Also, because of how Axes3D objects are drawn very differently
+        from regular 2D axes, some of these settings may have
+        ambiguous meaning.  For simplicity, the 'z' axis will
+        accept settings as if it was like the 'y' axis.
+
+        .. note::
+           Axes3D currently ignores some of these settings.
+
+        .. versionadded:: 1.1.0
+        """
+        cbook._check_in_list(['x', 'y', 'z', 'both'], axis=axis)
+        if axis in ['x', 'y', 'both']:
+            super().tick_params(axis, **kwargs)
+        if axis in ['z', 'both']:
+            zkw = dict(kwargs)
+            zkw.pop('top', None)
+            zkw.pop('bottom', None)
+            zkw.pop('labeltop', None)
+            zkw.pop('labelbottom', None)
+            self.zaxis.set_tick_params(**zkw)
+
+    # data limits, ticks, tick labels, and formatting
+
+    def invert_zaxis(self):
+        """
+        Invert the z-axis.
+
+        .. versionadded:: 1.1.0
+            This function was added, but not tested. Please report any bugs.
+        """
+        bottom, top = self.get_zlim()
+        self.set_zlim(top, bottom, auto=None)
+
+    def zaxis_inverted(self):
+        '''
+        Returns True if the z-axis is inverted.
+
+        .. versionadded:: 1.1.0
+        '''
+        bottom, top = self.get_zlim()
+        return top < bottom
+
+    def get_zbound(self):
+        """
+        Return the lower and upper z-axis bounds, in increasing order.
+
+        .. versionadded:: 1.1.0
+        """
+        bottom, top = self.get_zlim()
+        if bottom < top:
+            return bottom, top
+        else:
+            return top, bottom
+
+    def set_zbound(self, lower=None, upper=None):
+        """
+        Set the lower and upper numerical bounds of the z-axis.
+        This method will honor axes inversion regardless of parameter order.
+        It will not change the :attr:`_autoscaleZon` attribute.
+
+        .. versionadded:: 1.1.0
+        """
+        if upper is None and np.iterable(lower):
+            lower, upper = lower
+        old_lower, old_upper = self.get_zbound()
+        if lower is None:
+            lower = old_lower
+        if upper is None:
+            upper = old_upper
+
+        if self.zaxis_inverted():
+            if lower < upper:
+                self.set_zlim(upper, lower, auto=None)
+            else:
+                self.set_zlim(lower, upper, auto=None)
+        else:
+            if lower < upper:
+                self.set_zlim(lower, upper, auto=None)
+            else:
+                self.set_zlim(upper, lower, auto=None)
+
+    def text(self, x, y, z, s, zdir=None, **kwargs):
+        '''
+        Add text to the plot. kwargs will be passed on to Axes.text,
+        except for the `zdir` keyword, which sets the direction to be
+        used as the z direction.
+        '''
+        text = super().text(x, y, s, **kwargs)
+        art3d.text_2d_to_3d(text, z, zdir)
+        return text
+
+    text3D = text
+    text2D = Axes.text
+
+    def plot(self, xs, ys, *args, zdir='z', **kwargs):
+        """
+        Plot 2D or 3D data.
+
+        Parameters
+        ----------
+        xs : 1D array-like
+            x coordinates of vertices.
+        ys : 1D array-like
+            y coordinates of vertices.
+        zs : scalar or 1D array-like
+            z coordinates of vertices; either one for all points or one for
+            each point.
+        zdir : {'x', 'y', 'z'}
+            When plotting 2D data, the direction to use as z ('x', 'y' or 'z');
+            defaults to 'z'.
+        **kwargs
+            Other arguments are forwarded to `matplotlib.axes.Axes.plot`.
+        """
+        had_data = self.has_data()
+
+        # `zs` can be passed positionally or as keyword; checking whether
+        # args[0] is a string matches the behavior of 2D `plot` (via
+        # `_process_plot_var_args`).
+        if args and not isinstance(args[0], str):
+            zs, *args = args
+            if 'zs' in kwargs:
+                raise TypeError("plot() for multiple values for argument 'z'")
+        else:
+            zs = kwargs.pop('zs', 0)
+
+        # Match length
+        zs = np.broadcast_to(zs, len(xs))
+
+        lines = super().plot(xs, ys, *args, **kwargs)
+        for line in lines:
+            art3d.line_2d_to_3d(line, zs=zs, zdir=zdir)
+
+        xs, ys, zs = art3d.juggle_axes(xs, ys, zs, zdir)
+        self.auto_scale_xyz(xs, ys, zs, had_data)
+        return lines
+
+    plot3D = plot
+
+    def plot_surface(self, X, Y, Z, *args, norm=None, vmin=None,
+                     vmax=None, lightsource=None, **kwargs):
+        """
+        Create a surface plot.
+
+        By default it will be colored in shades of a solid color, but it also
+        supports color mapping by supplying the *cmap* argument.
+
+        .. note::
+
+           The *rcount* and *ccount* kwargs, which both default to 50,
+           determine the maximum number of samples used in each direction.  If
+           the input data is larger, it will be downsampled (by slicing) to
+           these numbers of points.
+
+        Parameters
+        ----------
+        X, Y, Z : 2d arrays
+            Data values.
+
+        rcount, ccount : int
+            Maximum number of samples used in each direction.  If the input
+            data is larger, it will be downsampled (by slicing) to these
+            numbers of points.  Defaults to 50.
+
+            .. versionadded:: 2.0
+
+        rstride, cstride : int
+            Downsampling stride in each direction.  These arguments are
+            mutually exclusive with *rcount* and *ccount*.  If only one of
+            *rstride* or *cstride* is set, the other defaults to 10.
+
+            'classic' mode uses a default of ``rstride = cstride = 10`` instead
+            of the new default of ``rcount = ccount = 50``.
+
+        color : color-like
+            Color of the surface patches.
+
+        cmap : Colormap
+            Colormap of the surface patches.
+
+        facecolors : array-like of colors.
+            Colors of each individual patch.
+
+        norm : Normalize
+            Normalization for the colormap.
+
+        vmin, vmax : float
+            Bounds for the normalization.
+
+        shade : bool
+            Whether to shade the facecolors. Defaults to True. Shading is
+            always disabled when `cmap` is specified.
+
+        lightsource : `~matplotlib.colors.LightSource`
+            The lightsource to use when `shade` is True.
+
+        **kwargs
+            Other arguments are forwarded to `.Poly3DCollection`.
+        """
+
+        had_data = self.has_data()
+
+        if Z.ndim != 2:
+            raise ValueError("Argument Z must be 2-dimensional.")
+        if np.any(np.isnan(Z)):
+            cbook._warn_external(
+                "Z contains NaN values. This may result in rendering "
+                "artifacts.")
+
+        # TODO: Support masked arrays
+        X, Y, Z = np.broadcast_arrays(X, Y, Z)
+        rows, cols = Z.shape
+
+        has_stride = 'rstride' in kwargs or 'cstride' in kwargs
+        has_count = 'rcount' in kwargs or 'ccount' in kwargs
+
+        if has_stride and has_count:
+            raise ValueError("Cannot specify both stride and count arguments")
+
+        rstride = kwargs.pop('rstride', 10)
+        cstride = kwargs.pop('cstride', 10)
+        rcount = kwargs.pop('rcount', 50)
+        ccount = kwargs.pop('ccount', 50)
+
+        if rcParams['_internal.classic_mode']:
+            # Strides have priority over counts in classic mode.
+            # So, only compute strides from counts
+            # if counts were explicitly given
+            compute_strides = has_count
+        else:
+            # If the strides are provided then it has priority.
+            # Otherwise, compute the strides from the counts.
+            compute_strides = not has_stride
+
+        if compute_strides:
+            rstride = int(max(np.ceil(rows / rcount), 1))
+            cstride = int(max(np.ceil(cols / ccount), 1))
+
+        if 'facecolors' in kwargs:
+            fcolors = kwargs.pop('facecolors')
+        else:
+            color = kwargs.pop('color', None)
+            if color is None:
+                color = self._get_lines.get_next_color()
+            color = np.array(mcolors.to_rgba(color))
+            fcolors = None
+
+        cmap = kwargs.get('cmap', None)
+        shade = kwargs.pop('shade', cmap is None)
+        if shade is None:
+            cbook.warn_deprecated(
+                "3.1",
+                message="Passing shade=None to Axes3D.plot_surface() is "
+                        "deprecated since matplotlib 3.1 and will change its "
+                        "semantic or raise an error in matplotlib 3.3. "
+                        "Please use shade=False instead.")
+
+        # evenly spaced, and including both endpoints
+        row_inds = list(range(0, rows-1, rstride)) + [rows-1]
+        col_inds = list(range(0, cols-1, cstride)) + [cols-1]
+
+        colset = []  # the sampled facecolor
+        polys = []
+        for rs, rs_next in zip(row_inds[:-1], row_inds[1:]):
+            for cs, cs_next in zip(col_inds[:-1], col_inds[1:]):
+                ps = [
+                    # +1 ensures we share edges between polygons
+                    cbook._array_perimeter(a[rs:rs_next+1, cs:cs_next+1])
+                    for a in (X, Y, Z)
+                ]
+                # ps = np.stack(ps, axis=-1)
+                ps = np.array(ps).T
+                polys.append(ps)
+
+                if fcolors is not None:
+                    colset.append(fcolors[rs][cs])
+
+        # note that the striding causes some polygons to have more coordinates
+        # than others
+        polyc = art3d.Poly3DCollection(polys, *args, **kwargs)
+
+        if fcolors is not None:
+            if shade:
+                colset = self._shade_colors(
+                    colset, self._generate_normals(polys), lightsource)
+            polyc.set_facecolors(colset)
+            polyc.set_edgecolors(colset)
+        elif cmap:
+            # doesn't vectorize because polys is jagged
+            avg_z = np.array([ps[:, 2].mean() for ps in polys])
+            polyc.set_array(avg_z)
+            if vmin is not None or vmax is not None:
+                polyc.set_clim(vmin, vmax)
+            if norm is not None:
+                polyc.set_norm(norm)
+        else:
+            if shade:
+                colset = self._shade_colors(
+                    color, self._generate_normals(polys), lightsource)
+            else:
+                colset = color
+            polyc.set_facecolors(colset)
+
+        self.add_collection(polyc)
+        self.auto_scale_xyz(X, Y, Z, had_data)
+
+        return polyc
+
+    def _generate_normals(self, polygons):
+        """
+        Takes a list of polygons and return an array of their normals.
+
+        Normals point towards the viewer for a face with its vertices in
+        counterclockwise order, following the right hand rule.
+
+        Uses three points equally spaced around the polygon.
+        This normal of course might not make sense for polygons with more than
+        three points not lying in a plane, but it's a plausible and fast
+        approximation.
+
+        Parameters
+        ----------
+        polygons: list of (M_i, 3) array-like, or (..., M, 3) array-like
+            A sequence of polygons to compute normals for, which can have
+            varying numbers of vertices. If the polygons all have the same
+            number of vertices and array is passed, then the operation will
+            be vectorized.
+
+        Returns
+        -------
+        normals: (..., 3) array-like
+            A normal vector estimated for the polygon.
+
+        """
+        if isinstance(polygons, np.ndarray):
+            # optimization: polygons all have the same number of points, so can
+            # vectorize
+            n = polygons.shape[-2]
+            i1, i2, i3 = 0, n//3, 2*n//3
+            v1 = polygons[..., i1, :] - polygons[..., i2, :]
+            v2 = polygons[..., i2, :] - polygons[..., i3, :]
+        else:
+            # The subtraction doesn't vectorize because polygons is jagged.
+            v1 = np.empty((len(polygons), 3))
+            v2 = np.empty((len(polygons), 3))
+            for poly_i, ps in enumerate(polygons):
+                n = len(ps)
+                i1, i2, i3 = 0, n//3, 2*n//3
+                v1[poly_i, :] = ps[i1, :] - ps[i2, :]
+                v2[poly_i, :] = ps[i2, :] - ps[i3, :]
+        return np.cross(v1, v2)
+
+    def _shade_colors(self, color, normals, lightsource=None):
+        """
+        Shade *color* using normal vectors given by *normals*.
+        *color* can also be an array of the same length as *normals*.
+        """
+        if lightsource is None:
+            # chosen for backwards-compatibility
+            lightsource = LightSource(azdeg=225, altdeg=19.4712)
+
+        with np.errstate(invalid="ignore"):
+            shade = ((normals / np.linalg.norm(normals, axis=1, keepdims=True))
+                     @ lightsource.direction)
+        mask = ~np.isnan(shade)
+
+        if mask.any():
+            # convert dot product to allowed shading fractions
+            in_norm = Normalize(-1, 1)
+            out_norm = Normalize(0.3, 1).inverse
+
+            def norm(x):
+                return out_norm(in_norm(x))
+
+            shade[~mask] = 0
+
+            color = mcolors.to_rgba_array(color)
+            # shape of color should be (M, 4) (where M is number of faces)
+            # shape of shade should be (M,)
+            # colors should have final shape of (M, 4)
+            alpha = color[:, 3]
+            colors = norm(shade)[:, np.newaxis] * color
+            colors[:, 3] = alpha
+        else:
+            colors = np.asanyarray(color).copy()
+
+        return colors
+
+    def plot_wireframe(self, X, Y, Z, *args, **kwargs):
+        """
+        Plot a 3D wireframe.
+
+        .. note::
+
+           The *rcount* and *ccount* kwargs, which both default to 50,
+           determine the maximum number of samples used in each direction.  If
+           the input data is larger, it will be downsampled (by slicing) to
+           these numbers of points.
+
+        Parameters
+        ----------
+        X, Y, Z : 2d arrays
+            Data values.
+
+        rcount, ccount : int
+            Maximum number of samples used in each direction.  If the input
+            data is larger, it will be downsampled (by slicing) to these
+            numbers of points.  Setting a count to zero causes the data to be
+            not sampled in the corresponding direction, producing a 3D line
+            plot rather than a wireframe plot.  Defaults to 50.
+
+            .. versionadded:: 2.0
+
+        rstride, cstride : int
+            Downsampling stride in each direction.  These arguments are
+            mutually exclusive with *rcount* and *ccount*.  If only one of
+            *rstride* or *cstride* is set, the other defaults to 1.  Setting a
+            stride to zero causes the data to be not sampled in the
+            corresponding direction, producing a 3D line plot rather than a
+            wireframe plot.
+
+            'classic' mode uses a default of ``rstride = cstride = 1`` instead
+            of the new default of ``rcount = ccount = 50``.
+
+        **kwargs
+            Other arguments are forwarded to `.Line3DCollection`.
+        """
+
+        had_data = self.has_data()
+        if Z.ndim != 2:
+            raise ValueError("Argument Z must be 2-dimensional.")
+        # FIXME: Support masked arrays
+        X, Y, Z = np.broadcast_arrays(X, Y, Z)
+        rows, cols = Z.shape
+
+        has_stride = 'rstride' in kwargs or 'cstride' in kwargs
+        has_count = 'rcount' in kwargs or 'ccount' in kwargs
+
+        if has_stride and has_count:
+            raise ValueError("Cannot specify both stride and count arguments")
+
+        rstride = kwargs.pop('rstride', 1)
+        cstride = kwargs.pop('cstride', 1)
+        rcount = kwargs.pop('rcount', 50)
+        ccount = kwargs.pop('ccount', 50)
+
+        if rcParams['_internal.classic_mode']:
+            # Strides have priority over counts in classic mode.
+            # So, only compute strides from counts
+            # if counts were explicitly given
+            if has_count:
+                rstride = int(max(np.ceil(rows / rcount), 1)) if rcount else 0
+                cstride = int(max(np.ceil(cols / ccount), 1)) if ccount else 0
+        else:
+            # If the strides are provided then it has priority.
+            # Otherwise, compute the strides from the counts.
+            if not has_stride:
+                rstride = int(max(np.ceil(rows / rcount), 1)) if rcount else 0
+                cstride = int(max(np.ceil(cols / ccount), 1)) if ccount else 0
+
+        # We want two sets of lines, one running along the "rows" of
+        # Z and another set of lines running along the "columns" of Z.
+        # This transpose will make it easy to obtain the columns.
+        tX, tY, tZ = np.transpose(X), np.transpose(Y), np.transpose(Z)
+
+        if rstride:
+            rii = list(range(0, rows, rstride))
+            # Add the last index only if needed
+            if rows > 0 and rii[-1] != (rows - 1):
+                rii += [rows-1]
+        else:
+            rii = []
+        if cstride:
+            cii = list(range(0, cols, cstride))
+            # Add the last index only if needed
+            if cols > 0 and cii[-1] != (cols - 1):
+                cii += [cols-1]
+        else:
+            cii = []
+
+        if rstride == 0 and cstride == 0:
+            raise ValueError("Either rstride or cstride must be non zero")
+
+        # If the inputs were empty, then just
+        # reset everything.
+        if Z.size == 0:
+            rii = []
+            cii = []
+
+        xlines = [X[i] for i in rii]
+        ylines = [Y[i] for i in rii]
+        zlines = [Z[i] for i in rii]
+
+        txlines = [tX[i] for i in cii]
+        tylines = [tY[i] for i in cii]
+        tzlines = [tZ[i] for i in cii]
+
+        lines = ([list(zip(xl, yl, zl))
+                 for xl, yl, zl in zip(xlines, ylines, zlines)]
+                 + [list(zip(xl, yl, zl))
+                 for xl, yl, zl in zip(txlines, tylines, tzlines)])
+
+        linec = art3d.Line3DCollection(lines, *args, **kwargs)
+        self.add_collection(linec)
+        self.auto_scale_xyz(X, Y, Z, had_data)
+
+        return linec
+
+    def plot_trisurf(self, *args, color=None, norm=None, vmin=None, vmax=None,
+                     lightsource=None, **kwargs):
+        """
+        Plot a triangulated surface.
+
+        The (optional) triangulation can be specified in one of two ways;
+        either::
+
+          plot_trisurf(triangulation, ...)
+
+        where triangulation is a :class:`~matplotlib.tri.Triangulation`
+        object, or::
+
+          plot_trisurf(X, Y, ...)
+          plot_trisurf(X, Y, triangles, ...)
+          plot_trisurf(X, Y, triangles=triangles, ...)
+
+        in which case a Triangulation object will be created.  See
+        :class:`~matplotlib.tri.Triangulation` for a explanation of
+        these possibilities.
+
+        The remaining arguments are::
+
+          plot_trisurf(..., Z)
+
+        where *Z* is the array of values to contour, one per point
+        in the triangulation.
+
+        Parameters
+        ----------
+        X, Y, Z : array-like
+            Data values as 1D arrays.
+        color
+            Color of the surface patches.
+        cmap
+            A colormap for the surface patches.
+        norm : Normalize
+            An instance of Normalize to map values to colors.
+        vmin, vmax : scalar, optional, default: None
+            Minimum and maximum value to map.
+        shade : bool
+            Whether to shade the facecolors. Defaults to True. Shading is
+            always disabled when *cmap* is specified.
+        lightsource : `~matplotlib.colors.LightSource`
+            The lightsource to use when *shade* is True.
+        **kwargs
+            All other arguments are passed on to
+            :class:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`
+
+        Examples
+        --------
+        .. plot:: gallery/mplot3d/trisurf3d.py
+        .. plot:: gallery/mplot3d/trisurf3d_2.py
+
+        .. versionadded:: 1.2.0
+        """
+
+        had_data = self.has_data()
+
+        # TODO: Support custom face colours
+        if color is None:
+            color = self._get_lines.get_next_color()
+        color = np.array(mcolors.to_rgba(color))
+
+        cmap = kwargs.get('cmap', None)
+        shade = kwargs.pop('shade', cmap is None)
+
+        tri, args, kwargs = \
+            Triangulation.get_from_args_and_kwargs(*args, **kwargs)
+        try:
+            z = kwargs.pop('Z')
+        except KeyError:
+            # We do this so Z doesn't get passed as an arg to PolyCollection
+            z, *args = args
+        z = np.asarray(z)
+
+        triangles = tri.get_masked_triangles()
+        xt = tri.x[triangles]
+        yt = tri.y[triangles]
+        zt = z[triangles]
+        verts = np.stack((xt, yt, zt), axis=-1)
+
+        polyc = art3d.Poly3DCollection(verts, *args, **kwargs)
+
+        if cmap:
+            # average over the three points of each triangle
+            avg_z = verts[:, :, 2].mean(axis=1)
+            polyc.set_array(avg_z)
+            if vmin is not None or vmax is not None:
+                polyc.set_clim(vmin, vmax)
+            if norm is not None:
+                polyc.set_norm(norm)
+        else:
+            if shade:
+                normals = self._generate_normals(verts)
+                colset = self._shade_colors(color, normals, lightsource)
+            else:
+                colset = color
+            polyc.set_facecolors(colset)
+
+        self.add_collection(polyc)
+        self.auto_scale_xyz(tri.x, tri.y, z, had_data)
+
+        return polyc
+
+    def _3d_extend_contour(self, cset, stride=5):
+        '''
+        Extend a contour in 3D by creating
+        '''
+
+        levels = cset.levels
+        colls = cset.collections
+        dz = (levels[1] - levels[0]) / 2
+
+        for z, linec in zip(levels, colls):
+            paths = linec.get_paths()
+            if not paths:
+                continue
+            topverts = art3d._paths_to_3d_segments(paths, z - dz)
+            botverts = art3d._paths_to_3d_segments(paths, z + dz)
+
+            color = linec.get_color()[0]
+
+            polyverts = []
+            normals = []
+            nsteps = round(len(topverts[0]) / stride)
+            if nsteps <= 1:
+                if len(topverts[0]) > 1:
+                    nsteps = 2
+                else:
+                    continue
+
+            stepsize = (len(topverts[0]) - 1) / (nsteps - 1)
+            for i in range(int(round(nsteps)) - 1):
+                i1 = int(round(i * stepsize))
+                i2 = int(round((i + 1) * stepsize))
+                polyverts.append([topverts[0][i1],
+                                  topverts[0][i2],
+                                  botverts[0][i2],
+                                  botverts[0][i1]])
+
+            # all polygons have 4 vertices, so vectorize
+            polyverts = np.array(polyverts)
+            normals = self._generate_normals(polyverts)
+
+            colors = self._shade_colors(color, normals)
+            colors2 = self._shade_colors(color, normals)
+            polycol = art3d.Poly3DCollection(polyverts,
+                                             facecolors=colors,
+                                             edgecolors=colors2)
+            polycol.set_sort_zpos(z)
+            self.add_collection3d(polycol)
+
+        for col in colls:
+            self.collections.remove(col)
+
+    def add_contour_set(
+            self, cset, extend3d=False, stride=5, zdir='z', offset=None):
+        zdir = '-' + zdir
+        if extend3d:
+            self._3d_extend_contour(cset, stride)
+        else:
+            for z, linec in zip(cset.levels, cset.collections):
+                if offset is not None:
+                    z = offset
+                art3d.line_collection_2d_to_3d(linec, z, zdir=zdir)
+
+    def add_contourf_set(self, cset, zdir='z', offset=None):
+        zdir = '-' + zdir
+        for z, linec in zip(cset.levels, cset.collections):
+            if offset is not None:
+                z = offset
+            art3d.poly_collection_2d_to_3d(linec, z, zdir=zdir)
+            linec.set_sort_zpos(z)
+
+    def contour(self, X, Y, Z, *args,
+                extend3d=False, stride=5, zdir='z', offset=None, **kwargs):
+        """
+        Create a 3D contour plot.
+
+        Parameters
+        ----------
+        X, Y, Z : array-likes
+            Input data.
+        extend3d : bool
+            Whether to extend contour in 3D; defaults to False.
+        stride : int
+            Step size for extending contour.
+        zdir : {'x', 'y', 'z'}
+            The direction to use; defaults to 'z'.
+        offset : scalar
+            If specified, plot a projection of the contour lines at this
+            position in a plane normal to zdir
+        *args, **kwargs
+            Other arguments are forwarded to `matplotlib.axes.Axes.contour`.
+
+        Returns
+        -------
+        matplotlib.contour.QuadContourSet
+        """
+        had_data = self.has_data()
+
+        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)
+        cset = super().contour(jX, jY, jZ, *args, **kwargs)
+        self.add_contour_set(cset, extend3d, stride, zdir, offset)
+
+        self.auto_scale_xyz(X, Y, Z, had_data)
+        return cset
+
+    contour3D = contour
+
+    def tricontour(self, *args,
+                   extend3d=False, stride=5, zdir='z', offset=None, **kwargs):
+        """
+        Create a 3D contour plot.
+
+        .. versionchanged:: 1.3.0
+            Added support for custom triangulations
+
+        .. note::
+            This method currently produces incorrect output due to a
+            longstanding bug in 3D PolyCollection rendering.
+
+        Parameters
+        ----------
+        X, Y, Z : array-likes
+            Input data.
+        extend3d : bool
+            Whether to extend contour in 3D; defaults to False.
+        stride : int
+            Step size for extending contour.
+        zdir : {'x', 'y', 'z'}
+            The direction to use; defaults to 'z'.
+        offset : scalar
+            If specified, plot a projection of the contour lines at this
+            position in a plane normal to zdir
+        *args, **kwargs
+            Other arguments are forwarded to `matplotlib.axes.Axes.tricontour`.
+
+        Returns
+        -------
+        matplotlib.tri.tricontour.TriContourSet
+        """
+        had_data = self.has_data()
+
+        tri, args, kwargs = Triangulation.get_from_args_and_kwargs(
+                *args, **kwargs)
+        X = tri.x
+        Y = tri.y
+        if 'Z' in kwargs:
+            Z = kwargs.pop('Z')
+        else:
+            # We do this so Z doesn't get passed as an arg to Axes.tricontour
+            Z, *args = args
+
+        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)
+        tri = Triangulation(jX, jY, tri.triangles, tri.mask)
+
+        cset = super().tricontour(tri, jZ, *args, **kwargs)
+        self.add_contour_set(cset, extend3d, stride, zdir, offset)
+
+        self.auto_scale_xyz(X, Y, Z, had_data)
+        return cset
+
+    def contourf(self, X, Y, Z, *args, zdir='z', offset=None, **kwargs):
+        """
+        Create a 3D filled contour plot.
+
+        Parameters
+        ----------
+        X, Y, Z : array-likes
+            Input data.
+        zdir : {'x', 'y', 'z'}
+            The direction to use; defaults to 'z'.
+        offset : scalar
+            If specified, plot a projection of the contour lines at this
+            position in a plane normal to zdir
+        *args, **kwargs
+            Other arguments are forwarded to `matplotlib.axes.Axes.contourf`.
+
+        Returns
+        -------
+        matplotlib.contour.QuadContourSet
+
+        Notes
+        -----
+        .. versionadded:: 1.1.0
+            The *zdir* and *offset* parameters.
+        """
+        had_data = self.has_data()
+
+        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)
+        cset = super().contourf(jX, jY, jZ, *args, **kwargs)
+        self.add_contourf_set(cset, zdir, offset)
+
+        self.auto_scale_xyz(X, Y, Z, had_data)
+        return cset
+
+    contourf3D = contourf
+
+    def tricontourf(self, *args, zdir='z', offset=None, **kwargs):
+        """
+        Create a 3D filled contour plot.
+
+        .. note::
+            This method currently produces incorrect output due to a
+            longstanding bug in 3D PolyCollection rendering.
+
+        Parameters
+        ----------
+        X, Y, Z : array-likes
+            Input data.
+        zdir : {'x', 'y', 'z'}
+            The direction to use; defaults to 'z'.
+        offset : scalar
+            If specified, plot a projection of the contour lines at this
+            position in a plane normal to zdir
+        *args, **kwargs
+            Other arguments are forwarded to
+            `matplotlib.axes.Axes.tricontourf`.
+
+        Returns
+        -------
+        matplotlib.tri.tricontour.TriContourSet
+
+        Notes
+        -----
+        .. versionadded:: 1.1.0
+            The *zdir* and *offset* parameters.
+        .. versionchanged:: 1.3.0
+            Added support for custom triangulations
+        """
+        had_data = self.has_data()
+
+        tri, args, kwargs = Triangulation.get_from_args_and_kwargs(
+                *args, **kwargs)
+        X = tri.x
+        Y = tri.y
+        if 'Z' in kwargs:
+            Z = kwargs.pop('Z')
+        else:
+            # We do this so Z doesn't get passed as an arg to Axes.tricontourf
+            Z, *args = args
+
+        jX, jY, jZ = art3d.rotate_axes(X, Y, Z, zdir)
+        tri = Triangulation(jX, jY, tri.triangles, tri.mask)
+
+        cset = super().tricontourf(tri, jZ, *args, **kwargs)
+        self.add_contourf_set(cset, zdir, offset)
+
+        self.auto_scale_xyz(X, Y, Z, had_data)
+        return cset
+
+    def add_collection3d(self, col, zs=0, zdir='z'):
+        '''
+        Add a 3D collection object to the plot.
+
+        2D collection types are converted to a 3D version by
+        modifying the object and adding z coordinate information.
+
+        Supported are:
+            - PolyCollection
+            - LineCollection
+            - PatchCollection
+        '''
+        zvals = np.atleast_1d(zs)
+        zsortval = (np.min(zvals) if zvals.size
+                    else 0)  # FIXME: arbitrary default
+
+        # FIXME: use issubclass() (although, then a 3D collection
+        #       object would also pass.)  Maybe have a collection3d
+        #       abstract class to test for and exclude?
+        if type(col) is mcoll.PolyCollection:
+            art3d.poly_collection_2d_to_3d(col, zs=zs, zdir=zdir)
+            col.set_sort_zpos(zsortval)
+        elif type(col) is mcoll.LineCollection:
+            art3d.line_collection_2d_to_3d(col, zs=zs, zdir=zdir)
+            col.set_sort_zpos(zsortval)
+        elif type(col) is mcoll.PatchCollection:
+            art3d.patch_collection_2d_to_3d(col, zs=zs, zdir=zdir)
+            col.set_sort_zpos(zsortval)
+
+        super().add_collection(col)
+
+    def scatter(self, xs, ys, zs=0, zdir='z', s=20, c=None, depthshade=True,
+                *args, **kwargs):
+        """
+        Create a scatter plot.
+
+        Parameters
+        ----------
+        xs, ys : array-like
+             The data positions.
+        zs : float or array-like, optional, default: 0
+            The z-positions. Either an array of the same length as *xs* and
+            *ys* or a single value to place all points in the same plane.
+        zdir : {'x', 'y', 'z', '-x', '-y', '-z'}, optional, default: 'z'
+            The axis direction for the *zs*. This is useful when plotting 2D
+            data on a 3D Axes. The data must be passed as *xs*, *ys*. Setting
+            *zdir* to 'y' then plots the data to the x-z-plane.
+
+            See also :doc:`/gallery/mplot3d/2dcollections3d`.
+
+        s : scalar or array-like, optional, default: 20
+            The marker size in points**2. Either an array of the same length
+            as *xs* and *ys* or a single value to make all markers the same
+            size.
+        c : color, sequence, or sequence of colors, optional
+            The marker color. Possible values:
+
+            - A single color format string.
+            - A sequence of colors of length n.
+            - A sequence of n numbers to be mapped to colors using *cmap* and
+              *norm*.
+            - A 2-D array in which the rows are RGB or RGBA.
+
+            For more details see the *c* argument of `~.axes.Axes.scatter`.
+        depthshade : bool, optional, default: True
+            Whether to shade the scatter markers to give the appearance of
+            depth. Each call to ``scatter()`` will perform its depthshading
+            independently.
+        **kwargs
+            All other arguments are passed on to `~.axes.Axes.scatter`.
+
+        Returns
+        -------
+        paths : `~matplotlib.collections.PathCollection`
+        """
+
+        had_data = self.has_data()
+
+        xs, ys, zs = np.broadcast_arrays(
+            *[np.ravel(np.ma.filled(t, np.nan)) for t in [xs, ys, zs]])
+        s = np.ma.ravel(s)  # This doesn't have to match x, y in size.
+
+        xs, ys, zs, s, c = cbook.delete_masked_points(xs, ys, zs, s, c)
+
+        patches = super().scatter(xs, ys, s=s, c=c, *args, **kwargs)
+        art3d.patch_collection_2d_to_3d(patches, zs=zs, zdir=zdir,
+                                        depthshade=depthshade)
+
+        if self._zmargin < 0.05 and xs.size > 0:
+            self.set_zmargin(0.05)
+
+        self.auto_scale_xyz(xs, ys, zs, had_data)
+
+        return patches
+
+    scatter3D = scatter
+
+    def bar(self, left, height, zs=0, zdir='z', *args, **kwargs):
+        """
+        Add 2D bar(s).
+
+        Parameters
+        ----------
+        left : 1D array-like
+            The x coordinates of the left sides of the bars.
+        height : 1D array-like
+            The height of the bars.
+        zs : scalar or 1D array-like
+            Z coordinate of bars; if a single value is specified, it will be
+            used for all bars.
+        zdir : {'x', 'y', 'z'}
+            When plotting 2D data, the direction to use as z ('x', 'y' or 'z');
+            defaults to 'z'.
+        **kwargs
+            Other arguments are forwarded to `matplotlib.axes.Axes.bar`.
+
+        Returns
+        -------
+        mpl_toolkits.mplot3d.art3d.Patch3DCollection
+        """
+        had_data = self.has_data()
+
+        patches = super().bar(left, height, *args, **kwargs)
+
+        zs = np.broadcast_to(zs, len(left))
+
+        verts = []
+        verts_zs = []
+        for p, z in zip(patches, zs):
+            vs = art3d._get_patch_verts(p)
+            verts += vs.tolist()
+            verts_zs += [z] * len(vs)
+            art3d.patch_2d_to_3d(p, z, zdir)
+            if 'alpha' in kwargs:
+                p.set_alpha(kwargs['alpha'])
+
+        if len(verts) > 0:
+            # the following has to be skipped if verts is empty
+            # NOTE: Bugs could still occur if len(verts) > 0,
+            #       but the "2nd dimension" is empty.
+            xs, ys = zip(*verts)
+        else:
+            xs, ys = [], []
+
+        xs, ys, verts_zs = art3d.juggle_axes(xs, ys, verts_zs, zdir)
+        self.auto_scale_xyz(xs, ys, verts_zs, had_data)
+
+        return patches
+
+    def bar3d(self, x, y, z, dx, dy, dz, color=None,
+              zsort='average', shade=True, lightsource=None, *args, **kwargs):
+        """Generate a 3D barplot.
+
+        This method creates three dimensional barplot where the width,
+        depth, height, and color of the bars can all be uniquely set.
+
+        Parameters
+        ----------
+        x, y, z : array-like
+            The coordinates of the anchor point of the bars.
+
+        dx, dy, dz : scalar or array-like
+            The width, depth, and height of the bars, respectively.
+
+        color : sequence of colors, optional
+            The color of the bars can be specified globally or
+            individually. This parameter can be:
+
+            - A single color, to color all bars the same color.
+            - An array of colors of length N bars, to color each bar
+              independently.
+            - An array of colors of length 6, to color the faces of the
+              bars similarly.
+            - An array of colors of length 6 * N bars, to color each face
+              independently.
+
+            When coloring the faces of the boxes specifically, this is
+            the order of the coloring:
+
+              1. -Z (bottom of box)
+              2. +Z (top of box)
+              3. -Y
+              4. +Y
+              5. -X
+              6. +X
+
+        zsort : str, optional
+            The z-axis sorting scheme passed onto `~.art3d.Poly3DCollection`
+
+        shade : bool, optional (default = True)
+            When true, this shades the dark sides of the bars (relative
+            to the plot's source of light).
+
+        lightsource : `~matplotlib.colors.LightSource`
+            The lightsource to use when *shade* is True.
+
+        **kwargs
+            Any additional keyword arguments are passed onto
+            `~.art3d.Poly3DCollection`.
+
+        Returns
+        -------
+        collection : `~.art3d.Poly3DCollection`
+            A collection of three dimensional polygons representing
+            the bars.
+        """
+
+        had_data = self.has_data()
+
+        x, y, z, dx, dy, dz = np.broadcast_arrays(
+            np.atleast_1d(x), y, z, dx, dy, dz)
+        minx = np.min(x)
+        maxx = np.max(x + dx)
+        miny = np.min(y)
+        maxy = np.max(y + dy)
+        minz = np.min(z)
+        maxz = np.max(z + dz)
+
+        # shape (6, 4, 3)
+        # All faces are oriented facing outwards - when viewed from the
+        # outside, their vertices are in a counterclockwise ordering.
+        cuboid = np.array([
+            # -z
+            (
+                (0, 0, 0),
+                (0, 1, 0),
+                (1, 1, 0),
+                (1, 0, 0),
+            ),
+            # +z
+            (
+                (0, 0, 1),
+                (1, 0, 1),
+                (1, 1, 1),
+                (0, 1, 1),
+            ),
+            # -y
+            (
+                (0, 0, 0),
+                (1, 0, 0),
+                (1, 0, 1),
+                (0, 0, 1),
+            ),
+            # +y
+            (
+                (0, 1, 0),
+                (0, 1, 1),
+                (1, 1, 1),
+                (1, 1, 0),
+            ),
+            # -x
+            (
+                (0, 0, 0),
+                (0, 0, 1),
+                (0, 1, 1),
+                (0, 1, 0),
+            ),
+            # +x
+            (
+                (1, 0, 0),
+                (1, 1, 0),
+                (1, 1, 1),
+                (1, 0, 1),
+            ),
+        ])
+
+        # indexed by [bar, face, vertex, coord]
+        polys = np.empty(x.shape + cuboid.shape)
+
+        # handle each coordinate separately
+        for i, p, dp in [(0, x, dx), (1, y, dy), (2, z, dz)]:
+            p = p[..., np.newaxis, np.newaxis]
+            dp = dp[..., np.newaxis, np.newaxis]
+            polys[..., i] = p + dp * cuboid[..., i]
+
+        # collapse the first two axes
+        polys = polys.reshape((-1,) + polys.shape[2:])
+
+        facecolors = []
+        if color is None:
+            color = [self._get_patches_for_fill.get_next_color()]
+
+        if len(color) == len(x):
+            # bar colors specified, need to expand to number of faces
+            for c in color:
+                facecolors.extend([c] * 6)
+        else:
+            # a single color specified, or face colors specified explicitly
+            facecolors = list(mcolors.to_rgba_array(color))
+            if len(facecolors) < len(x):
+                facecolors *= (6 * len(x))
+
+        if shade:
+            normals = self._generate_normals(polys)
+            sfacecolors = self._shade_colors(facecolors, normals, lightsource)
+        else:
+            sfacecolors = facecolors
+
+        col = art3d.Poly3DCollection(polys,
+                                     zsort=zsort,
+                                     facecolor=sfacecolors,
+                                     *args, **kwargs)
+        self.add_collection(col)
+
+        self.auto_scale_xyz((minx, maxx), (miny, maxy), (minz, maxz), had_data)
+
+        return col
+
+    def set_title(self, label, fontdict=None, loc='center', **kwargs):
+        # docstring inherited
+        ret = super().set_title(label, fontdict=fontdict, loc=loc, **kwargs)
+        (x, y) = self.title.get_position()
+        self.title.set_y(0.92 * y)
+        return ret
+
+    def quiver(self, *args,
+               length=1, arrow_length_ratio=.3, pivot='tail', normalize=False,
+               **kwargs):
+        """
+        ax.quiver(X, Y, Z, U, V, W, /, length=1, arrow_length_ratio=.3, \
+pivot='tail', normalize=False, **kwargs)
+
+        Plot a 3D field of arrows.
+
+        The arguments could be array-like or scalars, so long as they
+        they can be broadcast together. The arguments can also be
+        masked arrays. If an element in any of argument is masked, then
+        that corresponding quiver element will not be plotted.
+
+        Parameters
+        ----------
+        X, Y, Z : array-like
+            The x, y and z coordinates of the arrow locations (default is
+            tail of arrow; see *pivot* kwarg)
+
+        U, V, W : array-like
+            The x, y and z components of the arrow vectors
+
+        length : float
+            The length of each quiver, default to 1.0, the unit is
+            the same with the axes
+
+        arrow_length_ratio : float
+            The ratio of the arrow head with respect to the quiver,
+            default to 0.3
+
+        pivot : {'tail', 'middle', 'tip'}
+            The part of the arrow that is at the grid point; the arrow
+            rotates about this point, hence the name *pivot*.
+            Default is 'tail'
+
+        normalize : bool
+            When True, all of the arrows will be the same length. This
+            defaults to False, where the arrows will be different lengths
+            depending on the values of u, v, w.
+
+        **kwargs
+            Any additional keyword arguments are delegated to
+            :class:`~matplotlib.collections.LineCollection`
+        """
+        def calc_arrow(uvw, angle=15):
+            """
+            To calculate the arrow head. uvw should be a unit vector.
+            We normalize it here:
+            """
+            # get unit direction vector perpendicular to (u, v, w)
+            norm = np.linalg.norm(uvw[:2])
+            if norm > 0:
+                x = uvw[1] / norm
+                y = -uvw[0] / norm
+            else:
+                x, y = 0, 1
+
+            # compute the two arrowhead direction unit vectors
+            ra = math.radians(angle)
+            c = math.cos(ra)
+            s = math.sin(ra)
+
+            # construct the rotation matrices
+            Rpos = np.array([[c+(x**2)*(1-c), x*y*(1-c), y*s],
+                             [y*x*(1-c), c+(y**2)*(1-c), -x*s],
+                             [-y*s, x*s, c]])
+            # opposite rotation negates all the sin terms
+            Rneg = Rpos.copy()
+            Rneg[[0, 1, 2, 2], [2, 2, 0, 1]] = \
+                -Rneg[[0, 1, 2, 2], [2, 2, 0, 1]]
+
+            # multiply them to get the rotated vector
+            return Rpos.dot(uvw), Rneg.dot(uvw)
+
+        had_data = self.has_data()
+
+        # handle args
+        argi = 6
+        if len(args) < argi:
+            raise ValueError('Wrong number of arguments. Expected %d got %d' %
+                             (argi, len(args)))
+
+        # first 6 arguments are X, Y, Z, U, V, W
+        input_args = args[:argi]
+
+        # extract the masks, if any
+        masks = [k.mask for k in input_args
+                 if isinstance(k, np.ma.MaskedArray)]
+        # broadcast to match the shape
+        bcast = np.broadcast_arrays(*input_args, *masks)
+        input_args = bcast[:argi]
+        masks = bcast[argi:]
+        if masks:
+            # combine the masks into one
+            mask = reduce(np.logical_or, masks)
+            # put mask on and compress
+            input_args = [np.ma.array(k, mask=mask).compressed()
+                          for k in input_args]
+        else:
+            input_args = [np.ravel(k) for k in input_args]
+
+        if any(len(v) == 0 for v in input_args):
+            # No quivers, so just make an empty collection and return early
+            linec = art3d.Line3DCollection([], *args[argi:], **kwargs)
+            self.add_collection(linec)
+            return linec
+
+        shaft_dt = np.array([0., length], dtype=float)
+        arrow_dt = shaft_dt * arrow_length_ratio
+
+        cbook._check_in_list(['tail', 'middle', 'tip'], pivot=pivot)
+        if pivot == 'tail':
+            shaft_dt -= length
+        elif pivot == 'middle':
+            shaft_dt -= length / 2
+
+        XYZ = np.column_stack(input_args[:3])
+        UVW = np.column_stack(input_args[3:argi]).astype(float)
+
+        # Normalize rows of UVW
+        norm = np.linalg.norm(UVW, axis=1)
+
+        # If any row of UVW is all zeros, don't make a quiver for it
+        mask = norm > 0
+        XYZ = XYZ[mask]
+        if normalize:
+            UVW = UVW[mask] / norm[mask].reshape((-1, 1))
+        else:
+            UVW = UVW[mask]
+
+        if len(XYZ) > 0:
+            # compute the shaft lines all at once with an outer product
+            shafts = (XYZ - np.multiply.outer(shaft_dt, UVW)).swapaxes(0, 1)
+            # compute head direction vectors, n heads x 2 sides x 3 dimensions
+            head_dirs = np.array([calc_arrow(d) for d in UVW])
+            # compute all head lines at once, starting from the shaft ends
+            heads = shafts[:, :1] - np.multiply.outer(arrow_dt, head_dirs)
+            # stack left and right head lines together
+            heads.shape = (len(arrow_dt), -1, 3)
+            # transpose to get a list of lines
+            heads = heads.swapaxes(0, 1)
+
+            lines = [*shafts, *heads]
+        else:
+            lines = []
+
+        linec = art3d.Line3DCollection(lines, *args[argi:], **kwargs)
+        self.add_collection(linec)
+
+        self.auto_scale_xyz(XYZ[:, 0], XYZ[:, 1], XYZ[:, 2], had_data)
+
+        return linec
+
+    quiver3D = quiver
+
+    def voxels(self, *args, facecolors=None, edgecolors=None, shade=True,
+               lightsource=None, **kwargs):
+        """
+        ax.voxels([x, y, z,] /, filled, facecolors=None, edgecolors=None, \
+**kwargs)
+
+        Plot a set of filled voxels
+
+        All voxels are plotted as 1x1x1 cubes on the axis, with
+        ``filled[0, 0, 0]`` placed with its lower corner at the origin.
+        Occluded faces are not plotted.
+
+        .. versionadded:: 2.1
+
+        Parameters
+        ----------
+        filled : 3D np.array of bool
+            A 3d array of values, with truthy values indicating which voxels
+            to fill
+
+        x, y, z : 3D np.array, optional
+            The coordinates of the corners of the voxels. This should broadcast
+            to a shape one larger in every dimension than the shape of
+            `filled`.  These can be used to plot non-cubic voxels.
+
+            If not specified, defaults to increasing integers along each axis,
+            like those returned by :func:`~numpy.indices`.
+            As indicated by the ``/`` in the function signature, these
+            arguments can only be passed positionally.
+
+        facecolors, edgecolors : array-like, optional
+            The color to draw the faces and edges of the voxels. Can only be
+            passed as keyword arguments.
+            This parameter can be:
+
+              - A single color value, to color all voxels the same color. This
+                can be either a string, or a 1D rgb/rgba array
+              - ``None``, the default, to use a single color for the faces, and
+                the style default for the edges.
+              - A 3D ndarray of color names, with each item the color for the
+                corresponding voxel. The size must match the voxels.
+              - A 4D ndarray of rgb/rgba data, with the components along the
+                last axis.
+
+        shade : bool
+            Whether to shade the facecolors. Defaults to True. Shading is
+            always disabled when *cmap* is specified.
+
+            .. versionadded:: 3.1
+
+        lightsource : `~matplotlib.colors.LightSource`
+            The lightsource to use when *shade* is True.
+
+            .. versionadded:: 3.1
+
+        **kwargs
+            Additional keyword arguments to pass onto
+            :func:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`
+
+        Returns
+        -------
+        faces : dict
+            A dictionary indexed by coordinate, where ``faces[i, j, k]`` is a
+            `Poly3DCollection` of the faces drawn for the voxel
+            ``filled[i, j, k]``. If no faces were drawn for a given voxel,
+            either because it was not asked to be drawn, or it is fully
+            occluded, then ``(i, j, k) not in faces``.
+
+        Examples
+        --------
+        .. plot:: gallery/mplot3d/voxels.py
+        .. plot:: gallery/mplot3d/voxels_rgb.py
+        .. plot:: gallery/mplot3d/voxels_torus.py
+        .. plot:: gallery/mplot3d/voxels_numpy_logo.py
+        """
+
+        # work out which signature we should be using, and use it to parse
+        # the arguments. Name must be voxels for the correct error message
+        if len(args) >= 3:
+            # underscores indicate position only
+            def voxels(__x, __y, __z, filled, **kwargs):
+                return (__x, __y, __z), filled, kwargs
+        else:
+            def voxels(filled, **kwargs):
+                return None, filled, kwargs
+
+        xyz, filled, kwargs = voxels(*args, **kwargs)
+
+        # check dimensions
+        if filled.ndim != 3:
+            raise ValueError("Argument filled must be 3-dimensional")
+        size = np.array(filled.shape, dtype=np.intp)
+
+        # check xyz coordinates, which are one larger than the filled shape
+        coord_shape = tuple(size + 1)
+        if xyz is None:
+            x, y, z = np.indices(coord_shape)
+        else:
+            x, y, z = (np.broadcast_to(c, coord_shape) for c in xyz)
+
+        def _broadcast_color_arg(color, name):
+            if np.ndim(color) in (0, 1):
+                # single color, like "red" or [1, 0, 0]
+                return np.broadcast_to(color, filled.shape + np.shape(color))
+            elif np.ndim(color) in (3, 4):
+                # 3D array of strings, or 4D array with last axis rgb
+                if np.shape(color)[:3] != filled.shape:
+                    raise ValueError(
+                        "When multidimensional, {} must match the shape of "
+                        "filled".format(name))
+                return color
+            else:
+                raise ValueError("Invalid {} argument".format(name))
+
+        # broadcast and default on facecolors
+        if facecolors is None:
+            facecolors = self._get_patches_for_fill.get_next_color()
+        facecolors = _broadcast_color_arg(facecolors, 'facecolors')
+
+        # broadcast but no default on edgecolors
+        edgecolors = _broadcast_color_arg(edgecolors, 'edgecolors')
+
+        # scale to the full array, even if the data is only in the center
+        self.auto_scale_xyz(x, y, z)
+
+        # points lying on corners of a square
+        square = np.array([
+            [0, 0, 0],
+            [1, 0, 0],
+            [1, 1, 0],
+            [0, 1, 0],
+        ], dtype=np.intp)
+
+        voxel_faces = defaultdict(list)
+
+        def permutation_matrices(n):
+            """Generator of cyclic permutation matrices."""
+            mat = np.eye(n, dtype=np.intp)
+            for i in range(n):
+                yield mat
+                mat = np.roll(mat, 1, axis=0)
+
+        # iterate over each of the YZ, ZX, and XY orientations, finding faces
+        # to render
+        for permute in permutation_matrices(3):
+            # find the set of ranges to iterate over
+            pc, qc, rc = permute.T.dot(size)
+            pinds = np.arange(pc)
+            qinds = np.arange(qc)
+            rinds = np.arange(rc)
+
+            square_rot_pos = square.dot(permute.T)
+            square_rot_neg = square_rot_pos[::-1]
+
+            # iterate within the current plane
+            for p in pinds:
+                for q in qinds:
+                    # iterate perpendicularly to the current plane, handling
+                    # boundaries. We only draw faces between a voxel and an
+                    # empty space, to avoid drawing internal faces.
+
+                    # draw lower faces
+                    p0 = permute.dot([p, q, 0])
+                    i0 = tuple(p0)
+                    if filled[i0]:
+                        voxel_faces[i0].append(p0 + square_rot_neg)
+
+                    # draw middle faces
+                    for r1, r2 in zip(rinds[:-1], rinds[1:]):
+                        p1 = permute.dot([p, q, r1])
+                        p2 = permute.dot([p, q, r2])
+
+                        i1 = tuple(p1)
+                        i2 = tuple(p2)
+
+                        if filled[i1] and not filled[i2]:
+                            voxel_faces[i1].append(p2 + square_rot_pos)
+                        elif not filled[i1] and filled[i2]:
+                            voxel_faces[i2].append(p2 + square_rot_neg)
+
+                    # draw upper faces
+                    pk = permute.dot([p, q, rc-1])
+                    pk2 = permute.dot([p, q, rc])
+                    ik = tuple(pk)
+                    if filled[ik]:
+                        voxel_faces[ik].append(pk2 + square_rot_pos)
+
+        # iterate over the faces, and generate a Poly3DCollection for each
+        # voxel
+        polygons = {}
+        for coord, faces_inds in voxel_faces.items():
+            # convert indices into 3D positions
+            if xyz is None:
+                faces = faces_inds
+            else:
+                faces = []
+                for face_inds in faces_inds:
+                    ind = face_inds[:, 0], face_inds[:, 1], face_inds[:, 2]
+                    face = np.empty(face_inds.shape)
+                    face[:, 0] = x[ind]
+                    face[:, 1] = y[ind]
+                    face[:, 2] = z[ind]
+                    faces.append(face)
+
+            # shade the faces
+            facecolor = facecolors[coord]
+            edgecolor = edgecolors[coord]
+            if shade:
+                normals = self._generate_normals(faces)
+                facecolor = self._shade_colors(facecolor, normals, lightsource)
+                if edgecolor is not None:
+                    edgecolor = self._shade_colors(
+                        edgecolor, normals, lightsource
+                    )
+
+            poly = art3d.Poly3DCollection(
+                faces, facecolors=facecolor, edgecolors=edgecolor, **kwargs)
+            self.add_collection3d(poly)
+            polygons[coord] = poly
+
+        return polygons
+
+
+def get_test_data(delta=0.05):
+    '''
+    Return a tuple X, Y, Z with a test data set.
+    '''
+    x = y = np.arange(-3.0, 3.0, delta)
+    X, Y = np.meshgrid(x, y)
+
+    Z1 = np.exp(-(X**2 + Y**2) / 2) / (2 * np.pi)
+    Z2 = (np.exp(-(((X - 1) / 1.5)**2 + ((Y - 1) / 0.5)**2) / 2) /
+          (2 * np.pi * 0.5 * 1.5))
+    Z = Z2 - Z1
+
+    X = X * 10
+    Y = Y * 10
+    Z = Z * 500
+    return X, Y, Z
Index: modules/results/avarage_ratio_of_grow_rates.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[1.4098104727224847, 1.065076065450522]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- modules/results/avarage_ratio_of_grow_rates.txt	(revision 3d0e905d23cd6e8b56857a4b51051e1b78699184)
+++ modules/results/avarage_ratio_of_grow_rates.txt	(date 1589417987120)
@@ -1,1 +1,1 @@
-[1.4098104727224847, 1.065076065450522]
\ No newline at end of file
+[1.4077330682929141, 1.0649782031136343]
\ No newline at end of file
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_grid.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_grid.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_grid.py	(date 1589417755515)
@@ -0,0 +1,2 @@
+from mpl_toolkits.axisartist.axes_grid import (
+    AxesGrid, CbarAxes, Grid, ImageGrid)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/__init__.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/__init__.py	(date 1589417755512)
@@ -0,0 +1,11 @@
+from . import axes_size as Size
+from .axes_divider import Divider, SubplotDivider, make_axes_locatable
+from .axes_grid import Grid, ImageGrid, AxesGrid
+#from axes_divider import make_axes_locatable
+from matplotlib.cbook import warn_deprecated
+warn_deprecated(since='2.1',
+                name='mpl_toolkits.axes_grid',
+                alternative='mpl_toolkits.axes_grid1 and'
+                            ' mpl_toolkits.axisartist, which provide'
+                            ' the same functionality',
+                obj_type='module')
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axis_artist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axis_artist.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axis_artist.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.axis_artist import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_divider.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_divider.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_divider.py	(date 1589417755515)
@@ -0,0 +1,3 @@
+from mpl_toolkits.axes_grid1.axes_divider import (
+    AxesDivider, AxesLocator, Divider, SubplotDivider, make_axes_locatable)
+from mpl_toolkits.axisartist.axislines import Axes
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/anchored_artists.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/anchored_artists.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/anchored_artists.py	(date 1589417755515)
@@ -0,0 +1,6 @@
+from matplotlib.offsetbox import AnchoredOffsetbox, AuxTransformBox, VPacker,\
+     TextArea, AnchoredText, DrawingArea, AnnotationBbox
+
+from mpl_toolkits.axes_grid1.anchored_artists import \
+         AnchoredDrawingArea, AnchoredAuxTransformBox, \
+         AnchoredEllipse, AnchoredSizeBar
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axisline_style.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axisline_style.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axisline_style.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.axisline_style import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/inset_locator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/inset_locator.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/inset_locator.py	(date 1589417755515)
@@ -0,0 +1,4 @@
+from mpl_toolkits.axes_grid1.inset_locator import InsetPosition, \
+     AnchoredSizeLocator, \
+     AnchoredZoomLocator, BboxPatch, BboxConnector, BboxConnectorPatch, \
+     inset_axes, zoomed_inset_axes, mark_inset
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/parasite_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/parasite_axes.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/parasite_axes.py	(date 1589417755512)
@@ -0,0 +1,14 @@
+from mpl_toolkits.axes_grid1.parasite_axes import (
+    host_axes_class_factory, parasite_axes_class_factory,
+    parasite_axes_auxtrans_class_factory, subplot_class_factory)
+from mpl_toolkits.axisartist.axislines import Axes
+
+
+ParasiteAxes = parasite_axes_class_factory(Axes)
+
+ParasiteAxesAuxTrans = \
+    parasite_axes_auxtrans_class_factory(axes_class=ParasiteAxes)
+
+HostAxes = host_axes_class_factory(axes_class=Axes)
+
+SubplotHost = subplot_class_factory(HostAxes)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/angle_helper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/angle_helper.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/angle_helper.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.angle_helper import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_finder.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_finder.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_finder.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.grid_finder import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_helper_curvelinear.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_helper_curvelinear.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/grid_helper_curvelinear.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.grid_helper_curvelinear import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axislines.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axislines.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axislines.py	(date 1589417755515)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.axislines import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_size.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_size.py	(date 1589417755515)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_size.py	(date 1589417755515)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axes_grid1.axes_size import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_rgb.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_rgb.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/axes_rgb.py	(date 1589417755512)
@@ -0,0 +1,7 @@
+from mpl_toolkits.axes_grid1.axes_rgb import (
+    make_rgb_axes, imshow_rgb, RGBAxesBase)
+from mpl_toolkits.axisartist.axislines import Axes
+
+
+class RGBAxes(RGBAxesBase):
+    _defaultAxesClass = Axes
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/floating_axes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/floating_axes.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/floating_axes.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.floating_axes import *
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/colorbar.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/colorbar.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/colorbar.py	(date 1589417755512)
@@ -0,0 +1,5 @@
+from mpl_toolkits.axes_grid1.colorbar import (
+    make_axes_kw_doc, colormap_kw_doc, colorbar_doc,
+    CbarAxesLocator, ColorbarBase, Colorbar,
+    make_axes, colorbar
+)
Index: venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/clip_path.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/clip_path.py	(date 1589417755512)
+++ venv/lib/python3.8/site-packages/mpl_toolkits/axes_grid/clip_path.py	(date 1589417755512)
@@ -0,0 +1,1 @@
+from mpl_toolkits.axisartist.clip_path import *
